

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Mar 28 21:03:37 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F18344
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	swtext1,local,class=CONST,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	intentry,global,class=CODE,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2,group=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	dabs	1,0x320,16
   100                           	dabs	1,0x2A0,80
   101                           	dabs	1,0x250,32
   102                           	dabs	1,0x220,48
   103                           	dabs	1,0x1A0,80
   104                           	dabs	1,0x2170,0,__u16TransmitBuffer
   105                           	dabs	1,0x20F0,0,__u16ResponseBuffer
   106                           	dabs	1,0x7E,2
   107  0000                     
   108                           ; Version 1.41
   109                           ; Generated 25/01/2017 GMT
   110                           ; 
   111                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   112                           ; All rights reserved.
   113                           ; 
   114                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   115                           ; 
   116                           ; Redistribution and use in source and binary forms, with or without modification, are
   117                           ; permitted provided that the following conditions are met:
   118                           ; 
   119                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   120                           ;        conditions and the following disclaimer.
   121                           ; 
   122                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   123                           ;        of conditions and the following disclaimer in the documentation and/or other
   124                           ;        materials provided with the distribution.
   125                           ; 
   126                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   127                           ;        software without specific prior written permission.
   128                           ; 
   129                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   130                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   131                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   132                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   133                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   134                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   135                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   136                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   137                           ; 
   138                           ; 
   139                           ; Code-generator required, PIC16F18344 Definitions
   140                           ; 
   141                           ; SFR Addresses
   142  0000                     	;# 
   143  0001                     	;# 
   144  0002                     	;# 
   145  0003                     	;# 
   146  0004                     	;# 
   147  0005                     	;# 
   148  0006                     	;# 
   149  0007                     	;# 
   150  0008                     	;# 
   151  0009                     	;# 
   152  000A                     	;# 
   153  000B                     	;# 
   154  000C                     	;# 
   155  000D                     	;# 
   156  000E                     	;# 
   157  0010                     	;# 
   158  0011                     	;# 
   159  0012                     	;# 
   160  0013                     	;# 
   161  0014                     	;# 
   162  0015                     	;# 
   163  0015                     	;# 
   164  0016                     	;# 
   165  0016                     	;# 
   166  0017                     	;# 
   167  0018                     	;# 
   168  0019                     	;# 
   169  0019                     	;# 
   170  001A                     	;# 
   171  001B                     	;# 
   172  001C                     	;# 
   173  001D                     	;# 
   174  001E                     	;# 
   175  001F                     	;# 
   176  008C                     	;# 
   177  008D                     	;# 
   178  008E                     	;# 
   179  0090                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0097                     	;# 
   185  009B                     	;# 
   186  009B                     	;# 
   187  009C                     	;# 
   188  009D                     	;# 
   189  009E                     	;# 
   190  009F                     	;# 
   191  010C                     	;# 
   192  010D                     	;# 
   193  010E                     	;# 
   194  0111                     	;# 
   195  0112                     	;# 
   196  0113                     	;# 
   197  0114                     	;# 
   198  0115                     	;# 
   199  0116                     	;# 
   200  0117                     	;# 
   201  0118                     	;# 
   202  0119                     	;# 
   203  018C                     	;# 
   204  018D                     	;# 
   205  018E                     	;# 
   206  0197                     	;# 
   207  0199                     	;# 
   208  0199                     	;# 
   209  0199                     	;# 
   210  019A                     	;# 
   211  019A                     	;# 
   212  019A                     	;# 
   213  019B                     	;# 
   214  019B                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019C                     	;# 
   219  019C                     	;# 
   220  019C                     	;# 
   221  019D                     	;# 
   222  019D                     	;# 
   223  019D                     	;# 
   224  019E                     	;# 
   225  019E                     	;# 
   226  019E                     	;# 
   227  019F                     	;# 
   228  019F                     	;# 
   229  019F                     	;# 
   230  019F                     	;# 
   231  019F                     	;# 
   232  020C                     	;# 
   233  020D                     	;# 
   234  020E                     	;# 
   235  0211                     	;# 
   236  0211                     	;# 
   237  0212                     	;# 
   238  0212                     	;# 
   239  0213                     	;# 
   240  0213                     	;# 
   241  0214                     	;# 
   242  0214                     	;# 
   243  0215                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0216                     	;# 
   248  0216                     	;# 
   249  0217                     	;# 
   250  0217                     	;# 
   251  028C                     	;# 
   252  028D                     	;# 
   253  028E                     	;# 
   254  0291                     	;# 
   255  0291                     	;# 
   256  0292                     	;# 
   257  0293                     	;# 
   258  0294                     	;# 
   259  0295                     	;# 
   260  0295                     	;# 
   261  0296                     	;# 
   262  0297                     	;# 
   263  0298                     	;# 
   264  029F                     	;# 
   265  030C                     	;# 
   266  030D                     	;# 
   267  030E                     	;# 
   268  0311                     	;# 
   269  0311                     	;# 
   270  0312                     	;# 
   271  0313                     	;# 
   272  0314                     	;# 
   273  0315                     	;# 
   274  0315                     	;# 
   275  0316                     	;# 
   276  0317                     	;# 
   277  0318                     	;# 
   278  038C                     	;# 
   279  038D                     	;# 
   280  038E                     	;# 
   281  0391                     	;# 
   282  0392                     	;# 
   283  0393                     	;# 
   284  0394                     	;# 
   285  0395                     	;# 
   286  0396                     	;# 
   287  0397                     	;# 
   288  0398                     	;# 
   289  0399                     	;# 
   290  039A                     	;# 
   291  039C                     	;# 
   292  039D                     	;# 
   293  039E                     	;# 
   294  039F                     	;# 
   295  0411                     	;# 
   296  0411                     	;# 
   297  0412                     	;# 
   298  0413                     	;# 
   299  0414                     	;# 
   300  0415                     	;# 
   301  0416                     	;# 
   302  0417                     	;# 
   303  0418                     	;# 
   304  0418                     	;# 
   305  0419                     	;# 
   306  041A                     	;# 
   307  041B                     	;# 
   308  041C                     	;# 
   309  041D                     	;# 
   310  041E                     	;# 
   311  041F                     	;# 
   312  0498                     	;# 
   313  0498                     	;# 
   314  0499                     	;# 
   315  049A                     	;# 
   316  049B                     	;# 
   317  049B                     	;# 
   318  049C                     	;# 
   319  049D                     	;# 
   320  049E                     	;# 
   321  049F                     	;# 
   322  0617                     	;# 
   323  0618                     	;# 
   324  0619                     	;# 
   325  0619                     	;# 
   326  061A                     	;# 
   327  061B                     	;# 
   328  061C                     	;# 
   329  061C                     	;# 
   330  061F                     	;# 
   331  0691                     	;# 
   332  0692                     	;# 
   333  0693                     	;# 
   334  0694                     	;# 
   335  0695                     	;# 
   336  0696                     	;# 
   337  0697                     	;# 
   338  0698                     	;# 
   339  0699                     	;# 
   340  0711                     	;# 
   341  0712                     	;# 
   342  0713                     	;# 
   343  0714                     	;# 
   344  0715                     	;# 
   345  0716                     	;# 
   346  0717                     	;# 
   347  0718                     	;# 
   348  0719                     	;# 
   349  0891                     	;# 
   350  0891                     	;# 
   351  0891                     	;# 
   352  0891                     	;# 
   353  0891                     	;# 
   354  0891                     	;# 
   355  0892                     	;# 
   356  0892                     	;# 
   357  0892                     	;# 
   358  0893                     	;# 
   359  0893                     	;# 
   360  0893                     	;# 
   361  0893                     	;# 
   362  0893                     	;# 
   363  0893                     	;# 
   364  0894                     	;# 
   365  0894                     	;# 
   366  0894                     	;# 
   367  0895                     	;# 
   368  0895                     	;# 
   369  0895                     	;# 
   370  0896                     	;# 
   371  0896                     	;# 
   372  0896                     	;# 
   373  089B                     	;# 
   374  0911                     	;# 
   375  0912                     	;# 
   376  0913                     	;# 
   377  0914                     	;# 
   378  0915                     	;# 
   379  0916                     	;# 
   380  0918                     	;# 
   381  0919                     	;# 
   382  091A                     	;# 
   383  091B                     	;# 
   384  091C                     	;# 
   385  091D                     	;# 
   386  091E                     	;# 
   387  091F                     	;# 
   388  0E0F                     	;# 
   389  0E10                     	;# 
   390  0E11                     	;# 
   391  0E12                     	;# 
   392  0E13                     	;# 
   393  0E14                     	;# 
   394  0E15                     	;# 
   395  0E16                     	;# 
   396  0E17                     	;# 
   397  0E18                     	;# 
   398  0E19                     	;# 
   399  0E1A                     	;# 
   400  0E1B                     	;# 
   401  0E1C                     	;# 
   402  0E20                     	;# 
   403  0E21                     	;# 
   404  0E22                     	;# 
   405  0E24                     	;# 
   406  0E25                     	;# 
   407  0E28                     	;# 
   408  0E29                     	;# 
   409  0E2A                     	;# 
   410  0E2B                     	;# 
   411  0E2C                     	;# 
   412  0E2D                     	;# 
   413  0E2E                     	;# 
   414  0E2F                     	;# 
   415  0E90                     	;# 
   416  0E91                     	;# 
   417  0E92                     	;# 
   418  0E94                     	;# 
   419  0E95                     	;# 
   420  0E9C                     	;# 
   421  0E9D                     	;# 
   422  0E9E                     	;# 
   423  0E9F                     	;# 
   424  0EA0                     	;# 
   425  0EA1                     	;# 
   426  0EA2                     	;# 
   427  0EA3                     	;# 
   428  0EA4                     	;# 
   429  0EA5                     	;# 
   430  0EA6                     	;# 
   431  0EA7                     	;# 
   432  0F0F                     	;# 
   433  0F10                     	;# 
   434  0F11                     	;# 
   435  0F12                     	;# 
   436  0F13                     	;# 
   437  0F14                     	;# 
   438  0F15                     	;# 
   439  0F16                     	;# 
   440  0F17                     	;# 
   441  0F18                     	;# 
   442  0F19                     	;# 
   443  0F1A                     	;# 
   444  0F1B                     	;# 
   445  0F1C                     	;# 
   446  0F1D                     	;# 
   447  0F1E                     	;# 
   448  0F1F                     	;# 
   449  0F20                     	;# 
   450  0F21                     	;# 
   451  0F22                     	;# 
   452  0F23                     	;# 
   453  0F24                     	;# 
   454  0F25                     	;# 
   455  0F26                     	;# 
   456  0F27                     	;# 
   457  0F28                     	;# 
   458  0F29                     	;# 
   459  0F2A                     	;# 
   460  0F2B                     	;# 
   461  0F2C                     	;# 
   462  0F2D                     	;# 
   463  0F2E                     	;# 
   464  0F2F                     	;# 
   465  0F30                     	;# 
   466  0F31                     	;# 
   467  0F32                     	;# 
   468  0F33                     	;# 
   469  0F34                     	;# 
   470  0F35                     	;# 
   471  0F36                     	;# 
   472  0F37                     	;# 
   473  0FE4                     	;# 
   474  0FE5                     	;# 
   475  0FE6                     	;# 
   476  0FE7                     	;# 
   477  0FE8                     	;# 
   478  0FE9                     	;# 
   479  0FEA                     	;# 
   480  0FEB                     	;# 
   481  0FED                     	;# 
   482  0FEE                     	;# 
   483  0FEF                     	;# 
   484  0000                     	;# 
   485  0001                     	;# 
   486  0002                     	;# 
   487  0003                     	;# 
   488  0004                     	;# 
   489  0005                     	;# 
   490  0006                     	;# 
   491  0007                     	;# 
   492  0008                     	;# 
   493  0009                     	;# 
   494  000A                     	;# 
   495  000B                     	;# 
   496  000C                     	;# 
   497  000D                     	;# 
   498  000E                     	;# 
   499  0010                     	;# 
   500  0011                     	;# 
   501  0012                     	;# 
   502  0013                     	;# 
   503  0014                     	;# 
   504  0015                     	;# 
   505  0015                     	;# 
   506  0016                     	;# 
   507  0016                     	;# 
   508  0017                     	;# 
   509  0018                     	;# 
   510  0019                     	;# 
   511  0019                     	;# 
   512  001A                     	;# 
   513  001B                     	;# 
   514  001C                     	;# 
   515  001D                     	;# 
   516  001E                     	;# 
   517  001F                     	;# 
   518  008C                     	;# 
   519  008D                     	;# 
   520  008E                     	;# 
   521  0090                     	;# 
   522  0091                     	;# 
   523  0092                     	;# 
   524  0093                     	;# 
   525  0094                     	;# 
   526  0097                     	;# 
   527  009B                     	;# 
   528  009B                     	;# 
   529  009C                     	;# 
   530  009D                     	;# 
   531  009E                     	;# 
   532  009F                     	;# 
   533  010C                     	;# 
   534  010D                     	;# 
   535  010E                     	;# 
   536  0111                     	;# 
   537  0112                     	;# 
   538  0113                     	;# 
   539  0114                     	;# 
   540  0115                     	;# 
   541  0116                     	;# 
   542  0117                     	;# 
   543  0118                     	;# 
   544  0119                     	;# 
   545  018C                     	;# 
   546  018D                     	;# 
   547  018E                     	;# 
   548  0197                     	;# 
   549  0199                     	;# 
   550  0199                     	;# 
   551  0199                     	;# 
   552  019A                     	;# 
   553  019A                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019B                     	;# 
   560  019C                     	;# 
   561  019C                     	;# 
   562  019C                     	;# 
   563  019D                     	;# 
   564  019D                     	;# 
   565  019D                     	;# 
   566  019E                     	;# 
   567  019E                     	;# 
   568  019E                     	;# 
   569  019F                     	;# 
   570  019F                     	;# 
   571  019F                     	;# 
   572  019F                     	;# 
   573  019F                     	;# 
   574  020C                     	;# 
   575  020D                     	;# 
   576  020E                     	;# 
   577  0211                     	;# 
   578  0211                     	;# 
   579  0212                     	;# 
   580  0212                     	;# 
   581  0213                     	;# 
   582  0213                     	;# 
   583  0214                     	;# 
   584  0214                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0215                     	;# 
   589  0216                     	;# 
   590  0216                     	;# 
   591  0217                     	;# 
   592  0217                     	;# 
   593  028C                     	;# 
   594  028D                     	;# 
   595  028E                     	;# 
   596  0291                     	;# 
   597  0291                     	;# 
   598  0292                     	;# 
   599  0293                     	;# 
   600  0294                     	;# 
   601  0295                     	;# 
   602  0295                     	;# 
   603  0296                     	;# 
   604  0297                     	;# 
   605  0298                     	;# 
   606  029F                     	;# 
   607  030C                     	;# 
   608  030D                     	;# 
   609  030E                     	;# 
   610  0311                     	;# 
   611  0311                     	;# 
   612  0312                     	;# 
   613  0313                     	;# 
   614  0314                     	;# 
   615  0315                     	;# 
   616  0315                     	;# 
   617  0316                     	;# 
   618  0317                     	;# 
   619  0318                     	;# 
   620  038C                     	;# 
   621  038D                     	;# 
   622  038E                     	;# 
   623  0391                     	;# 
   624  0392                     	;# 
   625  0393                     	;# 
   626  0394                     	;# 
   627  0395                     	;# 
   628  0396                     	;# 
   629  0397                     	;# 
   630  0398                     	;# 
   631  0399                     	;# 
   632  039A                     	;# 
   633  039C                     	;# 
   634  039D                     	;# 
   635  039E                     	;# 
   636  039F                     	;# 
   637  0411                     	;# 
   638  0411                     	;# 
   639  0412                     	;# 
   640  0413                     	;# 
   641  0414                     	;# 
   642  0415                     	;# 
   643  0416                     	;# 
   644  0417                     	;# 
   645  0418                     	;# 
   646  0418                     	;# 
   647  0419                     	;# 
   648  041A                     	;# 
   649  041B                     	;# 
   650  041C                     	;# 
   651  041D                     	;# 
   652  041E                     	;# 
   653  041F                     	;# 
   654  0498                     	;# 
   655  0498                     	;# 
   656  0499                     	;# 
   657  049A                     	;# 
   658  049B                     	;# 
   659  049B                     	;# 
   660  049C                     	;# 
   661  049D                     	;# 
   662  049E                     	;# 
   663  049F                     	;# 
   664  0617                     	;# 
   665  0618                     	;# 
   666  0619                     	;# 
   667  0619                     	;# 
   668  061A                     	;# 
   669  061B                     	;# 
   670  061C                     	;# 
   671  061C                     	;# 
   672  061F                     	;# 
   673  0691                     	;# 
   674  0692                     	;# 
   675  0693                     	;# 
   676  0694                     	;# 
   677  0695                     	;# 
   678  0696                     	;# 
   679  0697                     	;# 
   680  0698                     	;# 
   681  0699                     	;# 
   682  0711                     	;# 
   683  0712                     	;# 
   684  0713                     	;# 
   685  0714                     	;# 
   686  0715                     	;# 
   687  0716                     	;# 
   688  0717                     	;# 
   689  0718                     	;# 
   690  0719                     	;# 
   691  0891                     	;# 
   692  0891                     	;# 
   693  0891                     	;# 
   694  0891                     	;# 
   695  0891                     	;# 
   696  0891                     	;# 
   697  0892                     	;# 
   698  0892                     	;# 
   699  0892                     	;# 
   700  0893                     	;# 
   701  0893                     	;# 
   702  0893                     	;# 
   703  0893                     	;# 
   704  0893                     	;# 
   705  0893                     	;# 
   706  0894                     	;# 
   707  0894                     	;# 
   708  0894                     	;# 
   709  0895                     	;# 
   710  0895                     	;# 
   711  0895                     	;# 
   712  0896                     	;# 
   713  0896                     	;# 
   714  0896                     	;# 
   715  089B                     	;# 
   716  0911                     	;# 
   717  0912                     	;# 
   718  0913                     	;# 
   719  0914                     	;# 
   720  0915                     	;# 
   721  0916                     	;# 
   722  0918                     	;# 
   723  0919                     	;# 
   724  091A                     	;# 
   725  091B                     	;# 
   726  091C                     	;# 
   727  091D                     	;# 
   728  091E                     	;# 
   729  091F                     	;# 
   730  0E0F                     	;# 
   731  0E10                     	;# 
   732  0E11                     	;# 
   733  0E12                     	;# 
   734  0E13                     	;# 
   735  0E14                     	;# 
   736  0E15                     	;# 
   737  0E16                     	;# 
   738  0E17                     	;# 
   739  0E18                     	;# 
   740  0E19                     	;# 
   741  0E1A                     	;# 
   742  0E1B                     	;# 
   743  0E1C                     	;# 
   744  0E20                     	;# 
   745  0E21                     	;# 
   746  0E22                     	;# 
   747  0E24                     	;# 
   748  0E25                     	;# 
   749  0E28                     	;# 
   750  0E29                     	;# 
   751  0E2A                     	;# 
   752  0E2B                     	;# 
   753  0E2C                     	;# 
   754  0E2D                     	;# 
   755  0E2E                     	;# 
   756  0E2F                     	;# 
   757  0E90                     	;# 
   758  0E91                     	;# 
   759  0E92                     	;# 
   760  0E94                     	;# 
   761  0E95                     	;# 
   762  0E9C                     	;# 
   763  0E9D                     	;# 
   764  0E9E                     	;# 
   765  0E9F                     	;# 
   766  0EA0                     	;# 
   767  0EA1                     	;# 
   768  0EA2                     	;# 
   769  0EA3                     	;# 
   770  0EA4                     	;# 
   771  0EA5                     	;# 
   772  0EA6                     	;# 
   773  0EA7                     	;# 
   774  0F0F                     	;# 
   775  0F10                     	;# 
   776  0F11                     	;# 
   777  0F12                     	;# 
   778  0F13                     	;# 
   779  0F14                     	;# 
   780  0F15                     	;# 
   781  0F16                     	;# 
   782  0F17                     	;# 
   783  0F18                     	;# 
   784  0F19                     	;# 
   785  0F1A                     	;# 
   786  0F1B                     	;# 
   787  0F1C                     	;# 
   788  0F1D                     	;# 
   789  0F1E                     	;# 
   790  0F1F                     	;# 
   791  0F20                     	;# 
   792  0F21                     	;# 
   793  0F22                     	;# 
   794  0F23                     	;# 
   795  0F24                     	;# 
   796  0F25                     	;# 
   797  0F26                     	;# 
   798  0F27                     	;# 
   799  0F28                     	;# 
   800  0F29                     	;# 
   801  0F2A                     	;# 
   802  0F2B                     	;# 
   803  0F2C                     	;# 
   804  0F2D                     	;# 
   805  0F2E                     	;# 
   806  0F2F                     	;# 
   807  0F30                     	;# 
   808  0F31                     	;# 
   809  0F32                     	;# 
   810  0F33                     	;# 
   811  0F34                     	;# 
   812  0F35                     	;# 
   813  0F36                     	;# 
   814  0F37                     	;# 
   815  0FE4                     	;# 
   816  0FE5                     	;# 
   817  0FE6                     	;# 
   818  0FE7                     	;# 
   819  0FE8                     	;# 
   820  0FE9                     	;# 
   821  0FEA                     	;# 
   822  0FEB                     	;# 
   823  0FED                     	;# 
   824  0FEE                     	;# 
   825  0FEF                     	;# 
   826  0000                     	;# 
   827  0001                     	;# 
   828  0002                     	;# 
   829  0003                     	;# 
   830  0004                     	;# 
   831  0005                     	;# 
   832  0006                     	;# 
   833  0007                     	;# 
   834  0008                     	;# 
   835  0009                     	;# 
   836  000A                     	;# 
   837  000B                     	;# 
   838  000C                     	;# 
   839  000D                     	;# 
   840  000E                     	;# 
   841  0010                     	;# 
   842  0011                     	;# 
   843  0012                     	;# 
   844  0013                     	;# 
   845  0014                     	;# 
   846  0015                     	;# 
   847  0015                     	;# 
   848  0016                     	;# 
   849  0016                     	;# 
   850  0017                     	;# 
   851  0018                     	;# 
   852  0019                     	;# 
   853  0019                     	;# 
   854  001A                     	;# 
   855  001B                     	;# 
   856  001C                     	;# 
   857  001D                     	;# 
   858  001E                     	;# 
   859  001F                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  0090                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0093                     	;# 
   867  0094                     	;# 
   868  0097                     	;# 
   869  009B                     	;# 
   870  009B                     	;# 
   871  009C                     	;# 
   872  009D                     	;# 
   873  009E                     	;# 
   874  009F                     	;# 
   875  010C                     	;# 
   876  010D                     	;# 
   877  010E                     	;# 
   878  0111                     	;# 
   879  0112                     	;# 
   880  0113                     	;# 
   881  0114                     	;# 
   882  0115                     	;# 
   883  0116                     	;# 
   884  0117                     	;# 
   885  0118                     	;# 
   886  0119                     	;# 
   887  018C                     	;# 
   888  018D                     	;# 
   889  018E                     	;# 
   890  0197                     	;# 
   891  0199                     	;# 
   892  0199                     	;# 
   893  0199                     	;# 
   894  019A                     	;# 
   895  019A                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019B                     	;# 
   902  019C                     	;# 
   903  019C                     	;# 
   904  019C                     	;# 
   905  019D                     	;# 
   906  019D                     	;# 
   907  019D                     	;# 
   908  019E                     	;# 
   909  019E                     	;# 
   910  019E                     	;# 
   911  019F                     	;# 
   912  019F                     	;# 
   913  019F                     	;# 
   914  019F                     	;# 
   915  019F                     	;# 
   916  020C                     	;# 
   917  020D                     	;# 
   918  020E                     	;# 
   919  0211                     	;# 
   920  0211                     	;# 
   921  0212                     	;# 
   922  0212                     	;# 
   923  0213                     	;# 
   924  0213                     	;# 
   925  0214                     	;# 
   926  0214                     	;# 
   927  0215                     	;# 
   928  0215                     	;# 
   929  0215                     	;# 
   930  0215                     	;# 
   931  0216                     	;# 
   932  0216                     	;# 
   933  0217                     	;# 
   934  0217                     	;# 
   935  028C                     	;# 
   936  028D                     	;# 
   937  028E                     	;# 
   938  0291                     	;# 
   939  0291                     	;# 
   940  0292                     	;# 
   941  0293                     	;# 
   942  0294                     	;# 
   943  0295                     	;# 
   944  0295                     	;# 
   945  0296                     	;# 
   946  0297                     	;# 
   947  0298                     	;# 
   948  029F                     	;# 
   949  030C                     	;# 
   950  030D                     	;# 
   951  030E                     	;# 
   952  0311                     	;# 
   953  0311                     	;# 
   954  0312                     	;# 
   955  0313                     	;# 
   956  0314                     	;# 
   957  0315                     	;# 
   958  0315                     	;# 
   959  0316                     	;# 
   960  0317                     	;# 
   961  0318                     	;# 
   962  038C                     	;# 
   963  038D                     	;# 
   964  038E                     	;# 
   965  0391                     	;# 
   966  0392                     	;# 
   967  0393                     	;# 
   968  0394                     	;# 
   969  0395                     	;# 
   970  0396                     	;# 
   971  0397                     	;# 
   972  0398                     	;# 
   973  0399                     	;# 
   974  039A                     	;# 
   975  039C                     	;# 
   976  039D                     	;# 
   977  039E                     	;# 
   978  039F                     	;# 
   979  0411                     	;# 
   980  0411                     	;# 
   981  0412                     	;# 
   982  0413                     	;# 
   983  0414                     	;# 
   984  0415                     	;# 
   985  0416                     	;# 
   986  0417                     	;# 
   987  0418                     	;# 
   988  0418                     	;# 
   989  0419                     	;# 
   990  041A                     	;# 
   991  041B                     	;# 
   992  041C                     	;# 
   993  041D                     	;# 
   994  041E                     	;# 
   995  041F                     	;# 
   996  0498                     	;# 
   997  0498                     	;# 
   998  0499                     	;# 
   999  049A                     	;# 
  1000  049B                     	;# 
  1001  049B                     	;# 
  1002  049C                     	;# 
  1003  049D                     	;# 
  1004  049E                     	;# 
  1005  049F                     	;# 
  1006  0617                     	;# 
  1007  0618                     	;# 
  1008  0619                     	;# 
  1009  0619                     	;# 
  1010  061A                     	;# 
  1011  061B                     	;# 
  1012  061C                     	;# 
  1013  061C                     	;# 
  1014  061F                     	;# 
  1015  0691                     	;# 
  1016  0692                     	;# 
  1017  0693                     	;# 
  1018  0694                     	;# 
  1019  0695                     	;# 
  1020  0696                     	;# 
  1021  0697                     	;# 
  1022  0698                     	;# 
  1023  0699                     	;# 
  1024  0711                     	;# 
  1025  0712                     	;# 
  1026  0713                     	;# 
  1027  0714                     	;# 
  1028  0715                     	;# 
  1029  0716                     	;# 
  1030  0717                     	;# 
  1031  0718                     	;# 
  1032  0719                     	;# 
  1033  0891                     	;# 
  1034  0891                     	;# 
  1035  0891                     	;# 
  1036  0891                     	;# 
  1037  0891                     	;# 
  1038  0891                     	;# 
  1039  0892                     	;# 
  1040  0892                     	;# 
  1041  0892                     	;# 
  1042  0893                     	;# 
  1043  0893                     	;# 
  1044  0893                     	;# 
  1045  0893                     	;# 
  1046  0893                     	;# 
  1047  0893                     	;# 
  1048  0894                     	;# 
  1049  0894                     	;# 
  1050  0894                     	;# 
  1051  0895                     	;# 
  1052  0895                     	;# 
  1053  0895                     	;# 
  1054  0896                     	;# 
  1055  0896                     	;# 
  1056  0896                     	;# 
  1057  089B                     	;# 
  1058  0911                     	;# 
  1059  0912                     	;# 
  1060  0913                     	;# 
  1061  0914                     	;# 
  1062  0915                     	;# 
  1063  0916                     	;# 
  1064  0918                     	;# 
  1065  0919                     	;# 
  1066  091A                     	;# 
  1067  091B                     	;# 
  1068  091C                     	;# 
  1069  091D                     	;# 
  1070  091E                     	;# 
  1071  091F                     	;# 
  1072  0E0F                     	;# 
  1073  0E10                     	;# 
  1074  0E11                     	;# 
  1075  0E12                     	;# 
  1076  0E13                     	;# 
  1077  0E14                     	;# 
  1078  0E15                     	;# 
  1079  0E16                     	;# 
  1080  0E17                     	;# 
  1081  0E18                     	;# 
  1082  0E19                     	;# 
  1083  0E1A                     	;# 
  1084  0E1B                     	;# 
  1085  0E1C                     	;# 
  1086  0E20                     	;# 
  1087  0E21                     	;# 
  1088  0E22                     	;# 
  1089  0E24                     	;# 
  1090  0E25                     	;# 
  1091  0E28                     	;# 
  1092  0E29                     	;# 
  1093  0E2A                     	;# 
  1094  0E2B                     	;# 
  1095  0E2C                     	;# 
  1096  0E2D                     	;# 
  1097  0E2E                     	;# 
  1098  0E2F                     	;# 
  1099  0E90                     	;# 
  1100  0E91                     	;# 
  1101  0E92                     	;# 
  1102  0E94                     	;# 
  1103  0E95                     	;# 
  1104  0E9C                     	;# 
  1105  0E9D                     	;# 
  1106  0E9E                     	;# 
  1107  0E9F                     	;# 
  1108  0EA0                     	;# 
  1109  0EA1                     	;# 
  1110  0EA2                     	;# 
  1111  0EA3                     	;# 
  1112  0EA4                     	;# 
  1113  0EA5                     	;# 
  1114  0EA6                     	;# 
  1115  0EA7                     	;# 
  1116  0F0F                     	;# 
  1117  0F10                     	;# 
  1118  0F11                     	;# 
  1119  0F12                     	;# 
  1120  0F13                     	;# 
  1121  0F14                     	;# 
  1122  0F15                     	;# 
  1123  0F16                     	;# 
  1124  0F17                     	;# 
  1125  0F18                     	;# 
  1126  0F19                     	;# 
  1127  0F1A                     	;# 
  1128  0F1B                     	;# 
  1129  0F1C                     	;# 
  1130  0F1D                     	;# 
  1131  0F1E                     	;# 
  1132  0F1F                     	;# 
  1133  0F20                     	;# 
  1134  0F21                     	;# 
  1135  0F22                     	;# 
  1136  0F23                     	;# 
  1137  0F24                     	;# 
  1138  0F25                     	;# 
  1139  0F26                     	;# 
  1140  0F27                     	;# 
  1141  0F28                     	;# 
  1142  0F29                     	;# 
  1143  0F2A                     	;# 
  1144  0F2B                     	;# 
  1145  0F2C                     	;# 
  1146  0F2D                     	;# 
  1147  0F2E                     	;# 
  1148  0F2F                     	;# 
  1149  0F30                     	;# 
  1150  0F31                     	;# 
  1151  0F32                     	;# 
  1152  0F33                     	;# 
  1153  0F34                     	;# 
  1154  0F35                     	;# 
  1155  0F36                     	;# 
  1156  0F37                     	;# 
  1157  0FE4                     	;# 
  1158  0FE5                     	;# 
  1159  0FE6                     	;# 
  1160  0FE7                     	;# 
  1161  0FE8                     	;# 
  1162  0FE9                     	;# 
  1163  0FEA                     	;# 
  1164  0FEB                     	;# 
  1165  0FED                     	;# 
  1166  0FEE                     	;# 
  1167  0FEF                     	;# 
  1168  0000                     	;# 
  1169  0001                     	;# 
  1170  0002                     	;# 
  1171  0003                     	;# 
  1172  0004                     	;# 
  1173  0005                     	;# 
  1174  0006                     	;# 
  1175  0007                     	;# 
  1176  0008                     	;# 
  1177  0009                     	;# 
  1178  000A                     	;# 
  1179  000B                     	;# 
  1180  000C                     	;# 
  1181  000D                     	;# 
  1182  000E                     	;# 
  1183  0010                     	;# 
  1184  0011                     	;# 
  1185  0012                     	;# 
  1186  0013                     	;# 
  1187  0014                     	;# 
  1188  0015                     	;# 
  1189  0015                     	;# 
  1190  0016                     	;# 
  1191  0016                     	;# 
  1192  0017                     	;# 
  1193  0018                     	;# 
  1194  0019                     	;# 
  1195  0019                     	;# 
  1196  001A                     	;# 
  1197  001B                     	;# 
  1198  001C                     	;# 
  1199  001D                     	;# 
  1200  001E                     	;# 
  1201  001F                     	;# 
  1202  008C                     	;# 
  1203  008D                     	;# 
  1204  008E                     	;# 
  1205  0090                     	;# 
  1206  0091                     	;# 
  1207  0092                     	;# 
  1208  0093                     	;# 
  1209  0094                     	;# 
  1210  0097                     	;# 
  1211  009B                     	;# 
  1212  009B                     	;# 
  1213  009C                     	;# 
  1214  009D                     	;# 
  1215  009E                     	;# 
  1216  009F                     	;# 
  1217  010C                     	;# 
  1218  010D                     	;# 
  1219  010E                     	;# 
  1220  0111                     	;# 
  1221  0112                     	;# 
  1222  0113                     	;# 
  1223  0114                     	;# 
  1224  0115                     	;# 
  1225  0116                     	;# 
  1226  0117                     	;# 
  1227  0118                     	;# 
  1228  0119                     	;# 
  1229  018C                     	;# 
  1230  018D                     	;# 
  1231  018E                     	;# 
  1232  0197                     	;# 
  1233  0199                     	;# 
  1234  0199                     	;# 
  1235  0199                     	;# 
  1236  019A                     	;# 
  1237  019A                     	;# 
  1238  019A                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019B                     	;# 
  1242  019B                     	;# 
  1243  019B                     	;# 
  1244  019C                     	;# 
  1245  019C                     	;# 
  1246  019C                     	;# 
  1247  019D                     	;# 
  1248  019D                     	;# 
  1249  019D                     	;# 
  1250  019E                     	;# 
  1251  019E                     	;# 
  1252  019E                     	;# 
  1253  019F                     	;# 
  1254  019F                     	;# 
  1255  019F                     	;# 
  1256  019F                     	;# 
  1257  019F                     	;# 
  1258  020C                     	;# 
  1259  020D                     	;# 
  1260  020E                     	;# 
  1261  0211                     	;# 
  1262  0211                     	;# 
  1263  0212                     	;# 
  1264  0212                     	;# 
  1265  0213                     	;# 
  1266  0213                     	;# 
  1267  0214                     	;# 
  1268  0214                     	;# 
  1269  0215                     	;# 
  1270  0215                     	;# 
  1271  0215                     	;# 
  1272  0215                     	;# 
  1273  0216                     	;# 
  1274  0216                     	;# 
  1275  0217                     	;# 
  1276  0217                     	;# 
  1277  028C                     	;# 
  1278  028D                     	;# 
  1279  028E                     	;# 
  1280  0291                     	;# 
  1281  0291                     	;# 
  1282  0292                     	;# 
  1283  0293                     	;# 
  1284  0294                     	;# 
  1285  0295                     	;# 
  1286  0295                     	;# 
  1287  0296                     	;# 
  1288  0297                     	;# 
  1289  0298                     	;# 
  1290  029F                     	;# 
  1291  030C                     	;# 
  1292  030D                     	;# 
  1293  030E                     	;# 
  1294  0311                     	;# 
  1295  0311                     	;# 
  1296  0312                     	;# 
  1297  0313                     	;# 
  1298  0314                     	;# 
  1299  0315                     	;# 
  1300  0315                     	;# 
  1301  0316                     	;# 
  1302  0317                     	;# 
  1303  0318                     	;# 
  1304  038C                     	;# 
  1305  038D                     	;# 
  1306  038E                     	;# 
  1307  0391                     	;# 
  1308  0392                     	;# 
  1309  0393                     	;# 
  1310  0394                     	;# 
  1311  0395                     	;# 
  1312  0396                     	;# 
  1313  0397                     	;# 
  1314  0398                     	;# 
  1315  0399                     	;# 
  1316  039A                     	;# 
  1317  039C                     	;# 
  1318  039D                     	;# 
  1319  039E                     	;# 
  1320  039F                     	;# 
  1321  0411                     	;# 
  1322  0411                     	;# 
  1323  0412                     	;# 
  1324  0413                     	;# 
  1325  0414                     	;# 
  1326  0415                     	;# 
  1327  0416                     	;# 
  1328  0417                     	;# 
  1329  0418                     	;# 
  1330  0418                     	;# 
  1331  0419                     	;# 
  1332  041A                     	;# 
  1333  041B                     	;# 
  1334  041C                     	;# 
  1335  041D                     	;# 
  1336  041E                     	;# 
  1337  041F                     	;# 
  1338  0498                     	;# 
  1339  0498                     	;# 
  1340  0499                     	;# 
  1341  049A                     	;# 
  1342  049B                     	;# 
  1343  049B                     	;# 
  1344  049C                     	;# 
  1345  049D                     	;# 
  1346  049E                     	;# 
  1347  049F                     	;# 
  1348  0617                     	;# 
  1349  0618                     	;# 
  1350  0619                     	;# 
  1351  0619                     	;# 
  1352  061A                     	;# 
  1353  061B                     	;# 
  1354  061C                     	;# 
  1355  061C                     	;# 
  1356  061F                     	;# 
  1357  0691                     	;# 
  1358  0692                     	;# 
  1359  0693                     	;# 
  1360  0694                     	;# 
  1361  0695                     	;# 
  1362  0696                     	;# 
  1363  0697                     	;# 
  1364  0698                     	;# 
  1365  0699                     	;# 
  1366  0711                     	;# 
  1367  0712                     	;# 
  1368  0713                     	;# 
  1369  0714                     	;# 
  1370  0715                     	;# 
  1371  0716                     	;# 
  1372  0717                     	;# 
  1373  0718                     	;# 
  1374  0719                     	;# 
  1375  0891                     	;# 
  1376  0891                     	;# 
  1377  0891                     	;# 
  1378  0891                     	;# 
  1379  0891                     	;# 
  1380  0891                     	;# 
  1381  0892                     	;# 
  1382  0892                     	;# 
  1383  0892                     	;# 
  1384  0893                     	;# 
  1385  0893                     	;# 
  1386  0893                     	;# 
  1387  0893                     	;# 
  1388  0893                     	;# 
  1389  0893                     	;# 
  1390  0894                     	;# 
  1391  0894                     	;# 
  1392  0894                     	;# 
  1393  0895                     	;# 
  1394  0895                     	;# 
  1395  0895                     	;# 
  1396  0896                     	;# 
  1397  0896                     	;# 
  1398  0896                     	;# 
  1399  089B                     	;# 
  1400  0911                     	;# 
  1401  0912                     	;# 
  1402  0913                     	;# 
  1403  0914                     	;# 
  1404  0915                     	;# 
  1405  0916                     	;# 
  1406  0918                     	;# 
  1407  0919                     	;# 
  1408  091A                     	;# 
  1409  091B                     	;# 
  1410  091C                     	;# 
  1411  091D                     	;# 
  1412  091E                     	;# 
  1413  091F                     	;# 
  1414  0E0F                     	;# 
  1415  0E10                     	;# 
  1416  0E11                     	;# 
  1417  0E12                     	;# 
  1418  0E13                     	;# 
  1419  0E14                     	;# 
  1420  0E15                     	;# 
  1421  0E16                     	;# 
  1422  0E17                     	;# 
  1423  0E18                     	;# 
  1424  0E19                     	;# 
  1425  0E1A                     	;# 
  1426  0E1B                     	;# 
  1427  0E1C                     	;# 
  1428  0E20                     	;# 
  1429  0E21                     	;# 
  1430  0E22                     	;# 
  1431  0E24                     	;# 
  1432  0E25                     	;# 
  1433  0E28                     	;# 
  1434  0E29                     	;# 
  1435  0E2A                     	;# 
  1436  0E2B                     	;# 
  1437  0E2C                     	;# 
  1438  0E2D                     	;# 
  1439  0E2E                     	;# 
  1440  0E2F                     	;# 
  1441  0E90                     	;# 
  1442  0E91                     	;# 
  1443  0E92                     	;# 
  1444  0E94                     	;# 
  1445  0E95                     	;# 
  1446  0E9C                     	;# 
  1447  0E9D                     	;# 
  1448  0E9E                     	;# 
  1449  0E9F                     	;# 
  1450  0EA0                     	;# 
  1451  0EA1                     	;# 
  1452  0EA2                     	;# 
  1453  0EA3                     	;# 
  1454  0EA4                     	;# 
  1455  0EA5                     	;# 
  1456  0EA6                     	;# 
  1457  0EA7                     	;# 
  1458  0F0F                     	;# 
  1459  0F10                     	;# 
  1460  0F11                     	;# 
  1461  0F12                     	;# 
  1462  0F13                     	;# 
  1463  0F14                     	;# 
  1464  0F15                     	;# 
  1465  0F16                     	;# 
  1466  0F17                     	;# 
  1467  0F18                     	;# 
  1468  0F19                     	;# 
  1469  0F1A                     	;# 
  1470  0F1B                     	;# 
  1471  0F1C                     	;# 
  1472  0F1D                     	;# 
  1473  0F1E                     	;# 
  1474  0F1F                     	;# 
  1475  0F20                     	;# 
  1476  0F21                     	;# 
  1477  0F22                     	;# 
  1478  0F23                     	;# 
  1479  0F24                     	;# 
  1480  0F25                     	;# 
  1481  0F26                     	;# 
  1482  0F27                     	;# 
  1483  0F28                     	;# 
  1484  0F29                     	;# 
  1485  0F2A                     	;# 
  1486  0F2B                     	;# 
  1487  0F2C                     	;# 
  1488  0F2D                     	;# 
  1489  0F2E                     	;# 
  1490  0F2F                     	;# 
  1491  0F30                     	;# 
  1492  0F31                     	;# 
  1493  0F32                     	;# 
  1494  0F33                     	;# 
  1495  0F34                     	;# 
  1496  0F35                     	;# 
  1497  0F36                     	;# 
  1498  0F37                     	;# 
  1499  0FE4                     	;# 
  1500  0FE5                     	;# 
  1501  0FE6                     	;# 
  1502  0FE7                     	;# 
  1503  0FE8                     	;# 
  1504  0FE9                     	;# 
  1505  0FEA                     	;# 
  1506  0FEB                     	;# 
  1507  0FED                     	;# 
  1508  0FEE                     	;# 
  1509  0FEF                     	;# 
  1510  0000                     	;# 
  1511  0001                     	;# 
  1512  0002                     	;# 
  1513  0003                     	;# 
  1514  0004                     	;# 
  1515  0005                     	;# 
  1516  0006                     	;# 
  1517  0007                     	;# 
  1518  0008                     	;# 
  1519  0009                     	;# 
  1520  000A                     	;# 
  1521  000B                     	;# 
  1522  000C                     	;# 
  1523  000D                     	;# 
  1524  000E                     	;# 
  1525  0010                     	;# 
  1526  0011                     	;# 
  1527  0012                     	;# 
  1528  0013                     	;# 
  1529  0014                     	;# 
  1530  0015                     	;# 
  1531  0015                     	;# 
  1532  0016                     	;# 
  1533  0016                     	;# 
  1534  0017                     	;# 
  1535  0018                     	;# 
  1536  0019                     	;# 
  1537  0019                     	;# 
  1538  001A                     	;# 
  1539  001B                     	;# 
  1540  001C                     	;# 
  1541  001D                     	;# 
  1542  001E                     	;# 
  1543  001F                     	;# 
  1544  008C                     	;# 
  1545  008D                     	;# 
  1546  008E                     	;# 
  1547  0090                     	;# 
  1548  0091                     	;# 
  1549  0092                     	;# 
  1550  0093                     	;# 
  1551  0094                     	;# 
  1552  0097                     	;# 
  1553  009B                     	;# 
  1554  009B                     	;# 
  1555  009C                     	;# 
  1556  009D                     	;# 
  1557  009E                     	;# 
  1558  009F                     	;# 
  1559  010C                     	;# 
  1560  010D                     	;# 
  1561  010E                     	;# 
  1562  0111                     	;# 
  1563  0112                     	;# 
  1564  0113                     	;# 
  1565  0114                     	;# 
  1566  0115                     	;# 
  1567  0116                     	;# 
  1568  0117                     	;# 
  1569  0118                     	;# 
  1570  0119                     	;# 
  1571  018C                     	;# 
  1572  018D                     	;# 
  1573  018E                     	;# 
  1574  0197                     	;# 
  1575  0199                     	;# 
  1576  0199                     	;# 
  1577  0199                     	;# 
  1578  019A                     	;# 
  1579  019A                     	;# 
  1580  019A                     	;# 
  1581  019B                     	;# 
  1582  019B                     	;# 
  1583  019B                     	;# 
  1584  019B                     	;# 
  1585  019B                     	;# 
  1586  019C                     	;# 
  1587  019C                     	;# 
  1588  019C                     	;# 
  1589  019D                     	;# 
  1590  019D                     	;# 
  1591  019D                     	;# 
  1592  019E                     	;# 
  1593  019E                     	;# 
  1594  019E                     	;# 
  1595  019F                     	;# 
  1596  019F                     	;# 
  1597  019F                     	;# 
  1598  019F                     	;# 
  1599  019F                     	;# 
  1600  020C                     	;# 
  1601  020D                     	;# 
  1602  020E                     	;# 
  1603  0211                     	;# 
  1604  0211                     	;# 
  1605  0212                     	;# 
  1606  0212                     	;# 
  1607  0213                     	;# 
  1608  0213                     	;# 
  1609  0214                     	;# 
  1610  0214                     	;# 
  1611  0215                     	;# 
  1612  0215                     	;# 
  1613  0215                     	;# 
  1614  0215                     	;# 
  1615  0216                     	;# 
  1616  0216                     	;# 
  1617  0217                     	;# 
  1618  0217                     	;# 
  1619  028C                     	;# 
  1620  028D                     	;# 
  1621  028E                     	;# 
  1622  0291                     	;# 
  1623  0291                     	;# 
  1624  0292                     	;# 
  1625  0293                     	;# 
  1626  0294                     	;# 
  1627  0295                     	;# 
  1628  0295                     	;# 
  1629  0296                     	;# 
  1630  0297                     	;# 
  1631  0298                     	;# 
  1632  029F                     	;# 
  1633  030C                     	;# 
  1634  030D                     	;# 
  1635  030E                     	;# 
  1636  0311                     	;# 
  1637  0311                     	;# 
  1638  0312                     	;# 
  1639  0313                     	;# 
  1640  0314                     	;# 
  1641  0315                     	;# 
  1642  0315                     	;# 
  1643  0316                     	;# 
  1644  0317                     	;# 
  1645  0318                     	;# 
  1646  038C                     	;# 
  1647  038D                     	;# 
  1648  038E                     	;# 
  1649  0391                     	;# 
  1650  0392                     	;# 
  1651  0393                     	;# 
  1652  0394                     	;# 
  1653  0395                     	;# 
  1654  0396                     	;# 
  1655  0397                     	;# 
  1656  0398                     	;# 
  1657  0399                     	;# 
  1658  039A                     	;# 
  1659  039C                     	;# 
  1660  039D                     	;# 
  1661  039E                     	;# 
  1662  039F                     	;# 
  1663  0411                     	;# 
  1664  0411                     	;# 
  1665  0412                     	;# 
  1666  0413                     	;# 
  1667  0414                     	;# 
  1668  0415                     	;# 
  1669  0416                     	;# 
  1670  0417                     	;# 
  1671  0418                     	;# 
  1672  0418                     	;# 
  1673  0419                     	;# 
  1674  041A                     	;# 
  1675  041B                     	;# 
  1676  041C                     	;# 
  1677  041D                     	;# 
  1678  041E                     	;# 
  1679  041F                     	;# 
  1680  0498                     	;# 
  1681  0498                     	;# 
  1682  0499                     	;# 
  1683  049A                     	;# 
  1684  049B                     	;# 
  1685  049B                     	;# 
  1686  049C                     	;# 
  1687  049D                     	;# 
  1688  049E                     	;# 
  1689  049F                     	;# 
  1690  0617                     	;# 
  1691  0618                     	;# 
  1692  0619                     	;# 
  1693  0619                     	;# 
  1694  061A                     	;# 
  1695  061B                     	;# 
  1696  061C                     	;# 
  1697  061C                     	;# 
  1698  061F                     	;# 
  1699  0691                     	;# 
  1700  0692                     	;# 
  1701  0693                     	;# 
  1702  0694                     	;# 
  1703  0695                     	;# 
  1704  0696                     	;# 
  1705  0697                     	;# 
  1706  0698                     	;# 
  1707  0699                     	;# 
  1708  0711                     	;# 
  1709  0712                     	;# 
  1710  0713                     	;# 
  1711  0714                     	;# 
  1712  0715                     	;# 
  1713  0716                     	;# 
  1714  0717                     	;# 
  1715  0718                     	;# 
  1716  0719                     	;# 
  1717  0891                     	;# 
  1718  0891                     	;# 
  1719  0891                     	;# 
  1720  0891                     	;# 
  1721  0891                     	;# 
  1722  0891                     	;# 
  1723  0892                     	;# 
  1724  0892                     	;# 
  1725  0892                     	;# 
  1726  0893                     	;# 
  1727  0893                     	;# 
  1728  0893                     	;# 
  1729  0893                     	;# 
  1730  0893                     	;# 
  1731  0893                     	;# 
  1732  0894                     	;# 
  1733  0894                     	;# 
  1734  0894                     	;# 
  1735  0895                     	;# 
  1736  0895                     	;# 
  1737  0895                     	;# 
  1738  0896                     	;# 
  1739  0896                     	;# 
  1740  0896                     	;# 
  1741  089B                     	;# 
  1742  0911                     	;# 
  1743  0912                     	;# 
  1744  0913                     	;# 
  1745  0914                     	;# 
  1746  0915                     	;# 
  1747  0916                     	;# 
  1748  0918                     	;# 
  1749  0919                     	;# 
  1750  091A                     	;# 
  1751  091B                     	;# 
  1752  091C                     	;# 
  1753  091D                     	;# 
  1754  091E                     	;# 
  1755  091F                     	;# 
  1756  0E0F                     	;# 
  1757  0E10                     	;# 
  1758  0E11                     	;# 
  1759  0E12                     	;# 
  1760  0E13                     	;# 
  1761  0E14                     	;# 
  1762  0E15                     	;# 
  1763  0E16                     	;# 
  1764  0E17                     	;# 
  1765  0E18                     	;# 
  1766  0E19                     	;# 
  1767  0E1A                     	;# 
  1768  0E1B                     	;# 
  1769  0E1C                     	;# 
  1770  0E20                     	;# 
  1771  0E21                     	;# 
  1772  0E22                     	;# 
  1773  0E24                     	;# 
  1774  0E25                     	;# 
  1775  0E28                     	;# 
  1776  0E29                     	;# 
  1777  0E2A                     	;# 
  1778  0E2B                     	;# 
  1779  0E2C                     	;# 
  1780  0E2D                     	;# 
  1781  0E2E                     	;# 
  1782  0E2F                     	;# 
  1783  0E90                     	;# 
  1784  0E91                     	;# 
  1785  0E92                     	;# 
  1786  0E94                     	;# 
  1787  0E95                     	;# 
  1788  0E9C                     	;# 
  1789  0E9D                     	;# 
  1790  0E9E                     	;# 
  1791  0E9F                     	;# 
  1792  0EA0                     	;# 
  1793  0EA1                     	;# 
  1794  0EA2                     	;# 
  1795  0EA3                     	;# 
  1796  0EA4                     	;# 
  1797  0EA5                     	;# 
  1798  0EA6                     	;# 
  1799  0EA7                     	;# 
  1800  0F0F                     	;# 
  1801  0F10                     	;# 
  1802  0F11                     	;# 
  1803  0F12                     	;# 
  1804  0F13                     	;# 
  1805  0F14                     	;# 
  1806  0F15                     	;# 
  1807  0F16                     	;# 
  1808  0F17                     	;# 
  1809  0F18                     	;# 
  1810  0F19                     	;# 
  1811  0F1A                     	;# 
  1812  0F1B                     	;# 
  1813  0F1C                     	;# 
  1814  0F1D                     	;# 
  1815  0F1E                     	;# 
  1816  0F1F                     	;# 
  1817  0F20                     	;# 
  1818  0F21                     	;# 
  1819  0F22                     	;# 
  1820  0F23                     	;# 
  1821  0F24                     	;# 
  1822  0F25                     	;# 
  1823  0F26                     	;# 
  1824  0F27                     	;# 
  1825  0F28                     	;# 
  1826  0F29                     	;# 
  1827  0F2A                     	;# 
  1828  0F2B                     	;# 
  1829  0F2C                     	;# 
  1830  0F2D                     	;# 
  1831  0F2E                     	;# 
  1832  0F2F                     	;# 
  1833  0F30                     	;# 
  1834  0F31                     	;# 
  1835  0F32                     	;# 
  1836  0F33                     	;# 
  1837  0F34                     	;# 
  1838  0F35                     	;# 
  1839  0F36                     	;# 
  1840  0F37                     	;# 
  1841  0FE4                     	;# 
  1842  0FE5                     	;# 
  1843  0FE6                     	;# 
  1844  0FE7                     	;# 
  1845  0FE8                     	;# 
  1846  0FE9                     	;# 
  1847  0FEA                     	;# 
  1848  0FEB                     	;# 
  1849  0FED                     	;# 
  1850  0FEE                     	;# 
  1851  0FEF                     	;# 
  1852  0000                     	;# 
  1853  0001                     	;# 
  1854  0002                     	;# 
  1855  0003                     	;# 
  1856  0004                     	;# 
  1857  0005                     	;# 
  1858  0006                     	;# 
  1859  0007                     	;# 
  1860  0008                     	;# 
  1861  0009                     	;# 
  1862  000A                     	;# 
  1863  000B                     	;# 
  1864  000C                     	;# 
  1865  000D                     	;# 
  1866  000E                     	;# 
  1867  0010                     	;# 
  1868  0011                     	;# 
  1869  0012                     	;# 
  1870  0013                     	;# 
  1871  0014                     	;# 
  1872  0015                     	;# 
  1873  0015                     	;# 
  1874  0016                     	;# 
  1875  0016                     	;# 
  1876  0017                     	;# 
  1877  0018                     	;# 
  1878  0019                     	;# 
  1879  0019                     	;# 
  1880  001A                     	;# 
  1881  001B                     	;# 
  1882  001C                     	;# 
  1883  001D                     	;# 
  1884  001E                     	;# 
  1885  001F                     	;# 
  1886  008C                     	;# 
  1887  008D                     	;# 
  1888  008E                     	;# 
  1889  0090                     	;# 
  1890  0091                     	;# 
  1891  0092                     	;# 
  1892  0093                     	;# 
  1893  0094                     	;# 
  1894  0097                     	;# 
  1895  009B                     	;# 
  1896  009B                     	;# 
  1897  009C                     	;# 
  1898  009D                     	;# 
  1899  009E                     	;# 
  1900  009F                     	;# 
  1901  010C                     	;# 
  1902  010D                     	;# 
  1903  010E                     	;# 
  1904  0111                     	;# 
  1905  0112                     	;# 
  1906  0113                     	;# 
  1907  0114                     	;# 
  1908  0115                     	;# 
  1909  0116                     	;# 
  1910  0117                     	;# 
  1911  0118                     	;# 
  1912  0119                     	;# 
  1913  018C                     	;# 
  1914  018D                     	;# 
  1915  018E                     	;# 
  1916  0197                     	;# 
  1917  0199                     	;# 
  1918  0199                     	;# 
  1919  0199                     	;# 
  1920  019A                     	;# 
  1921  019A                     	;# 
  1922  019A                     	;# 
  1923  019B                     	;# 
  1924  019B                     	;# 
  1925  019B                     	;# 
  1926  019B                     	;# 
  1927  019B                     	;# 
  1928  019C                     	;# 
  1929  019C                     	;# 
  1930  019C                     	;# 
  1931  019D                     	;# 
  1932  019D                     	;# 
  1933  019D                     	;# 
  1934  019E                     	;# 
  1935  019E                     	;# 
  1936  019E                     	;# 
  1937  019F                     	;# 
  1938  019F                     	;# 
  1939  019F                     	;# 
  1940  019F                     	;# 
  1941  019F                     	;# 
  1942  020C                     	;# 
  1943  020D                     	;# 
  1944  020E                     	;# 
  1945  0211                     	;# 
  1946  0211                     	;# 
  1947  0212                     	;# 
  1948  0212                     	;# 
  1949  0213                     	;# 
  1950  0213                     	;# 
  1951  0214                     	;# 
  1952  0214                     	;# 
  1953  0215                     	;# 
  1954  0215                     	;# 
  1955  0215                     	;# 
  1956  0215                     	;# 
  1957  0216                     	;# 
  1958  0216                     	;# 
  1959  0217                     	;# 
  1960  0217                     	;# 
  1961  028C                     	;# 
  1962  028D                     	;# 
  1963  028E                     	;# 
  1964  0291                     	;# 
  1965  0291                     	;# 
  1966  0292                     	;# 
  1967  0293                     	;# 
  1968  0294                     	;# 
  1969  0295                     	;# 
  1970  0295                     	;# 
  1971  0296                     	;# 
  1972  0297                     	;# 
  1973  0298                     	;# 
  1974  029F                     	;# 
  1975  030C                     	;# 
  1976  030D                     	;# 
  1977  030E                     	;# 
  1978  0311                     	;# 
  1979  0311                     	;# 
  1980  0312                     	;# 
  1981  0313                     	;# 
  1982  0314                     	;# 
  1983  0315                     	;# 
  1984  0315                     	;# 
  1985  0316                     	;# 
  1986  0317                     	;# 
  1987  0318                     	;# 
  1988  038C                     	;# 
  1989  038D                     	;# 
  1990  038E                     	;# 
  1991  0391                     	;# 
  1992  0392                     	;# 
  1993  0393                     	;# 
  1994  0394                     	;# 
  1995  0395                     	;# 
  1996  0396                     	;# 
  1997  0397                     	;# 
  1998  0398                     	;# 
  1999  0399                     	;# 
  2000  039A                     	;# 
  2001  039C                     	;# 
  2002  039D                     	;# 
  2003  039E                     	;# 
  2004  039F                     	;# 
  2005  0411                     	;# 
  2006  0411                     	;# 
  2007  0412                     	;# 
  2008  0413                     	;# 
  2009  0414                     	;# 
  2010  0415                     	;# 
  2011  0416                     	;# 
  2012  0417                     	;# 
  2013  0418                     	;# 
  2014  0418                     	;# 
  2015  0419                     	;# 
  2016  041A                     	;# 
  2017  041B                     	;# 
  2018  041C                     	;# 
  2019  041D                     	;# 
  2020  041E                     	;# 
  2021  041F                     	;# 
  2022  0498                     	;# 
  2023  0498                     	;# 
  2024  0499                     	;# 
  2025  049A                     	;# 
  2026  049B                     	;# 
  2027  049B                     	;# 
  2028  049C                     	;# 
  2029  049D                     	;# 
  2030  049E                     	;# 
  2031  049F                     	;# 
  2032  0617                     	;# 
  2033  0618                     	;# 
  2034  0619                     	;# 
  2035  0619                     	;# 
  2036  061A                     	;# 
  2037  061B                     	;# 
  2038  061C                     	;# 
  2039  061C                     	;# 
  2040  061F                     	;# 
  2041  0691                     	;# 
  2042  0692                     	;# 
  2043  0693                     	;# 
  2044  0694                     	;# 
  2045  0695                     	;# 
  2046  0696                     	;# 
  2047  0697                     	;# 
  2048  0698                     	;# 
  2049  0699                     	;# 
  2050  0711                     	;# 
  2051  0712                     	;# 
  2052  0713                     	;# 
  2053  0714                     	;# 
  2054  0715                     	;# 
  2055  0716                     	;# 
  2056  0717                     	;# 
  2057  0718                     	;# 
  2058  0719                     	;# 
  2059  0891                     	;# 
  2060  0891                     	;# 
  2061  0891                     	;# 
  2062  0891                     	;# 
  2063  0891                     	;# 
  2064  0891                     	;# 
  2065  0892                     	;# 
  2066  0892                     	;# 
  2067  0892                     	;# 
  2068  0893                     	;# 
  2069  0893                     	;# 
  2070  0893                     	;# 
  2071  0893                     	;# 
  2072  0893                     	;# 
  2073  0893                     	;# 
  2074  0894                     	;# 
  2075  0894                     	;# 
  2076  0894                     	;# 
  2077  0895                     	;# 
  2078  0895                     	;# 
  2079  0895                     	;# 
  2080  0896                     	;# 
  2081  0896                     	;# 
  2082  0896                     	;# 
  2083  089B                     	;# 
  2084  0911                     	;# 
  2085  0912                     	;# 
  2086  0913                     	;# 
  2087  0914                     	;# 
  2088  0915                     	;# 
  2089  0916                     	;# 
  2090  0918                     	;# 
  2091  0919                     	;# 
  2092  091A                     	;# 
  2093  091B                     	;# 
  2094  091C                     	;# 
  2095  091D                     	;# 
  2096  091E                     	;# 
  2097  091F                     	;# 
  2098  0E0F                     	;# 
  2099  0E10                     	;# 
  2100  0E11                     	;# 
  2101  0E12                     	;# 
  2102  0E13                     	;# 
  2103  0E14                     	;# 
  2104  0E15                     	;# 
  2105  0E16                     	;# 
  2106  0E17                     	;# 
  2107  0E18                     	;# 
  2108  0E19                     	;# 
  2109  0E1A                     	;# 
  2110  0E1B                     	;# 
  2111  0E1C                     	;# 
  2112  0E20                     	;# 
  2113  0E21                     	;# 
  2114  0E22                     	;# 
  2115  0E24                     	;# 
  2116  0E25                     	;# 
  2117  0E28                     	;# 
  2118  0E29                     	;# 
  2119  0E2A                     	;# 
  2120  0E2B                     	;# 
  2121  0E2C                     	;# 
  2122  0E2D                     	;# 
  2123  0E2E                     	;# 
  2124  0E2F                     	;# 
  2125  0E90                     	;# 
  2126  0E91                     	;# 
  2127  0E92                     	;# 
  2128  0E94                     	;# 
  2129  0E95                     	;# 
  2130  0E9C                     	;# 
  2131  0E9D                     	;# 
  2132  0E9E                     	;# 
  2133  0E9F                     	;# 
  2134  0EA0                     	;# 
  2135  0EA1                     	;# 
  2136  0EA2                     	;# 
  2137  0EA3                     	;# 
  2138  0EA4                     	;# 
  2139  0EA5                     	;# 
  2140  0EA6                     	;# 
  2141  0EA7                     	;# 
  2142  0F0F                     	;# 
  2143  0F10                     	;# 
  2144  0F11                     	;# 
  2145  0F12                     	;# 
  2146  0F13                     	;# 
  2147  0F14                     	;# 
  2148  0F15                     	;# 
  2149  0F16                     	;# 
  2150  0F17                     	;# 
  2151  0F18                     	;# 
  2152  0F19                     	;# 
  2153  0F1A                     	;# 
  2154  0F1B                     	;# 
  2155  0F1C                     	;# 
  2156  0F1D                     	;# 
  2157  0F1E                     	;# 
  2158  0F1F                     	;# 
  2159  0F20                     	;# 
  2160  0F21                     	;# 
  2161  0F22                     	;# 
  2162  0F23                     	;# 
  2163  0F24                     	;# 
  2164  0F25                     	;# 
  2165  0F26                     	;# 
  2166  0F27                     	;# 
  2167  0F28                     	;# 
  2168  0F29                     	;# 
  2169  0F2A                     	;# 
  2170  0F2B                     	;# 
  2171  0F2C                     	;# 
  2172  0F2D                     	;# 
  2173  0F2E                     	;# 
  2174  0F2F                     	;# 
  2175  0F30                     	;# 
  2176  0F31                     	;# 
  2177  0F32                     	;# 
  2178  0F33                     	;# 
  2179  0F34                     	;# 
  2180  0F35                     	;# 
  2181  0F36                     	;# 
  2182  0F37                     	;# 
  2183  0FE4                     	;# 
  2184  0FE5                     	;# 
  2185  0FE6                     	;# 
  2186  0FE7                     	;# 
  2187  0FE8                     	;# 
  2188  0FE9                     	;# 
  2189  0FEA                     	;# 
  2190  0FEB                     	;# 
  2191  0FED                     	;# 
  2192  0FEE                     	;# 
  2193  0FEF                     	;# 
  2194  0000                     	;# 
  2195  0001                     	;# 
  2196  0002                     	;# 
  2197  0003                     	;# 
  2198  0004                     	;# 
  2199  0005                     	;# 
  2200  0006                     	;# 
  2201  0007                     	;# 
  2202  0008                     	;# 
  2203  0009                     	;# 
  2204  000A                     	;# 
  2205  000B                     	;# 
  2206  000C                     	;# 
  2207  000D                     	;# 
  2208  000E                     	;# 
  2209  0010                     	;# 
  2210  0011                     	;# 
  2211  0012                     	;# 
  2212  0013                     	;# 
  2213  0014                     	;# 
  2214  0015                     	;# 
  2215  0015                     	;# 
  2216  0016                     	;# 
  2217  0016                     	;# 
  2218  0017                     	;# 
  2219  0018                     	;# 
  2220  0019                     	;# 
  2221  0019                     	;# 
  2222  001A                     	;# 
  2223  001B                     	;# 
  2224  001C                     	;# 
  2225  001D                     	;# 
  2226  001E                     	;# 
  2227  001F                     	;# 
  2228  008C                     	;# 
  2229  008D                     	;# 
  2230  008E                     	;# 
  2231  0090                     	;# 
  2232  0091                     	;# 
  2233  0092                     	;# 
  2234  0093                     	;# 
  2235  0094                     	;# 
  2236  0097                     	;# 
  2237  009B                     	;# 
  2238  009B                     	;# 
  2239  009C                     	;# 
  2240  009D                     	;# 
  2241  009E                     	;# 
  2242  009F                     	;# 
  2243  010C                     	;# 
  2244  010D                     	;# 
  2245  010E                     	;# 
  2246  0111                     	;# 
  2247  0112                     	;# 
  2248  0113                     	;# 
  2249  0114                     	;# 
  2250  0115                     	;# 
  2251  0116                     	;# 
  2252  0117                     	;# 
  2253  0118                     	;# 
  2254  0119                     	;# 
  2255  018C                     	;# 
  2256  018D                     	;# 
  2257  018E                     	;# 
  2258  0197                     	;# 
  2259  0199                     	;# 
  2260  0199                     	;# 
  2261  0199                     	;# 
  2262  019A                     	;# 
  2263  019A                     	;# 
  2264  019A                     	;# 
  2265  019B                     	;# 
  2266  019B                     	;# 
  2267  019B                     	;# 
  2268  019B                     	;# 
  2269  019B                     	;# 
  2270  019C                     	;# 
  2271  019C                     	;# 
  2272  019C                     	;# 
  2273  019D                     	;# 
  2274  019D                     	;# 
  2275  019D                     	;# 
  2276  019E                     	;# 
  2277  019E                     	;# 
  2278  019E                     	;# 
  2279  019F                     	;# 
  2280  019F                     	;# 
  2281  019F                     	;# 
  2282  019F                     	;# 
  2283  019F                     	;# 
  2284  020C                     	;# 
  2285  020D                     	;# 
  2286  020E                     	;# 
  2287  0211                     	;# 
  2288  0211                     	;# 
  2289  0212                     	;# 
  2290  0212                     	;# 
  2291  0213                     	;# 
  2292  0213                     	;# 
  2293  0214                     	;# 
  2294  0214                     	;# 
  2295  0215                     	;# 
  2296  0215                     	;# 
  2297  0215                     	;# 
  2298  0215                     	;# 
  2299  0216                     	;# 
  2300  0216                     	;# 
  2301  0217                     	;# 
  2302  0217                     	;# 
  2303  028C                     	;# 
  2304  028D                     	;# 
  2305  028E                     	;# 
  2306  0291                     	;# 
  2307  0291                     	;# 
  2308  0292                     	;# 
  2309  0293                     	;# 
  2310  0294                     	;# 
  2311  0295                     	;# 
  2312  0295                     	;# 
  2313  0296                     	;# 
  2314  0297                     	;# 
  2315  0298                     	;# 
  2316  029F                     	;# 
  2317  030C                     	;# 
  2318  030D                     	;# 
  2319  030E                     	;# 
  2320  0311                     	;# 
  2321  0311                     	;# 
  2322  0312                     	;# 
  2323  0313                     	;# 
  2324  0314                     	;# 
  2325  0315                     	;# 
  2326  0315                     	;# 
  2327  0316                     	;# 
  2328  0317                     	;# 
  2329  0318                     	;# 
  2330  038C                     	;# 
  2331  038D                     	;# 
  2332  038E                     	;# 
  2333  0391                     	;# 
  2334  0392                     	;# 
  2335  0393                     	;# 
  2336  0394                     	;# 
  2337  0395                     	;# 
  2338  0396                     	;# 
  2339  0397                     	;# 
  2340  0398                     	;# 
  2341  0399                     	;# 
  2342  039A                     	;# 
  2343  039C                     	;# 
  2344  039D                     	;# 
  2345  039E                     	;# 
  2346  039F                     	;# 
  2347  0411                     	;# 
  2348  0411                     	;# 
  2349  0412                     	;# 
  2350  0413                     	;# 
  2351  0414                     	;# 
  2352  0415                     	;# 
  2353  0416                     	;# 
  2354  0417                     	;# 
  2355  0418                     	;# 
  2356  0418                     	;# 
  2357  0419                     	;# 
  2358  041A                     	;# 
  2359  041B                     	;# 
  2360  041C                     	;# 
  2361  041D                     	;# 
  2362  041E                     	;# 
  2363  041F                     	;# 
  2364  0498                     	;# 
  2365  0498                     	;# 
  2366  0499                     	;# 
  2367  049A                     	;# 
  2368  049B                     	;# 
  2369  049B                     	;# 
  2370  049C                     	;# 
  2371  049D                     	;# 
  2372  049E                     	;# 
  2373  049F                     	;# 
  2374  0617                     	;# 
  2375  0618                     	;# 
  2376  0619                     	;# 
  2377  0619                     	;# 
  2378  061A                     	;# 
  2379  061B                     	;# 
  2380  061C                     	;# 
  2381  061C                     	;# 
  2382  061F                     	;# 
  2383  0691                     	;# 
  2384  0692                     	;# 
  2385  0693                     	;# 
  2386  0694                     	;# 
  2387  0695                     	;# 
  2388  0696                     	;# 
  2389  0697                     	;# 
  2390  0698                     	;# 
  2391  0699                     	;# 
  2392  0711                     	;# 
  2393  0712                     	;# 
  2394  0713                     	;# 
  2395  0714                     	;# 
  2396  0715                     	;# 
  2397  0716                     	;# 
  2398  0717                     	;# 
  2399  0718                     	;# 
  2400  0719                     	;# 
  2401  0891                     	;# 
  2402  0891                     	;# 
  2403  0891                     	;# 
  2404  0891                     	;# 
  2405  0891                     	;# 
  2406  0891                     	;# 
  2407  0892                     	;# 
  2408  0892                     	;# 
  2409  0892                     	;# 
  2410  0893                     	;# 
  2411  0893                     	;# 
  2412  0893                     	;# 
  2413  0893                     	;# 
  2414  0893                     	;# 
  2415  0893                     	;# 
  2416  0894                     	;# 
  2417  0894                     	;# 
  2418  0894                     	;# 
  2419  0895                     	;# 
  2420  0895                     	;# 
  2421  0895                     	;# 
  2422  0896                     	;# 
  2423  0896                     	;# 
  2424  0896                     	;# 
  2425  089B                     	;# 
  2426  0911                     	;# 
  2427  0912                     	;# 
  2428  0913                     	;# 
  2429  0914                     	;# 
  2430  0915                     	;# 
  2431  0916                     	;# 
  2432  0918                     	;# 
  2433  0919                     	;# 
  2434  091A                     	;# 
  2435  091B                     	;# 
  2436  091C                     	;# 
  2437  091D                     	;# 
  2438  091E                     	;# 
  2439  091F                     	;# 
  2440  0E0F                     	;# 
  2441  0E10                     	;# 
  2442  0E11                     	;# 
  2443  0E12                     	;# 
  2444  0E13                     	;# 
  2445  0E14                     	;# 
  2446  0E15                     	;# 
  2447  0E16                     	;# 
  2448  0E17                     	;# 
  2449  0E18                     	;# 
  2450  0E19                     	;# 
  2451  0E1A                     	;# 
  2452  0E1B                     	;# 
  2453  0E1C                     	;# 
  2454  0E20                     	;# 
  2455  0E21                     	;# 
  2456  0E22                     	;# 
  2457  0E24                     	;# 
  2458  0E25                     	;# 
  2459  0E28                     	;# 
  2460  0E29                     	;# 
  2461  0E2A                     	;# 
  2462  0E2B                     	;# 
  2463  0E2C                     	;# 
  2464  0E2D                     	;# 
  2465  0E2E                     	;# 
  2466  0E2F                     	;# 
  2467  0E90                     	;# 
  2468  0E91                     	;# 
  2469  0E92                     	;# 
  2470  0E94                     	;# 
  2471  0E95                     	;# 
  2472  0E9C                     	;# 
  2473  0E9D                     	;# 
  2474  0E9E                     	;# 
  2475  0E9F                     	;# 
  2476  0EA0                     	;# 
  2477  0EA1                     	;# 
  2478  0EA2                     	;# 
  2479  0EA3                     	;# 
  2480  0EA4                     	;# 
  2481  0EA5                     	;# 
  2482  0EA6                     	;# 
  2483  0EA7                     	;# 
  2484  0F0F                     	;# 
  2485  0F10                     	;# 
  2486  0F11                     	;# 
  2487  0F12                     	;# 
  2488  0F13                     	;# 
  2489  0F14                     	;# 
  2490  0F15                     	;# 
  2491  0F16                     	;# 
  2492  0F17                     	;# 
  2493  0F18                     	;# 
  2494  0F19                     	;# 
  2495  0F1A                     	;# 
  2496  0F1B                     	;# 
  2497  0F1C                     	;# 
  2498  0F1D                     	;# 
  2499  0F1E                     	;# 
  2500  0F1F                     	;# 
  2501  0F20                     	;# 
  2502  0F21                     	;# 
  2503  0F22                     	;# 
  2504  0F23                     	;# 
  2505  0F24                     	;# 
  2506  0F25                     	;# 
  2507  0F26                     	;# 
  2508  0F27                     	;# 
  2509  0F28                     	;# 
  2510  0F29                     	;# 
  2511  0F2A                     	;# 
  2512  0F2B                     	;# 
  2513  0F2C                     	;# 
  2514  0F2D                     	;# 
  2515  0F2E                     	;# 
  2516  0F2F                     	;# 
  2517  0F30                     	;# 
  2518  0F31                     	;# 
  2519  0F32                     	;# 
  2520  0F33                     	;# 
  2521  0F34                     	;# 
  2522  0F35                     	;# 
  2523  0F36                     	;# 
  2524  0F37                     	;# 
  2525  0FE4                     	;# 
  2526  0FE5                     	;# 
  2527  0FE6                     	;# 
  2528  0FE7                     	;# 
  2529  0FE8                     	;# 
  2530  0FE9                     	;# 
  2531  0FEA                     	;# 
  2532  0FEB                     	;# 
  2533  0FED                     	;# 
  2534  0FEE                     	;# 
  2535  0FEF                     	;# 
  2536  0000                     	;# 
  2537  0001                     	;# 
  2538  0002                     	;# 
  2539  0003                     	;# 
  2540  0004                     	;# 
  2541  0005                     	;# 
  2542  0006                     	;# 
  2543  0007                     	;# 
  2544  0008                     	;# 
  2545  0009                     	;# 
  2546  000A                     	;# 
  2547  000B                     	;# 
  2548  000C                     	;# 
  2549  000D                     	;# 
  2550  000E                     	;# 
  2551  0010                     	;# 
  2552  0011                     	;# 
  2553  0012                     	;# 
  2554  0013                     	;# 
  2555  0014                     	;# 
  2556  0015                     	;# 
  2557  0015                     	;# 
  2558  0016                     	;# 
  2559  0016                     	;# 
  2560  0017                     	;# 
  2561  0018                     	;# 
  2562  0019                     	;# 
  2563  0019                     	;# 
  2564  001A                     	;# 
  2565  001B                     	;# 
  2566  001C                     	;# 
  2567  001D                     	;# 
  2568  001E                     	;# 
  2569  001F                     	;# 
  2570  008C                     	;# 
  2571  008D                     	;# 
  2572  008E                     	;# 
  2573  0090                     	;# 
  2574  0091                     	;# 
  2575  0092                     	;# 
  2576  0093                     	;# 
  2577  0094                     	;# 
  2578  0097                     	;# 
  2579  009B                     	;# 
  2580  009B                     	;# 
  2581  009C                     	;# 
  2582  009D                     	;# 
  2583  009E                     	;# 
  2584  009F                     	;# 
  2585  010C                     	;# 
  2586  010D                     	;# 
  2587  010E                     	;# 
  2588  0111                     	;# 
  2589  0112                     	;# 
  2590  0113                     	;# 
  2591  0114                     	;# 
  2592  0115                     	;# 
  2593  0116                     	;# 
  2594  0117                     	;# 
  2595  0118                     	;# 
  2596  0119                     	;# 
  2597  018C                     	;# 
  2598  018D                     	;# 
  2599  018E                     	;# 
  2600  0197                     	;# 
  2601  0199                     	;# 
  2602  0199                     	;# 
  2603  0199                     	;# 
  2604  019A                     	;# 
  2605  019A                     	;# 
  2606  019A                     	;# 
  2607  019B                     	;# 
  2608  019B                     	;# 
  2609  019B                     	;# 
  2610  019B                     	;# 
  2611  019B                     	;# 
  2612  019C                     	;# 
  2613  019C                     	;# 
  2614  019C                     	;# 
  2615  019D                     	;# 
  2616  019D                     	;# 
  2617  019D                     	;# 
  2618  019E                     	;# 
  2619  019E                     	;# 
  2620  019E                     	;# 
  2621  019F                     	;# 
  2622  019F                     	;# 
  2623  019F                     	;# 
  2624  019F                     	;# 
  2625  019F                     	;# 
  2626  020C                     	;# 
  2627  020D                     	;# 
  2628  020E                     	;# 
  2629  0211                     	;# 
  2630  0211                     	;# 
  2631  0212                     	;# 
  2632  0212                     	;# 
  2633  0213                     	;# 
  2634  0213                     	;# 
  2635  0214                     	;# 
  2636  0214                     	;# 
  2637  0215                     	;# 
  2638  0215                     	;# 
  2639  0215                     	;# 
  2640  0215                     	;# 
  2641  0216                     	;# 
  2642  0216                     	;# 
  2643  0217                     	;# 
  2644  0217                     	;# 
  2645  028C                     	;# 
  2646  028D                     	;# 
  2647  028E                     	;# 
  2648  0291                     	;# 
  2649  0291                     	;# 
  2650  0292                     	;# 
  2651  0293                     	;# 
  2652  0294                     	;# 
  2653  0295                     	;# 
  2654  0295                     	;# 
  2655  0296                     	;# 
  2656  0297                     	;# 
  2657  0298                     	;# 
  2658  029F                     	;# 
  2659  030C                     	;# 
  2660  030D                     	;# 
  2661  030E                     	;# 
  2662  0311                     	;# 
  2663  0311                     	;# 
  2664  0312                     	;# 
  2665  0313                     	;# 
  2666  0314                     	;# 
  2667  0315                     	;# 
  2668  0315                     	;# 
  2669  0316                     	;# 
  2670  0317                     	;# 
  2671  0318                     	;# 
  2672  038C                     	;# 
  2673  038D                     	;# 
  2674  038E                     	;# 
  2675  0391                     	;# 
  2676  0392                     	;# 
  2677  0393                     	;# 
  2678  0394                     	;# 
  2679  0395                     	;# 
  2680  0396                     	;# 
  2681  0397                     	;# 
  2682  0398                     	;# 
  2683  0399                     	;# 
  2684  039A                     	;# 
  2685  039C                     	;# 
  2686  039D                     	;# 
  2687  039E                     	;# 
  2688  039F                     	;# 
  2689  0411                     	;# 
  2690  0411                     	;# 
  2691  0412                     	;# 
  2692  0413                     	;# 
  2693  0414                     	;# 
  2694  0415                     	;# 
  2695  0416                     	;# 
  2696  0417                     	;# 
  2697  0418                     	;# 
  2698  0418                     	;# 
  2699  0419                     	;# 
  2700  041A                     	;# 
  2701  041B                     	;# 
  2702  041C                     	;# 
  2703  041D                     	;# 
  2704  041E                     	;# 
  2705  041F                     	;# 
  2706  0498                     	;# 
  2707  0498                     	;# 
  2708  0499                     	;# 
  2709  049A                     	;# 
  2710  049B                     	;# 
  2711  049B                     	;# 
  2712  049C                     	;# 
  2713  049D                     	;# 
  2714  049E                     	;# 
  2715  049F                     	;# 
  2716  0617                     	;# 
  2717  0618                     	;# 
  2718  0619                     	;# 
  2719  0619                     	;# 
  2720  061A                     	;# 
  2721  061B                     	;# 
  2722  061C                     	;# 
  2723  061C                     	;# 
  2724  061F                     	;# 
  2725  0691                     	;# 
  2726  0692                     	;# 
  2727  0693                     	;# 
  2728  0694                     	;# 
  2729  0695                     	;# 
  2730  0696                     	;# 
  2731  0697                     	;# 
  2732  0698                     	;# 
  2733  0699                     	;# 
  2734  0711                     	;# 
  2735  0712                     	;# 
  2736  0713                     	;# 
  2737  0714                     	;# 
  2738  0715                     	;# 
  2739  0716                     	;# 
  2740  0717                     	;# 
  2741  0718                     	;# 
  2742  0719                     	;# 
  2743  0891                     	;# 
  2744  0891                     	;# 
  2745  0891                     	;# 
  2746  0891                     	;# 
  2747  0891                     	;# 
  2748  0891                     	;# 
  2749  0892                     	;# 
  2750  0892                     	;# 
  2751  0892                     	;# 
  2752  0893                     	;# 
  2753  0893                     	;# 
  2754  0893                     	;# 
  2755  0893                     	;# 
  2756  0893                     	;# 
  2757  0893                     	;# 
  2758  0894                     	;# 
  2759  0894                     	;# 
  2760  0894                     	;# 
  2761  0895                     	;# 
  2762  0895                     	;# 
  2763  0895                     	;# 
  2764  0896                     	;# 
  2765  0896                     	;# 
  2766  0896                     	;# 
  2767  089B                     	;# 
  2768  0911                     	;# 
  2769  0912                     	;# 
  2770  0913                     	;# 
  2771  0914                     	;# 
  2772  0915                     	;# 
  2773  0916                     	;# 
  2774  0918                     	;# 
  2775  0919                     	;# 
  2776  091A                     	;# 
  2777  091B                     	;# 
  2778  091C                     	;# 
  2779  091D                     	;# 
  2780  091E                     	;# 
  2781  091F                     	;# 
  2782  0E0F                     	;# 
  2783  0E10                     	;# 
  2784  0E11                     	;# 
  2785  0E12                     	;# 
  2786  0E13                     	;# 
  2787  0E14                     	;# 
  2788  0E15                     	;# 
  2789  0E16                     	;# 
  2790  0E17                     	;# 
  2791  0E18                     	;# 
  2792  0E19                     	;# 
  2793  0E1A                     	;# 
  2794  0E1B                     	;# 
  2795  0E1C                     	;# 
  2796  0E20                     	;# 
  2797  0E21                     	;# 
  2798  0E22                     	;# 
  2799  0E24                     	;# 
  2800  0E25                     	;# 
  2801  0E28                     	;# 
  2802  0E29                     	;# 
  2803  0E2A                     	;# 
  2804  0E2B                     	;# 
  2805  0E2C                     	;# 
  2806  0E2D                     	;# 
  2807  0E2E                     	;# 
  2808  0E2F                     	;# 
  2809  0E90                     	;# 
  2810  0E91                     	;# 
  2811  0E92                     	;# 
  2812  0E94                     	;# 
  2813  0E95                     	;# 
  2814  0E9C                     	;# 
  2815  0E9D                     	;# 
  2816  0E9E                     	;# 
  2817  0E9F                     	;# 
  2818  0EA0                     	;# 
  2819  0EA1                     	;# 
  2820  0EA2                     	;# 
  2821  0EA3                     	;# 
  2822  0EA4                     	;# 
  2823  0EA5                     	;# 
  2824  0EA6                     	;# 
  2825  0EA7                     	;# 
  2826  0F0F                     	;# 
  2827  0F10                     	;# 
  2828  0F11                     	;# 
  2829  0F12                     	;# 
  2830  0F13                     	;# 
  2831  0F14                     	;# 
  2832  0F15                     	;# 
  2833  0F16                     	;# 
  2834  0F17                     	;# 
  2835  0F18                     	;# 
  2836  0F19                     	;# 
  2837  0F1A                     	;# 
  2838  0F1B                     	;# 
  2839  0F1C                     	;# 
  2840  0F1D                     	;# 
  2841  0F1E                     	;# 
  2842  0F1F                     	;# 
  2843  0F20                     	;# 
  2844  0F21                     	;# 
  2845  0F22                     	;# 
  2846  0F23                     	;# 
  2847  0F24                     	;# 
  2848  0F25                     	;# 
  2849  0F26                     	;# 
  2850  0F27                     	;# 
  2851  0F28                     	;# 
  2852  0F29                     	;# 
  2853  0F2A                     	;# 
  2854  0F2B                     	;# 
  2855  0F2C                     	;# 
  2856  0F2D                     	;# 
  2857  0F2E                     	;# 
  2858  0F2F                     	;# 
  2859  0F30                     	;# 
  2860  0F31                     	;# 
  2861  0F32                     	;# 
  2862  0F33                     	;# 
  2863  0F34                     	;# 
  2864  0F35                     	;# 
  2865  0F36                     	;# 
  2866  0F37                     	;# 
  2867  0FE4                     	;# 
  2868  0FE5                     	;# 
  2869  0FE6                     	;# 
  2870  0FE7                     	;# 
  2871  0FE8                     	;# 
  2872  0FE9                     	;# 
  2873  0FEA                     	;# 
  2874  0FEB                     	;# 
  2875  0FED                     	;# 
  2876  0FEE                     	;# 
  2877  0FEF                     	;# 
  2878  0000                     	;# 
  2879  0001                     	;# 
  2880  0002                     	;# 
  2881  0003                     	;# 
  2882  0004                     	;# 
  2883  0005                     	;# 
  2884  0006                     	;# 
  2885  0007                     	;# 
  2886  0008                     	;# 
  2887  0009                     	;# 
  2888  000A                     	;# 
  2889  000B                     	;# 
  2890  000C                     	;# 
  2891  000D                     	;# 
  2892  000E                     	;# 
  2893  0010                     	;# 
  2894  0011                     	;# 
  2895  0012                     	;# 
  2896  0013                     	;# 
  2897  0014                     	;# 
  2898  0015                     	;# 
  2899  0015                     	;# 
  2900  0016                     	;# 
  2901  0016                     	;# 
  2902  0017                     	;# 
  2903  0018                     	;# 
  2904  0019                     	;# 
  2905  0019                     	;# 
  2906  001A                     	;# 
  2907  001B                     	;# 
  2908  001C                     	;# 
  2909  001D                     	;# 
  2910  001E                     	;# 
  2911  001F                     	;# 
  2912  008C                     	;# 
  2913  008D                     	;# 
  2914  008E                     	;# 
  2915  0090                     	;# 
  2916  0091                     	;# 
  2917  0092                     	;# 
  2918  0093                     	;# 
  2919  0094                     	;# 
  2920  0097                     	;# 
  2921  009B                     	;# 
  2922  009B                     	;# 
  2923  009C                     	;# 
  2924  009D                     	;# 
  2925  009E                     	;# 
  2926  009F                     	;# 
  2927  010C                     	;# 
  2928  010D                     	;# 
  2929  010E                     	;# 
  2930  0111                     	;# 
  2931  0112                     	;# 
  2932  0113                     	;# 
  2933  0114                     	;# 
  2934  0115                     	;# 
  2935  0116                     	;# 
  2936  0117                     	;# 
  2937  0118                     	;# 
  2938  0119                     	;# 
  2939  018C                     	;# 
  2940  018D                     	;# 
  2941  018E                     	;# 
  2942  0197                     	;# 
  2943  0199                     	;# 
  2944  0199                     	;# 
  2945  0199                     	;# 
  2946  019A                     	;# 
  2947  019A                     	;# 
  2948  019A                     	;# 
  2949  019B                     	;# 
  2950  019B                     	;# 
  2951  019B                     	;# 
  2952  019B                     	;# 
  2953  019B                     	;# 
  2954  019C                     	;# 
  2955  019C                     	;# 
  2956  019C                     	;# 
  2957  019D                     	;# 
  2958  019D                     	;# 
  2959  019D                     	;# 
  2960  019E                     	;# 
  2961  019E                     	;# 
  2962  019E                     	;# 
  2963  019F                     	;# 
  2964  019F                     	;# 
  2965  019F                     	;# 
  2966  019F                     	;# 
  2967  019F                     	;# 
  2968  020C                     	;# 
  2969  020D                     	;# 
  2970  020E                     	;# 
  2971  0211                     	;# 
  2972  0211                     	;# 
  2973  0212                     	;# 
  2974  0212                     	;# 
  2975  0213                     	;# 
  2976  0213                     	;# 
  2977  0214                     	;# 
  2978  0214                     	;# 
  2979  0215                     	;# 
  2980  0215                     	;# 
  2981  0215                     	;# 
  2982  0215                     	;# 
  2983  0216                     	;# 
  2984  0216                     	;# 
  2985  0217                     	;# 
  2986  0217                     	;# 
  2987  028C                     	;# 
  2988  028D                     	;# 
  2989  028E                     	;# 
  2990  0291                     	;# 
  2991  0291                     	;# 
  2992  0292                     	;# 
  2993  0293                     	;# 
  2994  0294                     	;# 
  2995  0295                     	;# 
  2996  0295                     	;# 
  2997  0296                     	;# 
  2998  0297                     	;# 
  2999  0298                     	;# 
  3000  029F                     	;# 
  3001  030C                     	;# 
  3002  030D                     	;# 
  3003  030E                     	;# 
  3004  0311                     	;# 
  3005  0311                     	;# 
  3006  0312                     	;# 
  3007  0313                     	;# 
  3008  0314                     	;# 
  3009  0315                     	;# 
  3010  0315                     	;# 
  3011  0316                     	;# 
  3012  0317                     	;# 
  3013  0318                     	;# 
  3014  038C                     	;# 
  3015  038D                     	;# 
  3016  038E                     	;# 
  3017  0391                     	;# 
  3018  0392                     	;# 
  3019  0393                     	;# 
  3020  0394                     	;# 
  3021  0395                     	;# 
  3022  0396                     	;# 
  3023  0397                     	;# 
  3024  0398                     	;# 
  3025  0399                     	;# 
  3026  039A                     	;# 
  3027  039C                     	;# 
  3028  039D                     	;# 
  3029  039E                     	;# 
  3030  039F                     	;# 
  3031  0411                     	;# 
  3032  0411                     	;# 
  3033  0412                     	;# 
  3034  0413                     	;# 
  3035  0414                     	;# 
  3036  0415                     	;# 
  3037  0416                     	;# 
  3038  0417                     	;# 
  3039  0418                     	;# 
  3040  0418                     	;# 
  3041  0419                     	;# 
  3042  041A                     	;# 
  3043  041B                     	;# 
  3044  041C                     	;# 
  3045  041D                     	;# 
  3046  041E                     	;# 
  3047  041F                     	;# 
  3048  0498                     	;# 
  3049  0498                     	;# 
  3050  0499                     	;# 
  3051  049A                     	;# 
  3052  049B                     	;# 
  3053  049B                     	;# 
  3054  049C                     	;# 
  3055  049D                     	;# 
  3056  049E                     	;# 
  3057  049F                     	;# 
  3058  0617                     	;# 
  3059  0618                     	;# 
  3060  0619                     	;# 
  3061  0619                     	;# 
  3062  061A                     	;# 
  3063  061B                     	;# 
  3064  061C                     	;# 
  3065  061C                     	;# 
  3066  061F                     	;# 
  3067  0691                     	;# 
  3068  0692                     	;# 
  3069  0693                     	;# 
  3070  0694                     	;# 
  3071  0695                     	;# 
  3072  0696                     	;# 
  3073  0697                     	;# 
  3074  0698                     	;# 
  3075  0699                     	;# 
  3076  0711                     	;# 
  3077  0712                     	;# 
  3078  0713                     	;# 
  3079  0714                     	;# 
  3080  0715                     	;# 
  3081  0716                     	;# 
  3082  0717                     	;# 
  3083  0718                     	;# 
  3084  0719                     	;# 
  3085  0891                     	;# 
  3086  0891                     	;# 
  3087  0891                     	;# 
  3088  0891                     	;# 
  3089  0891                     	;# 
  3090  0891                     	;# 
  3091  0892                     	;# 
  3092  0892                     	;# 
  3093  0892                     	;# 
  3094  0893                     	;# 
  3095  0893                     	;# 
  3096  0893                     	;# 
  3097  0893                     	;# 
  3098  0893                     	;# 
  3099  0893                     	;# 
  3100  0894                     	;# 
  3101  0894                     	;# 
  3102  0894                     	;# 
  3103  0895                     	;# 
  3104  0895                     	;# 
  3105  0895                     	;# 
  3106  0896                     	;# 
  3107  0896                     	;# 
  3108  0896                     	;# 
  3109  089B                     	;# 
  3110  0911                     	;# 
  3111  0912                     	;# 
  3112  0913                     	;# 
  3113  0914                     	;# 
  3114  0915                     	;# 
  3115  0916                     	;# 
  3116  0918                     	;# 
  3117  0919                     	;# 
  3118  091A                     	;# 
  3119  091B                     	;# 
  3120  091C                     	;# 
  3121  091D                     	;# 
  3122  091E                     	;# 
  3123  091F                     	;# 
  3124  0E0F                     	;# 
  3125  0E10                     	;# 
  3126  0E11                     	;# 
  3127  0E12                     	;# 
  3128  0E13                     	;# 
  3129  0E14                     	;# 
  3130  0E15                     	;# 
  3131  0E16                     	;# 
  3132  0E17                     	;# 
  3133  0E18                     	;# 
  3134  0E19                     	;# 
  3135  0E1A                     	;# 
  3136  0E1B                     	;# 
  3137  0E1C                     	;# 
  3138  0E20                     	;# 
  3139  0E21                     	;# 
  3140  0E22                     	;# 
  3141  0E24                     	;# 
  3142  0E25                     	;# 
  3143  0E28                     	;# 
  3144  0E29                     	;# 
  3145  0E2A                     	;# 
  3146  0E2B                     	;# 
  3147  0E2C                     	;# 
  3148  0E2D                     	;# 
  3149  0E2E                     	;# 
  3150  0E2F                     	;# 
  3151  0E90                     	;# 
  3152  0E91                     	;# 
  3153  0E92                     	;# 
  3154  0E94                     	;# 
  3155  0E95                     	;# 
  3156  0E9C                     	;# 
  3157  0E9D                     	;# 
  3158  0E9E                     	;# 
  3159  0E9F                     	;# 
  3160  0EA0                     	;# 
  3161  0EA1                     	;# 
  3162  0EA2                     	;# 
  3163  0EA3                     	;# 
  3164  0EA4                     	;# 
  3165  0EA5                     	;# 
  3166  0EA6                     	;# 
  3167  0EA7                     	;# 
  3168  0F0F                     	;# 
  3169  0F10                     	;# 
  3170  0F11                     	;# 
  3171  0F12                     	;# 
  3172  0F13                     	;# 
  3173  0F14                     	;# 
  3174  0F15                     	;# 
  3175  0F16                     	;# 
  3176  0F17                     	;# 
  3177  0F18                     	;# 
  3178  0F19                     	;# 
  3179  0F1A                     	;# 
  3180  0F1B                     	;# 
  3181  0F1C                     	;# 
  3182  0F1D                     	;# 
  3183  0F1E                     	;# 
  3184  0F1F                     	;# 
  3185  0F20                     	;# 
  3186  0F21                     	;# 
  3187  0F22                     	;# 
  3188  0F23                     	;# 
  3189  0F24                     	;# 
  3190  0F25                     	;# 
  3191  0F26                     	;# 
  3192  0F27                     	;# 
  3193  0F28                     	;# 
  3194  0F29                     	;# 
  3195  0F2A                     	;# 
  3196  0F2B                     	;# 
  3197  0F2C                     	;# 
  3198  0F2D                     	;# 
  3199  0F2E                     	;# 
  3200  0F2F                     	;# 
  3201  0F30                     	;# 
  3202  0F31                     	;# 
  3203  0F32                     	;# 
  3204  0F33                     	;# 
  3205  0F34                     	;# 
  3206  0F35                     	;# 
  3207  0F36                     	;# 
  3208  0F37                     	;# 
  3209  0FE4                     	;# 
  3210  0FE5                     	;# 
  3211  0FE6                     	;# 
  3212  0FE7                     	;# 
  3213  0FE8                     	;# 
  3214  0FE9                     	;# 
  3215  0FEA                     	;# 
  3216  0FEB                     	;# 
  3217  0FED                     	;# 
  3218  0FEE                     	;# 
  3219  0FEF                     	;# 
  3220  0000                     	;# 
  3221  0001                     	;# 
  3222  0002                     	;# 
  3223  0003                     	;# 
  3224  0004                     	;# 
  3225  0005                     	;# 
  3226  0006                     	;# 
  3227  0007                     	;# 
  3228  0008                     	;# 
  3229  0009                     	;# 
  3230  000A                     	;# 
  3231  000B                     	;# 
  3232  000C                     	;# 
  3233  000D                     	;# 
  3234  000E                     	;# 
  3235  0010                     	;# 
  3236  0011                     	;# 
  3237  0012                     	;# 
  3238  0013                     	;# 
  3239  0014                     	;# 
  3240  0015                     	;# 
  3241  0015                     	;# 
  3242  0016                     	;# 
  3243  0016                     	;# 
  3244  0017                     	;# 
  3245  0018                     	;# 
  3246  0019                     	;# 
  3247  0019                     	;# 
  3248  001A                     	;# 
  3249  001B                     	;# 
  3250  001C                     	;# 
  3251  001D                     	;# 
  3252  001E                     	;# 
  3253  001F                     	;# 
  3254  008C                     	;# 
  3255  008D                     	;# 
  3256  008E                     	;# 
  3257  0090                     	;# 
  3258  0091                     	;# 
  3259  0092                     	;# 
  3260  0093                     	;# 
  3261  0094                     	;# 
  3262  0097                     	;# 
  3263  009B                     	;# 
  3264  009B                     	;# 
  3265  009C                     	;# 
  3266  009D                     	;# 
  3267  009E                     	;# 
  3268  009F                     	;# 
  3269  010C                     	;# 
  3270  010D                     	;# 
  3271  010E                     	;# 
  3272  0111                     	;# 
  3273  0112                     	;# 
  3274  0113                     	;# 
  3275  0114                     	;# 
  3276  0115                     	;# 
  3277  0116                     	;# 
  3278  0117                     	;# 
  3279  0118                     	;# 
  3280  0119                     	;# 
  3281  018C                     	;# 
  3282  018D                     	;# 
  3283  018E                     	;# 
  3284  0197                     	;# 
  3285  0199                     	;# 
  3286  0199                     	;# 
  3287  0199                     	;# 
  3288  019A                     	;# 
  3289  019A                     	;# 
  3290  019A                     	;# 
  3291  019B                     	;# 
  3292  019B                     	;# 
  3293  019B                     	;# 
  3294  019B                     	;# 
  3295  019B                     	;# 
  3296  019C                     	;# 
  3297  019C                     	;# 
  3298  019C                     	;# 
  3299  019D                     	;# 
  3300  019D                     	;# 
  3301  019D                     	;# 
  3302  019E                     	;# 
  3303  019E                     	;# 
  3304  019E                     	;# 
  3305  019F                     	;# 
  3306  019F                     	;# 
  3307  019F                     	;# 
  3308  019F                     	;# 
  3309  019F                     	;# 
  3310  020C                     	;# 
  3311  020D                     	;# 
  3312  020E                     	;# 
  3313  0211                     	;# 
  3314  0211                     	;# 
  3315  0212                     	;# 
  3316  0212                     	;# 
  3317  0213                     	;# 
  3318  0213                     	;# 
  3319  0214                     	;# 
  3320  0214                     	;# 
  3321  0215                     	;# 
  3322  0215                     	;# 
  3323  0215                     	;# 
  3324  0215                     	;# 
  3325  0216                     	;# 
  3326  0216                     	;# 
  3327  0217                     	;# 
  3328  0217                     	;# 
  3329  028C                     	;# 
  3330  028D                     	;# 
  3331  028E                     	;# 
  3332  0291                     	;# 
  3333  0291                     	;# 
  3334  0292                     	;# 
  3335  0293                     	;# 
  3336  0294                     	;# 
  3337  0295                     	;# 
  3338  0295                     	;# 
  3339  0296                     	;# 
  3340  0297                     	;# 
  3341  0298                     	;# 
  3342  029F                     	;# 
  3343  030C                     	;# 
  3344  030D                     	;# 
  3345  030E                     	;# 
  3346  0311                     	;# 
  3347  0311                     	;# 
  3348  0312                     	;# 
  3349  0313                     	;# 
  3350  0314                     	;# 
  3351  0315                     	;# 
  3352  0315                     	;# 
  3353  0316                     	;# 
  3354  0317                     	;# 
  3355  0318                     	;# 
  3356  038C                     	;# 
  3357  038D                     	;# 
  3358  038E                     	;# 
  3359  0391                     	;# 
  3360  0392                     	;# 
  3361  0393                     	;# 
  3362  0394                     	;# 
  3363  0395                     	;# 
  3364  0396                     	;# 
  3365  0397                     	;# 
  3366  0398                     	;# 
  3367  0399                     	;# 
  3368  039A                     	;# 
  3369  039C                     	;# 
  3370  039D                     	;# 
  3371  039E                     	;# 
  3372  039F                     	;# 
  3373  0411                     	;# 
  3374  0411                     	;# 
  3375  0412                     	;# 
  3376  0413                     	;# 
  3377  0414                     	;# 
  3378  0415                     	;# 
  3379  0416                     	;# 
  3380  0417                     	;# 
  3381  0418                     	;# 
  3382  0418                     	;# 
  3383  0419                     	;# 
  3384  041A                     	;# 
  3385  041B                     	;# 
  3386  041C                     	;# 
  3387  041D                     	;# 
  3388  041E                     	;# 
  3389  041F                     	;# 
  3390  0498                     	;# 
  3391  0498                     	;# 
  3392  0499                     	;# 
  3393  049A                     	;# 
  3394  049B                     	;# 
  3395  049B                     	;# 
  3396  049C                     	;# 
  3397  049D                     	;# 
  3398  049E                     	;# 
  3399  049F                     	;# 
  3400  0617                     	;# 
  3401  0618                     	;# 
  3402  0619                     	;# 
  3403  0619                     	;# 
  3404  061A                     	;# 
  3405  061B                     	;# 
  3406  061C                     	;# 
  3407  061C                     	;# 
  3408  061F                     	;# 
  3409  0691                     	;# 
  3410  0692                     	;# 
  3411  0693                     	;# 
  3412  0694                     	;# 
  3413  0695                     	;# 
  3414  0696                     	;# 
  3415  0697                     	;# 
  3416  0698                     	;# 
  3417  0699                     	;# 
  3418  0711                     	;# 
  3419  0712                     	;# 
  3420  0713                     	;# 
  3421  0714                     	;# 
  3422  0715                     	;# 
  3423  0716                     	;# 
  3424  0717                     	;# 
  3425  0718                     	;# 
  3426  0719                     	;# 
  3427  0891                     	;# 
  3428  0891                     	;# 
  3429  0891                     	;# 
  3430  0891                     	;# 
  3431  0891                     	;# 
  3432  0891                     	;# 
  3433  0892                     	;# 
  3434  0892                     	;# 
  3435  0892                     	;# 
  3436  0893                     	;# 
  3437  0893                     	;# 
  3438  0893                     	;# 
  3439  0893                     	;# 
  3440  0893                     	;# 
  3441  0893                     	;# 
  3442  0894                     	;# 
  3443  0894                     	;# 
  3444  0894                     	;# 
  3445  0895                     	;# 
  3446  0895                     	;# 
  3447  0895                     	;# 
  3448  0896                     	;# 
  3449  0896                     	;# 
  3450  0896                     	;# 
  3451  089B                     	;# 
  3452  0911                     	;# 
  3453  0912                     	;# 
  3454  0913                     	;# 
  3455  0914                     	;# 
  3456  0915                     	;# 
  3457  0916                     	;# 
  3458  0918                     	;# 
  3459  0919                     	;# 
  3460  091A                     	;# 
  3461  091B                     	;# 
  3462  091C                     	;# 
  3463  091D                     	;# 
  3464  091E                     	;# 
  3465  091F                     	;# 
  3466  0E0F                     	;# 
  3467  0E10                     	;# 
  3468  0E11                     	;# 
  3469  0E12                     	;# 
  3470  0E13                     	;# 
  3471  0E14                     	;# 
  3472  0E15                     	;# 
  3473  0E16                     	;# 
  3474  0E17                     	;# 
  3475  0E18                     	;# 
  3476  0E19                     	;# 
  3477  0E1A                     	;# 
  3478  0E1B                     	;# 
  3479  0E1C                     	;# 
  3480  0E20                     	;# 
  3481  0E21                     	;# 
  3482  0E22                     	;# 
  3483  0E24                     	;# 
  3484  0E25                     	;# 
  3485  0E28                     	;# 
  3486  0E29                     	;# 
  3487  0E2A                     	;# 
  3488  0E2B                     	;# 
  3489  0E2C                     	;# 
  3490  0E2D                     	;# 
  3491  0E2E                     	;# 
  3492  0E2F                     	;# 
  3493  0E90                     	;# 
  3494  0E91                     	;# 
  3495  0E92                     	;# 
  3496  0E94                     	;# 
  3497  0E95                     	;# 
  3498  0E9C                     	;# 
  3499  0E9D                     	;# 
  3500  0E9E                     	;# 
  3501  0E9F                     	;# 
  3502  0EA0                     	;# 
  3503  0EA1                     	;# 
  3504  0EA2                     	;# 
  3505  0EA3                     	;# 
  3506  0EA4                     	;# 
  3507  0EA5                     	;# 
  3508  0EA6                     	;# 
  3509  0EA7                     	;# 
  3510  0F0F                     	;# 
  3511  0F10                     	;# 
  3512  0F11                     	;# 
  3513  0F12                     	;# 
  3514  0F13                     	;# 
  3515  0F14                     	;# 
  3516  0F15                     	;# 
  3517  0F16                     	;# 
  3518  0F17                     	;# 
  3519  0F18                     	;# 
  3520  0F19                     	;# 
  3521  0F1A                     	;# 
  3522  0F1B                     	;# 
  3523  0F1C                     	;# 
  3524  0F1D                     	;# 
  3525  0F1E                     	;# 
  3526  0F1F                     	;# 
  3527  0F20                     	;# 
  3528  0F21                     	;# 
  3529  0F22                     	;# 
  3530  0F23                     	;# 
  3531  0F24                     	;# 
  3532  0F25                     	;# 
  3533  0F26                     	;# 
  3534  0F27                     	;# 
  3535  0F28                     	;# 
  3536  0F29                     	;# 
  3537  0F2A                     	;# 
  3538  0F2B                     	;# 
  3539  0F2C                     	;# 
  3540  0F2D                     	;# 
  3541  0F2E                     	;# 
  3542  0F2F                     	;# 
  3543  0F30                     	;# 
  3544  0F31                     	;# 
  3545  0F32                     	;# 
  3546  0F33                     	;# 
  3547  0F34                     	;# 
  3548  0F35                     	;# 
  3549  0F36                     	;# 
  3550  0F37                     	;# 
  3551  0FE4                     	;# 
  3552  0FE5                     	;# 
  3553  0FE6                     	;# 
  3554  0FE7                     	;# 
  3555  0FE8                     	;# 
  3556  0FE9                     	;# 
  3557  0FEA                     	;# 
  3558  0FEB                     	;# 
  3559  0FED                     	;# 
  3560  0FEE                     	;# 
  3561  0FEF                     	;# 
  3562  0000                     	;# 
  3563  0001                     	;# 
  3564  0002                     	;# 
  3565  0003                     	;# 
  3566  0004                     	;# 
  3567  0005                     	;# 
  3568  0006                     	;# 
  3569  0007                     	;# 
  3570  0008                     	;# 
  3571  0009                     	;# 
  3572  000A                     	;# 
  3573  000B                     	;# 
  3574  000C                     	;# 
  3575  000D                     	;# 
  3576  000E                     	;# 
  3577  0010                     	;# 
  3578  0011                     	;# 
  3579  0012                     	;# 
  3580  0013                     	;# 
  3581  0014                     	;# 
  3582  0015                     	;# 
  3583  0015                     	;# 
  3584  0016                     	;# 
  3585  0016                     	;# 
  3586  0017                     	;# 
  3587  0018                     	;# 
  3588  0019                     	;# 
  3589  0019                     	;# 
  3590  001A                     	;# 
  3591  001B                     	;# 
  3592  001C                     	;# 
  3593  001D                     	;# 
  3594  001E                     	;# 
  3595  001F                     	;# 
  3596  008C                     	;# 
  3597  008D                     	;# 
  3598  008E                     	;# 
  3599  0090                     	;# 
  3600  0091                     	;# 
  3601  0092                     	;# 
  3602  0093                     	;# 
  3603  0094                     	;# 
  3604  0097                     	;# 
  3605  009B                     	;# 
  3606  009B                     	;# 
  3607  009C                     	;# 
  3608  009D                     	;# 
  3609  009E                     	;# 
  3610  009F                     	;# 
  3611  010C                     	;# 
  3612  010D                     	;# 
  3613  010E                     	;# 
  3614  0111                     	;# 
  3615  0112                     	;# 
  3616  0113                     	;# 
  3617  0114                     	;# 
  3618  0115                     	;# 
  3619  0116                     	;# 
  3620  0117                     	;# 
  3621  0118                     	;# 
  3622  0119                     	;# 
  3623  018C                     	;# 
  3624  018D                     	;# 
  3625  018E                     	;# 
  3626  0197                     	;# 
  3627  0199                     	;# 
  3628  0199                     	;# 
  3629  0199                     	;# 
  3630  019A                     	;# 
  3631  019A                     	;# 
  3632  019A                     	;# 
  3633  019B                     	;# 
  3634  019B                     	;# 
  3635  019B                     	;# 
  3636  019B                     	;# 
  3637  019B                     	;# 
  3638  019C                     	;# 
  3639  019C                     	;# 
  3640  019C                     	;# 
  3641  019D                     	;# 
  3642  019D                     	;# 
  3643  019D                     	;# 
  3644  019E                     	;# 
  3645  019E                     	;# 
  3646  019E                     	;# 
  3647  019F                     	;# 
  3648  019F                     	;# 
  3649  019F                     	;# 
  3650  019F                     	;# 
  3651  019F                     	;# 
  3652  020C                     	;# 
  3653  020D                     	;# 
  3654  020E                     	;# 
  3655  0211                     	;# 
  3656  0211                     	;# 
  3657  0212                     	;# 
  3658  0212                     	;# 
  3659  0213                     	;# 
  3660  0213                     	;# 
  3661  0214                     	;# 
  3662  0214                     	;# 
  3663  0215                     	;# 
  3664  0215                     	;# 
  3665  0215                     	;# 
  3666  0215                     	;# 
  3667  0216                     	;# 
  3668  0216                     	;# 
  3669  0217                     	;# 
  3670  0217                     	;# 
  3671  028C                     	;# 
  3672  028D                     	;# 
  3673  028E                     	;# 
  3674  0291                     	;# 
  3675  0291                     	;# 
  3676  0292                     	;# 
  3677  0293                     	;# 
  3678  0294                     	;# 
  3679  0295                     	;# 
  3680  0295                     	;# 
  3681  0296                     	;# 
  3682  0297                     	;# 
  3683  0298                     	;# 
  3684  029F                     	;# 
  3685  030C                     	;# 
  3686  030D                     	;# 
  3687  030E                     	;# 
  3688  0311                     	;# 
  3689  0311                     	;# 
  3690  0312                     	;# 
  3691  0313                     	;# 
  3692  0314                     	;# 
  3693  0315                     	;# 
  3694  0315                     	;# 
  3695  0316                     	;# 
  3696  0317                     	;# 
  3697  0318                     	;# 
  3698  038C                     	;# 
  3699  038D                     	;# 
  3700  038E                     	;# 
  3701  0391                     	;# 
  3702  0392                     	;# 
  3703  0393                     	;# 
  3704  0394                     	;# 
  3705  0395                     	;# 
  3706  0396                     	;# 
  3707  0397                     	;# 
  3708  0398                     	;# 
  3709  0399                     	;# 
  3710  039A                     	;# 
  3711  039C                     	;# 
  3712  039D                     	;# 
  3713  039E                     	;# 
  3714  039F                     	;# 
  3715  0411                     	;# 
  3716  0411                     	;# 
  3717  0412                     	;# 
  3718  0413                     	;# 
  3719  0414                     	;# 
  3720  0415                     	;# 
  3721  0416                     	;# 
  3722  0417                     	;# 
  3723  0418                     	;# 
  3724  0418                     	;# 
  3725  0419                     	;# 
  3726  041A                     	;# 
  3727  041B                     	;# 
  3728  041C                     	;# 
  3729  041D                     	;# 
  3730  041E                     	;# 
  3731  041F                     	;# 
  3732  0498                     	;# 
  3733  0498                     	;# 
  3734  0499                     	;# 
  3735  049A                     	;# 
  3736  049B                     	;# 
  3737  049B                     	;# 
  3738  049C                     	;# 
  3739  049D                     	;# 
  3740  049E                     	;# 
  3741  049F                     	;# 
  3742  0617                     	;# 
  3743  0618                     	;# 
  3744  0619                     	;# 
  3745  0619                     	;# 
  3746  061A                     	;# 
  3747  061B                     	;# 
  3748  061C                     	;# 
  3749  061C                     	;# 
  3750  061F                     	;# 
  3751  0691                     	;# 
  3752  0692                     	;# 
  3753  0693                     	;# 
  3754  0694                     	;# 
  3755  0695                     	;# 
  3756  0696                     	;# 
  3757  0697                     	;# 
  3758  0698                     	;# 
  3759  0699                     	;# 
  3760  0711                     	;# 
  3761  0712                     	;# 
  3762  0713                     	;# 
  3763  0714                     	;# 
  3764  0715                     	;# 
  3765  0716                     	;# 
  3766  0717                     	;# 
  3767  0718                     	;# 
  3768  0719                     	;# 
  3769  0891                     	;# 
  3770  0891                     	;# 
  3771  0891                     	;# 
  3772  0891                     	;# 
  3773  0891                     	;# 
  3774  0891                     	;# 
  3775  0892                     	;# 
  3776  0892                     	;# 
  3777  0892                     	;# 
  3778  0893                     	;# 
  3779  0893                     	;# 
  3780  0893                     	;# 
  3781  0893                     	;# 
  3782  0893                     	;# 
  3783  0893                     	;# 
  3784  0894                     	;# 
  3785  0894                     	;# 
  3786  0894                     	;# 
  3787  0895                     	;# 
  3788  0895                     	;# 
  3789  0895                     	;# 
  3790  0896                     	;# 
  3791  0896                     	;# 
  3792  0896                     	;# 
  3793  089B                     	;# 
  3794  0911                     	;# 
  3795  0912                     	;# 
  3796  0913                     	;# 
  3797  0914                     	;# 
  3798  0915                     	;# 
  3799  0916                     	;# 
  3800  0918                     	;# 
  3801  0919                     	;# 
  3802  091A                     	;# 
  3803  091B                     	;# 
  3804  091C                     	;# 
  3805  091D                     	;# 
  3806  091E                     	;# 
  3807  091F                     	;# 
  3808  0E0F                     	;# 
  3809  0E10                     	;# 
  3810  0E11                     	;# 
  3811  0E12                     	;# 
  3812  0E13                     	;# 
  3813  0E14                     	;# 
  3814  0E15                     	;# 
  3815  0E16                     	;# 
  3816  0E17                     	;# 
  3817  0E18                     	;# 
  3818  0E19                     	;# 
  3819  0E1A                     	;# 
  3820  0E1B                     	;# 
  3821  0E1C                     	;# 
  3822  0E20                     	;# 
  3823  0E21                     	;# 
  3824  0E22                     	;# 
  3825  0E24                     	;# 
  3826  0E25                     	;# 
  3827  0E28                     	;# 
  3828  0E29                     	;# 
  3829  0E2A                     	;# 
  3830  0E2B                     	;# 
  3831  0E2C                     	;# 
  3832  0E2D                     	;# 
  3833  0E2E                     	;# 
  3834  0E2F                     	;# 
  3835  0E90                     	;# 
  3836  0E91                     	;# 
  3837  0E92                     	;# 
  3838  0E94                     	;# 
  3839  0E95                     	;# 
  3840  0E9C                     	;# 
  3841  0E9D                     	;# 
  3842  0E9E                     	;# 
  3843  0E9F                     	;# 
  3844  0EA0                     	;# 
  3845  0EA1                     	;# 
  3846  0EA2                     	;# 
  3847  0EA3                     	;# 
  3848  0EA4                     	;# 
  3849  0EA5                     	;# 
  3850  0EA6                     	;# 
  3851  0EA7                     	;# 
  3852  0F0F                     	;# 
  3853  0F10                     	;# 
  3854  0F11                     	;# 
  3855  0F12                     	;# 
  3856  0F13                     	;# 
  3857  0F14                     	;# 
  3858  0F15                     	;# 
  3859  0F16                     	;# 
  3860  0F17                     	;# 
  3861  0F18                     	;# 
  3862  0F19                     	;# 
  3863  0F1A                     	;# 
  3864  0F1B                     	;# 
  3865  0F1C                     	;# 
  3866  0F1D                     	;# 
  3867  0F1E                     	;# 
  3868  0F1F                     	;# 
  3869  0F20                     	;# 
  3870  0F21                     	;# 
  3871  0F22                     	;# 
  3872  0F23                     	;# 
  3873  0F24                     	;# 
  3874  0F25                     	;# 
  3875  0F26                     	;# 
  3876  0F27                     	;# 
  3877  0F28                     	;# 
  3878  0F29                     	;# 
  3879  0F2A                     	;# 
  3880  0F2B                     	;# 
  3881  0F2C                     	;# 
  3882  0F2D                     	;# 
  3883  0F2E                     	;# 
  3884  0F2F                     	;# 
  3885  0F30                     	;# 
  3886  0F31                     	;# 
  3887  0F32                     	;# 
  3888  0F33                     	;# 
  3889  0F34                     	;# 
  3890  0F35                     	;# 
  3891  0F36                     	;# 
  3892  0F37                     	;# 
  3893  0FE4                     	;# 
  3894  0FE5                     	;# 
  3895  0FE6                     	;# 
  3896  0FE7                     	;# 
  3897  0FE8                     	;# 
  3898  0FE9                     	;# 
  3899  0FEA                     	;# 
  3900  0FEB                     	;# 
  3901  0FED                     	;# 
  3902  0FEE                     	;# 
  3903  0FEF                     	;# 
  3904  0000                     	;# 
  3905  0001                     	;# 
  3906  0002                     	;# 
  3907  0003                     	;# 
  3908  0004                     	;# 
  3909  0005                     	;# 
  3910  0006                     	;# 
  3911  0007                     	;# 
  3912  0008                     	;# 
  3913  0009                     	;# 
  3914  000A                     	;# 
  3915  000B                     	;# 
  3916  000C                     	;# 
  3917  000D                     	;# 
  3918  000E                     	;# 
  3919  0010                     	;# 
  3920  0011                     	;# 
  3921  0012                     	;# 
  3922  0013                     	;# 
  3923  0014                     	;# 
  3924  0015                     	;# 
  3925  0015                     	;# 
  3926  0016                     	;# 
  3927  0016                     	;# 
  3928  0017                     	;# 
  3929  0018                     	;# 
  3930  0019                     	;# 
  3931  0019                     	;# 
  3932  001A                     	;# 
  3933  001B                     	;# 
  3934  001C                     	;# 
  3935  001D                     	;# 
  3936  001E                     	;# 
  3937  001F                     	;# 
  3938  008C                     	;# 
  3939  008D                     	;# 
  3940  008E                     	;# 
  3941  0090                     	;# 
  3942  0091                     	;# 
  3943  0092                     	;# 
  3944  0093                     	;# 
  3945  0094                     	;# 
  3946  0097                     	;# 
  3947  009B                     	;# 
  3948  009B                     	;# 
  3949  009C                     	;# 
  3950  009D                     	;# 
  3951  009E                     	;# 
  3952  009F                     	;# 
  3953  010C                     	;# 
  3954  010D                     	;# 
  3955  010E                     	;# 
  3956  0111                     	;# 
  3957  0112                     	;# 
  3958  0113                     	;# 
  3959  0114                     	;# 
  3960  0115                     	;# 
  3961  0116                     	;# 
  3962  0117                     	;# 
  3963  0118                     	;# 
  3964  0119                     	;# 
  3965  018C                     	;# 
  3966  018D                     	;# 
  3967  018E                     	;# 
  3968  0197                     	;# 
  3969  0199                     	;# 
  3970  0199                     	;# 
  3971  0199                     	;# 
  3972  019A                     	;# 
  3973  019A                     	;# 
  3974  019A                     	;# 
  3975  019B                     	;# 
  3976  019B                     	;# 
  3977  019B                     	;# 
  3978  019B                     	;# 
  3979  019B                     	;# 
  3980  019C                     	;# 
  3981  019C                     	;# 
  3982  019C                     	;# 
  3983  019D                     	;# 
  3984  019D                     	;# 
  3985  019D                     	;# 
  3986  019E                     	;# 
  3987  019E                     	;# 
  3988  019E                     	;# 
  3989  019F                     	;# 
  3990  019F                     	;# 
  3991  019F                     	;# 
  3992  019F                     	;# 
  3993  019F                     	;# 
  3994  020C                     	;# 
  3995  020D                     	;# 
  3996  020E                     	;# 
  3997  0211                     	;# 
  3998  0211                     	;# 
  3999  0212                     	;# 
  4000  0212                     	;# 
  4001  0213                     	;# 
  4002  0213                     	;# 
  4003  0214                     	;# 
  4004  0214                     	;# 
  4005  0215                     	;# 
  4006  0215                     	;# 
  4007  0215                     	;# 
  4008  0215                     	;# 
  4009  0216                     	;# 
  4010  0216                     	;# 
  4011  0217                     	;# 
  4012  0217                     	;# 
  4013  028C                     	;# 
  4014  028D                     	;# 
  4015  028E                     	;# 
  4016  0291                     	;# 
  4017  0291                     	;# 
  4018  0292                     	;# 
  4019  0293                     	;# 
  4020  0294                     	;# 
  4021  0295                     	;# 
  4022  0295                     	;# 
  4023  0296                     	;# 
  4024  0297                     	;# 
  4025  0298                     	;# 
  4026  029F                     	;# 
  4027  030C                     	;# 
  4028  030D                     	;# 
  4029  030E                     	;# 
  4030  0311                     	;# 
  4031  0311                     	;# 
  4032  0312                     	;# 
  4033  0313                     	;# 
  4034  0314                     	;# 
  4035  0315                     	;# 
  4036  0315                     	;# 
  4037  0316                     	;# 
  4038  0317                     	;# 
  4039  0318                     	;# 
  4040  038C                     	;# 
  4041  038D                     	;# 
  4042  038E                     	;# 
  4043  0391                     	;# 
  4044  0392                     	;# 
  4045  0393                     	;# 
  4046  0394                     	;# 
  4047  0395                     	;# 
  4048  0396                     	;# 
  4049  0397                     	;# 
  4050  0398                     	;# 
  4051  0399                     	;# 
  4052  039A                     	;# 
  4053  039C                     	;# 
  4054  039D                     	;# 
  4055  039E                     	;# 
  4056  039F                     	;# 
  4057  0411                     	;# 
  4058  0411                     	;# 
  4059  0412                     	;# 
  4060  0413                     	;# 
  4061  0414                     	;# 
  4062  0415                     	;# 
  4063  0416                     	;# 
  4064  0417                     	;# 
  4065  0418                     	;# 
  4066  0418                     	;# 
  4067  0419                     	;# 
  4068  041A                     	;# 
  4069  041B                     	;# 
  4070  041C                     	;# 
  4071  041D                     	;# 
  4072  041E                     	;# 
  4073  041F                     	;# 
  4074  0498                     	;# 
  4075  0498                     	;# 
  4076  0499                     	;# 
  4077  049A                     	;# 
  4078  049B                     	;# 
  4079  049B                     	;# 
  4080  049C                     	;# 
  4081  049D                     	;# 
  4082  049E                     	;# 
  4083  049F                     	;# 
  4084  0617                     	;# 
  4085  0618                     	;# 
  4086  0619                     	;# 
  4087  0619                     	;# 
  4088  061A                     	;# 
  4089  061B                     	;# 
  4090  061C                     	;# 
  4091  061C                     	;# 
  4092  061F                     	;# 
  4093  0691                     	;# 
  4094  0692                     	;# 
  4095  0693                     	;# 
  4096  0694                     	;# 
  4097  0695                     	;# 
  4098  0696                     	;# 
  4099  0697                     	;# 
  4100  0698                     	;# 
  4101  0699                     	;# 
  4102  0711                     	;# 
  4103  0712                     	;# 
  4104  0713                     	;# 
  4105  0714                     	;# 
  4106  0715                     	;# 
  4107  0716                     	;# 
  4108  0717                     	;# 
  4109  0718                     	;# 
  4110  0719                     	;# 
  4111  0891                     	;# 
  4112  0891                     	;# 
  4113  0891                     	;# 
  4114  0891                     	;# 
  4115  0891                     	;# 
  4116  0891                     	;# 
  4117  0892                     	;# 
  4118  0892                     	;# 
  4119  0892                     	;# 
  4120  0893                     	;# 
  4121  0893                     	;# 
  4122  0893                     	;# 
  4123  0893                     	;# 
  4124  0893                     	;# 
  4125  0893                     	;# 
  4126  0894                     	;# 
  4127  0894                     	;# 
  4128  0894                     	;# 
  4129  0895                     	;# 
  4130  0895                     	;# 
  4131  0895                     	;# 
  4132  0896                     	;# 
  4133  0896                     	;# 
  4134  0896                     	;# 
  4135  089B                     	;# 
  4136  0911                     	;# 
  4137  0912                     	;# 
  4138  0913                     	;# 
  4139  0914                     	;# 
  4140  0915                     	;# 
  4141  0916                     	;# 
  4142  0918                     	;# 
  4143  0919                     	;# 
  4144  091A                     	;# 
  4145  091B                     	;# 
  4146  091C                     	;# 
  4147  091D                     	;# 
  4148  091E                     	;# 
  4149  091F                     	;# 
  4150  0E0F                     	;# 
  4151  0E10                     	;# 
  4152  0E11                     	;# 
  4153  0E12                     	;# 
  4154  0E13                     	;# 
  4155  0E14                     	;# 
  4156  0E15                     	;# 
  4157  0E16                     	;# 
  4158  0E17                     	;# 
  4159  0E18                     	;# 
  4160  0E19                     	;# 
  4161  0E1A                     	;# 
  4162  0E1B                     	;# 
  4163  0E1C                     	;# 
  4164  0E20                     	;# 
  4165  0E21                     	;# 
  4166  0E22                     	;# 
  4167  0E24                     	;# 
  4168  0E25                     	;# 
  4169  0E28                     	;# 
  4170  0E29                     	;# 
  4171  0E2A                     	;# 
  4172  0E2B                     	;# 
  4173  0E2C                     	;# 
  4174  0E2D                     	;# 
  4175  0E2E                     	;# 
  4176  0E2F                     	;# 
  4177  0E90                     	;# 
  4178  0E91                     	;# 
  4179  0E92                     	;# 
  4180  0E94                     	;# 
  4181  0E95                     	;# 
  4182  0E9C                     	;# 
  4183  0E9D                     	;# 
  4184  0E9E                     	;# 
  4185  0E9F                     	;# 
  4186  0EA0                     	;# 
  4187  0EA1                     	;# 
  4188  0EA2                     	;# 
  4189  0EA3                     	;# 
  4190  0EA4                     	;# 
  4191  0EA5                     	;# 
  4192  0EA6                     	;# 
  4193  0EA7                     	;# 
  4194  0F0F                     	;# 
  4195  0F10                     	;# 
  4196  0F11                     	;# 
  4197  0F12                     	;# 
  4198  0F13                     	;# 
  4199  0F14                     	;# 
  4200  0F15                     	;# 
  4201  0F16                     	;# 
  4202  0F17                     	;# 
  4203  0F18                     	;# 
  4204  0F19                     	;# 
  4205  0F1A                     	;# 
  4206  0F1B                     	;# 
  4207  0F1C                     	;# 
  4208  0F1D                     	;# 
  4209  0F1E                     	;# 
  4210  0F1F                     	;# 
  4211  0F20                     	;# 
  4212  0F21                     	;# 
  4213  0F22                     	;# 
  4214  0F23                     	;# 
  4215  0F24                     	;# 
  4216  0F25                     	;# 
  4217  0F26                     	;# 
  4218  0F27                     	;# 
  4219  0F28                     	;# 
  4220  0F29                     	;# 
  4221  0F2A                     	;# 
  4222  0F2B                     	;# 
  4223  0F2C                     	;# 
  4224  0F2D                     	;# 
  4225  0F2E                     	;# 
  4226  0F2F                     	;# 
  4227  0F30                     	;# 
  4228  0F31                     	;# 
  4229  0F32                     	;# 
  4230  0F33                     	;# 
  4231  0F34                     	;# 
  4232  0F35                     	;# 
  4233  0F36                     	;# 
  4234  0F37                     	;# 
  4235  0FE4                     	;# 
  4236  0FE5                     	;# 
  4237  0FE6                     	;# 
  4238  0FE7                     	;# 
  4239  0FE8                     	;# 
  4240  0FE9                     	;# 
  4241  0FEA                     	;# 
  4242  0FEB                     	;# 
  4243  0FED                     	;# 
  4244  0FEE                     	;# 
  4245  0FEF                     	;# 
  4246  0000                     	;# 
  4247  0001                     	;# 
  4248  0002                     	;# 
  4249  0003                     	;# 
  4250  0004                     	;# 
  4251  0005                     	;# 
  4252  0006                     	;# 
  4253  0007                     	;# 
  4254  0008                     	;# 
  4255  0009                     	;# 
  4256  000A                     	;# 
  4257  000B                     	;# 
  4258  000C                     	;# 
  4259  000D                     	;# 
  4260  000E                     	;# 
  4261  0010                     	;# 
  4262  0011                     	;# 
  4263  0012                     	;# 
  4264  0013                     	;# 
  4265  0014                     	;# 
  4266  0015                     	;# 
  4267  0015                     	;# 
  4268  0016                     	;# 
  4269  0016                     	;# 
  4270  0017                     	;# 
  4271  0018                     	;# 
  4272  0019                     	;# 
  4273  0019                     	;# 
  4274  001A                     	;# 
  4275  001B                     	;# 
  4276  001C                     	;# 
  4277  001D                     	;# 
  4278  001E                     	;# 
  4279  001F                     	;# 
  4280  008C                     	;# 
  4281  008D                     	;# 
  4282  008E                     	;# 
  4283  0090                     	;# 
  4284  0091                     	;# 
  4285  0092                     	;# 
  4286  0093                     	;# 
  4287  0094                     	;# 
  4288  0097                     	;# 
  4289  009B                     	;# 
  4290  009B                     	;# 
  4291  009C                     	;# 
  4292  009D                     	;# 
  4293  009E                     	;# 
  4294  009F                     	;# 
  4295  010C                     	;# 
  4296  010D                     	;# 
  4297  010E                     	;# 
  4298  0111                     	;# 
  4299  0112                     	;# 
  4300  0113                     	;# 
  4301  0114                     	;# 
  4302  0115                     	;# 
  4303  0116                     	;# 
  4304  0117                     	;# 
  4305  0118                     	;# 
  4306  0119                     	;# 
  4307  018C                     	;# 
  4308  018D                     	;# 
  4309  018E                     	;# 
  4310  0197                     	;# 
  4311  0199                     	;# 
  4312  0199                     	;# 
  4313  0199                     	;# 
  4314  019A                     	;# 
  4315  019A                     	;# 
  4316  019A                     	;# 
  4317  019B                     	;# 
  4318  019B                     	;# 
  4319  019B                     	;# 
  4320  019B                     	;# 
  4321  019B                     	;# 
  4322  019C                     	;# 
  4323  019C                     	;# 
  4324  019C                     	;# 
  4325  019D                     	;# 
  4326  019D                     	;# 
  4327  019D                     	;# 
  4328  019E                     	;# 
  4329  019E                     	;# 
  4330  019E                     	;# 
  4331  019F                     	;# 
  4332  019F                     	;# 
  4333  019F                     	;# 
  4334  019F                     	;# 
  4335  019F                     	;# 
  4336  020C                     	;# 
  4337  020D                     	;# 
  4338  020E                     	;# 
  4339  0211                     	;# 
  4340  0211                     	;# 
  4341  0212                     	;# 
  4342  0212                     	;# 
  4343  0213                     	;# 
  4344  0213                     	;# 
  4345  0214                     	;# 
  4346  0214                     	;# 
  4347  0215                     	;# 
  4348  0215                     	;# 
  4349  0215                     	;# 
  4350  0215                     	;# 
  4351  0216                     	;# 
  4352  0216                     	;# 
  4353  0217                     	;# 
  4354  0217                     	;# 
  4355  028C                     	;# 
  4356  028D                     	;# 
  4357  028E                     	;# 
  4358  0291                     	;# 
  4359  0291                     	;# 
  4360  0292                     	;# 
  4361  0293                     	;# 
  4362  0294                     	;# 
  4363  0295                     	;# 
  4364  0295                     	;# 
  4365  0296                     	;# 
  4366  0297                     	;# 
  4367  0298                     	;# 
  4368  029F                     	;# 
  4369  030C                     	;# 
  4370  030D                     	;# 
  4371  030E                     	;# 
  4372  0311                     	;# 
  4373  0311                     	;# 
  4374  0312                     	;# 
  4375  0313                     	;# 
  4376  0314                     	;# 
  4377  0315                     	;# 
  4378  0315                     	;# 
  4379  0316                     	;# 
  4380  0317                     	;# 
  4381  0318                     	;# 
  4382  038C                     	;# 
  4383  038D                     	;# 
  4384  038E                     	;# 
  4385  0391                     	;# 
  4386  0392                     	;# 
  4387  0393                     	;# 
  4388  0394                     	;# 
  4389  0395                     	;# 
  4390  0396                     	;# 
  4391  0397                     	;# 
  4392  0398                     	;# 
  4393  0399                     	;# 
  4394  039A                     	;# 
  4395  039C                     	;# 
  4396  039D                     	;# 
  4397  039E                     	;# 
  4398  039F                     	;# 
  4399  0411                     	;# 
  4400  0411                     	;# 
  4401  0412                     	;# 
  4402  0413                     	;# 
  4403  0414                     	;# 
  4404  0415                     	;# 
  4405  0416                     	;# 
  4406  0417                     	;# 
  4407  0418                     	;# 
  4408  0418                     	;# 
  4409  0419                     	;# 
  4410  041A                     	;# 
  4411  041B                     	;# 
  4412  041C                     	;# 
  4413  041D                     	;# 
  4414  041E                     	;# 
  4415  041F                     	;# 
  4416  0498                     	;# 
  4417  0498                     	;# 
  4418  0499                     	;# 
  4419  049A                     	;# 
  4420  049B                     	;# 
  4421  049B                     	;# 
  4422  049C                     	;# 
  4423  049D                     	;# 
  4424  049E                     	;# 
  4425  049F                     	;# 
  4426  0617                     	;# 
  4427  0618                     	;# 
  4428  0619                     	;# 
  4429  0619                     	;# 
  4430  061A                     	;# 
  4431  061B                     	;# 
  4432  061C                     	;# 
  4433  061C                     	;# 
  4434  061F                     	;# 
  4435  0691                     	;# 
  4436  0692                     	;# 
  4437  0693                     	;# 
  4438  0694                     	;# 
  4439  0695                     	;# 
  4440  0696                     	;# 
  4441  0697                     	;# 
  4442  0698                     	;# 
  4443  0699                     	;# 
  4444  0711                     	;# 
  4445  0712                     	;# 
  4446  0713                     	;# 
  4447  0714                     	;# 
  4448  0715                     	;# 
  4449  0716                     	;# 
  4450  0717                     	;# 
  4451  0718                     	;# 
  4452  0719                     	;# 
  4453  0891                     	;# 
  4454  0891                     	;# 
  4455  0891                     	;# 
  4456  0891                     	;# 
  4457  0891                     	;# 
  4458  0891                     	;# 
  4459  0892                     	;# 
  4460  0892                     	;# 
  4461  0892                     	;# 
  4462  0893                     	;# 
  4463  0893                     	;# 
  4464  0893                     	;# 
  4465  0893                     	;# 
  4466  0893                     	;# 
  4467  0893                     	;# 
  4468  0894                     	;# 
  4469  0894                     	;# 
  4470  0894                     	;# 
  4471  0895                     	;# 
  4472  0895                     	;# 
  4473  0895                     	;# 
  4474  0896                     	;# 
  4475  0896                     	;# 
  4476  0896                     	;# 
  4477  089B                     	;# 
  4478  0911                     	;# 
  4479  0912                     	;# 
  4480  0913                     	;# 
  4481  0914                     	;# 
  4482  0915                     	;# 
  4483  0916                     	;# 
  4484  0918                     	;# 
  4485  0919                     	;# 
  4486  091A                     	;# 
  4487  091B                     	;# 
  4488  091C                     	;# 
  4489  091D                     	;# 
  4490  091E                     	;# 
  4491  091F                     	;# 
  4492  0E0F                     	;# 
  4493  0E10                     	;# 
  4494  0E11                     	;# 
  4495  0E12                     	;# 
  4496  0E13                     	;# 
  4497  0E14                     	;# 
  4498  0E15                     	;# 
  4499  0E16                     	;# 
  4500  0E17                     	;# 
  4501  0E18                     	;# 
  4502  0E19                     	;# 
  4503  0E1A                     	;# 
  4504  0E1B                     	;# 
  4505  0E1C                     	;# 
  4506  0E20                     	;# 
  4507  0E21                     	;# 
  4508  0E22                     	;# 
  4509  0E24                     	;# 
  4510  0E25                     	;# 
  4511  0E28                     	;# 
  4512  0E29                     	;# 
  4513  0E2A                     	;# 
  4514  0E2B                     	;# 
  4515  0E2C                     	;# 
  4516  0E2D                     	;# 
  4517  0E2E                     	;# 
  4518  0E2F                     	;# 
  4519  0E90                     	;# 
  4520  0E91                     	;# 
  4521  0E92                     	;# 
  4522  0E94                     	;# 
  4523  0E95                     	;# 
  4524  0E9C                     	;# 
  4525  0E9D                     	;# 
  4526  0E9E                     	;# 
  4527  0E9F                     	;# 
  4528  0EA0                     	;# 
  4529  0EA1                     	;# 
  4530  0EA2                     	;# 
  4531  0EA3                     	;# 
  4532  0EA4                     	;# 
  4533  0EA5                     	;# 
  4534  0EA6                     	;# 
  4535  0EA7                     	;# 
  4536  0F0F                     	;# 
  4537  0F10                     	;# 
  4538  0F11                     	;# 
  4539  0F12                     	;# 
  4540  0F13                     	;# 
  4541  0F14                     	;# 
  4542  0F15                     	;# 
  4543  0F16                     	;# 
  4544  0F17                     	;# 
  4545  0F18                     	;# 
  4546  0F19                     	;# 
  4547  0F1A                     	;# 
  4548  0F1B                     	;# 
  4549  0F1C                     	;# 
  4550  0F1D                     	;# 
  4551  0F1E                     	;# 
  4552  0F1F                     	;# 
  4553  0F20                     	;# 
  4554  0F21                     	;# 
  4555  0F22                     	;# 
  4556  0F23                     	;# 
  4557  0F24                     	;# 
  4558  0F25                     	;# 
  4559  0F26                     	;# 
  4560  0F27                     	;# 
  4561  0F28                     	;# 
  4562  0F29                     	;# 
  4563  0F2A                     	;# 
  4564  0F2B                     	;# 
  4565  0F2C                     	;# 
  4566  0F2D                     	;# 
  4567  0F2E                     	;# 
  4568  0F2F                     	;# 
  4569  0F30                     	;# 
  4570  0F31                     	;# 
  4571  0F32                     	;# 
  4572  0F33                     	;# 
  4573  0F34                     	;# 
  4574  0F35                     	;# 
  4575  0F36                     	;# 
  4576  0F37                     	;# 
  4577  0FE4                     	;# 
  4578  0FE5                     	;# 
  4579  0FE6                     	;# 
  4580  0FE7                     	;# 
  4581  0FE8                     	;# 
  4582  0FE9                     	;# 
  4583  0FEA                     	;# 
  4584  0FEB                     	;# 
  4585  0FED                     	;# 
  4586  0FEE                     	;# 
  4587  0FEF                     	;# 
  4588  0000                     	;# 
  4589  0001                     	;# 
  4590  0002                     	;# 
  4591  0003                     	;# 
  4592  0004                     	;# 
  4593  0005                     	;# 
  4594  0006                     	;# 
  4595  0007                     	;# 
  4596  0008                     	;# 
  4597  0009                     	;# 
  4598  000A                     	;# 
  4599  000B                     	;# 
  4600  000C                     	;# 
  4601  000D                     	;# 
  4602  000E                     	;# 
  4603  0010                     	;# 
  4604  0011                     	;# 
  4605  0012                     	;# 
  4606  0013                     	;# 
  4607  0014                     	;# 
  4608  0015                     	;# 
  4609  0015                     	;# 
  4610  0016                     	;# 
  4611  0016                     	;# 
  4612  0017                     	;# 
  4613  0018                     	;# 
  4614  0019                     	;# 
  4615  0019                     	;# 
  4616  001A                     	;# 
  4617  001B                     	;# 
  4618  001C                     	;# 
  4619  001D                     	;# 
  4620  001E                     	;# 
  4621  001F                     	;# 
  4622  008C                     	;# 
  4623  008D                     	;# 
  4624  008E                     	;# 
  4625  0090                     	;# 
  4626  0091                     	;# 
  4627  0092                     	;# 
  4628  0093                     	;# 
  4629  0094                     	;# 
  4630  0097                     	;# 
  4631  009B                     	;# 
  4632  009B                     	;# 
  4633  009C                     	;# 
  4634  009D                     	;# 
  4635  009E                     	;# 
  4636  009F                     	;# 
  4637  010C                     	;# 
  4638  010D                     	;# 
  4639  010E                     	;# 
  4640  0111                     	;# 
  4641  0112                     	;# 
  4642  0113                     	;# 
  4643  0114                     	;# 
  4644  0115                     	;# 
  4645  0116                     	;# 
  4646  0117                     	;# 
  4647  0118                     	;# 
  4648  0119                     	;# 
  4649  018C                     	;# 
  4650  018D                     	;# 
  4651  018E                     	;# 
  4652  0197                     	;# 
  4653  0199                     	;# 
  4654  0199                     	;# 
  4655  0199                     	;# 
  4656  019A                     	;# 
  4657  019A                     	;# 
  4658  019A                     	;# 
  4659  019B                     	;# 
  4660  019B                     	;# 
  4661  019B                     	;# 
  4662  019B                     	;# 
  4663  019B                     	;# 
  4664  019C                     	;# 
  4665  019C                     	;# 
  4666  019C                     	;# 
  4667  019D                     	;# 
  4668  019D                     	;# 
  4669  019D                     	;# 
  4670  019E                     	;# 
  4671  019E                     	;# 
  4672  019E                     	;# 
  4673  019F                     	;# 
  4674  019F                     	;# 
  4675  019F                     	;# 
  4676  019F                     	;# 
  4677  019F                     	;# 
  4678  020C                     	;# 
  4679  020D                     	;# 
  4680  020E                     	;# 
  4681  0211                     	;# 
  4682  0211                     	;# 
  4683  0212                     	;# 
  4684  0212                     	;# 
  4685  0213                     	;# 
  4686  0213                     	;# 
  4687  0214                     	;# 
  4688  0214                     	;# 
  4689  0215                     	;# 
  4690  0215                     	;# 
  4691  0215                     	;# 
  4692  0215                     	;# 
  4693  0216                     	;# 
  4694  0216                     	;# 
  4695  0217                     	;# 
  4696  0217                     	;# 
  4697  028C                     	;# 
  4698  028D                     	;# 
  4699  028E                     	;# 
  4700  0291                     	;# 
  4701  0291                     	;# 
  4702  0292                     	;# 
  4703  0293                     	;# 
  4704  0294                     	;# 
  4705  0295                     	;# 
  4706  0295                     	;# 
  4707  0296                     	;# 
  4708  0297                     	;# 
  4709  0298                     	;# 
  4710  029F                     	;# 
  4711  030C                     	;# 
  4712  030D                     	;# 
  4713  030E                     	;# 
  4714  0311                     	;# 
  4715  0311                     	;# 
  4716  0312                     	;# 
  4717  0313                     	;# 
  4718  0314                     	;# 
  4719  0315                     	;# 
  4720  0315                     	;# 
  4721  0316                     	;# 
  4722  0317                     	;# 
  4723  0318                     	;# 
  4724  038C                     	;# 
  4725  038D                     	;# 
  4726  038E                     	;# 
  4727  0391                     	;# 
  4728  0392                     	;# 
  4729  0393                     	;# 
  4730  0394                     	;# 
  4731  0395                     	;# 
  4732  0396                     	;# 
  4733  0397                     	;# 
  4734  0398                     	;# 
  4735  0399                     	;# 
  4736  039A                     	;# 
  4737  039C                     	;# 
  4738  039D                     	;# 
  4739  039E                     	;# 
  4740  039F                     	;# 
  4741  0411                     	;# 
  4742  0411                     	;# 
  4743  0412                     	;# 
  4744  0413                     	;# 
  4745  0414                     	;# 
  4746  0415                     	;# 
  4747  0416                     	;# 
  4748  0417                     	;# 
  4749  0418                     	;# 
  4750  0418                     	;# 
  4751  0419                     	;# 
  4752  041A                     	;# 
  4753  041B                     	;# 
  4754  041C                     	;# 
  4755  041D                     	;# 
  4756  041E                     	;# 
  4757  041F                     	;# 
  4758  0498                     	;# 
  4759  0498                     	;# 
  4760  0499                     	;# 
  4761  049A                     	;# 
  4762  049B                     	;# 
  4763  049B                     	;# 
  4764  049C                     	;# 
  4765  049D                     	;# 
  4766  049E                     	;# 
  4767  049F                     	;# 
  4768  0617                     	;# 
  4769  0618                     	;# 
  4770  0619                     	;# 
  4771  0619                     	;# 
  4772  061A                     	;# 
  4773  061B                     	;# 
  4774  061C                     	;# 
  4775  061C                     	;# 
  4776  061F                     	;# 
  4777  0691                     	;# 
  4778  0692                     	;# 
  4779  0693                     	;# 
  4780  0694                     	;# 
  4781  0695                     	;# 
  4782  0696                     	;# 
  4783  0697                     	;# 
  4784  0698                     	;# 
  4785  0699                     	;# 
  4786  0711                     	;# 
  4787  0712                     	;# 
  4788  0713                     	;# 
  4789  0714                     	;# 
  4790  0715                     	;# 
  4791  0716                     	;# 
  4792  0717                     	;# 
  4793  0718                     	;# 
  4794  0719                     	;# 
  4795  0891                     	;# 
  4796  0891                     	;# 
  4797  0891                     	;# 
  4798  0891                     	;# 
  4799  0891                     	;# 
  4800  0891                     	;# 
  4801  0892                     	;# 
  4802  0892                     	;# 
  4803  0892                     	;# 
  4804  0893                     	;# 
  4805  0893                     	;# 
  4806  0893                     	;# 
  4807  0893                     	;# 
  4808  0893                     	;# 
  4809  0893                     	;# 
  4810  0894                     	;# 
  4811  0894                     	;# 
  4812  0894                     	;# 
  4813  0895                     	;# 
  4814  0895                     	;# 
  4815  0895                     	;# 
  4816  0896                     	;# 
  4817  0896                     	;# 
  4818  0896                     	;# 
  4819  089B                     	;# 
  4820  0911                     	;# 
  4821  0912                     	;# 
  4822  0913                     	;# 
  4823  0914                     	;# 
  4824  0915                     	;# 
  4825  0916                     	;# 
  4826  0918                     	;# 
  4827  0919                     	;# 
  4828  091A                     	;# 
  4829  091B                     	;# 
  4830  091C                     	;# 
  4831  091D                     	;# 
  4832  091E                     	;# 
  4833  091F                     	;# 
  4834  0E0F                     	;# 
  4835  0E10                     	;# 
  4836  0E11                     	;# 
  4837  0E12                     	;# 
  4838  0E13                     	;# 
  4839  0E14                     	;# 
  4840  0E15                     	;# 
  4841  0E16                     	;# 
  4842  0E17                     	;# 
  4843  0E18                     	;# 
  4844  0E19                     	;# 
  4845  0E1A                     	;# 
  4846  0E1B                     	;# 
  4847  0E1C                     	;# 
  4848  0E20                     	;# 
  4849  0E21                     	;# 
  4850  0E22                     	;# 
  4851  0E24                     	;# 
  4852  0E25                     	;# 
  4853  0E28                     	;# 
  4854  0E29                     	;# 
  4855  0E2A                     	;# 
  4856  0E2B                     	;# 
  4857  0E2C                     	;# 
  4858  0E2D                     	;# 
  4859  0E2E                     	;# 
  4860  0E2F                     	;# 
  4861  0E90                     	;# 
  4862  0E91                     	;# 
  4863  0E92                     	;# 
  4864  0E94                     	;# 
  4865  0E95                     	;# 
  4866  0E9C                     	;# 
  4867  0E9D                     	;# 
  4868  0E9E                     	;# 
  4869  0E9F                     	;# 
  4870  0EA0                     	;# 
  4871  0EA1                     	;# 
  4872  0EA2                     	;# 
  4873  0EA3                     	;# 
  4874  0EA4                     	;# 
  4875  0EA5                     	;# 
  4876  0EA6                     	;# 
  4877  0EA7                     	;# 
  4878  0F0F                     	;# 
  4879  0F10                     	;# 
  4880  0F11                     	;# 
  4881  0F12                     	;# 
  4882  0F13                     	;# 
  4883  0F14                     	;# 
  4884  0F15                     	;# 
  4885  0F16                     	;# 
  4886  0F17                     	;# 
  4887  0F18                     	;# 
  4888  0F19                     	;# 
  4889  0F1A                     	;# 
  4890  0F1B                     	;# 
  4891  0F1C                     	;# 
  4892  0F1D                     	;# 
  4893  0F1E                     	;# 
  4894  0F1F                     	;# 
  4895  0F20                     	;# 
  4896  0F21                     	;# 
  4897  0F22                     	;# 
  4898  0F23                     	;# 
  4899  0F24                     	;# 
  4900  0F25                     	;# 
  4901  0F26                     	;# 
  4902  0F27                     	;# 
  4903  0F28                     	;# 
  4904  0F29                     	;# 
  4905  0F2A                     	;# 
  4906  0F2B                     	;# 
  4907  0F2C                     	;# 
  4908  0F2D                     	;# 
  4909  0F2E                     	;# 
  4910  0F2F                     	;# 
  4911  0F30                     	;# 
  4912  0F31                     	;# 
  4913  0F32                     	;# 
  4914  0F33                     	;# 
  4915  0F34                     	;# 
  4916  0F35                     	;# 
  4917  0F36                     	;# 
  4918  0F37                     	;# 
  4919  0FE4                     	;# 
  4920  0FE5                     	;# 
  4921  0FE6                     	;# 
  4922  0FE7                     	;# 
  4923  0FE8                     	;# 
  4924  0FE9                     	;# 
  4925  0FEA                     	;# 
  4926  0FEB                     	;# 
  4927  0FED                     	;# 
  4928  0FEE                     	;# 
  4929  0FEF                     	;# 
  4930  0000                     	;# 
  4931  0001                     	;# 
  4932  0002                     	;# 
  4933  0003                     	;# 
  4934  0004                     	;# 
  4935  0005                     	;# 
  4936  0006                     	;# 
  4937  0007                     	;# 
  4938  0008                     	;# 
  4939  0009                     	;# 
  4940  000A                     	;# 
  4941  000B                     	;# 
  4942  000C                     	;# 
  4943  000D                     	;# 
  4944  000E                     	;# 
  4945  0010                     	;# 
  4946  0011                     	;# 
  4947  0012                     	;# 
  4948  0013                     	;# 
  4949  0014                     	;# 
  4950  0015                     	;# 
  4951  0015                     	;# 
  4952  0016                     	;# 
  4953  0016                     	;# 
  4954  0017                     	;# 
  4955  0018                     	;# 
  4956  0019                     	;# 
  4957  0019                     	;# 
  4958  001A                     	;# 
  4959  001B                     	;# 
  4960  001C                     	;# 
  4961  001D                     	;# 
  4962  001E                     	;# 
  4963  001F                     	;# 
  4964  008C                     	;# 
  4965  008D                     	;# 
  4966  008E                     	;# 
  4967  0090                     	;# 
  4968  0091                     	;# 
  4969  0092                     	;# 
  4970  0093                     	;# 
  4971  0094                     	;# 
  4972  0097                     	;# 
  4973  009B                     	;# 
  4974  009B                     	;# 
  4975  009C                     	;# 
  4976  009D                     	;# 
  4977  009E                     	;# 
  4978  009F                     	;# 
  4979  010C                     	;# 
  4980  010D                     	;# 
  4981  010E                     	;# 
  4982  0111                     	;# 
  4983  0112                     	;# 
  4984  0113                     	;# 
  4985  0114                     	;# 
  4986  0115                     	;# 
  4987  0116                     	;# 
  4988  0117                     	;# 
  4989  0118                     	;# 
  4990  0119                     	;# 
  4991  018C                     	;# 
  4992  018D                     	;# 
  4993  018E                     	;# 
  4994  0197                     	;# 
  4995  0199                     	;# 
  4996  0199                     	;# 
  4997  0199                     	;# 
  4998  019A                     	;# 
  4999  019A                     	;# 
  5000  019A                     	;# 
  5001  019B                     	;# 
  5002  019B                     	;# 
  5003  019B                     	;# 
  5004  019B                     	;# 
  5005  019B                     	;# 
  5006  019C                     	;# 
  5007  019C                     	;# 
  5008  019C                     	;# 
  5009  019D                     	;# 
  5010  019D                     	;# 
  5011  019D                     	;# 
  5012  019E                     	;# 
  5013  019E                     	;# 
  5014  019E                     	;# 
  5015  019F                     	;# 
  5016  019F                     	;# 
  5017  019F                     	;# 
  5018  019F                     	;# 
  5019  019F                     	;# 
  5020  020C                     	;# 
  5021  020D                     	;# 
  5022  020E                     	;# 
  5023  0211                     	;# 
  5024  0211                     	;# 
  5025  0212                     	;# 
  5026  0212                     	;# 
  5027  0213                     	;# 
  5028  0213                     	;# 
  5029  0214                     	;# 
  5030  0214                     	;# 
  5031  0215                     	;# 
  5032  0215                     	;# 
  5033  0215                     	;# 
  5034  0215                     	;# 
  5035  0216                     	;# 
  5036  0216                     	;# 
  5037  0217                     	;# 
  5038  0217                     	;# 
  5039  028C                     	;# 
  5040  028D                     	;# 
  5041  028E                     	;# 
  5042  0291                     	;# 
  5043  0291                     	;# 
  5044  0292                     	;# 
  5045  0293                     	;# 
  5046  0294                     	;# 
  5047  0295                     	;# 
  5048  0295                     	;# 
  5049  0296                     	;# 
  5050  0297                     	;# 
  5051  0298                     	;# 
  5052  029F                     	;# 
  5053  030C                     	;# 
  5054  030D                     	;# 
  5055  030E                     	;# 
  5056  0311                     	;# 
  5057  0311                     	;# 
  5058  0312                     	;# 
  5059  0313                     	;# 
  5060  0314                     	;# 
  5061  0315                     	;# 
  5062  0315                     	;# 
  5063  0316                     	;# 
  5064  0317                     	;# 
  5065  0318                     	;# 
  5066  038C                     	;# 
  5067  038D                     	;# 
  5068  038E                     	;# 
  5069  0391                     	;# 
  5070  0392                     	;# 
  5071  0393                     	;# 
  5072  0394                     	;# 
  5073  0395                     	;# 
  5074  0396                     	;# 
  5075  0397                     	;# 
  5076  0398                     	;# 
  5077  0399                     	;# 
  5078  039A                     	;# 
  5079  039C                     	;# 
  5080  039D                     	;# 
  5081  039E                     	;# 
  5082  039F                     	;# 
  5083  0411                     	;# 
  5084  0411                     	;# 
  5085  0412                     	;# 
  5086  0413                     	;# 
  5087  0414                     	;# 
  5088  0415                     	;# 
  5089  0416                     	;# 
  5090  0417                     	;# 
  5091  0418                     	;# 
  5092  0418                     	;# 
  5093  0419                     	;# 
  5094  041A                     	;# 
  5095  041B                     	;# 
  5096  041C                     	;# 
  5097  041D                     	;# 
  5098  041E                     	;# 
  5099  041F                     	;# 
  5100  0498                     	;# 
  5101  0498                     	;# 
  5102  0499                     	;# 
  5103  049A                     	;# 
  5104  049B                     	;# 
  5105  049B                     	;# 
  5106  049C                     	;# 
  5107  049D                     	;# 
  5108  049E                     	;# 
  5109  049F                     	;# 
  5110  0617                     	;# 
  5111  0618                     	;# 
  5112  0619                     	;# 
  5113  0619                     	;# 
  5114  061A                     	;# 
  5115  061B                     	;# 
  5116  061C                     	;# 
  5117  061C                     	;# 
  5118  061F                     	;# 
  5119  0691                     	;# 
  5120  0692                     	;# 
  5121  0693                     	;# 
  5122  0694                     	;# 
  5123  0695                     	;# 
  5124  0696                     	;# 
  5125  0697                     	;# 
  5126  0698                     	;# 
  5127  0699                     	;# 
  5128  0711                     	;# 
  5129  0712                     	;# 
  5130  0713                     	;# 
  5131  0714                     	;# 
  5132  0715                     	;# 
  5133  0716                     	;# 
  5134  0717                     	;# 
  5135  0718                     	;# 
  5136  0719                     	;# 
  5137  0891                     	;# 
  5138  0891                     	;# 
  5139  0891                     	;# 
  5140  0891                     	;# 
  5141  0891                     	;# 
  5142  0891                     	;# 
  5143  0892                     	;# 
  5144  0892                     	;# 
  5145  0892                     	;# 
  5146  0893                     	;# 
  5147  0893                     	;# 
  5148  0893                     	;# 
  5149  0893                     	;# 
  5150  0893                     	;# 
  5151  0893                     	;# 
  5152  0894                     	;# 
  5153  0894                     	;# 
  5154  0894                     	;# 
  5155  0895                     	;# 
  5156  0895                     	;# 
  5157  0895                     	;# 
  5158  0896                     	;# 
  5159  0896                     	;# 
  5160  0896                     	;# 
  5161  089B                     	;# 
  5162  0911                     	;# 
  5163  0912                     	;# 
  5164  0913                     	;# 
  5165  0914                     	;# 
  5166  0915                     	;# 
  5167  0916                     	;# 
  5168  0918                     	;# 
  5169  0919                     	;# 
  5170  091A                     	;# 
  5171  091B                     	;# 
  5172  091C                     	;# 
  5173  091D                     	;# 
  5174  091E                     	;# 
  5175  091F                     	;# 
  5176  0E0F                     	;# 
  5177  0E10                     	;# 
  5178  0E11                     	;# 
  5179  0E12                     	;# 
  5180  0E13                     	;# 
  5181  0E14                     	;# 
  5182  0E15                     	;# 
  5183  0E16                     	;# 
  5184  0E17                     	;# 
  5185  0E18                     	;# 
  5186  0E19                     	;# 
  5187  0E1A                     	;# 
  5188  0E1B                     	;# 
  5189  0E1C                     	;# 
  5190  0E20                     	;# 
  5191  0E21                     	;# 
  5192  0E22                     	;# 
  5193  0E24                     	;# 
  5194  0E25                     	;# 
  5195  0E28                     	;# 
  5196  0E29                     	;# 
  5197  0E2A                     	;# 
  5198  0E2B                     	;# 
  5199  0E2C                     	;# 
  5200  0E2D                     	;# 
  5201  0E2E                     	;# 
  5202  0E2F                     	;# 
  5203  0E90                     	;# 
  5204  0E91                     	;# 
  5205  0E92                     	;# 
  5206  0E94                     	;# 
  5207  0E95                     	;# 
  5208  0E9C                     	;# 
  5209  0E9D                     	;# 
  5210  0E9E                     	;# 
  5211  0E9F                     	;# 
  5212  0EA0                     	;# 
  5213  0EA1                     	;# 
  5214  0EA2                     	;# 
  5215  0EA3                     	;# 
  5216  0EA4                     	;# 
  5217  0EA5                     	;# 
  5218  0EA6                     	;# 
  5219  0EA7                     	;# 
  5220  0F0F                     	;# 
  5221  0F10                     	;# 
  5222  0F11                     	;# 
  5223  0F12                     	;# 
  5224  0F13                     	;# 
  5225  0F14                     	;# 
  5226  0F15                     	;# 
  5227  0F16                     	;# 
  5228  0F17                     	;# 
  5229  0F18                     	;# 
  5230  0F19                     	;# 
  5231  0F1A                     	;# 
  5232  0F1B                     	;# 
  5233  0F1C                     	;# 
  5234  0F1D                     	;# 
  5235  0F1E                     	;# 
  5236  0F1F                     	;# 
  5237  0F20                     	;# 
  5238  0F21                     	;# 
  5239  0F22                     	;# 
  5240  0F23                     	;# 
  5241  0F24                     	;# 
  5242  0F25                     	;# 
  5243  0F26                     	;# 
  5244  0F27                     	;# 
  5245  0F28                     	;# 
  5246  0F29                     	;# 
  5247  0F2A                     	;# 
  5248  0F2B                     	;# 
  5249  0F2C                     	;# 
  5250  0F2D                     	;# 
  5251  0F2E                     	;# 
  5252  0F2F                     	;# 
  5253  0F30                     	;# 
  5254  0F31                     	;# 
  5255  0F32                     	;# 
  5256  0F33                     	;# 
  5257  0F34                     	;# 
  5258  0F35                     	;# 
  5259  0F36                     	;# 
  5260  0F37                     	;# 
  5261  0FE4                     	;# 
  5262  0FE5                     	;# 
  5263  0FE6                     	;# 
  5264  0FE7                     	;# 
  5265  0FE8                     	;# 
  5266  0FE9                     	;# 
  5267  0FEA                     	;# 
  5268  0FEB                     	;# 
  5269  0FED                     	;# 
  5270  0FEE                     	;# 
  5271  0FEF                     	;__u16ResponseBuffer
  5272                           
  5273 ;; Function _preTransmission_App is unused but had its address taken
  5274  0000                     
  5275 ;; Function _postTransmission_App is unused but had its address taken
  5276  0000                     
  5277                           	psect	idataBANK0
  5278  0DD7                     __pidataBANK0:	
  5279                           
  5280                           ;initializer for _EncEdgeMinTimeInterval
  5281  0DD7  34FF               	retlw	255
  5282  0DD8  34FF               	retlw	255
  5283  0DD9  34FF               	retlw	255
  5284  0DDA  34EF               	retlw	239
  5285                           
  5286                           ;initializer for _LED_Color
  5287  0DDB  3401               	retlw	1
  5288                           
  5289                           	psect	idataBANK1
  5290  0E0C                     __pidataBANK1:	
  5291                           
  5292                           ;initializer for _EncSpdredFact
  5293  0E0C  3403               	retlw	3
  5294  0E0D  3400               	retlw	0
  5295                           
  5296                           ;initializer for _MBreadPulseTimeoutSec
  5297  0E0E  3404               	retlw	4
  5298  0E0F  3400               	retlw	0
  5299                           
  5300                           ;initializer for _MBreadNoOfPulseCnt
  5301  0E10  3430               	retlw	48
  5302  0E11  3400               	retlw	0
  5303                           
  5304                           	psect	nvBANK0
  5305  005B                     __pnvBANK0:	
  5306  005B                     _timer3ReloadVal:	
  5307  005B                     	ds	2
  5308  005D                     _timer5ReloadVal:	
  5309  005D                     	ds	2
  5310                           
  5311                           	psect	nvBANK1
  5312  00D3                     __pnvBANK1:	
  5313  00D3                     _INT_InterruptHandler:	
  5314  00D3                     	ds	2
  5315  00D5                     _IOCCF5_InterruptHandler:	
  5316  00D5                     	ds	2
  5317  00D7                     _IOCCF4_InterruptHandler:	
  5318  00D7                     	ds	2
  5319  00D9                     _TMR0_InterruptHandler:	
  5320  00D9                     	ds	2
  5321  00DB                     _TMR3_InterruptHandler:	
  5322  00DB                     	ds	2
  5323  00DD                     _TMR5_InterruptHandler:	
  5324  00DD                     	ds	2
  5325  000E                     _PORTCbits	set	14
  5326  000B                     _INTCONbits	set	11
  5327  0017                     _T0CON0bits	set	23
  5328  0010                     _PIR0bits	set	16
  5329  0015                     _TMR0L	set	21
  5330  0016                     _TMR0H	set	22
  5331  0018                     _T0CON1	set	24
  5332  0017                     _T0CON0	set	23
  5333  0011                     _PIR1bits	set	17
  5334  0013                     _PIR3bits	set	19
  5335  0014                     _PIR4bits	set	20
  5336  005F                     _GIE	set	95
  5337  0097                     _WDTCON	set	151
  5338  009D                     _ADCON0bits	set	157
  5339  009C                     _ADRESH	set	156
  5340  009B                     _ADRESL	set	155
  5341  009F                     _ADACT	set	159
  5342  009E                     _ADCON1	set	158
  5343  009D                     _ADCON0	set	157
  5344  008E                     _TRISC	set	142
  5345  008D                     _TRISB	set	141
  5346  008C                     _TRISA	set	140
  5347  0090                     _PIE0bits	set	144
  5348  0093                     _PIE3bits	set	147
  5349  0094                     _PIE4bits	set	148
  5350  010E                     _LATCbits	set	270
  5351  010D                     _LATBbits	set	269
  5352  010E                     _LATC	set	270
  5353  010D                     _LATB	set	269
  5354  010C                     _LATA	set	268
  5355  018C                     _ANSELA	set	396
  5356  018D                     _ANSELB	set	397
  5357  018E                     _ANSELC	set	398
  5358  019A                     _TX1REG	set	410
  5359  0199                     _RC1REG	set	409
  5360  019D                     _RC1STAbits	set	413
  5361  019C                     _SP1BRGH	set	412
  5362  019B                     _SP1BRGL	set	411
  5363  019E                     _TX1STA	set	414
  5364  019D                     _RC1STA	set	413
  5365  019F                     _BAUD1CON	set	415
  5366  020E                     _WPUC	set	526
  5367  020C                     _WPUA	set	524
  5368  020D                     _WPUB	set	525
  5369  0295                     _CCPR2L	set	661
  5370  0296                     _CCPR2H	set	662
  5371  0298                     _CCP2CAP	set	664
  5372  0297                     _CCP2CON	set	663
  5373  029F                     _CCPTMRSbits	set	671
  5374  0291                     _CCPR1L	set	657
  5375  0292                     _CCPR1H	set	658
  5376  0294                     _CCP1CAP	set	660
  5377  0293                     _CCP1CON	set	659
  5378  028E                     _ODCONC	set	654
  5379  028D                     _ODCONB	set	653
  5380  028C                     _ODCONA	set	652
  5381  038C                     _INLVLA	set	908
  5382  038E                     _INLVLC	set	910
  5383  0397                     _IOCCPbits	set	919
  5384  0398                     _IOCCNbits	set	920
  5385  0399                     _IOCCFbits	set	921
  5386  0414                     _T3GCONbits	set	1044
  5387  0413                     _T3CONbits	set	1043
  5388  0411                     _TMR3L	set	1041
  5389  0412                     _TMR3H	set	1042
  5390  0414                     _T3GCON	set	1044
  5391  0413                     _T3CON	set	1043
  5392  041B                     _T5GCONbits	set	1051
  5393  041A                     _T5CONbits	set	1050
  5394  0418                     _TMR5L	set	1048
  5395  0419                     _TMR5H	set	1049
  5396  041B                     _T5GCON	set	1051
  5397  041A                     _T5CON	set	1050
  5398  091E                     _OSCTUNE	set	2334
  5399  091F                     _OSCFRQ	set	2335
  5400  091D                     _OSCEN	set	2333
  5401  091B                     _OSCCON3	set	2331
  5402  0919                     _OSCCON1	set	2329
  5403  0E14                     _CCP1PPSbits	set	3604
  5404  0E10                     _INTPPSbits	set	3600
  5405  0E24                     _RXPPSbits	set	3620
  5406  0E15                     _CCP2PPSbits	set	3605
  5407  0E0F                     _PPSLOCKbits	set	3599
  5408  0E0F                     _PPSLOCK	set	3599
  5409  0E9D                     _RB5PPSbits	set	3741
  5410                           
  5411                           ; #config settings
  5412  0000                     
  5413                           	psect	cinit
  5414  0050                     start_initialization:	
  5415  0050                     __initialization:		;BIGRAM
  5416                           
  5417                           ; Initialize objects allocated to BANK0
  5418  0050  30D7               	movlw	low __pidataBANK0
  5419  0051  0084               	movwf	4
  5420  0052  308D               	movlw	(high __pidataBANK0)| (0+128)
  5421  0053  0085               	movwf	5
  5422  0054  0012               	moviw fsr0++
  5423  0055  00D6               	movwf	__pdataBANK0& (0+127)
  5424  0056  0012               	moviw fsr0++
  5425  0057  00D7               	movwf	(__pdataBANK0+1)& (0+127)
  5426  0058  0012               	moviw fsr0++
  5427  0059  00D8               	movwf	(__pdataBANK0+2)& (0+127)
  5428  005A  0012               	moviw fsr0++
  5429  005B  00D9               	movwf	(__pdataBANK0+3)& (0+127)
  5430  005C  0012               	moviw fsr0++
  5431  005D  00DA               	movwf	(__pdataBANK0+4)& (0+127)
  5432                           
  5433                           ; Initialize objects allocated to BANK1
  5434  005E  300C               	movlw	low __pidataBANK1
  5435  005F  0084               	movwf	4
  5436  0060  308E               	movlw	(high __pidataBANK1)| (0+128)
  5437  0061  0085               	movwf	5
  5438  0062  0021               	movlb	1	; select bank1
  5439  0063  0012               	moviw fsr0++
  5440  0064  00EA               	movwf	__pdataBANK1& (0+127)
  5441  0065  0012               	moviw fsr0++
  5442  0066  00EB               	movwf	(__pdataBANK1+1)& (0+127)
  5443  0067  0012               	moviw fsr0++
  5444  0068  00EC               	movwf	(__pdataBANK1+2)& (0+127)
  5445  0069  0012               	moviw fsr0++
  5446  006A  00ED               	movwf	(__pdataBANK1+3)& (0+127)
  5447  006B  0012               	moviw fsr0++
  5448  006C  00EE               	movwf	(__pdataBANK1+4)& (0+127)
  5449  006D  0012               	moviw fsr0++
  5450  006E  00EF               	movwf	(__pdataBANK1+5)& (0+127)
  5451                           
  5452                           ; Clear objects allocated to BIGRAM
  5453  006F  30F0               	movlw	low (0+8432)
  5454  0070  0084               	movwf	4
  5455  0071  3020               	movlw	high (0+8432)
  5456  0072  0085               	movwf	5
  5457  0073  3000               	movlw	0
  5458  0074  00FE               	movwf	btemp
  5459  0075  3001               	movlw	1
  5460  0076  00FF               	movwf	btemp+1
  5461  0077  318E  2668  3180   	fcall	clear_ram0
  5462                           
  5463                           ; Clear objects allocated to BANK0
  5464  007A  303E               	movlw	low __pbssBANK0
  5465  007B  0084               	movwf	4
  5466  007C  3000               	movlw	high __pbssBANK0
  5467  007D  0085               	movwf	5
  5468  007E  3018               	movlw	24
  5469  007F  00FE               	movwf	btemp
  5470  0080  3000               	movlw	0
  5471  0081  00FF               	movwf	btemp+1
  5472  0082  318E  2668  3180   	fcall	clear_ram0
  5473                           
  5474                           ; Clear objects allocated to BANK1
  5475  0085  30A0               	movlw	low __pbssBANK1
  5476  0086  0084               	movwf	4
  5477  0087  3000               	movlw	high __pbssBANK1
  5478  0088  0085               	movwf	5
  5479  0089  3033               	movlw	51
  5480  008A  00FE               	movwf	btemp
  5481  008B  3000               	movlw	0
  5482  008C  00FF               	movwf	btemp+1
  5483  008D  318E  2668         	fcall	clear_ram0
  5484  008F                     end_of_initialization:	
  5485                           ;End of C runtime variable initialization code
  5486                           
  5487  008F                     __end_of__initialization:	
  5488  008F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5489  0090  0020               	movlb	0
  5490  0091  3184  2CFF         	ljmp	_main	;jump to C main() function
  5491                           
  5492                           	psect	bssBANK0
  5493  003E                     __pbssBANK0:	
  5494  003E                     _EncEdgeTimeInterval:	
  5495  003E                     	ds	4
  5496  0042                     __u16WriteQty:	
  5497  0042                     	ds	2
  5498  0044                     _EncoderPosition:	
  5499  0044                     	ds	2
  5500  0046                     _NutRunLength:	
  5501  0046                     	ds	2
  5502  0048                     _Led_ON:	
  5503  0048                     	ds	1
  5504  0049                     __u8ResponseBufferLength:	
  5505  0049                     	ds	1
  5506  004A                     __u8ResponseBufferIndex:	
  5507  004A                     	ds	1
  5508  004B                     __u8TransmitBufferIndex:	
  5509  004B                     	ds	1
  5510  004C                     __u8MBSlave:	
  5511  004C                     	ds	1
  5512  004D                     _delayFlag:	
  5513  004D                     	ds	1
  5514  004E                     _NutRunstate:	
  5515  004E                     	ds	1
  5516  004F                     _ShutdownDetected:	
  5517  004F                     	ds	1
  5518  0050                     _EncEdgeGotFlag:	
  5519  0050                     	ds	1
  5520  0051                     _flagForFirstRevolution:	
  5521  0051                     	ds	1
  5522  0052                     _EncoderPositionOneCycle:	
  5523  0052                     	ds	1
  5524  0053                     _multipleTimecheck1:	
  5525  0053                     	ds	1
  5526  0054                     _multipleTimecheck0:	
  5527  0054                     	ds	1
  5528  0055                     _EncPulseCntResult:	
  5529  0055                     	ds	1
  5530                           
  5531                           	psect	dataBANK0
  5532  0056                     __pdataBANK0:	
  5533  0056                     _EncEdgeMinTimeInterval:	
  5534  0056                     	ds	4
  5535  005A                     _LED_Color:	
  5536  005A                     	ds	1
  5537                           
  5538                           	psect	bssBANK1
  5539  00A0                     __pbssBANK1:	
  5540  00A0                     _TimertickMsec:	
  5541  00A0                     	ds	4
  5542  00A4                     _IdleTimeOnShutOff:	
  5543  00A4                     	ds	4
  5544  00A8                     _EncEdgeMinTimeIntSumAvg:	
  5545  00A8                     	ds	4
  5546  00AC                     _EncEdgeTimeIntervalOld:	
  5547  00AC                     	ds	4
  5548  00B0                     _LedON_Duration_msec:	
  5549  00B0                     	ds	2
  5550  00B2                     _Blick_tickPoint:	
  5551  00B2                     	ds	2
  5552  00B4                     _Blick_tickPointMsec:	
  5553  00B4                     	ds	2
  5554  00B6                     _LED_msec_Cnt:	
  5555  00B6                     	ds	2
  5556  00B8                     __postTransmission:	
  5557  00B8                     	ds	2
  5558  00BA                     __preTransmission:	
  5559  00BA                     	ds	2
  5560  00BC                     _u16TransmitBufferLength:	
  5561  00BC                     	ds	2
  5562  00BE                     __u16WriteAddress:	
  5563  00BE                     	ds	2
  5564  00C0                     __u16ReadQty:	
  5565  00C0                     	ds	2
  5566  00C2                     __u16ReadAddress:	
  5567  00C2                     	ds	2
  5568  00C4                     _delayCount:	
  5569  00C4                     	ds	2
  5570  00C6                     _EncoderPositionAtIndex:	
  5571  00C6                     	ds	2
  5572  00C8                     _OldEncPos:	
  5573  00C8                     	ds	2
  5574  00CA                     _OldEncPulseOpState:	
  5575  00CA                     	ds	2
  5576  00CC                     _MBread_EPC_Ctrl:	
  5577  00CC                     	ds	2
  5578  00CE                     _EncPulseOpState:	
  5579  00CE                     	ds	2
  5580  00D0                     _rxBuffer:	
  5581  00D0                     	ds	1
  5582  00D1                     _txBuffer:	
  5583  00D1                     	ds	1
  5584  00D2                     _EncPulseError:	
  5585  00D2                     	ds	1
  5586                           
  5587                           	psect	dataBANK1
  5588  00EA                     __pdataBANK1:	
  5589  00EA                     _EncSpdredFact:	
  5590  00EA                     	ds	2
  5591  00EC                     _MBreadPulseTimeoutSec:	
  5592  00EC                     	ds	2
  5593  00EE                     _MBreadNoOfPulseCnt:	
  5594  00EE                     	ds	2
  5595                           
  5596                           	psect	clrtext
  5597  0E68                     clear_ram0:	
  5598                           ;	Called with FSR0 containing the base address, and
  5599                           ;	btemp/btemp+1 has the size to clear
  5600                           
  5601  0E68  0064               	clrwdt	;clear the watchdog before getting into this loop
  5602  0E69                     clrloop0:	
  5603  0E69  0180               	clrf	0	;clear RAM location pointed to by FSR
  5604  0E6A  3101               	addfsr 0,1
  5605  0E6B  3001               	movlw	1
  5606  0E6C  02FE               	subwf	126,f
  5607  0E6D  3000               	movlw	0
  5608  0E6E  3BFF               	subwfb	127,f
  5609  0E6F  087F               	movf	127,w
  5610  0E70  047E               	iorwf	126,w
  5611  0E71  1903               	btfsc	3,2
  5612  0E72  3400               	retlw	0	;all done for this memory range, return
  5613  0E73  2E69               	goto	clrloop0	;have we reached the end yet?
  5614                           
  5615                           	psect	cstackBANK2
  5616  0120                     __pcstackBANK2:	
  5617  0120                     ??_LedONStartConfig:	
  5618                           
  5619                           ; 1 bytes @ 0x0
  5620  0120                     	ds	2
  5621  0122                     ??_EPC_StateMachineControlLoop:	
  5622                           
  5623                           ; 1 bytes @ 0x2
  5624  0122                     	ds	4
  5625                           
  5626                           	psect	cstackBANK1
  5627  00DF                     __pcstackBANK1:	
  5628  00DF                     ?_TMR5_SetInterruptHandler:	
  5629  00DF                     ??_TMR5_StartTimer:	
  5630                           ; 1 bytes @ 0x0
  5631                           
  5632  00DF                     ?_TMR3_SetInterruptHandler:	
  5633                           ; 1 bytes @ 0x0
  5634                           
  5635  00DF                     ??_TMR3_StartTimer:	
  5636                           ; 1 bytes @ 0x0
  5637                           
  5638  00DF                     ?_TMR0_SetInterruptHandler:	
  5639                           ; 1 bytes @ 0x0
  5640                           
  5641  00DF                     ??_TMR0_StartTimer:	
  5642                           ; 1 bytes @ 0x0
  5643                           
  5644  00DF                     ?_IOCCF4_SetInterruptHandler:	
  5645                           ; 1 bytes @ 0x0
  5646                           
  5647  00DF                     ?_IOCCF5_SetInterruptHandler:	
  5648                           ; 1 bytes @ 0x0
  5649                           
  5650  00DF                     ??_OSCILLATOR_Initialize:	
  5651                           ; 1 bytes @ 0x0
  5652                           
  5653  00DF                     ??_WDT_Initialize:	
  5654                           ; 1 bytes @ 0x0
  5655                           
  5656  00DF                     ??_getEncoderState:	
  5657                           ; 1 bytes @ 0x0
  5658                           
  5659  00DF                     ??_LedONStatusBusy:	
  5660                           ; 1 bytes @ 0x0
  5661                           
  5662  00DF                     ??_valtoasciichar:	
  5663                           ; 1 bytes @ 0x0
  5664                           
  5665  00DF                     ??_TMR5_StopTimer:	
  5666                           ; 1 bytes @ 0x0
  5667                           
  5668  00DF                     ?_TMR5_WriteTimer:	
  5669                           ; 1 bytes @ 0x0
  5670                           
  5671  00DF                     ??_TMR3_StopTimer:	
  5672                           ; 1 bytes @ 0x0
  5673                           
  5674  00DF                     ?_TMR3_WriteTimer:	
  5675                           ; 1 bytes @ 0x0
  5676                           
  5677  00DF                     ??_EUSART_Initialize:	
  5678                           ; 1 bytes @ 0x0
  5679                           
  5680  00DF                     ??_EUSART_Write:	
  5681                           ; 1 bytes @ 0x0
  5682                           
  5683  00DF                     ??_CCP1_Initialize:	
  5684                           ; 1 bytes @ 0x0
  5685                           
  5686  00DF                     ??_CCP2_Initialize:	
  5687                           ; 1 bytes @ 0x0
  5688                           
  5689  00DF                     ??_ADC_Initialize:	
  5690                           ; 1 bytes @ 0x0
  5691                           
  5692  00DF                     ??_NutRunCycleReset:	
  5693                           ; 1 bytes @ 0x0
  5694                           
  5695  00DF                     ??_ModbusMasterInit:	
  5696                           ; 1 bytes @ 0x0
  5697                           
  5698  00DF                     ?_preTransmission:	
  5699                           ; 1 bytes @ 0x0
  5700                           
  5701  00DF                     ?_postTransmission:	
  5702                           ; 1 bytes @ 0x0
  5703                           
  5704  00DF                     ?_INT_SetInterruptHandler:	
  5705                           ; 1 bytes @ 0x0
  5706                           
  5707  00DF                     ?___wmul:	
  5708                           ; 1 bytes @ 0x0
  5709                           
  5710  00DF                     ?___lwdiv:	
  5711                           ; 2 bytes @ 0x0
  5712                           
  5713  00DF                     EUSART_Write@txData:	
  5714                           ; 2 bytes @ 0x0
  5715                           
  5716  00DF                     TMR5_WriteTimer@timerVal:	
  5717                           ; 1 bytes @ 0x0
  5718                           
  5719  00DF                     TMR5_SetInterruptHandler@InterruptHandler:	
  5720                           ; 2 bytes @ 0x0
  5721                           
  5722  00DF                     TMR3_WriteTimer@timerVal:	
  5723                           ; 2 bytes @ 0x0
  5724                           
  5725  00DF                     TMR3_SetInterruptHandler@InterruptHandler:	
  5726                           ; 2 bytes @ 0x0
  5727                           
  5728  00DF                     TMR0_SetInterruptHandler@InterruptHandler:	
  5729                           ; 2 bytes @ 0x0
  5730                           
  5731  00DF                     IOCCF4_SetInterruptHandler@InterruptHandler:	
  5732                           ; 2 bytes @ 0x0
  5733                           
  5734  00DF                     IOCCF5_SetInterruptHandler@InterruptHandler:	
  5735                           ; 2 bytes @ 0x0
  5736                           
  5737  00DF                     preTransmission@preTransmission:	
  5738                           ; 2 bytes @ 0x0
  5739                           
  5740  00DF                     postTransmission@postTransmission:	
  5741                           ; 2 bytes @ 0x0
  5742                           
  5743  00DF                     INT_SetInterruptHandler@InterruptHandler:	
  5744                           ; 2 bytes @ 0x0
  5745                           
  5746  00DF                     ___wmul@multiplier:	
  5747                           ; 2 bytes @ 0x0
  5748                           
  5749  00DF                     ___lwdiv@divisor:	
  5750                           ; 2 bytes @ 0x0
  5751                           
  5752                           
  5753                           ; 2 bytes @ 0x0
  5754  00DF                     	ds	1
  5755  00E0                     valtoasciichar@hexvalue1:	
  5756  00E0                     ModbusMasterInit@slave:	
  5757                           ; 1 bytes @ 0x1
  5758                           
  5759                           
  5760                           ; 1 bytes @ 0x1
  5761  00E0                     	ds	1
  5762  00E1                     ??_TMR5_SetInterruptHandler:	
  5763  00E1                     ??_TMR3_SetInterruptHandler:	
  5764                           ; 1 bytes @ 0x2
  5765                           
  5766  00E1                     ??_TMR0_SetInterruptHandler:	
  5767                           ; 1 bytes @ 0x2
  5768                           
  5769  00E1                     ??_IOCCF4_SetInterruptHandler:	
  5770                           ; 1 bytes @ 0x2
  5771                           
  5772  00E1                     ??_IOCCF5_SetInterruptHandler:	
  5773                           ; 1 bytes @ 0x2
  5774                           
  5775  00E1                     ??_EXT_INT_Initialize:	
  5776                           ; 1 bytes @ 0x2
  5777                           
  5778  00E1                     ??_ModbusMasterSetup:	
  5779                           ; 1 bytes @ 0x2
  5780                           
  5781  00E1                     ??_NutRunCycleStart:	
  5782                           ; 1 bytes @ 0x2
  5783                           
  5784  00E1                     ??_TMR5_Initialize:	
  5785                           ; 1 bytes @ 0x2
  5786                           
  5787  00E1                     ??_TMR5_WriteTimer:	
  5788                           ; 1 bytes @ 0x2
  5789                           
  5790  00E1                     ??_TMR3_Initialize:	
  5791                           ; 1 bytes @ 0x2
  5792                           
  5793  00E1                     ??_TMR3_WriteTimer:	
  5794                           ; 1 bytes @ 0x2
  5795                           
  5796  00E1                     ??_TMR0_Initialize:	
  5797                           ; 1 bytes @ 0x2
  5798                           
  5799  00E1                     ??_PIN_MANAGER_Initialize:	
  5800                           ; 1 bytes @ 0x2
  5801                           
  5802  00E1                     ??_preTransmission:	
  5803                           ; 1 bytes @ 0x2
  5804                           
  5805  00E1                     ??_postTransmission:	
  5806                           ; 1 bytes @ 0x2
  5807                           
  5808  00E1                     ??_INT_SetInterruptHandler:	
  5809                           ; 1 bytes @ 0x2
  5810                           
  5811  00E1                     PIN_MANAGER_Initialize@state:	
  5812                           ; 1 bytes @ 0x2
  5813                           
  5814  00E1                     valtoasciichar@hexval:	
  5815                           ; 1 bytes @ 0x2
  5816                           
  5817  00E1                     ___wmul@multiplicand:	
  5818                           ; 1 bytes @ 0x2
  5819                           
  5820  00E1                     ___lwdiv@dividend:	
  5821                           ; 2 bytes @ 0x2
  5822                           
  5823                           
  5824                           ; 2 bytes @ 0x2
  5825  00E1                     	ds	1
  5826  00E2                     ??_valuetocharHighNibble:	
  5827  00E2                     ??_valuetocharLowNibble:	
  5828                           ; 1 bytes @ 0x3
  5829                           
  5830  00E2                     ??_SYSTEM_Initialize:	
  5831                           ; 1 bytes @ 0x3
  5832                           
  5833                           
  5834                           ; 1 bytes @ 0x3
  5835  00E2                     	ds	1
  5836  00E3                     ??___wmul:	
  5837  00E3                     ??___lwdiv:	
  5838                           ; 1 bytes @ 0x4
  5839                           
  5840  00E3                     valuetocharLowNibble@hexvalue:	
  5841                           ; 1 bytes @ 0x4
  5842                           
  5843  00E3                     ___wmul@product:	
  5844                           ; 1 bytes @ 0x4
  5845                           
  5846                           
  5847                           ; 2 bytes @ 0x4
  5848  00E3                     	ds	1
  5849  00E4                     valuetocharHighNibble@hexvalue:	
  5850  00E4                     valuetocharLowNibble@hexval:	
  5851                           ; 1 bytes @ 0x5
  5852                           
  5853  00E4                     ___lwdiv@counter:	
  5854                           ; 1 bytes @ 0x5
  5855                           
  5856                           
  5857                           ; 1 bytes @ 0x5
  5858  00E4                     	ds	1
  5859  00E5                     valuetocharHighNibble@hexval:	
  5860  00E5                     ___lwdiv@quotient:	
  5861                           ; 1 bytes @ 0x6
  5862                           
  5863                           
  5864                           ; 2 bytes @ 0x6
  5865  00E5                     	ds	2
  5866  00E7                     ?_LedONStartConfig:	
  5867  00E7                     LedONStartConfig@LedONDurationSec:	
  5868                           ; 1 bytes @ 0x8
  5869                           
  5870                           
  5871                           ; 1 bytes @ 0x8
  5872  00E7                     	ds	1
  5873  00E8                     LedONStartConfig@LedONNumBlink:	
  5874                           
  5875                           ; 1 bytes @ 0x9
  5876  00E8                     	ds	1
  5877  00E9                     LedONStartConfig@LEDcolor:	
  5878                           
  5879                           ; 1 bytes @ 0xA
  5880  00E9                     	ds	1
  5881  00EA                     ??_main:	
  5882                           
  5883                           	psect	cstackCOMMON
  5884  0070                     __pcstackCOMMON:	
  5885                           ; 1 bytes @ 0xB
  5886                           
  5887  0070                     ?_TMR5_DefaultInterruptHandler:	
  5888  0070                     ??_TMR5_DefaultInterruptHandler:	
  5889                           ; 1 bytes @ 0x0
  5890                           
  5891  0070                     ?_TMR5_StartTimer:	
  5892                           ; 1 bytes @ 0x0
  5893                           
  5894  0070                     ?_Timer5_Overflow:	
  5895                           ; 1 bytes @ 0x0
  5896                           
  5897  0070                     ??_Timer5_Overflow:	
  5898                           ; 1 bytes @ 0x0
  5899                           
  5900  0070                     ?_TMR3_DefaultInterruptHandler:	
  5901                           ; 1 bytes @ 0x0
  5902                           
  5903  0070                     ?_TMR3_StartTimer:	
  5904                           ; 1 bytes @ 0x0
  5905                           
  5906  0070                     ?_Timer3_Overflow:	
  5907                           ; 1 bytes @ 0x0
  5908                           
  5909  0070                     ??_Timer3_Overflow:	
  5910                           ; 1 bytes @ 0x0
  5911                           
  5912  0070                     ?_TMR0_DefaultInterruptHandler:	
  5913                           ; 1 bytes @ 0x0
  5914                           
  5915  0070                     ??_TMR0_DefaultInterruptHandler:	
  5916                           ; 1 bytes @ 0x0
  5917                           
  5918  0070                     ?_TMR0_StartTimer:	
  5919                           ; 1 bytes @ 0x0
  5920                           
  5921  0070                     ?_TMR0_CallBack:	
  5922                           ; 1 bytes @ 0x0
  5923                           
  5924  0070                     ?_Timer0_tick10msecFunc:	
  5925                           ; 1 bytes @ 0x0
  5926                           
  5927  0070                     ??_Timer0_tick10msecFunc:	
  5928                           ; 1 bytes @ 0x0
  5929                           
  5930  0070                     ?_IOCCF4_DefaultInterruptHandler:	
  5931                           ; 1 bytes @ 0x0
  5932                           
  5933  0070                     ??_IOCCF4_DefaultInterruptHandler:	
  5934                           ; 1 bytes @ 0x0
  5935                           
  5936  0070                     ?_IOCCF5_DefaultInterruptHandler:	
  5937                           ; 1 bytes @ 0x0
  5938                           
  5939  0070                     ??_IOCCF5_DefaultInterruptHandler:	
  5940                           ; 1 bytes @ 0x0
  5941                           
  5942  0070                     ?_IOCCF4_ISR:	
  5943                           ; 1 bytes @ 0x0
  5944                           
  5945  0070                     ??_IOCCF4_ISR:	
  5946                           ; 1 bytes @ 0x0
  5947                           
  5948  0070                     ?_IOCCF5_ISR:	
  5949                           ; 1 bytes @ 0x0
  5950                           
  5951  0070                     ??_IOCCF5_ISR:	
  5952                           ; 1 bytes @ 0x0
  5953                           
  5954  0070                     ?_INT_ISR:	
  5955                           ; 1 bytes @ 0x0
  5956                           
  5957  0070                     ?_OSCILLATOR_Initialize:	
  5958                           ; 1 bytes @ 0x0
  5959                           
  5960  0070                     ?_WDT_Initialize:	
  5961                           ; 1 bytes @ 0x0
  5962                           
  5963  0070                     ?_EXT_INT_Initialize:	
  5964                           ; 1 bytes @ 0x0
  5965                           
  5966  0070                     ?_ModbusMasterSetup:	
  5967                           ; 1 bytes @ 0x0
  5968                           
  5969  0070                     ?_getEncoderState:	
  5970                           ; 1 bytes @ 0x0
  5971                           
  5972  0070                     ?_NutRunCycleStart:	
  5973                           ; 1 bytes @ 0x0
  5974                           
  5975  0070                     ?_LedONStatusBusy:	
  5976                           ; 1 bytes @ 0x0
  5977                           
  5978  0070                     ?_EPC_StateMachineControlLoop:	
  5979                           ; 1 bytes @ 0x0
  5980                           
  5981  0070                     ?_valuetocharHighNibble:	
  5982                           ; 1 bytes @ 0x0
  5983                           
  5984  0070                     ?_valuetocharLowNibble:	
  5985                           ; 1 bytes @ 0x0
  5986                           
  5987  0070                     ?_NutRunCycleStop:	
  5988                           ; 1 bytes @ 0x0
  5989                           
  5990  0070                     ?_LedON_Control_10msec:	
  5991                           ; 1 bytes @ 0x0
  5992                           
  5993  0070                     ??_LedON_Control_10msec:	
  5994                           ; 1 bytes @ 0x0
  5995                           
  5996  0070                     ?_valtoasciichar:	
  5997                           ; 1 bytes @ 0x0
  5998                           
  5999  0070                     ?_INT_CallBack:	
  6000                           ; 1 bytes @ 0x0
  6001                           
  6002  0070                     ?_TMR5_Initialize:	
  6003                           ; 1 bytes @ 0x0
  6004                           
  6005  0070                     ?_TMR5_StopTimer:	
  6006                           ; 1 bytes @ 0x0
  6007                           
  6008  0070                     ?_TMR5_ISR:	
  6009                           ; 1 bytes @ 0x0
  6010                           
  6011  0070                     ??_TMR5_ISR:	
  6012                           ; 1 bytes @ 0x0
  6013                           
  6014  0070                     ?_TMR3_Initialize:	
  6015                           ; 1 bytes @ 0x0
  6016                           
  6017  0070                     ?_TMR3_StopTimer:	
  6018                           ; 1 bytes @ 0x0
  6019                           
  6020  0070                     ?_TMR3_ISR:	
  6021                           ; 1 bytes @ 0x0
  6022                           
  6023  0070                     ?_EUSART_Initialize:	
  6024                           ; 1 bytes @ 0x0
  6025                           
  6026  0070                     ?_EUSART_Write:	
  6027                           ; 1 bytes @ 0x0
  6028                           
  6029  0070                     ?_TMR0_Initialize:	
  6030                           ; 1 bytes @ 0x0
  6031                           
  6032  0070                     ?_TMR0_ISR:	
  6033                           ; 1 bytes @ 0x0
  6034                           
  6035  0070                     ?_PIN_MANAGER_Initialize:	
  6036                           ; 1 bytes @ 0x0
  6037                           
  6038  0070                     ?_PIN_MANAGER_IOC:	
  6039                           ; 1 bytes @ 0x0
  6040                           
  6041  0070                     ??_PIN_MANAGER_IOC:	
  6042                           ; 1 bytes @ 0x0
  6043                           
  6044  0070                     ?_CCP1_Initialize:	
  6045                           ; 1 bytes @ 0x0
  6046                           
  6047  0070                     ?_CCP1_CaptureISR:	
  6048                           ; 1 bytes @ 0x0
  6049                           
  6050  0070                     ?_CCP2_Initialize:	
  6051                           ; 1 bytes @ 0x0
  6052                           
  6053  0070                     ?_ADC_Initialize:	
  6054                           ; 1 bytes @ 0x0
  6055                           
  6056  0070                     ?_INTERRUPT_InterruptManager:	
  6057                           ; 1 bytes @ 0x0
  6058                           
  6059  0070                     ?_SYSTEM_Initialize:	
  6060                           ; 1 bytes @ 0x0
  6061                           
  6062  0070                     ?_main:	
  6063                           ; 1 bytes @ 0x0
  6064                           
  6065  0070                     ?_NutRunCycleReset:	
  6066                           ; 1 bytes @ 0x0
  6067                           
  6068  0070                     ?_EncINX_PulseRisingEvent:	
  6069                           ; 1 bytes @ 0x0
  6070                           
  6071  0070                     ?_ModbusMasterInit:	
  6072                           ; 1 bytes @ 0x0
  6073                           
  6074  0070                     ?_INT_DefaultInterruptHandler:	
  6075                           ; 1 bytes @ 0x0
  6076                           
  6077  0070                     ??_INT_DefaultInterruptHandler:	
  6078                           ; 1 bytes @ 0x0
  6079                           
  6080  0070                     ?i1_TMR5_StopTimer:	
  6081                           ; 1 bytes @ 0x0
  6082                           
  6083  0070                     ??i1_TMR5_StopTimer:	
  6084                           ; 1 bytes @ 0x0
  6085                           
  6086  0070                     ?i1_TMR5_WriteTimer:	
  6087                           ; 1 bytes @ 0x0
  6088                           
  6089  0070                     ?i1_TMR3_StartTimer:	
  6090                           ; 1 bytes @ 0x0
  6091                           
  6092  0070                     ??i1_TMR3_StartTimer:	
  6093                           ; 1 bytes @ 0x0
  6094                           
  6095  0070                     ?i1_TMR3_StopTimer:	
  6096                           ; 1 bytes @ 0x0
  6097                           
  6098  0070                     ??i1_TMR3_StopTimer:	
  6099                           ; 1 bytes @ 0x0
  6100                           
  6101  0070                     ?i1_TMR3_WriteTimer:	
  6102                           ; 1 bytes @ 0x0
  6103                           
  6104  0070                     ?i1_EUSART_Write:	
  6105                           ; 1 bytes @ 0x0
  6106                           
  6107  0070                     ??i1_EUSART_Write:	
  6108                           ; 1 bytes @ 0x0
  6109                           
  6110  0070                     ?i1_NutRunCycleReset:	
  6111                           ; 1 bytes @ 0x0
  6112                           
  6113  0070                     ??i1_NutRunCycleReset:	
  6114                           ; 1 bytes @ 0x0
  6115                           
  6116  0070                     ?i1_NutRunCycleStart:	
  6117                           ; 1 bytes @ 0x0
  6118                           
  6119  0070                     ?i1_getEncoderState:	
  6120                           ; 1 bytes @ 0x0
  6121                           
  6122  0070                     ??i1_getEncoderState:	
  6123                           ; 1 bytes @ 0x0
  6124                           
  6125  0070                     ?_millis:	
  6126                           ; 1 bytes @ 0x0
  6127                           
  6128  0070                     ?___lmul:	
  6129                           ; 4 bytes @ 0x0
  6130                           
  6131  0070                     i1EUSART_Write@txData:	
  6132                           ; 4 bytes @ 0x0
  6133                           
  6134  0070                     i1TMR5_WriteTimer@timerVal:	
  6135                           ; 1 bytes @ 0x0
  6136                           
  6137  0070                     i1TMR3_WriteTimer@timerVal:	
  6138                           ; 2 bytes @ 0x0
  6139                           
  6140  0070                     ___lmul@multiplier:	
  6141                           ; 2 bytes @ 0x0
  6142                           
  6143                           
  6144                           ; 4 bytes @ 0x0
  6145  0070                     	ds	1
  6146  0071                     ??_INT_ISR:	
  6147  0071                     ??_INT_CallBack:	
  6148                           ; 1 bytes @ 0x1
  6149                           
  6150  0071                     ??_EncINX_PulseRisingEvent:	
  6151                           ; 1 bytes @ 0x1
  6152                           
  6153                           
  6154                           ; 1 bytes @ 0x1
  6155  0071                     	ds	1
  6156  0072                     ??_NutRunCycleStop:	
  6157  0072                     ??i1_TMR5_WriteTimer:	
  6158                           ; 1 bytes @ 0x2
  6159                           
  6160  0072                     ??i1_TMR3_WriteTimer:	
  6161                           ; 1 bytes @ 0x2
  6162                           
  6163  0072                     ??i1_NutRunCycleStart:	
  6164                           ; 1 bytes @ 0x2
  6165                           
  6166                           
  6167                           ; 1 bytes @ 0x2
  6168  0072                     	ds	2
  6169  0074                     ??_TMR3_DefaultInterruptHandler:	
  6170  0074                     ??_TMR0_CallBack:	
  6171                           ; 1 bytes @ 0x4
  6172                           
  6173  0074                     ??_millis:	
  6174                           ; 1 bytes @ 0x4
  6175                           
  6176  0074                     ??_TMR3_ISR:	
  6177                           ; 1 bytes @ 0x4
  6178                           
  6179  0074                     ??_TMR0_ISR:	
  6180                           ; 1 bytes @ 0x4
  6181                           
  6182  0074                     ___lmul@multiplicand:	
  6183                           ; 1 bytes @ 0x4
  6184                           
  6185                           
  6186                           ; 4 bytes @ 0x4
  6187  0074                     	ds	4
  6188  0078                     ??___lmul:	
  6189  0078                     ___lmul@product:	
  6190                           ; 1 bytes @ 0x8
  6191                           
  6192                           
  6193                           ; 4 bytes @ 0x8
  6194  0078                     	ds	4
  6195  007C                     ??___lldiv:	
  6196                           
  6197                           ; 1 bytes @ 0xC
  6198  007C                     	ds	1
  6199  007D                     ??_CCP1_CallBack:	
  6200  007D                     ??_EncA_PulseEdgeEvent:	
  6201                           ; 1 bytes @ 0xD
  6202                           
  6203  007D                     ??_CCP1_CaptureISR:	
  6204                           ; 1 bytes @ 0xD
  6205                           
  6206                           
  6207                           ; 1 bytes @ 0xD
  6208  007D                     	ds	1
  6209                           
  6210                           	psect	cstackBANK0
  6211  0020                     __pcstackBANK0:	
  6212  0020                     ?___lldiv:	
  6213  0020                     ___lldiv@divisor:	
  6214                           ; 4 bytes @ 0x0
  6215                           
  6216                           
  6217                           ; 4 bytes @ 0x0
  6218  0020                     	ds	4
  6219  0024                     ___lldiv@dividend:	
  6220                           
  6221                           ; 4 bytes @ 0x4
  6222  0024                     	ds	4
  6223  0028                     ___lldiv@quotient:	
  6224                           
  6225                           ; 4 bytes @ 0x8
  6226  0028                     	ds	4
  6227  002C                     ___lldiv@counter:	
  6228                           
  6229                           ; 1 bytes @ 0xC
  6230  002C                     	ds	1
  6231  002D                     ?_OnEncPulseEdgeEvent:	
  6232  002D                     OnEncPulseEdgeEvent@capturevalue:	
  6233                           ; 1 bytes @ 0xD
  6234                           
  6235                           
  6236                           ; 2 bytes @ 0xD
  6237  002D                     	ds	2
  6238  002F                     ??_OnEncPulseEdgeEvent:	
  6239                           
  6240                           ; 1 bytes @ 0xF
  6241  002F                     	ds	8
  6242  0037                     ?_EncA_PulseEdgeEvent:	
  6243  0037                     EncA_PulseEdgeEvent@capturedValue:	
  6244                           ; 1 bytes @ 0x17
  6245                           
  6246                           
  6247                           ; 2 bytes @ 0x17
  6248  0037                     	ds	2
  6249  0039                     ?_CCP1_CallBack:	
  6250  0039                     CCP1_CallBack@capturedValue:	
  6251                           ; 1 bytes @ 0x19
  6252                           
  6253                           
  6254                           ; 2 bytes @ 0x19
  6255  0039                     	ds	2
  6256  003B                     CCP1_CaptureISR@module:	
  6257                           
  6258                           ; 2 bytes @ 0x1B
  6259  003B                     	ds	2
  6260  003D                     ??_INTERRUPT_InterruptManager:	
  6261                           
  6262                           ; 1 bytes @ 0x1D
  6263  003D                     	ds	1
  6264                           
  6265                           	psect	maintext
  6266  04FF                     __pmaintext:	
  6267 ;;
  6268 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6269 ;;
  6270 ;; *************** function _main *****************
  6271 ;; Defined at:
  6272 ;;		line 108 in file "main.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;		None
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;		None
  6277 ;; Return value:  Size  Location     Type
  6278 ;;                  1    wreg      void 
  6279 ;; Registers used:
  6280 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6281 ;; Tracked objects:
  6282 ;;		On entry : B1F/0
  6283 ;;		On exit  : 0/0
  6284 ;;		Unchanged: 0/0
  6285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6286 ;;      Params:         0       0       0       0       0       0       0       0
  6287 ;;      Locals:         0       0       0       0       0       0       0       0
  6288 ;;      Temps:          0       0       0       0       0       0       0       0
  6289 ;;      Totals:         0       0       0       0       0       0       0       0
  6290 ;;Total ram usage:        0 bytes
  6291 ;; Hardware stack levels required when called:   10
  6292 ;; This function calls:
  6293 ;;		_EPC_StateMachineControlLoop
  6294 ;;		_LedONStartConfig
  6295 ;;		_LedONStatusBusy
  6296 ;;		_ModbusMasterSetup
  6297 ;;		_NutRunCycleStart
  6298 ;;		_SYSTEM_Initialize
  6299 ;;		_TMR3_StopTimer
  6300 ;;		_TMR3_WriteTimer
  6301 ;;		_TMR5_StopTimer
  6302 ;;		_TMR5_WriteTimer
  6303 ;;		_getEncoderState
  6304 ;; This function is called by:
  6305 ;;		Startup code after reset
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309                           
  6310                           ;psect for function _main
  6311  04FF                     _main:	
  6312                           
  6313                           ;main.c: 111: SYSTEM_Initialize();
  6314                           
  6315                           ;incstack = 0
  6316                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6317  04FF  3187  272F  3184   	fcall	_SYSTEM_Initialize
  6318                           
  6319                           ;main.c: 118: TMR3_WriteTimer(0);
  6320  0502  3000               	movlw	0
  6321  0503  0021               	movlb	1	; select bank1
  6322  0504  00DF               	movwf	TMR3_WriteTimer@timerVal^(0+128)
  6323  0505  00E0               	movwf	(TMR3_WriteTimer@timerVal+1)^(0+128)
  6324  0506  318F  27E9  3184   	fcall	_TMR3_WriteTimer
  6325                           
  6326                           ;main.c: 119: TMR3_StopTimer();
  6327  0509  318D  25C3  3184   	fcall	_TMR3_StopTimer
  6328                           
  6329                           ;main.c: 120: TMR5_WriteTimer(0);
  6330  050C  3000               	movlw	0
  6331  050D  0021               	movlb	1	; select bank1
  6332  050E  00DF               	movwf	TMR5_WriteTimer@timerVal^(0+128)
  6333  050F  00E0               	movwf	(TMR5_WriteTimer@timerVal+1)^(0+128)
  6334  0510  3187  27D9  3184   	fcall	_TMR5_WriteTimer
  6335                           
  6336                           ;main.c: 121: TMR5_StopTimer();
  6337  0513  318D  25C6  3184   	fcall	_TMR5_StopTimer
  6338                           
  6339                           ;main.c: 123: ModbusMasterSetup();
  6340  0516  3187  27C0  3184   	fcall	_ModbusMasterSetup
  6341                           
  6342                           ;main.c: 124: EncPulseOpState=0;
  6343  0519  0021               	movlb	1	; select bank1
  6344  051A  01CE               	clrf	_EncPulseOpState^(0+128)
  6345  051B  01CF               	clrf	(_EncPulseOpState+1)^(0+128)
  6346                           
  6347                           ;main.c: 126: INLVLC = 0xFF;
  6348  051C  30FF               	movlw	255
  6349  051D  0027               	movlb	7	; select bank7
  6350  051E  008E               	movwf	14	;volatile
  6351                           
  6352                           ;main.c: 127: INLVLA = 0xFF;
  6353  051F  30FF               	movlw	255
  6354  0520  008C               	movwf	12	;volatile
  6355                           
  6356                           ;main.c: 129: getEncoderState();
  6357  0521  318F  2710  3184   	fcall	_getEncoderState
  6358                           
  6359                           ;main.c: 130: OldEncPulseOpState=EncPulseOpState;
  6360  0524  0021               	movlb	1	; select bank1
  6361  0525  084F               	movf	(_EncPulseOpState+1)^(0+128),w
  6362  0526  00CB               	movwf	(_OldEncPulseOpState+1)^(0+128)
  6363  0527  084E               	movf	_EncPulseOpState^(0+128),w
  6364  0528  00CA               	movwf	_OldEncPulseOpState^(0+128)
  6365                           
  6366                           ;main.c: 131: NutRunCycleStart();
  6367  0529  318E  26F2  3184   	fcall	_NutRunCycleStart
  6368                           
  6369                           ;main.c: 141: (INTCONbits.GIE = 1);
  6370  052C  178B               	bsf	11,7	;volatile
  6371                           
  6372                           ;main.c: 144: (INTCONbits.PEIE = 1);
  6373  052D  170B               	bsf	11,6	;volatile
  6374                           
  6375                           ;main.c: 146: LedONStartConfig(0, 1, 1);
  6376  052E  0021               	movlb	1	; select bank1
  6377  052F  01E7               	clrf	LedONStartConfig@LedONDurationSec^(0+128)
  6378  0530  0AE7               	incf	LedONStartConfig@LedONDurationSec^(0+128),f
  6379  0531  01E8               	clrf	LedONStartConfig@LedONNumBlink^(0+128)
  6380  0532  0AE8               	incf	LedONStartConfig@LedONNumBlink^(0+128),f
  6381  0533  3000               	movlw	0
  6382  0534  3184  2422  3184   	fcall	_LedONStartConfig
  6383  0537                     l5319:	
  6384                           ;main.c: 147: while(LedONStatusBusy());
  6385                           
  6386  0537  318D  25B7  3184   	fcall	_LedONStatusBusy
  6387  053A  3A00               	xorlw	0
  6388  053B  1D03               	skipz
  6389  053C  2D37               	goto	l5319
  6390                           
  6391                           ;main.c: 148: LedONStartConfig(1, 1, 1);
  6392  053D  0021               	movlb	1	; select bank1
  6393  053E  01E7               	clrf	LedONStartConfig@LedONDurationSec^(0+128)
  6394  053F  0AE7               	incf	LedONStartConfig@LedONDurationSec^(0+128),f
  6395  0540  01E8               	clrf	LedONStartConfig@LedONNumBlink^(0+128)
  6396  0541  0AE8               	incf	LedONStartConfig@LedONNumBlink^(0+128),f
  6397  0542  3001               	movlw	1
  6398  0543  3184  2422  3184   	fcall	_LedONStartConfig
  6399  0546                     l5323:	
  6400                           ;main.c: 149: while(LedONStatusBusy());
  6401                           
  6402  0546  318D  25B7  3184   	fcall	_LedONStatusBusy
  6403  0549  3A00               	xorlw	0
  6404  054A  1D03               	skipz
  6405  054B  2D46               	goto	l5323
  6406                           
  6407                           ;main.c: 150: LedONStartConfig(2, 1, 1);
  6408  054C  0021               	movlb	1	; select bank1
  6409  054D  01E7               	clrf	LedONStartConfig@LedONDurationSec^(0+128)
  6410  054E  0AE7               	incf	LedONStartConfig@LedONDurationSec^(0+128),f
  6411  054F  01E8               	clrf	LedONStartConfig@LedONNumBlink^(0+128)
  6412  0550  0AE8               	incf	LedONStartConfig@LedONNumBlink^(0+128),f
  6413  0551  3002               	movlw	2
  6414  0552  3184  2422  3184   	fcall	_LedONStartConfig
  6415  0555                     l5327:	
  6416                           ;main.c: 151: while(LedONStatusBusy());
  6417                           
  6418  0555  318D  25B7  3184   	fcall	_LedONStatusBusy
  6419  0558  3A00               	xorlw	0
  6420  0559  1D03               	skipz
  6421  055A  2D55               	goto	l5327
  6422                           
  6423                           ;main.c: 153: do { LATBbits.LATB6 = 1; } while(0);
  6424  055B  0022               	movlb	2	; select bank2
  6425  055C  170D               	bsf	13,6	;volatile
  6426  055D                     l5329:	
  6427                           ;main.c: 155: while (1)
  6428                           
  6429                           
  6430                           ;main.c: 156: {
  6431                           ;main.c: 168: EPC_StateMachineControlLoop();
  6432  055D  3182  22C1  3184   	fcall	_EPC_StateMachineControlLoop
  6433  0560  2D5D               	goto	l5329
  6434  0561                     __end_of_main:	
  6435                           
  6436                           	psect	text1
  6437  0F10                     __ptext1:	
  6438 ;; *************** function _getEncoderState *****************
  6439 ;; Defined at:
  6440 ;;		line 510 in file "main.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;		None
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;		None
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  1    wreg      void 
  6447 ;; Registers used:
  6448 ;;		wreg
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6454 ;;      Params:         0       0       0       0       0       0       0       0
  6455 ;;      Locals:         0       0       0       0       0       0       0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0       0
  6457 ;;      Totals:         0       0       0       0       0       0       0       0
  6458 ;;Total ram usage:        0 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    7
  6461 ;; This function calls:
  6462 ;;		Nothing
  6463 ;; This function is called by:
  6464 ;;		_main
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           
  6469                           ;psect for function _getEncoderState
  6470  0F10                     _getEncoderState:	
  6471                           
  6472                           ;main.c: 512: if(PORTCbits.RC5)
  6473                           
  6474                           ;incstack = 0
  6475                           ; Regs used in _getEncoderState: [wreg]
  6476  0F10  0020               	movlb	0	; select bank0
  6477  0F11  1E8E               	btfss	14,5	;volatile
  6478  0F12  2F19               	goto	l5175
  6479                           
  6480                           ;main.c: 513: {
  6481                           ;main.c: 514: EncPulseOpState= 2;
  6482  0F13  3002               	movlw	2
  6483  0F14  0021               	movlb	1	; select bank1
  6484  0F15  00CE               	movwf	_EncPulseOpState^(0+128)
  6485  0F16  3000               	movlw	0
  6486  0F17  00CF               	movwf	(_EncPulseOpState^(0+128)+1)
  6487                           
  6488                           ;main.c: 517: }
  6489  0F18  0008               	return
  6490  0F19                     l5175:	
  6491                           
  6492                           ;main.c: 518: else
  6493                           ;main.c: 519: {
  6494                           ;main.c: 520: EncPulseOpState= 1;
  6495  0F19  3001               	movlw	1
  6496  0F1A  0021               	movlb	1	; select bank1
  6497  0F1B  00CE               	movwf	_EncPulseOpState^(0+128)
  6498  0F1C  3000               	movlw	0
  6499  0F1D  00CF               	movwf	(_EncPulseOpState^(0+128)+1)
  6500  0F1E  0008               	return
  6501  0F1F                     __end_of_getEncoderState:	
  6502                           
  6503                           	psect	text2
  6504  07D9                     __ptext2:	
  6505 ;; *************** function _TMR5_WriteTimer *****************
  6506 ;; Defined at:
  6507 ;;		line 117 in file "mcc_generated_files/tmr5.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;  timerVal        2    0[BANK1 ] unsigned int 
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;		None
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      void 
  6514 ;; Registers used:
  6515 ;;		wreg, status,2
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6521 ;;      Params:         0       0       2       0       0       0       0       0
  6522 ;;      Locals:         0       0       0       0       0       0       0       0
  6523 ;;      Temps:          0       0       0       0       0       0       0       0
  6524 ;;      Totals:         0       0       2       0       0       0       0       0
  6525 ;;Total ram usage:        2 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    7
  6528 ;; This function calls:
  6529 ;;		Nothing
  6530 ;; This function is called by:
  6531 ;;		_main
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           
  6536                           ;psect for function _TMR5_WriteTimer
  6537  07D9                     _TMR5_WriteTimer:	
  6538                           
  6539                           ;tmr5.c: 119: if (T5CONbits.T5SYNC == 1)
  6540                           
  6541                           ;incstack = 0
  6542                           ; Regs used in _TMR5_WriteTimer: [wreg+status,2]
  6543  07D9  0028               	movlb	8	; select bank8
  6544  07DA  1D1A               	btfss	26,2	;volatile
  6545  07DB  2FE7               	goto	l5161
  6546                           
  6547                           ;tmr5.c: 120: {
  6548                           ;tmr5.c: 122: T5CONbits.TMR5ON = 0;
  6549  07DC  101A               	bcf	26,0	;volatile
  6550                           
  6551                           ;tmr5.c: 125: TMR5H = (timerVal >> 8);
  6552  07DD  0021               	movlb	1	; select bank1
  6553  07DE  0860               	movf	(TMR5_WriteTimer@timerVal+1)^(0+128),w
  6554  07DF  0028               	movlb	8	; select bank8
  6555  07E0  0099               	movwf	25	;volatile
  6556                           
  6557                           ;tmr5.c: 126: TMR5L = timerVal;
  6558  07E1  0021               	movlb	1	; select bank1
  6559  07E2  085F               	movf	TMR5_WriteTimer@timerVal^(0+128),w
  6560  07E3  0028               	movlb	8	; select bank8
  6561  07E4  0098               	movwf	24	;volatile
  6562                           
  6563                           ;tmr5.c: 129: T5CONbits.TMR5ON =1;
  6564  07E5  141A               	bsf	26,0	;volatile
  6565                           
  6566                           ;tmr5.c: 130: }
  6567  07E6  0008               	return
  6568  07E7                     l5161:	
  6569                           
  6570                           ;tmr5.c: 131: else
  6571                           ;tmr5.c: 132: {
  6572                           ;tmr5.c: 134: TMR5H = (timerVal >> 8);
  6573  07E7  0021               	movlb	1	; select bank1
  6574  07E8  0860               	movf	(TMR5_WriteTimer@timerVal+1)^(0+128),w
  6575  07E9  0028               	movlb	8	; select bank8
  6576  07EA  0099               	movwf	25	;volatile
  6577                           
  6578                           ;tmr5.c: 135: TMR5L = timerVal;
  6579  07EB  0021               	movlb	1	; select bank1
  6580  07EC  085F               	movf	TMR5_WriteTimer@timerVal^(0+128),w
  6581  07ED  0028               	movlb	8	; select bank8
  6582  07EE  0098               	movwf	24	;volatile
  6583  07EF  0008               	return
  6584  07F0                     __end_of_TMR5_WriteTimer:	
  6585                           
  6586                           	psect	text3
  6587  0DC6                     __ptext3:	
  6588 ;; *************** function _TMR5_StopTimer *****************
  6589 ;; Defined at:
  6590 ;;		line 102 in file "mcc_generated_files/tmr5.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;		None
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;		None
  6595 ;; Return value:  Size  Location     Type
  6596 ;;                  1    wreg      void 
  6597 ;; Registers used:
  6598 ;;		None
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6604 ;;      Params:         0       0       0       0       0       0       0       0
  6605 ;;      Locals:         0       0       0       0       0       0       0       0
  6606 ;;      Temps:          0       0       0       0       0       0       0       0
  6607 ;;      Totals:         0       0       0       0       0       0       0       0
  6608 ;;Total ram usage:        0 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    7
  6611 ;; This function calls:
  6612 ;;		Nothing
  6613 ;; This function is called by:
  6614 ;;		_main
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           
  6619                           ;psect for function _TMR5_StopTimer
  6620  0DC6                     _TMR5_StopTimer:	
  6621                           
  6622                           ;tmr5.c: 105: T5CONbits.TMR5ON = 0;
  6623                           
  6624                           ;incstack = 0
  6625                           ; Regs used in _TMR5_StopTimer: []
  6626  0DC6  0028               	movlb	8	; select bank8
  6627  0DC7  101A               	bcf	26,0	;volatile
  6628  0DC8  0008               	return
  6629  0DC9                     __end_of_TMR5_StopTimer:	
  6630                           
  6631                           	psect	text4
  6632  0DC3                     __ptext4:	
  6633 ;; *************** function _TMR3_StopTimer *****************
  6634 ;; Defined at:
  6635 ;;		line 102 in file "mcc_generated_files/tmr3.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;		None
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;		None
  6640 ;; Return value:  Size  Location     Type
  6641 ;;                  1    wreg      void 
  6642 ;; Registers used:
  6643 ;;		None
  6644 ;; Tracked objects:
  6645 ;;		On entry : 0/0
  6646 ;;		On exit  : 0/0
  6647 ;;		Unchanged: 0/0
  6648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6649 ;;      Params:         0       0       0       0       0       0       0       0
  6650 ;;      Locals:         0       0       0       0       0       0       0       0
  6651 ;;      Temps:          0       0       0       0       0       0       0       0
  6652 ;;      Totals:         0       0       0       0       0       0       0       0
  6653 ;;Total ram usage:        0 bytes
  6654 ;; Hardware stack levels used:    1
  6655 ;; Hardware stack levels required when called:    7
  6656 ;; This function calls:
  6657 ;;		Nothing
  6658 ;; This function is called by:
  6659 ;;		_main
  6660 ;; This function uses a non-reentrant model
  6661 ;;
  6662                           
  6663                           
  6664                           ;psect for function _TMR3_StopTimer
  6665  0DC3                     _TMR3_StopTimer:	
  6666                           
  6667                           ;tmr3.c: 105: T3CONbits.TMR3ON = 0;
  6668                           
  6669                           ;incstack = 0
  6670                           ; Regs used in _TMR3_StopTimer: []
  6671  0DC3  0028               	movlb	8	; select bank8
  6672  0DC4  1013               	bcf	19,0	;volatile
  6673  0DC5  0008               	return
  6674  0DC6                     __end_of_TMR3_StopTimer:	
  6675                           
  6676                           	psect	text5
  6677  072F                     __ptext5:	
  6678 ;; *************** function _SYSTEM_Initialize *****************
  6679 ;; Defined at:
  6680 ;;		line 76 in file "mcc_generated_files/mcc.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;		None
  6683 ;; Auto vars:     Size  Location     Type
  6684 ;;		None
  6685 ;; Return value:  Size  Location     Type
  6686 ;;                  1    wreg      void 
  6687 ;; Registers used:
  6688 ;;		wreg, status,2, status,0, pclath, cstack
  6689 ;; Tracked objects:
  6690 ;;		On entry : 0/0
  6691 ;;		On exit  : 0/0
  6692 ;;		Unchanged: 0/0
  6693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6694 ;;      Params:         0       0       0       0       0       0       0       0
  6695 ;;      Locals:         0       0       0       0       0       0       0       0
  6696 ;;      Temps:          0       0       0       0       0       0       0       0
  6697 ;;      Totals:         0       0       0       0       0       0       0       0
  6698 ;;Total ram usage:        0 bytes
  6699 ;; Hardware stack levels used:    1
  6700 ;; Hardware stack levels required when called:    9
  6701 ;; This function calls:
  6702 ;;		_ADC_Initialize
  6703 ;;		_CCP1_Initialize
  6704 ;;		_CCP2_Initialize
  6705 ;;		_EUSART_Initialize
  6706 ;;		_EXT_INT_Initialize
  6707 ;;		_OSCILLATOR_Initialize
  6708 ;;		_PIN_MANAGER_Initialize
  6709 ;;		_TMR0_Initialize
  6710 ;;		_TMR3_Initialize
  6711 ;;		_TMR5_Initialize
  6712 ;;		_WDT_Initialize
  6713 ;; This function is called by:
  6714 ;;		_main
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           
  6719                           ;psect for function _SYSTEM_Initialize
  6720  072F                     _SYSTEM_Initialize:	
  6721                           
  6722                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  6723                           
  6724                           ;incstack = 0
  6725                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6726  072F  3185  2561  3187   	fcall	_PIN_MANAGER_Initialize
  6727                           
  6728                           ;mcc.c: 80: OSCILLATOR_Initialize();
  6729  0732  318E  2622  3187   	fcall	_OSCILLATOR_Initialize
  6730                           
  6731                           ;mcc.c: 81: WDT_Initialize();
  6732  0735  318D  25C9  3187   	fcall	_WDT_Initialize
  6733                           
  6734                           ;mcc.c: 82: CCP2_Initialize();
  6735  0738  318E  2633  3187   	fcall	_CCP2_Initialize
  6736                           
  6737                           ;mcc.c: 83: ADC_Initialize();
  6738  073B  318E  262A  3187   	fcall	_ADC_Initialize
  6739                           
  6740                           ;mcc.c: 84: TMR3_Initialize();
  6741  073E  3187  27A6  3187   	fcall	_TMR3_Initialize
  6742                           
  6743                           ;mcc.c: 85: CCP1_Initialize();
  6744  0741  318F  2701  3187   	fcall	_CCP1_Initialize
  6745                           
  6746                           ;mcc.c: 86: TMR5_Initialize();
  6747  0744  3187  278C  3187   	fcall	_TMR5_Initialize
  6748                           
  6749                           ;mcc.c: 87: EXT_INT_Initialize();
  6750  0747  318E  268E  3187   	fcall	_EXT_INT_Initialize
  6751                           
  6752                           ;mcc.c: 88: TMR0_Initialize();
  6753  074A  318F  2768  3187   	fcall	_TMR0_Initialize
  6754                           
  6755                           ;mcc.c: 89: EUSART_Initialize();
  6756  074D  318E  265C         	fcall	_EUSART_Initialize
  6757  074F  0008               	return
  6758  0750                     __end_of_SYSTEM_Initialize:	
  6759                           
  6760                           	psect	text6
  6761  0DC9                     __ptext6:	
  6762 ;; *************** function _WDT_Initialize *****************
  6763 ;; Defined at:
  6764 ;;		line 108 in file "mcc_generated_files/mcc.c"
  6765 ;; Parameters:    Size  Location     Type
  6766 ;;		None
  6767 ;; Auto vars:     Size  Location     Type
  6768 ;;		None
  6769 ;; Return value:  Size  Location     Type
  6770 ;;                  1    wreg      void 
  6771 ;; Registers used:
  6772 ;;		wreg
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6778 ;;      Params:         0       0       0       0       0       0       0       0
  6779 ;;      Locals:         0       0       0       0       0       0       0       0
  6780 ;;      Temps:          0       0       0       0       0       0       0       0
  6781 ;;      Totals:         0       0       0       0       0       0       0       0
  6782 ;;Total ram usage:        0 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; Hardware stack levels required when called:    7
  6785 ;; This function calls:
  6786 ;;		Nothing
  6787 ;; This function is called by:
  6788 ;;		_SYSTEM_Initialize
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           
  6793                           ;psect for function _WDT_Initialize
  6794  0DC9                     _WDT_Initialize:	
  6795                           
  6796                           ;mcc.c: 111: WDTCON = 0x16;
  6797                           
  6798                           ;incstack = 0
  6799                           ; Regs used in _WDT_Initialize: [wreg]
  6800  0DC9  3016               	movlw	22
  6801  0DCA  0021               	movlb	1	; select bank1
  6802  0DCB  0097               	movwf	23	;volatile
  6803  0DCC  0008               	return
  6804  0DCD                     __end_of_WDT_Initialize:	
  6805                           
  6806                           	psect	text7
  6807  078C                     __ptext7:	
  6808 ;; *************** function _TMR5_Initialize *****************
  6809 ;; Defined at:
  6810 ;;		line 64 in file "mcc_generated_files/tmr5.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;		None
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;		None
  6815 ;; Return value:  Size  Location     Type
  6816 ;;                  1    wreg      void 
  6817 ;; Registers used:
  6818 ;;		wreg, status,2, status,0, pclath, cstack
  6819 ;; Tracked objects:
  6820 ;;		On entry : 0/0
  6821 ;;		On exit  : 0/0
  6822 ;;		Unchanged: 0/0
  6823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6824 ;;      Params:         0       0       0       0       0       0       0       0
  6825 ;;      Locals:         0       0       0       0       0       0       0       0
  6826 ;;      Temps:          0       0       0       0       0       0       0       0
  6827 ;;      Totals:         0       0       0       0       0       0       0       0
  6828 ;;Total ram usage:        0 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:    8
  6831 ;; This function calls:
  6832 ;;		_TMR5_SetInterruptHandler
  6833 ;;		_TMR5_StartTimer
  6834 ;; This function is called by:
  6835 ;;		_SYSTEM_Initialize
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           
  6840                           ;psect for function _TMR5_Initialize
  6841  078C                     _TMR5_Initialize:	
  6842                           
  6843                           ;tmr5.c: 69: T5CON = 0x30;
  6844                           
  6845                           ;incstack = 0
  6846                           ; Regs used in _TMR5_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6847  078C  3030               	movlw	48
  6848  078D  0028               	movlb	8	; select bank8
  6849  078E  009A               	movwf	26	;volatile
  6850                           
  6851                           ;tmr5.c: 72: T5GCON = 0x00;
  6852  078F  019B               	clrf	27	;volatile
  6853                           
  6854                           ;tmr5.c: 75: TMR5H = 0x00;
  6855  0790  0199               	clrf	25	;volatile
  6856                           
  6857                           ;tmr5.c: 78: TMR5L = 0x00;
  6858  0791  0198               	clrf	24	;volatile
  6859                           
  6860                           ;tmr5.c: 81: timer5ReloadVal=(TMR5H << 8) | TMR5L;
  6861  0792  0819               	movf	25,w	;volatile
  6862  0793  0020               	movlb	0	; select bank0
  6863  0794  00DE               	movwf	_timer5ReloadVal+1	;volatile
  6864  0795  0028               	movlb	8	; select bank8
  6865  0796  0818               	movf	24,w	;volatile
  6866  0797  0020               	movlb	0	; select bank0
  6867  0798  00DD               	movwf	_timer5ReloadVal	;volatile
  6868                           
  6869                           ;tmr5.c: 84: PIR4bits.TMR5IF = 0;
  6870  0799  1214               	bcf	20,4	;volatile
  6871                           
  6872                           ;tmr5.c: 87: PIE4bits.TMR5IE = 1;
  6873  079A  0021               	movlb	1	; select bank1
  6874  079B  1614               	bsf	20,4	;volatile
  6875                           
  6876                           ;tmr5.c: 90: TMR5_SetInterruptHandler(TMR5_DefaultInterruptHandler);
  6877  079C  30B4               	movlw	low _TMR5_DefaultInterruptHandler
  6878  079D  00DF               	movwf	TMR5_SetInterruptHandler@InterruptHandler^(0+128)
  6879  079E  300D               	movlw	high _TMR5_DefaultInterruptHandler
  6880  079F  00E0               	movwf	(TMR5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  6881  07A0  318E  2606  3187   	fcall	_TMR5_SetInterruptHandler
  6882                           
  6883                           ;tmr5.c: 93: TMR5_StartTimer();
  6884  07A3  318D  25C0         	fcall	_TMR5_StartTimer
  6885  07A5  0008               	return
  6886  07A6                     __end_of_TMR5_Initialize:	
  6887                           
  6888                           	psect	text8
  6889  0DC0                     __ptext8:	
  6890 ;; *************** function _TMR5_StartTimer *****************
  6891 ;; Defined at:
  6892 ;;		line 96 in file "mcc_generated_files/tmr5.c"
  6893 ;; Parameters:    Size  Location     Type
  6894 ;;		None
  6895 ;; Auto vars:     Size  Location     Type
  6896 ;;		None
  6897 ;; Return value:  Size  Location     Type
  6898 ;;                  1    wreg      void 
  6899 ;; Registers used:
  6900 ;;		None
  6901 ;; Tracked objects:
  6902 ;;		On entry : 0/0
  6903 ;;		On exit  : 0/0
  6904 ;;		Unchanged: 0/0
  6905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6906 ;;      Params:         0       0       0       0       0       0       0       0
  6907 ;;      Locals:         0       0       0       0       0       0       0       0
  6908 ;;      Temps:          0       0       0       0       0       0       0       0
  6909 ;;      Totals:         0       0       0       0       0       0       0       0
  6910 ;;Total ram usage:        0 bytes
  6911 ;; Hardware stack levels used:    1
  6912 ;; Hardware stack levels required when called:    7
  6913 ;; This function calls:
  6914 ;;		Nothing
  6915 ;; This function is called by:
  6916 ;;		_TMR5_Initialize
  6917 ;; This function uses a non-reentrant model
  6918 ;;
  6919                           
  6920                           
  6921                           ;psect for function _TMR5_StartTimer
  6922  0DC0                     _TMR5_StartTimer:	
  6923                           
  6924                           ;tmr5.c: 99: T5CONbits.TMR5ON = 1;
  6925                           
  6926                           ;incstack = 0
  6927                           ; Regs used in _TMR5_StartTimer: []
  6928  0DC0  0028               	movlb	8	; select bank8
  6929  0DC1  141A               	bsf	26,0	;volatile
  6930  0DC2  0008               	return
  6931  0DC3                     __end_of_TMR5_StartTimer:	
  6932                           
  6933                           	psect	text9
  6934  0E06                     __ptext9:	
  6935 ;; *************** function _TMR5_SetInterruptHandler *****************
  6936 ;; Defined at:
  6937 ;;		line 172 in file "mcc_generated_files/tmr5.c"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  6940 ;;		 -> TMR5_DefaultInterruptHandler(1), 
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      void 
  6945 ;; Registers used:
  6946 ;;		wreg
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6952 ;;      Params:         0       0       2       0       0       0       0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0       0
  6955 ;;      Totals:         0       0       2       0       0       0       0       0
  6956 ;;Total ram usage:        2 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    7
  6959 ;; This function calls:
  6960 ;;		Nothing
  6961 ;; This function is called by:
  6962 ;;		_TMR5_Initialize
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           
  6967                           ;psect for function _TMR5_SetInterruptHandler
  6968  0E06                     _TMR5_SetInterruptHandler:	
  6969                           
  6970                           ;tmr5.c: 173: TMR5_InterruptHandler = InterruptHandler;
  6971                           
  6972                           ;incstack = 0
  6973                           ; Regs used in _TMR5_SetInterruptHandler: [wreg]
  6974  0E06  0021               	movlb	1	; select bank1
  6975  0E07  0860               	movf	(TMR5_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  6976  0E08  00DE               	movwf	(_TMR5_InterruptHandler+1)^(0+128)
  6977  0E09  085F               	movf	TMR5_SetInterruptHandler@InterruptHandler^(0+128),w
  6978  0E0A  00DD               	movwf	_TMR5_InterruptHandler^(0+128)
  6979  0E0B  0008               	return
  6980  0E0C                     __end_of_TMR5_SetInterruptHandler:	
  6981                           
  6982                           	psect	text10
  6983  07A6                     __ptext10:	
  6984 ;; *************** function _TMR3_Initialize *****************
  6985 ;; Defined at:
  6986 ;;		line 64 in file "mcc_generated_files/tmr3.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;		None
  6989 ;; Auto vars:     Size  Location     Type
  6990 ;;		None
  6991 ;; Return value:  Size  Location     Type
  6992 ;;                  1    wreg      void 
  6993 ;; Registers used:
  6994 ;;		wreg, status,2, status,0, pclath, cstack
  6995 ;; Tracked objects:
  6996 ;;		On entry : 0/0
  6997 ;;		On exit  : 0/0
  6998 ;;		Unchanged: 0/0
  6999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7000 ;;      Params:         0       0       0       0       0       0       0       0
  7001 ;;      Locals:         0       0       0       0       0       0       0       0
  7002 ;;      Temps:          0       0       0       0       0       0       0       0
  7003 ;;      Totals:         0       0       0       0       0       0       0       0
  7004 ;;Total ram usage:        0 bytes
  7005 ;; Hardware stack levels used:    1
  7006 ;; Hardware stack levels required when called:    8
  7007 ;; This function calls:
  7008 ;;		_TMR3_SetInterruptHandler
  7009 ;;		_TMR3_StartTimer
  7010 ;; This function is called by:
  7011 ;;		_SYSTEM_Initialize
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           
  7016                           ;psect for function _TMR3_Initialize
  7017  07A6                     _TMR3_Initialize:	
  7018                           
  7019                           ;tmr3.c: 69: T3CON = 0x30;
  7020                           
  7021                           ;incstack = 0
  7022                           ; Regs used in _TMR3_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7023  07A6  3030               	movlw	48
  7024  07A7  0028               	movlb	8	; select bank8
  7025  07A8  0093               	movwf	19	;volatile
  7026                           
  7027                           ;tmr3.c: 72: T3GCON = 0x00;
  7028  07A9  0194               	clrf	20	;volatile
  7029                           
  7030                           ;tmr3.c: 75: TMR3H = 0x00;
  7031  07AA  0192               	clrf	18	;volatile
  7032                           
  7033                           ;tmr3.c: 78: TMR3L = 0x00;
  7034  07AB  0191               	clrf	17	;volatile
  7035                           
  7036                           ;tmr3.c: 81: timer3ReloadVal=(TMR3H << 8) | TMR3L;
  7037  07AC  0812               	movf	18,w	;volatile
  7038  07AD  0020               	movlb	0	; select bank0
  7039  07AE  00DC               	movwf	_timer3ReloadVal+1	;volatile
  7040  07AF  0028               	movlb	8	; select bank8
  7041  07B0  0811               	movf	17,w	;volatile
  7042  07B1  0020               	movlb	0	; select bank0
  7043  07B2  00DB               	movwf	_timer3ReloadVal	;volatile
  7044                           
  7045                           ;tmr3.c: 84: PIR3bits.TMR3IF = 0;
  7046  07B3  1213               	bcf	19,4	;volatile
  7047                           
  7048                           ;tmr3.c: 87: PIE3bits.TMR3IE = 1;
  7049  07B4  0021               	movlb	1	; select bank1
  7050  07B5  1613               	bsf	19,4	;volatile
  7051                           
  7052                           ;tmr3.c: 90: TMR3_SetInterruptHandler(TMR3_DefaultInterruptHandler);
  7053  07B6  30B1               	movlw	low _TMR3_DefaultInterruptHandler
  7054  07B7  00DF               	movwf	TMR3_SetInterruptHandler@InterruptHandler^(0+128)
  7055  07B8  300D               	movlw	high _TMR3_DefaultInterruptHandler
  7056  07B9  00E0               	movwf	(TMR3_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7057  07BA  318E  2600  3187   	fcall	_TMR3_SetInterruptHandler
  7058                           
  7059                           ;tmr3.c: 93: TMR3_StartTimer();
  7060  07BD  318D  25BA         	fcall	_TMR3_StartTimer
  7061  07BF  0008               	return
  7062  07C0                     __end_of_TMR3_Initialize:	
  7063                           
  7064                           	psect	text11
  7065  0E00                     __ptext11:	
  7066 ;; *************** function _TMR3_SetInterruptHandler *****************
  7067 ;; Defined at:
  7068 ;;		line 172 in file "mcc_generated_files/tmr3.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  7071 ;;		 -> TMR3_DefaultInterruptHandler(1), 
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;		None
  7074 ;; Return value:  Size  Location     Type
  7075 ;;                  1    wreg      void 
  7076 ;; Registers used:
  7077 ;;		wreg
  7078 ;; Tracked objects:
  7079 ;;		On entry : 0/0
  7080 ;;		On exit  : 0/0
  7081 ;;		Unchanged: 0/0
  7082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7083 ;;      Params:         0       0       2       0       0       0       0       0
  7084 ;;      Locals:         0       0       0       0       0       0       0       0
  7085 ;;      Temps:          0       0       0       0       0       0       0       0
  7086 ;;      Totals:         0       0       2       0       0       0       0       0
  7087 ;;Total ram usage:        2 bytes
  7088 ;; Hardware stack levels used:    1
  7089 ;; Hardware stack levels required when called:    7
  7090 ;; This function calls:
  7091 ;;		Nothing
  7092 ;; This function is called by:
  7093 ;;		_TMR3_Initialize
  7094 ;; This function uses a non-reentrant model
  7095 ;;
  7096                           
  7097                           
  7098                           ;psect for function _TMR3_SetInterruptHandler
  7099  0E00                     _TMR3_SetInterruptHandler:	
  7100                           
  7101                           ;tmr3.c: 173: TMR3_InterruptHandler = InterruptHandler;
  7102                           
  7103                           ;incstack = 0
  7104                           ; Regs used in _TMR3_SetInterruptHandler: [wreg]
  7105  0E00  0021               	movlb	1	; select bank1
  7106  0E01  0860               	movf	(TMR3_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7107  0E02  00DC               	movwf	(_TMR3_InterruptHandler+1)^(0+128)
  7108  0E03  085F               	movf	TMR3_SetInterruptHandler@InterruptHandler^(0+128),w
  7109  0E04  00DB               	movwf	_TMR3_InterruptHandler^(0+128)
  7110  0E05  0008               	return
  7111  0E06                     __end_of_TMR3_SetInterruptHandler:	
  7112                           
  7113                           	psect	text12
  7114  0F68                     __ptext12:	
  7115 ;; *************** function _TMR0_Initialize *****************
  7116 ;; Defined at:
  7117 ;;		line 60 in file "mcc_generated_files/tmr0.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;		None
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;		None
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  1    wreg      void 
  7124 ;; Registers used:
  7125 ;;		wreg, status,2, status,0, pclath, cstack
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7131 ;;      Params:         0       0       0       0       0       0       0       0
  7132 ;;      Locals:         0       0       0       0       0       0       0       0
  7133 ;;      Temps:          0       0       0       0       0       0       0       0
  7134 ;;      Totals:         0       0       0       0       0       0       0       0
  7135 ;;Total ram usage:        0 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:    8
  7138 ;; This function calls:
  7139 ;;		_TMR0_SetInterruptHandler
  7140 ;;		_TMR0_StartTimer
  7141 ;; This function is called by:
  7142 ;;		_SYSTEM_Initialize
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           
  7147                           ;psect for function _TMR0_Initialize
  7148  0F68                     _TMR0_Initialize:	
  7149                           
  7150                           ;tmr0.c: 65: T0CON0 = 0x00;
  7151                           
  7152                           ;incstack = 0
  7153                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7154  0F68  0020               	movlb	0	; select bank0
  7155  0F69  0197               	clrf	23	;volatile
  7156                           
  7157                           ;tmr0.c: 68: T0CON1 = 0x49;
  7158  0F6A  3049               	movlw	73
  7159  0F6B  0098               	movwf	24	;volatile
  7160                           
  7161                           ;tmr0.c: 71: TMR0H = 0x9B;
  7162  0F6C  309B               	movlw	155
  7163  0F6D  0096               	movwf	22	;volatile
  7164                           
  7165                           ;tmr0.c: 74: TMR0L = 0x00;
  7166  0F6E  0195               	clrf	21	;volatile
  7167                           
  7168                           ;tmr0.c: 77: PIR0bits.TMR0IF = 0;
  7169  0F6F  1290               	bcf	16,5	;volatile
  7170                           
  7171                           ;tmr0.c: 80: PIE0bits.TMR0IE = 1;
  7172  0F70  0021               	movlb	1	; select bank1
  7173  0F71  1690               	bsf	16,5	;volatile
  7174                           
  7175                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7176  0F72  3002               	movlw	low _TMR0_DefaultInterruptHandler
  7177  0F73  00DF               	movwf	TMR0_SetInterruptHandler@InterruptHandler^(0+128)
  7178  0F74  3000               	movlw	high _TMR0_DefaultInterruptHandler
  7179  0F75  00E0               	movwf	(TMR0_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7180  0F76  318D  25FA  318F   	fcall	_TMR0_SetInterruptHandler
  7181                           
  7182                           ;tmr0.c: 86: TMR0_StartTimer();
  7183  0F79  318D  25BD         	fcall	_TMR0_StartTimer
  7184  0F7B  0008               	return
  7185  0F7C                     __end_of_TMR0_Initialize:	
  7186                           
  7187                           	psect	text13
  7188  0DBD                     __ptext13:	
  7189 ;; *************** function _TMR0_StartTimer *****************
  7190 ;; Defined at:
  7191 ;;		line 89 in file "mcc_generated_files/tmr0.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;		None
  7194 ;; Auto vars:     Size  Location     Type
  7195 ;;		None
  7196 ;; Return value:  Size  Location     Type
  7197 ;;                  1    wreg      void 
  7198 ;; Registers used:
  7199 ;;		None
  7200 ;; Tracked objects:
  7201 ;;		On entry : 0/0
  7202 ;;		On exit  : 0/0
  7203 ;;		Unchanged: 0/0
  7204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7205 ;;      Params:         0       0       0       0       0       0       0       0
  7206 ;;      Locals:         0       0       0       0       0       0       0       0
  7207 ;;      Temps:          0       0       0       0       0       0       0       0
  7208 ;;      Totals:         0       0       0       0       0       0       0       0
  7209 ;;Total ram usage:        0 bytes
  7210 ;; Hardware stack levels used:    1
  7211 ;; Hardware stack levels required when called:    7
  7212 ;; This function calls:
  7213 ;;		Nothing
  7214 ;; This function is called by:
  7215 ;;		_TMR0_Initialize
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           
  7220                           ;psect for function _TMR0_StartTimer
  7221  0DBD                     _TMR0_StartTimer:	
  7222                           
  7223                           ;tmr0.c: 92: T0CON0bits.T0EN = 1;
  7224                           
  7225                           ;incstack = 0
  7226                           ; Regs used in _TMR0_StartTimer: []
  7227  0DBD  0020               	movlb	0	; select bank0
  7228  0DBE  1797               	bsf	23,7	;volatile
  7229  0DBF  0008               	return
  7230  0DC0                     __end_of_TMR0_StartTimer:	
  7231                           
  7232                           	psect	text14
  7233  0DFA                     __ptext14:	
  7234 ;; *************** function _TMR0_SetInterruptHandler *****************
  7235 ;; Defined at:
  7236 ;;		line 145 in file "mcc_generated_files/tmr0.c"
  7237 ;; Parameters:    Size  Location     Type
  7238 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  7239 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7240 ;; Auto vars:     Size  Location     Type
  7241 ;;		None
  7242 ;; Return value:  Size  Location     Type
  7243 ;;                  1    wreg      void 
  7244 ;; Registers used:
  7245 ;;		wreg
  7246 ;; Tracked objects:
  7247 ;;		On entry : 0/0
  7248 ;;		On exit  : 0/0
  7249 ;;		Unchanged: 0/0
  7250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7251 ;;      Params:         0       0       2       0       0       0       0       0
  7252 ;;      Locals:         0       0       0       0       0       0       0       0
  7253 ;;      Temps:          0       0       0       0       0       0       0       0
  7254 ;;      Totals:         0       0       2       0       0       0       0       0
  7255 ;;Total ram usage:        2 bytes
  7256 ;; Hardware stack levels used:    1
  7257 ;; Hardware stack levels required when called:    7
  7258 ;; This function calls:
  7259 ;;		Nothing
  7260 ;; This function is called by:
  7261 ;;		_TMR0_Initialize
  7262 ;; This function uses a non-reentrant model
  7263 ;;
  7264                           
  7265                           
  7266                           ;psect for function _TMR0_SetInterruptHandler
  7267  0DFA                     _TMR0_SetInterruptHandler:	
  7268                           
  7269                           ;tmr0.c: 146: TMR0_InterruptHandler = InterruptHandler;
  7270                           
  7271                           ;incstack = 0
  7272                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  7273  0DFA  0021               	movlb	1	; select bank1
  7274  0DFB  0860               	movf	(TMR0_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7275  0DFC  00DA               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  7276  0DFD  085F               	movf	TMR0_SetInterruptHandler@InterruptHandler^(0+128),w
  7277  0DFE  00D9               	movwf	_TMR0_InterruptHandler^(0+128)
  7278  0DFF  0008               	return
  7279  0E00                     __end_of_TMR0_SetInterruptHandler:	
  7280                           
  7281                           	psect	text15
  7282  0561                     __ptext15:	
  7283 ;; *************** function _PIN_MANAGER_Initialize *****************
  7284 ;; Defined at:
  7285 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
  7286 ;; Parameters:    Size  Location     Type
  7287 ;;		None
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;  state           1    2[BANK1 ] unsigned char 
  7290 ;; Return value:  Size  Location     Type
  7291 ;;                  1    wreg      void 
  7292 ;; Registers used:
  7293 ;;		wreg, status,2, status,0, pclath, cstack
  7294 ;; Tracked objects:
  7295 ;;		On entry : 0/0
  7296 ;;		On exit  : 0/0
  7297 ;;		Unchanged: 0/0
  7298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7299 ;;      Params:         0       0       0       0       0       0       0       0
  7300 ;;      Locals:         0       0       1       0       0       0       0       0
  7301 ;;      Temps:          0       0       0       0       0       0       0       0
  7302 ;;      Totals:         0       0       1       0       0       0       0       0
  7303 ;;Total ram usage:        1 bytes
  7304 ;; Hardware stack levels used:    1
  7305 ;; Hardware stack levels required when called:    8
  7306 ;; This function calls:
  7307 ;;		_IOCCF4_SetInterruptHandler
  7308 ;;		_IOCCF5_SetInterruptHandler
  7309 ;; This function is called by:
  7310 ;;		_SYSTEM_Initialize
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           
  7315                           ;psect for function _PIN_MANAGER_Initialize
  7316  0561                     _PIN_MANAGER_Initialize:	
  7317                           
  7318                           ;pin_manager.c: 59: LATA = 0x00;
  7319                           
  7320                           ;incstack = 0
  7321                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7322  0561  0022               	movlb	2	; select bank2
  7323  0562  018C               	clrf	12	;volatile
  7324                           
  7325                           ;pin_manager.c: 60: LATB = 0x00;
  7326  0563  018D               	clrf	13	;volatile
  7327                           
  7328                           ;pin_manager.c: 61: LATC = 0x00;
  7329  0564  018E               	clrf	14	;volatile
  7330                           
  7331                           ;pin_manager.c: 66: TRISA = 0x37;
  7332  0565  3037               	movlw	55
  7333  0566  0021               	movlb	1	; select bank1
  7334  0567  008C               	movwf	12	;volatile
  7335                           
  7336                           ;pin_manager.c: 67: TRISB = 0x90;
  7337  0568  3090               	movlw	144
  7338  0569  008D               	movwf	13	;volatile
  7339                           
  7340                           ;pin_manager.c: 68: TRISC = 0x30;
  7341  056A  3030               	movlw	48
  7342  056B  008E               	movwf	14	;volatile
  7343                           
  7344                           ;pin_manager.c: 73: ANSELC = 0x80;
  7345  056C  3080               	movlw	128
  7346  056D  0023               	movlb	3	; select bank3
  7347  056E  008E               	movwf	14	;volatile
  7348                           
  7349                           ;pin_manager.c: 74: ANSELB = 0x00;
  7350  056F  018D               	clrf	13	;volatile
  7351                           
  7352                           ;pin_manager.c: 75: ANSELA = 0x17;
  7353  0570  3017               	movlw	23
  7354  0571  008C               	movwf	12	;volatile
  7355                           
  7356                           ;pin_manager.c: 80: WPUB = 0x80;
  7357  0572  3080               	movlw	128
  7358  0573  0024               	movlb	4	; select bank4
  7359  0574  008D               	movwf	13	;volatile
  7360                           
  7361                           ;pin_manager.c: 81: WPUA = 0x00;
  7362  0575  018C               	clrf	12	;volatile
  7363                           
  7364                           ;pin_manager.c: 82: WPUC = 0x00;
  7365  0576  018E               	clrf	14	;volatile
  7366                           
  7367                           ;pin_manager.c: 87: ODCONA = 0x00;
  7368  0577  0025               	movlb	5	; select bank5
  7369  0578  018C               	clrf	12	;volatile
  7370                           
  7371                           ;pin_manager.c: 88: ODCONB = 0x00;
  7372  0579  018D               	clrf	13	;volatile
  7373                           
  7374                           ;pin_manager.c: 89: ODCONC = 0x00;
  7375  057A  018E               	clrf	14	;volatile
  7376                           
  7377                           ;pin_manager.c: 96: IOCCFbits.IOCCF4 = 0;
  7378  057B  0027               	movlb	7	; select bank7
  7379  057C  1219               	bcf	25,4	;volatile
  7380                           
  7381                           ;pin_manager.c: 97: IOCCFbits.IOCCF5 = 0;
  7382  057D  1299               	bcf	25,5	;volatile
  7383                           
  7384                           ;pin_manager.c: 99: IOCCNbits.IOCCN4 = 1;
  7385  057E  1618               	bsf	24,4	;volatile
  7386                           
  7387                           ;pin_manager.c: 100: IOCCNbits.IOCCN5 = 1;
  7388  057F  1698               	bsf	24,5	;volatile
  7389                           
  7390                           ;pin_manager.c: 102: IOCCPbits.IOCCP4 = 1;
  7391  0580  1617               	bsf	23,4	;volatile
  7392                           
  7393                           ;pin_manager.c: 103: IOCCPbits.IOCCP5 = 1;
  7394  0581  1697               	bsf	23,5	;volatile
  7395                           
  7396                           ;pin_manager.c: 106: IOCCF4_SetInterruptHandler(IOCCF4_DefaultInterruptHandler);
  7397  0582  30A6               	movlw	low _IOCCF4_DefaultInterruptHandler
  7398  0583  0021               	movlb	1	; select bank1
  7399  0584  00DF               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler^(0+128)
  7400  0585  300D               	movlw	high _IOCCF4_DefaultInterruptHandler
  7401  0586  00E0               	movwf	(IOCCF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7402  0587  318D  25EE  3185   	fcall	_IOCCF4_SetInterruptHandler
  7403                           
  7404                           ;pin_manager.c: 107: IOCCF5_SetInterruptHandler(IOCCF5_DefaultInterruptHandler);
  7405  058A  30A7               	movlw	low _IOCCF5_DefaultInterruptHandler
  7406  058B  0021               	movlb	1	; select bank1
  7407  058C  00DF               	movwf	IOCCF5_SetInterruptHandler@InterruptHandler^(0+128)
  7408  058D  300D               	movlw	high _IOCCF5_DefaultInterruptHandler
  7409  058E  00E0               	movwf	(IOCCF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7410  058F  318D  25F4  3185   	fcall	_IOCCF5_SetInterruptHandler
  7411                           
  7412                           ;pin_manager.c: 110: PIE0bits.IOCIE = 1;
  7413  0592  0021               	movlb	1	; select bank1
  7414  0593  1610               	bsf	16,4	;volatile
  7415                           
  7416                           ;pin_manager.c: 113: bool state = GIE;
  7417  0594  3000               	movlw	0
  7418  0595  1B8B               	btfsc	11,7	;volatile
  7419  0596  3001               	movlw	1
  7420  0597  00E1               	movwf	PIN_MANAGER_Initialize@state^(0+128)
  7421                           
  7422                           ;pin_manager.c: 114: GIE = 0;
  7423  0598  138B               	bcf	11,7	;volatile
  7424                           
  7425                           ;pin_manager.c: 115: PPSLOCK = 0x55;
  7426  0599  3055               	movlw	85
  7427  059A  003C               	movlb	28	; select bank28
  7428  059B  008F               	movwf	15	;volatile
  7429                           
  7430                           ;pin_manager.c: 116: PPSLOCK = 0xAA;
  7431  059C  30AA               	movlw	170
  7432  059D  008F               	movwf	15	;volatile
  7433                           
  7434                           ;pin_manager.c: 117: PPSLOCKbits.PPSLOCKED = 0x00;
  7435  059E  100F               	bcf	15,0	;volatile
  7436                           
  7437                           ;pin_manager.c: 119: CCP2PPSbits.CCP2PPS = 0x14;
  7438  059F  0815               	movf	21,w	;volatile
  7439  05A0  39E0               	andlw	-32
  7440  05A1  3814               	iorlw	20
  7441  05A2  0095               	movwf	21	;volatile
  7442                           
  7443                           ;pin_manager.c: 120: RXPPSbits.RXPPS = 0x0C;
  7444  05A3  0824               	movf	36,w	;volatile
  7445  05A4  39E0               	andlw	-32
  7446  05A5  380C               	iorlw	12
  7447  05A6  00A4               	movwf	36	;volatile
  7448                           
  7449                           ;pin_manager.c: 121: INTPPSbits.INTPPS = 0x05;
  7450  05A7  0810               	movf	16,w	;volatile
  7451  05A8  39E0               	andlw	-32
  7452  05A9  3805               	iorlw	5
  7453  05AA  0090               	movwf	16	;volatile
  7454                           
  7455                           ;pin_manager.c: 122: CCP1PPSbits.CCP1PPS = 0x15;
  7456  05AB  0814               	movf	20,w	;volatile
  7457  05AC  39E0               	andlw	-32
  7458  05AD  3815               	iorlw	21
  7459  05AE  0094               	movwf	20	;volatile
  7460                           
  7461                           ;pin_manager.c: 123: RB5PPSbits.RB5PPS = 0x14;
  7462  05AF  003D               	movlb	29	; select bank29
  7463  05B0  081D               	movf	29,w	;volatile
  7464  05B1  39E0               	andlw	-32
  7465  05B2  3814               	iorlw	20
  7466  05B3  009D               	movwf	29	;volatile
  7467                           
  7468                           ;pin_manager.c: 125: PPSLOCK = 0x55;
  7469  05B4  3055               	movlw	85
  7470  05B5  003C               	movlb	28	; select bank28
  7471  05B6  008F               	movwf	15	;volatile
  7472                           
  7473                           ;pin_manager.c: 126: PPSLOCK = 0xAA;
  7474  05B7  30AA               	movlw	170
  7475  05B8  008F               	movwf	15	;volatile
  7476                           
  7477                           ;pin_manager.c: 127: PPSLOCKbits.PPSLOCKED = 0x01;
  7478  05B9  140F               	bsf	15,0	;volatile
  7479                           
  7480                           ;pin_manager.c: 129: GIE = state;
  7481  05BA  0021               	movlb	1	; select bank1
  7482  05BB  1C61               	btfss	PIN_MANAGER_Initialize@state^(0+128),0
  7483  05BC  2DBF               	goto	u3150
  7484  05BD  178B               	bsf	11,7	;volatile
  7485  05BE  0008               	return
  7486  05BF                     u3150:	
  7487  05BF  138B               	bcf	11,7	;volatile
  7488  05C0  0008               	return
  7489  05C1                     __end_of_PIN_MANAGER_Initialize:	
  7490                           
  7491                           	psect	text16
  7492  0DF4                     __ptext16:	
  7493 ;; *************** function _IOCCF5_SetInterruptHandler *****************
  7494 ;; Defined at:
  7495 ;;		line 197 in file "mcc_generated_files/pin_manager.c"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  7498 ;;		 -> IOCCF5_DefaultInterruptHandler(1), 
  7499 ;; Auto vars:     Size  Location     Type
  7500 ;;		None
  7501 ;; Return value:  Size  Location     Type
  7502 ;;                  1    wreg      void 
  7503 ;; Registers used:
  7504 ;;		wreg
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7510 ;;      Params:         0       0       2       0       0       0       0       0
  7511 ;;      Locals:         0       0       0       0       0       0       0       0
  7512 ;;      Temps:          0       0       0       0       0       0       0       0
  7513 ;;      Totals:         0       0       2       0       0       0       0       0
  7514 ;;Total ram usage:        2 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; Hardware stack levels required when called:    7
  7517 ;; This function calls:
  7518 ;;		Nothing
  7519 ;; This function is called by:
  7520 ;;		_PIN_MANAGER_Initialize
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           
  7525                           ;psect for function _IOCCF5_SetInterruptHandler
  7526  0DF4                     _IOCCF5_SetInterruptHandler:	
  7527                           
  7528                           ;pin_manager.c: 198: IOCCF5_InterruptHandler = InterruptHandler;
  7529                           
  7530                           ;incstack = 0
  7531                           ; Regs used in _IOCCF5_SetInterruptHandler: [wreg]
  7532  0DF4  0021               	movlb	1	; select bank1
  7533  0DF5  0860               	movf	(IOCCF5_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7534  0DF6  00D6               	movwf	(_IOCCF5_InterruptHandler+1)^(0+128)
  7535  0DF7  085F               	movf	IOCCF5_SetInterruptHandler@InterruptHandler^(0+128),w
  7536  0DF8  00D5               	movwf	_IOCCF5_InterruptHandler^(0+128)
  7537  0DF9  0008               	return
  7538  0DFA                     __end_of_IOCCF5_SetInterruptHandler:	
  7539                           
  7540                           	psect	text17
  7541  0DEE                     __ptext17:	
  7542 ;; *************** function _IOCCF4_SetInterruptHandler *****************
  7543 ;; Defined at:
  7544 ;;		line 167 in file "mcc_generated_files/pin_manager.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  7547 ;;		 -> IOCCF4_DefaultInterruptHandler(1), 
  7548 ;; Auto vars:     Size  Location     Type
  7549 ;;		None
  7550 ;; Return value:  Size  Location     Type
  7551 ;;                  1    wreg      void 
  7552 ;; Registers used:
  7553 ;;		wreg
  7554 ;; Tracked objects:
  7555 ;;		On entry : 0/0
  7556 ;;		On exit  : 0/0
  7557 ;;		Unchanged: 0/0
  7558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7559 ;;      Params:         0       0       2       0       0       0       0       0
  7560 ;;      Locals:         0       0       0       0       0       0       0       0
  7561 ;;      Temps:          0       0       0       0       0       0       0       0
  7562 ;;      Totals:         0       0       2       0       0       0       0       0
  7563 ;;Total ram usage:        2 bytes
  7564 ;; Hardware stack levels used:    1
  7565 ;; Hardware stack levels required when called:    7
  7566 ;; This function calls:
  7567 ;;		Nothing
  7568 ;; This function is called by:
  7569 ;;		_PIN_MANAGER_Initialize
  7570 ;; This function uses a non-reentrant model
  7571 ;;
  7572                           
  7573                           
  7574                           ;psect for function _IOCCF4_SetInterruptHandler
  7575  0DEE                     _IOCCF4_SetInterruptHandler:	
  7576                           
  7577                           ;pin_manager.c: 168: IOCCF4_InterruptHandler = InterruptHandler;
  7578                           
  7579                           ;incstack = 0
  7580                           ; Regs used in _IOCCF4_SetInterruptHandler: [wreg]
  7581  0DEE  0021               	movlb	1	; select bank1
  7582  0DEF  0860               	movf	(IOCCF4_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7583  0DF0  00D8               	movwf	(_IOCCF4_InterruptHandler+1)^(0+128)
  7584  0DF1  085F               	movf	IOCCF4_SetInterruptHandler@InterruptHandler^(0+128),w
  7585  0DF2  00D7               	movwf	_IOCCF4_InterruptHandler^(0+128)
  7586  0DF3  0008               	return
  7587  0DF4                     __end_of_IOCCF4_SetInterruptHandler:	
  7588                           
  7589                           	psect	text18
  7590  0E22                     __ptext18:	
  7591 ;; *************** function _OSCILLATOR_Initialize *****************
  7592 ;; Defined at:
  7593 ;;		line 92 in file "mcc_generated_files/mcc.c"
  7594 ;; Parameters:    Size  Location     Type
  7595 ;;		None
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;		None
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  1    wreg      void 
  7600 ;; Registers used:
  7601 ;;		wreg, status,2
  7602 ;; Tracked objects:
  7603 ;;		On entry : 0/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7607 ;;      Params:         0       0       0       0       0       0       0       0
  7608 ;;      Locals:         0       0       0       0       0       0       0       0
  7609 ;;      Temps:          0       0       0       0       0       0       0       0
  7610 ;;      Totals:         0       0       0       0       0       0       0       0
  7611 ;;Total ram usage:        0 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:    7
  7614 ;; This function calls:
  7615 ;;		Nothing
  7616 ;; This function is called by:
  7617 ;;		_SYSTEM_Initialize
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621                           
  7622                           ;psect for function _OSCILLATOR_Initialize
  7623  0E22                     _OSCILLATOR_Initialize:	
  7624                           
  7625                           ;mcc.c: 95: OSCCON1 = 0x00;
  7626                           
  7627                           ;incstack = 0
  7628                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7629  0E22  0032               	movlb	18	; select bank18
  7630  0E23  0199               	clrf	25	;volatile
  7631                           
  7632                           ;mcc.c: 97: OSCCON3 = 0x00;
  7633  0E24  019B               	clrf	27	;volatile
  7634                           
  7635                           ;mcc.c: 99: OSCEN = 0x00;
  7636  0E25  019D               	clrf	29	;volatile
  7637                           
  7638                           ;mcc.c: 101: OSCFRQ = 0x07;
  7639  0E26  3007               	movlw	7
  7640  0E27  009F               	movwf	31	;volatile
  7641                           
  7642                           ;mcc.c: 103: OSCTUNE = 0x00;
  7643  0E28  019E               	clrf	30	;volatile
  7644  0E29  0008               	return
  7645  0E2A                     __end_of_OSCILLATOR_Initialize:	
  7646                           
  7647                           	psect	text19
  7648  0E8E                     __ptext19:	
  7649 ;; *************** function _EXT_INT_Initialize *****************
  7650 ;; Defined at:
  7651 ;;		line 93 in file "mcc_generated_files/ext_int.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;		None
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;		None
  7656 ;; Return value:  Size  Location     Type
  7657 ;;                  1    wreg      void 
  7658 ;; Registers used:
  7659 ;;		wreg, status,2, status,0, pclath, cstack
  7660 ;; Tracked objects:
  7661 ;;		On entry : 0/0
  7662 ;;		On exit  : 0/0
  7663 ;;		Unchanged: 0/0
  7664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7665 ;;      Params:         0       0       0       0       0       0       0       0
  7666 ;;      Locals:         0       0       0       0       0       0       0       0
  7667 ;;      Temps:          0       0       0       0       0       0       0       0
  7668 ;;      Totals:         0       0       0       0       0       0       0       0
  7669 ;;Total ram usage:        0 bytes
  7670 ;; Hardware stack levels used:    1
  7671 ;; Hardware stack levels required when called:    8
  7672 ;; This function calls:
  7673 ;;		_INT_SetInterruptHandler
  7674 ;; This function is called by:
  7675 ;;		_SYSTEM_Initialize
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           
  7680                           ;psect for function _EXT_INT_Initialize
  7681  0E8E                     _EXT_INT_Initialize:	
  7682                           
  7683                           ;ext_int.c: 102: (PIR0bits.INTF = 0);
  7684                           
  7685                           ;incstack = 0
  7686                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7687  0E8E  0020               	movlb	0	; select bank0
  7688  0E8F  1010               	bcf	16,0	;volatile
  7689                           
  7690                           ;ext_int.c: 103: (INTCONbits.INTEDG = 1);
  7691  0E90  140B               	bsf	11,0	;volatile
  7692                           
  7693                           ;ext_int.c: 105: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  7694  0E91  30A5               	movlw	low _INT_DefaultInterruptHandler
  7695  0E92  0021               	movlb	1	; select bank1
  7696  0E93  00DF               	movwf	INT_SetInterruptHandler@InterruptHandler^(0+128)
  7697  0E94  300D               	movlw	high _INT_DefaultInterruptHandler
  7698  0E95  00E0               	movwf	(INT_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7699  0E96  318D  25E8         	fcall	_INT_SetInterruptHandler
  7700                           
  7701                           ;ext_int.c: 106: (PIE0bits.INTE = 1);
  7702  0E98  0021               	movlb	1	; select bank1
  7703  0E99  1410               	bsf	16,0	;volatile
  7704  0E9A  0008               	return
  7705  0E9B                     __end_of_EXT_INT_Initialize:	
  7706                           
  7707                           	psect	text20
  7708  0DE8                     __ptext20:	
  7709 ;; *************** function _INT_SetInterruptHandler *****************
  7710 ;; Defined at:
  7711 ;;		line 73 in file "mcc_generated_files/ext_int.c"
  7712 ;; Parameters:    Size  Location     Type
  7713 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  7714 ;;		 -> INT_DefaultInterruptHandler(1), 
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;		None
  7717 ;; Return value:  Size  Location     Type
  7718 ;;                  1    wreg      void 
  7719 ;; Registers used:
  7720 ;;		wreg
  7721 ;; Tracked objects:
  7722 ;;		On entry : 0/0
  7723 ;;		On exit  : 0/0
  7724 ;;		Unchanged: 0/0
  7725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7726 ;;      Params:         0       0       2       0       0       0       0       0
  7727 ;;      Locals:         0       0       0       0       0       0       0       0
  7728 ;;      Temps:          0       0       0       0       0       0       0       0
  7729 ;;      Totals:         0       0       2       0       0       0       0       0
  7730 ;;Total ram usage:        2 bytes
  7731 ;; Hardware stack levels used:    1
  7732 ;; Hardware stack levels required when called:    7
  7733 ;; This function calls:
  7734 ;;		Nothing
  7735 ;; This function is called by:
  7736 ;;		_EXT_INT_Initialize
  7737 ;; This function uses a non-reentrant model
  7738 ;;
  7739                           
  7740                           
  7741                           ;psect for function _INT_SetInterruptHandler
  7742  0DE8                     _INT_SetInterruptHandler:	
  7743                           
  7744                           ;ext_int.c: 74: INT_InterruptHandler = InterruptHandler;
  7745                           
  7746                           ;incstack = 0
  7747                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  7748  0DE8  0021               	movlb	1	; select bank1
  7749  0DE9  0860               	movf	(INT_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7750  0DEA  00D4               	movwf	(_INT_InterruptHandler+1)^(0+128)
  7751  0DEB  085F               	movf	INT_SetInterruptHandler@InterruptHandler^(0+128),w
  7752  0DEC  00D3               	movwf	_INT_InterruptHandler^(0+128)
  7753  0DED  0008               	return
  7754  0DEE                     __end_of_INT_SetInterruptHandler:	
  7755                           
  7756                           	psect	text21
  7757  0E33                     __ptext21:	
  7758 ;; *************** function _CCP2_Initialize *****************
  7759 ;; Defined at:
  7760 ;;		line 57 in file "mcc_generated_files/ccp2.c"
  7761 ;; Parameters:    Size  Location     Type
  7762 ;;		None
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;		None
  7765 ;; Return value:  Size  Location     Type
  7766 ;;                  1    wreg      void 
  7767 ;; Registers used:
  7768 ;;		wreg, status,2, status,0
  7769 ;; Tracked objects:
  7770 ;;		On entry : 0/0
  7771 ;;		On exit  : 0/0
  7772 ;;		Unchanged: 0/0
  7773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7774 ;;      Params:         0       0       0       0       0       0       0       0
  7775 ;;      Locals:         0       0       0       0       0       0       0       0
  7776 ;;      Temps:          0       0       0       0       0       0       0       0
  7777 ;;      Totals:         0       0       0       0       0       0       0       0
  7778 ;;Total ram usage:        0 bytes
  7779 ;; Hardware stack levels used:    1
  7780 ;; Hardware stack levels required when called:    7
  7781 ;; This function calls:
  7782 ;;		Nothing
  7783 ;; This function is called by:
  7784 ;;		_SYSTEM_Initialize
  7785 ;; This function uses a non-reentrant model
  7786 ;;
  7787                           
  7788                           
  7789                           ;psect for function _CCP2_Initialize
  7790  0E33                     _CCP2_Initialize:	
  7791                           
  7792                           ;ccp2.c: 62: CCP2CON = 0x03;
  7793                           
  7794                           ;incstack = 0
  7795                           ; Regs used in _CCP2_Initialize: [wreg+status,2+status,0]
  7796  0E33  3003               	movlw	3
  7797  0E34  0025               	movlb	5	; select bank5
  7798  0E35  0097               	movwf	23	;volatile
  7799                           
  7800                           ;ccp2.c: 65: CCP2CAP = 0x00;
  7801  0E36  0198               	clrf	24	;volatile
  7802                           
  7803                           ;ccp2.c: 68: CCPR2H = 0x00;
  7804  0E37  0196               	clrf	22	;volatile
  7805                           
  7806                           ;ccp2.c: 71: CCPR2L = 0x00;
  7807  0E38  0195               	clrf	21	;volatile
  7808                           
  7809                           ;ccp2.c: 74: CCPTMRSbits.C2TSEL = 0x3;
  7810  0E39  300C               	movlw	12
  7811  0E3A  049F               	iorwf	31,f	;volatile
  7812  0E3B  0008               	return
  7813  0E3C                     __end_of_CCP2_Initialize:	
  7814                           
  7815                           	psect	text22
  7816  0F01                     __ptext22:	
  7817 ;; *************** function _CCP1_Initialize *****************
  7818 ;; Defined at:
  7819 ;;		line 58 in file "mcc_generated_files/ccp1.c"
  7820 ;; Parameters:    Size  Location     Type
  7821 ;;		None
  7822 ;; Auto vars:     Size  Location     Type
  7823 ;;		None
  7824 ;; Return value:  Size  Location     Type
  7825 ;;                  1    wreg      void 
  7826 ;; Registers used:
  7827 ;;		wreg, status,2, status,0
  7828 ;; Tracked objects:
  7829 ;;		On entry : 0/0
  7830 ;;		On exit  : 0/0
  7831 ;;		Unchanged: 0/0
  7832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7833 ;;      Params:         0       0       0       0       0       0       0       0
  7834 ;;      Locals:         0       0       0       0       0       0       0       0
  7835 ;;      Temps:          0       0       0       0       0       0       0       0
  7836 ;;      Totals:         0       0       0       0       0       0       0       0
  7837 ;;Total ram usage:        0 bytes
  7838 ;; Hardware stack levels used:    1
  7839 ;; Hardware stack levels required when called:    7
  7840 ;; This function calls:
  7841 ;;		Nothing
  7842 ;; This function is called by:
  7843 ;;		_SYSTEM_Initialize
  7844 ;; This function uses a non-reentrant model
  7845 ;;
  7846                           
  7847                           
  7848                           ;psect for function _CCP1_Initialize
  7849  0F01                     _CCP1_Initialize:	
  7850                           
  7851                           ;ccp1.c: 63: CCP1CON = 0x83;
  7852                           
  7853                           ;incstack = 0
  7854                           ; Regs used in _CCP1_Initialize: [wreg+status,2+status,0]
  7855  0F01  3083               	movlw	131
  7856  0F02  0025               	movlb	5	; select bank5
  7857  0F03  0093               	movwf	19	;volatile
  7858                           
  7859                           ;ccp1.c: 66: CCP1CAP = 0x00;
  7860  0F04  0194               	clrf	20	;volatile
  7861                           
  7862                           ;ccp1.c: 69: CCPR1H = 0x00;
  7863  0F05  0192               	clrf	18	;volatile
  7864                           
  7865                           ;ccp1.c: 72: CCPR1L = 0x00;
  7866  0F06  0191               	clrf	17	;volatile
  7867                           
  7868                           ;ccp1.c: 75: CCPTMRSbits.C1TSEL = 0x2;
  7869  0F07  081F               	movf	31,w	;volatile
  7870  0F08  39FC               	andlw	-4
  7871  0F09  3802               	iorlw	2
  7872  0F0A  009F               	movwf	31	;volatile
  7873                           
  7874                           ;ccp1.c: 78: PIR4bits.CCP1IF = 0;
  7875  0F0B  0020               	movlb	0	; select bank0
  7876  0F0C  1014               	bcf	20,0	;volatile
  7877                           
  7878                           ;ccp1.c: 81: PIE4bits.CCP1IE = 1;
  7879  0F0D  0021               	movlb	1	; select bank1
  7880  0F0E  1414               	bsf	20,0	;volatile
  7881  0F0F  0008               	return
  7882  0F10                     __end_of_CCP1_Initialize:	
  7883                           
  7884                           	psect	text23
  7885  0E2A                     __ptext23:	
  7886 ;; *************** function _ADC_Initialize *****************
  7887 ;; Defined at:
  7888 ;;		line 64 in file "mcc_generated_files/adc.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;		None
  7891 ;; Auto vars:     Size  Location     Type
  7892 ;;		None
  7893 ;; Return value:  Size  Location     Type
  7894 ;;                  1    wreg      void 
  7895 ;; Registers used:
  7896 ;;		wreg, status,2
  7897 ;; Tracked objects:
  7898 ;;		On entry : 0/0
  7899 ;;		On exit  : 0/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7902 ;;      Params:         0       0       0       0       0       0       0       0
  7903 ;;      Locals:         0       0       0       0       0       0       0       0
  7904 ;;      Temps:          0       0       0       0       0       0       0       0
  7905 ;;      Totals:         0       0       0       0       0       0       0       0
  7906 ;;Total ram usage:        0 bytes
  7907 ;; Hardware stack levels used:    1
  7908 ;; Hardware stack levels required when called:    7
  7909 ;; This function calls:
  7910 ;;		Nothing
  7911 ;; This function is called by:
  7912 ;;		_SYSTEM_Initialize
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           
  7917                           ;psect for function _ADC_Initialize
  7918  0E2A                     _ADC_Initialize:	
  7919                           
  7920                           ;adc.c: 69: ADCON0 = 0x01;
  7921                           
  7922                           ;incstack = 0
  7923                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  7924  0E2A  3001               	movlw	1
  7925  0E2B  0021               	movlb	1	; select bank1
  7926  0E2C  009D               	movwf	29	;volatile
  7927                           
  7928                           ;adc.c: 72: ADCON1 = 0xE0;
  7929  0E2D  30E0               	movlw	224
  7930  0E2E  009E               	movwf	30	;volatile
  7931                           
  7932                           ;adc.c: 75: ADACT = 0x00;
  7933  0E2F  019F               	clrf	31	;volatile
  7934                           
  7935                           ;adc.c: 78: ADRESL = 0x00;
  7936  0E30  019B               	clrf	27	;volatile
  7937                           
  7938                           ;adc.c: 81: ADRESH = 0x00;
  7939  0E31  019C               	clrf	28	;volatile
  7940  0E32  0008               	return
  7941  0E33                     __end_of_ADC_Initialize:	
  7942                           
  7943                           	psect	text24
  7944  0EF2                     __ptext24:	
  7945 ;; *************** function _NutRunCycleStart *****************
  7946 ;; Defined at:
  7947 ;;		line 487 in file "main.c"
  7948 ;; Parameters:    Size  Location     Type
  7949 ;;		None
  7950 ;; Auto vars:     Size  Location     Type
  7951 ;;		None
  7952 ;; Return value:  Size  Location     Type
  7953 ;;                  1    wreg      void 
  7954 ;; Registers used:
  7955 ;;		wreg, status,2, status,0, pclath, cstack
  7956 ;; Tracked objects:
  7957 ;;		On entry : 0/0
  7958 ;;		On exit  : 0/0
  7959 ;;		Unchanged: 0/0
  7960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7961 ;;      Params:         0       0       0       0       0       0       0       0
  7962 ;;      Locals:         0       0       0       0       0       0       0       0
  7963 ;;      Temps:          0       0       0       0       0       0       0       0
  7964 ;;      Totals:         0       0       0       0       0       0       0       0
  7965 ;;Total ram usage:        0 bytes
  7966 ;; Hardware stack levels used:    1
  7967 ;; Hardware stack levels required when called:    8
  7968 ;; This function calls:
  7969 ;;		_NutRunCycleReset
  7970 ;;		_TMR3_StartTimer
  7971 ;;		_TMR3_WriteTimer
  7972 ;; This function is called by:
  7973 ;;		_main
  7974 ;; This function uses a non-reentrant model
  7975 ;;
  7976                           
  7977                           
  7978                           ;psect for function _NutRunCycleStart
  7979  0EF2                     _NutRunCycleStart:	
  7980                           
  7981                           ;main.c: 489: NutRunCycleReset();
  7982                           
  7983                           ;incstack = 0
  7984                           ; Regs used in _NutRunCycleStart: [wreg+status,2+status,0+pclath+cstack]
  7985  0EF2  318F  27D3  318E   	fcall	_NutRunCycleReset
  7986                           
  7987                           ;main.c: 491: TMR3_WriteTimer(0);
  7988  0EF5  3000               	movlw	0
  7989  0EF6  0021               	movlb	1	; select bank1
  7990  0EF7  00DF               	movwf	TMR3_WriteTimer@timerVal^(0+128)
  7991  0EF8  00E0               	movwf	(TMR3_WriteTimer@timerVal+1)^(0+128)
  7992  0EF9  318F  27E9  318E   	fcall	_TMR3_WriteTimer
  7993                           
  7994                           ;main.c: 492: TMR3_StartTimer();
  7995  0EFC  318D  25BA         	fcall	_TMR3_StartTimer
  7996                           
  7997                           ;main.c: 493: PIE3bits.TMR3IE = 1;
  7998  0EFE  0021               	movlb	1	; select bank1
  7999  0EFF  1613               	bsf	19,4	;volatile
  8000  0F00  0008               	return
  8001  0F01                     __end_of_NutRunCycleStart:	
  8002                           
  8003                           	psect	text25
  8004  0FE9                     __ptext25:	
  8005 ;; *************** function _TMR3_WriteTimer *****************
  8006 ;; Defined at:
  8007 ;;		line 117 in file "mcc_generated_files/tmr3.c"
  8008 ;; Parameters:    Size  Location     Type
  8009 ;;  timerVal        2    0[BANK1 ] unsigned int 
  8010 ;; Auto vars:     Size  Location     Type
  8011 ;;		None
  8012 ;; Return value:  Size  Location     Type
  8013 ;;                  1    wreg      void 
  8014 ;; Registers used:
  8015 ;;		wreg, status,2
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8021 ;;      Params:         0       0       2       0       0       0       0       0
  8022 ;;      Locals:         0       0       0       0       0       0       0       0
  8023 ;;      Temps:          0       0       0       0       0       0       0       0
  8024 ;;      Totals:         0       0       2       0       0       0       0       0
  8025 ;;Total ram usage:        2 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; Hardware stack levels required when called:    7
  8028 ;; This function calls:
  8029 ;;		Nothing
  8030 ;; This function is called by:
  8031 ;;		_main
  8032 ;;		_NutRunCycleStart
  8033 ;; This function uses a non-reentrant model
  8034 ;;
  8035                           
  8036                           
  8037                           ;psect for function _TMR3_WriteTimer
  8038  0FE9                     _TMR3_WriteTimer:	
  8039                           
  8040                           ;tmr3.c: 119: if (T3CONbits.T3SYNC == 1)
  8041                           
  8042                           ;incstack = 0
  8043                           ; Regs used in _TMR3_WriteTimer: [wreg+status,2]
  8044  0FE9  0028               	movlb	8	; select bank8
  8045  0FEA  1D13               	btfss	19,2	;volatile
  8046  0FEB  2FF7               	goto	l4687
  8047                           
  8048                           ;tmr3.c: 120: {
  8049                           ;tmr3.c: 122: T3CONbits.TMR3ON = 0;
  8050  0FEC  1013               	bcf	19,0	;volatile
  8051                           
  8052                           ;tmr3.c: 125: TMR3H = (timerVal >> 8);
  8053  0FED  0021               	movlb	1	; select bank1
  8054  0FEE  0860               	movf	(TMR3_WriteTimer@timerVal+1)^(0+128),w
  8055  0FEF  0028               	movlb	8	; select bank8
  8056  0FF0  0092               	movwf	18	;volatile
  8057                           
  8058                           ;tmr3.c: 126: TMR3L = timerVal;
  8059  0FF1  0021               	movlb	1	; select bank1
  8060  0FF2  085F               	movf	TMR3_WriteTimer@timerVal^(0+128),w
  8061  0FF3  0028               	movlb	8	; select bank8
  8062  0FF4  0091               	movwf	17	;volatile
  8063                           
  8064                           ;tmr3.c: 129: T3CONbits.TMR3ON =1;
  8065  0FF5  1413               	bsf	19,0	;volatile
  8066                           
  8067                           ;tmr3.c: 130: }
  8068  0FF6  0008               	return
  8069  0FF7                     l4687:	
  8070                           
  8071                           ;tmr3.c: 131: else
  8072                           ;tmr3.c: 132: {
  8073                           ;tmr3.c: 134: TMR3H = (timerVal >> 8);
  8074  0FF7  0021               	movlb	1	; select bank1
  8075  0FF8  0860               	movf	(TMR3_WriteTimer@timerVal+1)^(0+128),w
  8076  0FF9  0028               	movlb	8	; select bank8
  8077  0FFA  0092               	movwf	18	;volatile
  8078                           
  8079                           ;tmr3.c: 135: TMR3L = timerVal;
  8080  0FFB  0021               	movlb	1	; select bank1
  8081  0FFC  085F               	movf	TMR3_WriteTimer@timerVal^(0+128),w
  8082  0FFD  0028               	movlb	8	; select bank8
  8083  0FFE  0091               	movwf	17	;volatile
  8084  0FFF  0008               	return
  8085  1000                     __end_of_TMR3_WriteTimer:	
  8086                           
  8087                           	psect	text26
  8088  0DBA                     __ptext26:	
  8089 ;; *************** function _TMR3_StartTimer *****************
  8090 ;; Defined at:
  8091 ;;		line 96 in file "mcc_generated_files/tmr3.c"
  8092 ;; Parameters:    Size  Location     Type
  8093 ;;		None
  8094 ;; Auto vars:     Size  Location     Type
  8095 ;;		None
  8096 ;; Return value:  Size  Location     Type
  8097 ;;                  1    wreg      void 
  8098 ;; Registers used:
  8099 ;;		None
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8105 ;;      Params:         0       0       0       0       0       0       0       0
  8106 ;;      Locals:         0       0       0       0       0       0       0       0
  8107 ;;      Temps:          0       0       0       0       0       0       0       0
  8108 ;;      Totals:         0       0       0       0       0       0       0       0
  8109 ;;Total ram usage:        0 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:    7
  8112 ;; This function calls:
  8113 ;;		Nothing
  8114 ;; This function is called by:
  8115 ;;		_TMR3_Initialize
  8116 ;;		_NutRunCycleStart
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function _TMR3_StartTimer
  8122  0DBA                     _TMR3_StartTimer:	
  8123                           
  8124                           ;tmr3.c: 99: T3CONbits.TMR3ON = 1;
  8125                           
  8126                           ;incstack = 0
  8127                           ; Regs used in _TMR3_StartTimer: []
  8128  0DBA  0028               	movlb	8	; select bank8
  8129  0DBB  1413               	bsf	19,0	;volatile
  8130  0DBC  0008               	return
  8131  0DBD                     __end_of_TMR3_StartTimer:	
  8132                           
  8133                           	psect	text27
  8134  0FD3                     __ptext27:	
  8135 ;; *************** function _NutRunCycleReset *****************
  8136 ;; Defined at:
  8137 ;;		line 476 in file "main.c"
  8138 ;; Parameters:    Size  Location     Type
  8139 ;;		None
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;		None
  8142 ;; Return value:  Size  Location     Type
  8143 ;;                  1    wreg      void 
  8144 ;; Registers used:
  8145 ;;		wreg, status,2
  8146 ;; Tracked objects:
  8147 ;;		On entry : 0/0
  8148 ;;		On exit  : 0/0
  8149 ;;		Unchanged: 0/0
  8150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8151 ;;      Params:         0       0       0       0       0       0       0       0
  8152 ;;      Locals:         0       0       0       0       0       0       0       0
  8153 ;;      Temps:          0       0       0       0       0       0       0       0
  8154 ;;      Totals:         0       0       0       0       0       0       0       0
  8155 ;;Total ram usage:        0 bytes
  8156 ;; Hardware stack levels used:    1
  8157 ;; Hardware stack levels required when called:    7
  8158 ;; This function calls:
  8159 ;;		Nothing
  8160 ;; This function is called by:
  8161 ;;		_NutRunCycleStart
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           
  8166                           ;psect for function _NutRunCycleReset
  8167  0FD3                     _NutRunCycleReset:	
  8168                           
  8169                           ;main.c: 478: EncEdgeMinTimeInterval= 0xEFFFFFFF;
  8170                           
  8171                           ;incstack = 0
  8172                           ; Regs used in _NutRunCycleReset: [wreg+status,2]
  8173  0FD3  30EF               	movlw	239
  8174  0FD4  0020               	movlb	0	; select bank0
  8175  0FD5  00D9               	movwf	_EncEdgeMinTimeInterval+3
  8176  0FD6  30FF               	movlw	255
  8177  0FD7  00D8               	movwf	_EncEdgeMinTimeInterval+2
  8178  0FD8  30FF               	movlw	255
  8179  0FD9  00D7               	movwf	_EncEdgeMinTimeInterval+1
  8180  0FDA  30FF               	movlw	255
  8181  0FDB  00D6               	movwf	_EncEdgeMinTimeInterval
  8182                           
  8183                           ;main.c: 479: EncEdgeTimeInterval= 0x00000000;
  8184  0FDC  3000               	movlw	0
  8185  0FDD  00C1               	movwf	_EncEdgeTimeInterval+3
  8186  0FDE  3000               	movlw	0
  8187  0FDF  00C0               	movwf	_EncEdgeTimeInterval+2
  8188  0FE0  3000               	movlw	0
  8189  0FE1  00BF               	movwf	_EncEdgeTimeInterval+1
  8190  0FE2  3000               	movlw	0
  8191  0FE3  00BE               	movwf	_EncEdgeTimeInterval
  8192                           
  8193                           ;main.c: 481: EncoderPosition= 0;
  8194  0FE4  01C4               	clrf	_EncoderPosition
  8195  0FE5  01C5               	clrf	_EncoderPosition+1
  8196                           
  8197                           ;main.c: 483: NutRunLength = 0;
  8198  0FE6  01C6               	clrf	_NutRunLength
  8199  0FE7  01C7               	clrf	_NutRunLength+1
  8200  0FE8  0008               	return
  8201  0FE9                     __end_of_NutRunCycleReset:	
  8202                           
  8203                           	psect	text28
  8204  07C0                     __ptext28:	
  8205 ;; *************** function _ModbusMasterSetup *****************
  8206 ;; Defined at:
  8207 ;;		line 43 in file "ModbusManager.c"
  8208 ;; Parameters:    Size  Location     Type
  8209 ;;		None
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;		None
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  1    wreg      void 
  8214 ;; Registers used:
  8215 ;;		wreg, status,2, status,0, pclath, cstack
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8221 ;;      Params:         0       0       0       0       0       0       0       0
  8222 ;;      Locals:         0       0       0       0       0       0       0       0
  8223 ;;      Temps:          0       0       0       0       0       0       0       0
  8224 ;;      Totals:         0       0       0       0       0       0       0       0
  8225 ;;Total ram usage:        0 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; Hardware stack levels required when called:    8
  8228 ;; This function calls:
  8229 ;;		_EUSART_Initialize
  8230 ;;		_ModbusMasterInit
  8231 ;;		_postTransmission
  8232 ;;		_preTransmission
  8233 ;; This function is called by:
  8234 ;;		_main
  8235 ;; This function uses a non-reentrant model
  8236 ;;
  8237                           
  8238                           
  8239                           ;psect for function _ModbusMasterSetup
  8240  07C0                     _ModbusMasterSetup:	
  8241                           
  8242                           ;incstack = 0
  8243                           ; Regs used in _ModbusMasterSetup: [wreg+status,2+status,0+pclath+cstack]
  8244                           ;ModbusManager.c: 45: do { LATBbits.LATB6 = 0; } while(0);
  8245  07C0  0022               	movlb	2	; select bank2
  8246  07C1  130D               	bcf	13,6	;volatile
  8247                           
  8248                           ;ModbusManager.c: 46: EUSART_Initialize();
  8249  07C2  318E  265C  3187   	fcall	_EUSART_Initialize
  8250                           
  8251                           ;ModbusManager.c: 48: ModbusMasterInit(5);
  8252  07C5  3005               	movlw	5
  8253  07C6  3187  27F0  3187   	fcall	_ModbusMasterInit
  8254                           
  8255                           ;ModbusManager.c: 50: preTransmission(preTransmission_App);
  8256  07C9  3000               	movlw	0
  8257  07CA  0021               	movlb	1	; select bank1
  8258  07CB  00DF               	movwf	preTransmission@preTransmission^(0+128)
  8259  07CC  3000               	movlw	0
  8260  07CD  00E0               	movwf	(preTransmission@preTransmission^(0+128)+1)
  8261  07CE  318D  25E2  3187   	fcall	_preTransmission
  8262                           
  8263                           ;ModbusManager.c: 51: postTransmission(postTransmission_App);
  8264  07D1  3000               	movlw	0
  8265  07D2  0021               	movlb	1	; select bank1
  8266  07D3  00DF               	movwf	postTransmission@postTransmission^(0+128)
  8267  07D4  3000               	movlw	0
  8268  07D5  00E0               	movwf	(postTransmission@postTransmission^(0+128)+1)
  8269  07D6  318D  25DC         	fcall	_postTransmission
  8270  07D8  0008               	return
  8271  07D9                     __end_of_ModbusMasterSetup:	
  8272                           
  8273                           	psect	text29
  8274  0DE2                     __ptext29:	
  8275 ;; *************** function _preTransmission *****************
  8276 ;; Defined at:
  8277 ;;		line 134 in file "ModbusMaster.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;  preTransmiss    2    0[BANK1 ] PTR FTN()void 
  8280 ;;		 -> preTransmission_App(1), 
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;		None
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  1    wreg      void 
  8285 ;; Registers used:
  8286 ;;		wreg
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8292 ;;      Params:         0       0       2       0       0       0       0       0
  8293 ;;      Locals:         0       0       0       0       0       0       0       0
  8294 ;;      Temps:          0       0       0       0       0       0       0       0
  8295 ;;      Totals:         0       0       2       0       0       0       0       0
  8296 ;;Total ram usage:        2 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    7
  8299 ;; This function calls:
  8300 ;;		Nothing
  8301 ;; This function is called by:
  8302 ;;		_ModbusMasterSetup
  8303 ;; This function uses a non-reentrant model
  8304 ;;
  8305                           
  8306                           
  8307                           ;psect for function _preTransmission
  8308  0DE2                     _preTransmission:	
  8309                           
  8310                           ;ModbusMaster.c: 136: _preTransmission = preTransmission;
  8311                           
  8312                           ;incstack = 0
  8313                           ; Regs used in _preTransmission: [wreg]
  8314  0DE2  0021               	movlb	1	; select bank1
  8315  0DE3  0860               	movf	(preTransmission@preTransmission+1)^(0+128),w
  8316  0DE4  00BB               	movwf	(__preTransmission+1)^(0+128)
  8317  0DE5  085F               	movf	preTransmission@preTransmission^(0+128),w
  8318  0DE6  00BA               	movwf	__preTransmission^(0+128)
  8319  0DE7  0008               	return
  8320  0DE8                     __end_of_preTransmission:	
  8321                           
  8322                           	psect	text30
  8323  0DDC                     __ptext30:	
  8324 ;; *************** function _postTransmission *****************
  8325 ;; Defined at:
  8326 ;;		line 152 in file "ModbusMaster.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;  postTransmis    2    0[BANK1 ] PTR FTN()void 
  8329 ;;		 -> postTransmission_App(1), 
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;		None
  8332 ;; Return value:  Size  Location     Type
  8333 ;;                  1    wreg      void 
  8334 ;; Registers used:
  8335 ;;		wreg
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8341 ;;      Params:         0       0       2       0       0       0       0       0
  8342 ;;      Locals:         0       0       0       0       0       0       0       0
  8343 ;;      Temps:          0       0       0       0       0       0       0       0
  8344 ;;      Totals:         0       0       2       0       0       0       0       0
  8345 ;;Total ram usage:        2 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    7
  8348 ;; This function calls:
  8349 ;;		Nothing
  8350 ;; This function is called by:
  8351 ;;		_ModbusMasterSetup
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           
  8356                           ;psect for function _postTransmission
  8357  0DDC                     _postTransmission:	
  8358                           
  8359                           ;ModbusMaster.c: 154: _postTransmission = postTransmission;
  8360                           
  8361                           ;incstack = 0
  8362                           ; Regs used in _postTransmission: [wreg]
  8363  0DDC  0021               	movlb	1	; select bank1
  8364  0DDD  0860               	movf	(postTransmission@postTransmission+1)^(0+128),w
  8365  0DDE  00B9               	movwf	(__postTransmission+1)^(0+128)
  8366  0DDF  085F               	movf	postTransmission@postTransmission^(0+128),w
  8367  0DE0  00B8               	movwf	__postTransmission^(0+128)
  8368  0DE1  0008               	return
  8369  0DE2                     __end_of_postTransmission:	
  8370                           
  8371                           	psect	text31
  8372  07F0                     __ptext31:	
  8373 ;; *************** function _ModbusMasterInit *****************
  8374 ;; Defined at:
  8375 ;;		line 19 in file "ModbusMaster.c"
  8376 ;; Parameters:    Size  Location     Type
  8377 ;;  slave           1    wreg     unsigned char 
  8378 ;; Auto vars:     Size  Location     Type
  8379 ;;  slave           1    1[BANK1 ] unsigned char 
  8380 ;; Return value:  Size  Location     Type
  8381 ;;                  1    wreg      void 
  8382 ;; Registers used:
  8383 ;;		wreg, status,2
  8384 ;; Tracked objects:
  8385 ;;		On entry : 0/0
  8386 ;;		On exit  : 0/0
  8387 ;;		Unchanged: 0/0
  8388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8389 ;;      Params:         0       0       0       0       0       0       0       0
  8390 ;;      Locals:         0       0       1       0       0       0       0       0
  8391 ;;      Temps:          0       0       1       0       0       0       0       0
  8392 ;;      Totals:         0       0       2       0       0       0       0       0
  8393 ;;Total ram usage:        2 bytes
  8394 ;; Hardware stack levels used:    1
  8395 ;; Hardware stack levels required when called:    7
  8396 ;; This function calls:
  8397 ;;		Nothing
  8398 ;; This function is called by:
  8399 ;;		_ModbusMasterSetup
  8400 ;; This function uses a non-reentrant model
  8401 ;;
  8402                           
  8403                           
  8404                           ;psect for function _ModbusMasterInit
  8405  07F0                     _ModbusMasterInit:	
  8406                           
  8407                           ;incstack = 0
  8408                           ; Regs used in _ModbusMasterInit: [wreg+status,2]
  8409                           ;ModbusMasterInit@slave stored from wreg
  8410  07F0  0021               	movlb	1	; select bank1
  8411  07F1  00E0               	movwf	ModbusMasterInit@slave^(0+128)
  8412                           
  8413                           ;ModbusMaster.c: 22: _preTransmission = 0;
  8414  07F2  01BA               	clrf	__preTransmission^(0+128)
  8415  07F3  01BB               	clrf	(__preTransmission+1)^(0+128)
  8416                           
  8417                           ;ModbusMaster.c: 23: _postTransmission = 0;
  8418  07F4  01B8               	clrf	__postTransmission^(0+128)
  8419  07F5  01B9               	clrf	(__postTransmission+1)^(0+128)
  8420                           
  8421                           ;ModbusMaster.c: 24: _u8MBSlave = slave;
  8422  07F6  0860               	movf	ModbusMasterInit@slave^(0+128),w
  8423  07F7  00DF               	movwf	??_ModbusMasterInit^(0+128)
  8424  07F8  085F               	movf	??_ModbusMasterInit^(0+128),w
  8425  07F9  0020               	movlb	0	; select bank0
  8426  07FA  00CC               	movwf	__u8MBSlave
  8427                           
  8428                           ;ModbusMaster.c: 25: _u8TransmitBufferIndex = 0;
  8429  07FB  01CB               	clrf	__u8TransmitBufferIndex
  8430                           
  8431                           ;ModbusMaster.c: 26: u16TransmitBufferLength = 0;
  8432  07FC  0021               	movlb	1	; select bank1
  8433  07FD  01BC               	clrf	_u16TransmitBufferLength^(0+128)
  8434  07FE  01BD               	clrf	(_u16TransmitBufferLength+1)^(0+128)
  8435  07FF  0008               	return
  8436  0800                     __end_of_ModbusMasterInit:	
  8437                           
  8438                           	psect	text32
  8439  0E5C                     __ptext32:	
  8440 ;; *************** function _EUSART_Initialize *****************
  8441 ;; Defined at:
  8442 ;;		line 55 in file "mcc_generated_files/eusart.c"
  8443 ;; Parameters:    Size  Location     Type
  8444 ;;		None
  8445 ;; Auto vars:     Size  Location     Type
  8446 ;;		None
  8447 ;; Return value:  Size  Location     Type
  8448 ;;                  1    wreg      void 
  8449 ;; Registers used:
  8450 ;;		wreg
  8451 ;; Tracked objects:
  8452 ;;		On entry : 0/0
  8453 ;;		On exit  : 0/0
  8454 ;;		Unchanged: 0/0
  8455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8456 ;;      Params:         0       0       0       0       0       0       0       0
  8457 ;;      Locals:         0       0       0       0       0       0       0       0
  8458 ;;      Temps:          0       0       0       0       0       0       0       0
  8459 ;;      Totals:         0       0       0       0       0       0       0       0
  8460 ;;Total ram usage:        0 bytes
  8461 ;; Hardware stack levels used:    1
  8462 ;; Hardware stack levels required when called:    7
  8463 ;; This function calls:
  8464 ;;		Nothing
  8465 ;; This function is called by:
  8466 ;;		_SYSTEM_Initialize
  8467 ;;		_ModbusMasterSetup
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           
  8472                           ;psect for function _EUSART_Initialize
  8473  0E5C                     _EUSART_Initialize:	
  8474                           
  8475                           ;eusart.c: 60: BAUD1CON = 0x18;
  8476                           
  8477                           ;incstack = 0
  8478                           ; Regs used in _EUSART_Initialize: [wreg]
  8479  0E5C  3018               	movlw	24
  8480  0E5D  0023               	movlb	3	; select bank3
  8481  0E5E  009F               	movwf	31	;volatile
  8482                           
  8483                           ;eusart.c: 63: RC1STA = 0x90;
  8484  0E5F  3090               	movlw	144
  8485  0E60  009D               	movwf	29	;volatile
  8486                           
  8487                           ;eusart.c: 66: TX1STA = 0x24;
  8488  0E61  3024               	movlw	36
  8489  0E62  009E               	movwf	30	;volatile
  8490                           
  8491                           ;eusart.c: 69: SP1BRGL = 0x40;
  8492  0E63  3040               	movlw	64
  8493  0E64  009B               	movwf	27	;volatile
  8494                           
  8495                           ;eusart.c: 72: SP1BRGH = 0x03;
  8496  0E65  3003               	movlw	3
  8497  0E66  009C               	movwf	28	;volatile
  8498  0E67  0008               	return
  8499  0E68                     __end_of_EUSART_Initialize:	
  8500                           
  8501                           	psect	text33
  8502  0DB7                     __ptext33:	
  8503 ;; *************** function _LedONStatusBusy *****************
  8504 ;; Defined at:
  8505 ;;		line 12 in file "LED_Ctrl.c"
  8506 ;; Parameters:    Size  Location     Type
  8507 ;;		None
  8508 ;; Auto vars:     Size  Location     Type
  8509 ;;		None
  8510 ;; Return value:  Size  Location     Type
  8511 ;;                  1    wreg      unsigned char 
  8512 ;; Registers used:
  8513 ;;		wreg
  8514 ;; Tracked objects:
  8515 ;;		On entry : 0/0
  8516 ;;		On exit  : 0/0
  8517 ;;		Unchanged: 0/0
  8518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8519 ;;      Params:         0       0       0       0       0       0       0       0
  8520 ;;      Locals:         0       0       0       0       0       0       0       0
  8521 ;;      Temps:          0       0       0       0       0       0       0       0
  8522 ;;      Totals:         0       0       0       0       0       0       0       0
  8523 ;;Total ram usage:        0 bytes
  8524 ;; Hardware stack levels used:    1
  8525 ;; Hardware stack levels required when called:    7
  8526 ;; This function calls:
  8527 ;;		Nothing
  8528 ;; This function is called by:
  8529 ;;		_main
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           
  8534                           ;psect for function _LedONStatusBusy
  8535  0DB7                     _LedONStatusBusy:	
  8536                           
  8537                           ;LED_Ctrl.c: 14: return Led_ON;
  8538                           
  8539                           ;incstack = 0
  8540                           ; Regs used in _LedONStatusBusy: [wreg]
  8541  0DB7  0020               	movlb	0	; select bank0
  8542  0DB8  0848               	movf	_Led_ON,w
  8543  0DB9  0008               	return
  8544  0DBA                     __end_of_LedONStatusBusy:	
  8545                           
  8546                           	psect	text34
  8547  02C1                     __ptext34:	
  8548 ;; *************** function _EPC_StateMachineControlLoop *****************
  8549 ;; Defined at:
  8550 ;;		line 172 in file "main.c"
  8551 ;; Parameters:    Size  Location     Type
  8552 ;;		None
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;		None
  8555 ;; Return value:  Size  Location     Type
  8556 ;;                  1    wreg      void 
  8557 ;; Registers used:
  8558 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8559 ;; Tracked objects:
  8560 ;;		On entry : 0/0
  8561 ;;		On exit  : 0/0
  8562 ;;		Unchanged: 0/0
  8563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8564 ;;      Params:         0       0       0       0       0       0       0       0
  8565 ;;      Locals:         0       0       0       0       0       0       0       0
  8566 ;;      Temps:          0       0       0       4       0       0       0       0
  8567 ;;      Totals:         0       0       0       4       0       0       0       0
  8568 ;;Total ram usage:        4 bytes
  8569 ;; Hardware stack levels used:    1
  8570 ;; Hardware stack levels required when called:    9
  8571 ;; This function calls:
  8572 ;;		_EUSART_Write
  8573 ;;		_LedONStartConfig
  8574 ;;		_valuetocharHighNibble
  8575 ;;		_valuetocharLowNibble
  8576 ;; This function is called by:
  8577 ;;		_main
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           
  8582                           ;psect for function _EPC_StateMachineControlLoop
  8583  02C1                     _EPC_StateMachineControlLoop:	
  8584                           
  8585                           ;main.c: 175: if((NutRunstate == 1) || (NutRunstate == 2))
  8586                           
  8587                           ;incstack = 0
  8588                           ; Regs used in _EPC_StateMachineControlLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack
      +                          ]
  8589  02C1  0020               	movlb	0	; select bank0
  8590  02C2  034E               	decf	_NutRunstate,w
  8591  02C3  1903               	btfsc	3,2
  8592  02C4  2AC9               	goto	l5191
  8593  02C5  3002               	movlw	2
  8594  02C6  064E               	xorwf	_NutRunstate,w
  8595  02C7  1D03               	btfss	3,2
  8596  02C8  2AE7               	goto	l5201
  8597  02C9                     l5191:	
  8598                           
  8599                           ;main.c: 176: {
  8600                           ;main.c: 177: if((EncEdgeGotFlag == 0) && (EncEdgeTimeInterval > 10000))
  8601  02C9  0850               	movf	_EncEdgeGotFlag,w
  8602  02CA  1D03               	btfss	3,2
  8603  02CB  2AE7               	goto	l5201
  8604  02CC  0841               	movf	_EncEdgeTimeInterval+3,w
  8605  02CD  1D03               	btfss	3,2
  8606  02CE  2AD8               	goto	l5195
  8607  02CF  0840               	movf	_EncEdgeTimeInterval+2,w
  8608  02D0  1D03               	btfss	3,2
  8609  02D1  2AD8               	goto	l5195
  8610  02D2  3011               	movlw	17
  8611  02D3  023E               	subwf	_EncEdgeTimeInterval,w
  8612  02D4  3027               	movlw	39
  8613  02D5  3B3F               	subwfb	_EncEdgeTimeInterval+1,w
  8614  02D6  1C03               	btfss	3,0
  8615  02D7  2AE7               	goto	l5201
  8616  02D8                     l5195:	
  8617                           
  8618                           ;main.c: 178: {
  8619                           ;main.c: 179: NutRunstate= 0;
  8620  02D8  01CE               	clrf	_NutRunstate
  8621                           
  8622                           ;main.c: 180: EncoderPosition = 0;
  8623  02D9  01C4               	clrf	_EncoderPosition
  8624  02DA  01C5               	clrf	_EncoderPosition+1
  8625                           
  8626                           ;main.c: 181: EncEdgeMinTimeInterval= 0xEFFFFFFF;
  8627  02DB  30EF               	movlw	239
  8628  02DC  00D9               	movwf	_EncEdgeMinTimeInterval+3
  8629  02DD  30FF               	movlw	255
  8630  02DE  00D8               	movwf	_EncEdgeMinTimeInterval+2
  8631  02DF  30FF               	movlw	255
  8632  02E0  00D7               	movwf	_EncEdgeMinTimeInterval+1
  8633  02E1  30FF               	movlw	255
  8634  02E2  00D6               	movwf	_EncEdgeMinTimeInterval
  8635                           
  8636                           ;main.c: 182: EUSART_Write('%');
  8637  02E3  3025               	movlw	37
  8638  02E4  318E  2646  3182   	fcall	_EUSART_Write
  8639  02E7                     l5201:	
  8640                           
  8641                           ;main.c: 184: }
  8642                           ;main.c: 185: }
  8643                           ;main.c: 187: if(ShutdownDetected == 1)
  8644  02E7  0020               	movlb	0	; select bank0
  8645  02E8  034F               	decf	_ShutdownDetected,w
  8646  02E9  1D03               	btfss	3,2
  8647  02EA  2C1C               	goto	l5261
  8648                           
  8649                           ;main.c: 188: {
  8650                           ;main.c: 190: ShutdownDetected=0;
  8651  02EB  01CF               	clrf	_ShutdownDetected
  8652                           
  8653                           ;main.c: 191: LedONStartConfig(0, 2, 15);
  8654  02EC  3002               	movlw	2
  8655  02ED  0022               	movlb	2	; select bank2
  8656  02EE  00A2               	movwf	??_EPC_StateMachineControlLoop^(0+256)
  8657  02EF  0822               	movf	??_EPC_StateMachineControlLoop^(0+256),w
  8658  02F0  0021               	movlb	1	; select bank1
  8659  02F1  00E7               	movwf	LedONStartConfig@LedONDurationSec^(0+128)
  8660  02F2  300F               	movlw	15
  8661  02F3  0022               	movlb	2	; select bank2
  8662  02F4  00A3               	movwf	(??_EPC_StateMachineControlLoop+1)^(0+256)
  8663  02F5  0823               	movf	(??_EPC_StateMachineControlLoop+1)^(0+256),w
  8664  02F6  0021               	movlb	1	; select bank1
  8665  02F7  00E8               	movwf	LedONStartConfig@LedONNumBlink^(0+128)
  8666  02F8  3000               	movlw	0
  8667  02F9  3184  2422  3182   	fcall	_LedONStartConfig
  8668                           
  8669                           ;main.c: 192: EUSART_Write('\r');
  8670  02FC  300D               	movlw	13
  8671  02FD  318E  2646  3182   	fcall	_EUSART_Write
  8672                           
  8673                           ;main.c: 193: EUSART_Write('\n');
  8674  0300  300A               	movlw	10
  8675  0301  318E  2646  3182   	fcall	_EUSART_Write
  8676                           
  8677                           ;main.c: 194: EUSART_Write('N');
  8678  0304  304E               	movlw	78
  8679  0305  318E  2646  3182   	fcall	_EUSART_Write
  8680                           
  8681                           ;main.c: 195: EUSART_Write('u');
  8682  0308  3075               	movlw	117
  8683  0309  318E  2646  3182   	fcall	_EUSART_Write
  8684                           
  8685                           ;main.c: 196: EUSART_Write('t');
  8686  030C  3074               	movlw	116
  8687  030D  318E  2646  3182   	fcall	_EUSART_Write
  8688                           
  8689                           ;main.c: 197: EUSART_Write(' ');
  8690  0310  3020               	movlw	32
  8691  0311  318E  2646  3182   	fcall	_EUSART_Write
  8692                           
  8693                           ;main.c: 198: EUSART_Write('R');
  8694  0314  3052               	movlw	82
  8695  0315  318E  2646  3182   	fcall	_EUSART_Write
  8696                           
  8697                           ;main.c: 199: EUSART_Write('u');
  8698  0318  3075               	movlw	117
  8699  0319  318E  2646  3182   	fcall	_EUSART_Write
  8700                           
  8701                           ;main.c: 200: EUSART_Write('N');
  8702  031C  304E               	movlw	78
  8703  031D  318E  2646  3182   	fcall	_EUSART_Write
  8704                           
  8705                           ;main.c: 201: EUSART_Write('=');
  8706  0320  303D               	movlw	61
  8707  0321  318E  2646  3182   	fcall	_EUSART_Write
  8708                           
  8709                           ;main.c: 202: EUSART_Write('0');
  8710  0324  3030               	movlw	48
  8711  0325  318E  2646  3182   	fcall	_EUSART_Write
  8712                           
  8713                           ;main.c: 203: EUSART_Write('x');
  8714  0328  3078               	movlw	120
  8715  0329  318E  2646  3182   	fcall	_EUSART_Write
  8716                           
  8717                           ;main.c: 204: EUSART_Write(valuetocharHighNibble((unsigned char)((unsigned int)(NutRunLe
      +                          ngth>>8) & 0x00FF)));
  8718  032C  0020               	movlb	0	; select bank0
  8719  032D  0847               	movf	_NutRunLength+1,w
  8720  032E  318F  27BD  3182   	fcall	_valuetocharHighNibble
  8721  0331  318E  2646  3182   	fcall	_EUSART_Write
  8722                           
  8723                           ;main.c: 205: EUSART_Write(valuetocharLowNibble((unsigned char)((unsigned int)(NutRunLen
      +                          gth>>8) & 0x00FF)));
  8724  0334  0020               	movlb	0	; select bank0
  8725  0335  0847               	movf	_NutRunLength+1,w
  8726  0336  318F  271F  3182   	fcall	_valuetocharLowNibble
  8727  0339  318E  2646  3182   	fcall	_EUSART_Write
  8728                           
  8729                           ;main.c: 206: EUSART_Write(valuetocharHighNibble((unsigned char)((unsigned int)(NutRunLe
      +                          ngth) & 0x00FF)));
  8730  033C  0020               	movlb	0	; select bank0
  8731  033D  0846               	movf	_NutRunLength,w
  8732  033E  318F  27BD  3182   	fcall	_valuetocharHighNibble
  8733  0341  318E  2646  3182   	fcall	_EUSART_Write
  8734                           
  8735                           ;main.c: 207: EUSART_Write(valuetocharLowNibble((unsigned char)((unsigned int)(NutRunLen
      +                          gth) & 0x00FF)));
  8736  0344  0020               	movlb	0	; select bank0
  8737  0345  0846               	movf	_NutRunLength,w
  8738  0346  318F  271F  3182   	fcall	_valuetocharLowNibble
  8739  0349  318E  2646  3182   	fcall	_EUSART_Write
  8740                           
  8741                           ;main.c: 208: EUSART_Write(',');
  8742  034C  302C               	movlw	44
  8743  034D  318E  2646  3182   	fcall	_EUSART_Write
  8744                           
  8745                           ;main.c: 209: EUSART_Write(valuetocharHighNibble((unsigned char)((unsigned long)(EncEdge
      +                          MinTimeInterval>>24) & 0x000000FF)));
  8746  0350  0020               	movlb	0	; select bank0
  8747  0351  0856               	movf	_EncEdgeMinTimeInterval,w
  8748  0352  0022               	movlb	2	; select bank2
  8749  0353  00A2               	movwf	??_EPC_StateMachineControlLoop^(0+256)
  8750  0354  0020               	movlb	0	; select bank0
  8751  0355  0857               	movf	_EncEdgeMinTimeInterval+1,w
  8752  0356  0022               	movlb	2	; select bank2
  8753  0357  00A3               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+1)
  8754  0358  0020               	movlb	0	; select bank0
  8755  0359  0858               	movf	_EncEdgeMinTimeInterval+2,w
  8756  035A  0022               	movlb	2	; select bank2
  8757  035B  00A4               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+2)
  8758  035C  0020               	movlb	0	; select bank0
  8759  035D  0859               	movf	_EncEdgeMinTimeInterval+3,w
  8760  035E  0022               	movlb	2	; select bank2
  8761  035F  00A5               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+3)
  8762  0360  3018               	movlw	24
  8763  0361                     u3595:	
  8764  0361  36A5               	lsrf	(??_EPC_StateMachineControlLoop^(0+256)+3),f
  8765  0362  0CA4               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+2),f
  8766  0363  0CA3               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+1),f
  8767  0364  0CA2               	rrf	??_EPC_StateMachineControlLoop^(0+256),f
  8768  0365  0B89               	decfsz	9,f
  8769  0366  2B61               	goto	u3595
  8770  0367  0822               	movf	??_EPC_StateMachineControlLoop^(0+256),w
  8771  0368  318F  27BD  3182   	fcall	_valuetocharHighNibble
  8772  036B  318E  2646  3182   	fcall	_EUSART_Write
  8773                           
  8774                           ;main.c: 210: EUSART_Write(valuetocharLowNibble((unsigned char)((unsigned long)(EncEdgeM
      +                          inTimeInterval>>24) & 0x000000FF)));
  8775  036E  0020               	movlb	0	; select bank0
  8776  036F  0856               	movf	_EncEdgeMinTimeInterval,w
  8777  0370  0022               	movlb	2	; select bank2
  8778  0371  00A2               	movwf	??_EPC_StateMachineControlLoop^(0+256)
  8779  0372  0020               	movlb	0	; select bank0
  8780  0373  0857               	movf	_EncEdgeMinTimeInterval+1,w
  8781  0374  0022               	movlb	2	; select bank2
  8782  0375  00A3               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+1)
  8783  0376  0020               	movlb	0	; select bank0
  8784  0377  0858               	movf	_EncEdgeMinTimeInterval+2,w
  8785  0378  0022               	movlb	2	; select bank2
  8786  0379  00A4               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+2)
  8787  037A  0020               	movlb	0	; select bank0
  8788  037B  0859               	movf	_EncEdgeMinTimeInterval+3,w
  8789  037C  0022               	movlb	2	; select bank2
  8790  037D  00A5               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+3)
  8791  037E  3018               	movlw	24
  8792  037F                     u3605:	
  8793  037F  36A5               	lsrf	(??_EPC_StateMachineControlLoop^(0+256)+3),f
  8794  0380  0CA4               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+2),f
  8795  0381  0CA3               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+1),f
  8796  0382  0CA2               	rrf	??_EPC_StateMachineControlLoop^(0+256),f
  8797  0383  0B89               	decfsz	9,f
  8798  0384  2B7F               	goto	u3605
  8799  0385  0822               	movf	??_EPC_StateMachineControlLoop^(0+256),w
  8800  0386  318F  271F  3182   	fcall	_valuetocharLowNibble
  8801  0389  318E  2646  3182   	fcall	_EUSART_Write
  8802                           
  8803                           ;main.c: 211: EUSART_Write(valuetocharHighNibble((unsigned char)((unsigned long)(EncEdge
      +                          MinTimeInterval>>16) & 0x000000FF)));
  8804  038C  0020               	movlb	0	; select bank0
  8805  038D  0856               	movf	_EncEdgeMinTimeInterval,w
  8806  038E  0022               	movlb	2	; select bank2
  8807  038F  00A2               	movwf	??_EPC_StateMachineControlLoop^(0+256)
  8808  0390  0020               	movlb	0	; select bank0
  8809  0391  0857               	movf	_EncEdgeMinTimeInterval+1,w
  8810  0392  0022               	movlb	2	; select bank2
  8811  0393  00A3               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+1)
  8812  0394  0020               	movlb	0	; select bank0
  8813  0395  0858               	movf	_EncEdgeMinTimeInterval+2,w
  8814  0396  0022               	movlb	2	; select bank2
  8815  0397  00A4               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+2)
  8816  0398  0020               	movlb	0	; select bank0
  8817  0399  0859               	movf	_EncEdgeMinTimeInterval+3,w
  8818  039A  0022               	movlb	2	; select bank2
  8819  039B  00A5               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+3)
  8820  039C  3010               	movlw	16
  8821  039D                     u3615:	
  8822  039D  36A5               	lsrf	(??_EPC_StateMachineControlLoop^(0+256)+3),f
  8823  039E  0CA4               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+2),f
  8824  039F  0CA3               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+1),f
  8825  03A0  0CA2               	rrf	??_EPC_StateMachineControlLoop^(0+256),f
  8826  03A1  0B89               	decfsz	9,f
  8827  03A2  2B9D               	goto	u3615
  8828  03A3  0822               	movf	??_EPC_StateMachineControlLoop^(0+256),w
  8829  03A4  318F  27BD  3182   	fcall	_valuetocharHighNibble
  8830  03A7  318E  2646  3182   	fcall	_EUSART_Write
  8831                           
  8832                           ;main.c: 212: EUSART_Write(valuetocharLowNibble((unsigned char)((unsigned long)(EncEdgeM
      +                          inTimeInterval>>16) & 0x000000FF)));
  8833  03AA  0020               	movlb	0	; select bank0
  8834  03AB  0856               	movf	_EncEdgeMinTimeInterval,w
  8835  03AC  0022               	movlb	2	; select bank2
  8836  03AD  00A2               	movwf	??_EPC_StateMachineControlLoop^(0+256)
  8837  03AE  0020               	movlb	0	; select bank0
  8838  03AF  0857               	movf	_EncEdgeMinTimeInterval+1,w
  8839  03B0  0022               	movlb	2	; select bank2
  8840  03B1  00A3               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+1)
  8841  03B2  0020               	movlb	0	; select bank0
  8842  03B3  0858               	movf	_EncEdgeMinTimeInterval+2,w
  8843  03B4  0022               	movlb	2	; select bank2
  8844  03B5  00A4               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+2)
  8845  03B6  0020               	movlb	0	; select bank0
  8846  03B7  0859               	movf	_EncEdgeMinTimeInterval+3,w
  8847  03B8  0022               	movlb	2	; select bank2
  8848  03B9  00A5               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+3)
  8849  03BA  3010               	movlw	16
  8850  03BB                     u3625:	
  8851  03BB  36A5               	lsrf	(??_EPC_StateMachineControlLoop^(0+256)+3),f
  8852  03BC  0CA4               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+2),f
  8853  03BD  0CA3               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+1),f
  8854  03BE  0CA2               	rrf	??_EPC_StateMachineControlLoop^(0+256),f
  8855  03BF  0B89               	decfsz	9,f
  8856  03C0  2BBB               	goto	u3625
  8857  03C1  0822               	movf	??_EPC_StateMachineControlLoop^(0+256),w
  8858  03C2  318F  271F  3182   	fcall	_valuetocharLowNibble
  8859  03C5  318E  2646  3182   	fcall	_EUSART_Write
  8860                           
  8861                           ;main.c: 213: EUSART_Write(valuetocharHighNibble((unsigned char)((unsigned int)(EncEdgeM
      +                          inTimeInterval>>8) & 0x00FF)));
  8862  03C8  0020               	movlb	0	; select bank0
  8863  03C9  0856               	movf	_EncEdgeMinTimeInterval,w
  8864  03CA  0022               	movlb	2	; select bank2
  8865  03CB  00A2               	movwf	??_EPC_StateMachineControlLoop^(0+256)
  8866  03CC  0020               	movlb	0	; select bank0
  8867  03CD  0857               	movf	_EncEdgeMinTimeInterval+1,w
  8868  03CE  0022               	movlb	2	; select bank2
  8869  03CF  00A3               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+1)
  8870  03D0  0020               	movlb	0	; select bank0
  8871  03D1  0858               	movf	_EncEdgeMinTimeInterval+2,w
  8872  03D2  0022               	movlb	2	; select bank2
  8873  03D3  00A4               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+2)
  8874  03D4  0020               	movlb	0	; select bank0
  8875  03D5  0859               	movf	_EncEdgeMinTimeInterval+3,w
  8876  03D6  0022               	movlb	2	; select bank2
  8877  03D7  00A5               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+3)
  8878  03D8  3008               	movlw	8
  8879  03D9                     u3635:	
  8880  03D9  36A5               	lsrf	(??_EPC_StateMachineControlLoop^(0+256)+3),f
  8881  03DA  0CA4               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+2),f
  8882  03DB  0CA3               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+1),f
  8883  03DC  0CA2               	rrf	??_EPC_StateMachineControlLoop^(0+256),f
  8884  03DD  0B89               	decfsz	9,f
  8885  03DE  2BD9               	goto	u3635
  8886  03DF  0822               	movf	??_EPC_StateMachineControlLoop^(0+256),w
  8887  03E0  318F  27BD  3182   	fcall	_valuetocharHighNibble
  8888  03E3  318E  2646  3182   	fcall	_EUSART_Write
  8889                           
  8890                           ;main.c: 214: EUSART_Write(valuetocharLowNibble((unsigned char)((unsigned int)(EncEdgeMi
      +                          nTimeInterval>>8) & 0x00FF)));
  8891  03E6  0020               	movlb	0	; select bank0
  8892  03E7  0856               	movf	_EncEdgeMinTimeInterval,w
  8893  03E8  0022               	movlb	2	; select bank2
  8894  03E9  00A2               	movwf	??_EPC_StateMachineControlLoop^(0+256)
  8895  03EA  0020               	movlb	0	; select bank0
  8896  03EB  0857               	movf	_EncEdgeMinTimeInterval+1,w
  8897  03EC  0022               	movlb	2	; select bank2
  8898  03ED  00A3               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+1)
  8899  03EE  0020               	movlb	0	; select bank0
  8900  03EF  0858               	movf	_EncEdgeMinTimeInterval+2,w
  8901  03F0  0022               	movlb	2	; select bank2
  8902  03F1  00A4               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+2)
  8903  03F2  0020               	movlb	0	; select bank0
  8904  03F3  0859               	movf	_EncEdgeMinTimeInterval+3,w
  8905  03F4  0022               	movlb	2	; select bank2
  8906  03F5  00A5               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+3)
  8907  03F6  3008               	movlw	8
  8908  03F7                     u3645:	
  8909  03F7  36A5               	lsrf	(??_EPC_StateMachineControlLoop^(0+256)+3),f
  8910  03F8  0CA4               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+2),f
  8911  03F9  0CA3               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+1),f
  8912  03FA  0CA2               	rrf	??_EPC_StateMachineControlLoop^(0+256),f
  8913  03FB  0B89               	decfsz	9,f
  8914  03FC  2BF7               	goto	u3645
  8915  03FD  0822               	movf	??_EPC_StateMachineControlLoop^(0+256),w
  8916  03FE  318F  271F  3182   	fcall	_valuetocharLowNibble
  8917  0401  318E  2646  3182   	fcall	_EUSART_Write
  8918                           
  8919                           ;main.c: 215: EUSART_Write(valuetocharHighNibble((unsigned char)((unsigned int)(EncEdgeM
      +                          inTimeInterval) & 0x00FF)));
  8920  0404  0020               	movlb	0	; select bank0
  8921  0405  0856               	movf	_EncEdgeMinTimeInterval,w
  8922  0406  318F  27BD  3182   	fcall	_valuetocharHighNibble
  8923  0409  318E  2646  3182   	fcall	_EUSART_Write
  8924                           
  8925                           ;main.c: 216: EUSART_Write(valuetocharLowNibble((unsigned char)((unsigned int)(EncEdgeMi
      +                          nTimeInterval) & 0x00FF)));
  8926  040C  0020               	movlb	0	; select bank0
  8927  040D  0856               	movf	_EncEdgeMinTimeInterval,w
  8928  040E  318F  271F  3182   	fcall	_valuetocharLowNibble
  8929  0411  318E  2646  3182   	fcall	_EUSART_Write
  8930                           
  8931                           ;main.c: 218: EUSART_Write('\r');
  8932  0414  300D               	movlw	13
  8933  0415  318E  2646  3182   	fcall	_EUSART_Write
  8934                           
  8935                           ;main.c: 219: EUSART_Write('\n');
  8936  0418  300A               	movlw	10
  8937  0419  318E  2646  3182   	fcall	_EUSART_Write
  8938  041C                     l5261:	
  8939                           
  8940                           ;main.c: 222: }
  8941                           ;main.c: 224: if(EncEdgeGotFlag==1)
  8942  041C  0020               	movlb	0	; select bank0
  8943  041D  0350               	decf	_EncEdgeGotFlag,w
  8944  041E  1D03               	btfss	3,2
  8945  041F  0008               	return
  8946                           
  8947                           ;main.c: 225: {
  8948                           ;main.c: 226: EncEdgeGotFlag=0;
  8949  0420  01D0               	clrf	_EncEdgeGotFlag
  8950  0421  0008               	return
  8951  0422                     __end_of_EPC_StateMachineControlLoop:	
  8952                           
  8953                           	psect	text35
  8954  0F1F                     __ptext35:	
  8955 ;; *************** function _valuetocharLowNibble *****************
  8956 ;; Defined at:
  8957 ;;		line 646 in file "main.c"
  8958 ;; Parameters:    Size  Location     Type
  8959 ;;  hexvalue        1    wreg     unsigned char 
  8960 ;; Auto vars:     Size  Location     Type
  8961 ;;  hexvalue        1    4[BANK1 ] unsigned char 
  8962 ;;  hexval          1    5[BANK1 ] unsigned char 
  8963 ;; Return value:  Size  Location     Type
  8964 ;;                  1    wreg      unsigned char 
  8965 ;; Registers used:
  8966 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8967 ;; Tracked objects:
  8968 ;;		On entry : 0/0
  8969 ;;		On exit  : 0/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8972 ;;      Params:         0       0       0       0       0       0       0       0
  8973 ;;      Locals:         0       0       2       0       0       0       0       0
  8974 ;;      Temps:          0       0       1       0       0       0       0       0
  8975 ;;      Totals:         0       0       3       0       0       0       0       0
  8976 ;;Total ram usage:        3 bytes
  8977 ;; Hardware stack levels used:    1
  8978 ;; Hardware stack levels required when called:    8
  8979 ;; This function calls:
  8980 ;;		_valtoasciichar
  8981 ;; This function is called by:
  8982 ;;		_EPC_StateMachineControlLoop
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986                           
  8987                           ;psect for function _valuetocharLowNibble
  8988  0F1F                     _valuetocharLowNibble:	
  8989                           
  8990                           ;incstack = 0
  8991                           ; Regs used in _valuetocharLowNibble: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8992                           ;valuetocharLowNibble@hexvalue stored from wreg
  8993  0F1F  0021               	movlb	1	; select bank1
  8994  0F20  00E3               	movwf	valuetocharLowNibble@hexvalue^(0+128)
  8995                           
  8996                           ;main.c: 648: unsigned char hexval;
  8997                           ;main.c: 649: hexval=(unsigned char)((unsigned char)(hexvalue) & 0x0F);
  8998  0F21  0863               	movf	valuetocharLowNibble@hexvalue^(0+128),w
  8999  0F22  390F               	andlw	15
  9000  0F23  00E2               	movwf	??_valuetocharLowNibble^(0+128)
  9001  0F24  0862               	movf	??_valuetocharLowNibble^(0+128),w
  9002  0F25  00E4               	movwf	valuetocharLowNibble@hexval^(0+128)
  9003                           
  9004                           ;main.c: 650: hexval= valtoasciichar(hexval);
  9005  0F26  0864               	movf	valuetocharLowNibble@hexval^(0+128),w
  9006  0F27  3186  2614         	fcall	_valtoasciichar
  9007  0F29  0021               	movlb	1	; select bank1
  9008  0F2A  00E2               	movwf	??_valuetocharLowNibble^(0+128)
  9009  0F2B  0862               	movf	??_valuetocharLowNibble^(0+128),w
  9010  0F2C  00E4               	movwf	valuetocharLowNibble@hexval^(0+128)
  9011                           
  9012                           ;main.c: 651: return hexval;
  9013  0F2D  0864               	movf	valuetocharLowNibble@hexval^(0+128),w
  9014  0F2E  0008               	return
  9015  0F2F                     __end_of_valuetocharLowNibble:	
  9016                           
  9017                           	psect	text36
  9018  0FBD                     __ptext36:	
  9019 ;; *************** function _valuetocharHighNibble *****************
  9020 ;; Defined at:
  9021 ;;		line 637 in file "main.c"
  9022 ;; Parameters:    Size  Location     Type
  9023 ;;  hexvalue        1    wreg     unsigned char 
  9024 ;; Auto vars:     Size  Location     Type
  9025 ;;  hexvalue        1    5[BANK1 ] unsigned char 
  9026 ;;  hexval          1    6[BANK1 ] unsigned char 
  9027 ;; Return value:  Size  Location     Type
  9028 ;;                  1    wreg      unsigned char 
  9029 ;; Registers used:
  9030 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9031 ;; Tracked objects:
  9032 ;;		On entry : 0/0
  9033 ;;		On exit  : 0/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9036 ;;      Params:         0       0       0       0       0       0       0       0
  9037 ;;      Locals:         0       0       2       0       0       0       0       0
  9038 ;;      Temps:          0       0       2       0       0       0       0       0
  9039 ;;      Totals:         0       0       4       0       0       0       0       0
  9040 ;;Total ram usage:        4 bytes
  9041 ;; Hardware stack levels used:    1
  9042 ;; Hardware stack levels required when called:    8
  9043 ;; This function calls:
  9044 ;;		_valtoasciichar
  9045 ;; This function is called by:
  9046 ;;		_EPC_StateMachineControlLoop
  9047 ;; This function uses a non-reentrant model
  9048 ;;
  9049                           
  9050                           
  9051                           ;psect for function _valuetocharHighNibble
  9052  0FBD                     _valuetocharHighNibble:	
  9053                           
  9054                           ;incstack = 0
  9055                           ; Regs used in _valuetocharHighNibble: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9056                           ;valuetocharHighNibble@hexvalue stored from wreg
  9057  0FBD  0021               	movlb	1	; select bank1
  9058  0FBE  00E4               	movwf	valuetocharHighNibble@hexvalue^(0+128)
  9059                           
  9060                           ;main.c: 639: unsigned char hexval;
  9061                           ;main.c: 640: hexval=(unsigned char)((unsigned char)(hexvalue>>4) & 0x0F);
  9062  0FBF  0864               	movf	valuetocharHighNibble@hexvalue^(0+128),w
  9063  0FC0  00E2               	movwf	??_valuetocharHighNibble^(0+128)
  9064  0FC1  3004               	movlw	4
  9065  0FC2                     u3215:	
  9066  0FC2  36E2               	lsrf	??_valuetocharHighNibble^(0+128),f
  9067  0FC3  0B89               	decfsz	9,f
  9068  0FC4  2FC2               	goto	u3215
  9069  0FC5  0862               	movf	??_valuetocharHighNibble^(0+128),w
  9070  0FC6  390F               	andlw	15
  9071  0FC7  00E3               	movwf	(??_valuetocharHighNibble+1)^(0+128)
  9072  0FC8  0863               	movf	(??_valuetocharHighNibble+1)^(0+128),w
  9073  0FC9  00E5               	movwf	valuetocharHighNibble@hexval^(0+128)
  9074                           
  9075                           ;main.c: 641: hexval= valtoasciichar(hexval);
  9076  0FCA  0865               	movf	valuetocharHighNibble@hexval^(0+128),w
  9077  0FCB  3186  2614         	fcall	_valtoasciichar
  9078  0FCD  0021               	movlb	1	; select bank1
  9079  0FCE  00E2               	movwf	??_valuetocharHighNibble^(0+128)
  9080  0FCF  0862               	movf	??_valuetocharHighNibble^(0+128),w
  9081  0FD0  00E5               	movwf	valuetocharHighNibble@hexval^(0+128)
  9082                           
  9083                           ;main.c: 642: return hexval;
  9084  0FD1  0865               	movf	valuetocharHighNibble@hexval^(0+128),w
  9085  0FD2  0008               	return
  9086  0FD3                     __end_of_valuetocharHighNibble:	
  9087                           
  9088                           	psect	text37
  9089  0614                     __ptext37:	
  9090 ;; *************** function _valtoasciichar *****************
  9091 ;; Defined at:
  9092 ;;		line 655 in file "main.c"
  9093 ;; Parameters:    Size  Location     Type
  9094 ;;  hexvalue1       1    wreg     unsigned char 
  9095 ;; Auto vars:     Size  Location     Type
  9096 ;;  hexvalue1       1    1[BANK1 ] unsigned char 
  9097 ;;  hexval          1    2[BANK1 ] unsigned char 
  9098 ;; Return value:  Size  Location     Type
  9099 ;;                  1    wreg      unsigned char 
  9100 ;; Registers used:
  9101 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9107 ;;      Params:         0       0       0       0       0       0       0       0
  9108 ;;      Locals:         0       0       2       0       0       0       0       0
  9109 ;;      Temps:          0       0       1       0       0       0       0       0
  9110 ;;      Totals:         0       0       3       0       0       0       0       0
  9111 ;;Total ram usage:        3 bytes
  9112 ;; Hardware stack levels used:    1
  9113 ;; Hardware stack levels required when called:    7
  9114 ;; This function calls:
  9115 ;;		Nothing
  9116 ;; This function is called by:
  9117 ;;		_valuetocharHighNibble
  9118 ;;		_valuetocharLowNibble
  9119 ;; This function uses a non-reentrant model
  9120 ;;
  9121                           
  9122                           
  9123                           ;psect for function _valtoasciichar
  9124  0614                     _valtoasciichar:	
  9125                           
  9126                           ;incstack = 0
  9127                           ; Regs used in _valtoasciichar: [wreg-fsr0h+status,2+status,0]
  9128                           ;valtoasciichar@hexvalue1 stored from wreg
  9129  0614  0021               	movlb	1	; select bank1
  9130  0615  00E0               	movwf	valtoasciichar@hexvalue1^(0+128)
  9131                           
  9132                           ;main.c: 657: unsigned char hexval='0';
  9133  0616  3030               	movlw	48
  9134  0617  00DF               	movwf	??_valtoasciichar^(0+128)
  9135  0618  085F               	movf	??_valtoasciichar^(0+128),w
  9136  0619  00E1               	movwf	valtoasciichar@hexval^(0+128)
  9137                           
  9138                           ;main.c: 658: switch((unsigned char)hexvalue1)
  9139  061A  2E3E               	goto	l4589
  9140  061B                     l4555:	
  9141                           ;main.c: 659: {
  9142                           ;main.c: 660: case 0x00: hexval= '0'; break;
  9143                           
  9144  061B  3030               	movlw	48
  9145  061C  2E3A               	goto	L15
  9146  061D                     l4557:	
  9147                           ;main.c: 661: case 0x01: hexval= '1'; break;
  9148                           
  9149  061D  3031               	movlw	49
  9150  061E  2E3A               	goto	L15
  9151  061F                     l4559:	
  9152                           ;main.c: 662: case 0x02: hexval= '2'; break;
  9153                           
  9154  061F  3032               	movlw	50
  9155  0620  2E3A               	goto	L15
  9156  0621                     l4561:	
  9157                           ;main.c: 663: case 0x03: hexval= '3'; break;
  9158                           
  9159  0621  3033               	movlw	51
  9160  0622  2E3A               	goto	L15
  9161  0623                     l4563:	
  9162                           ;main.c: 664: case 0x04: hexval= '4'; break;
  9163                           
  9164  0623  3034               	movlw	52
  9165  0624  2E3A               	goto	L15
  9166  0625                     l4565:	
  9167                           ;main.c: 665: case 0x05: hexval= '5'; break;
  9168                           
  9169  0625  3035               	movlw	53
  9170  0626  2E3A               	goto	L15
  9171  0627                     l4567:	
  9172                           ;main.c: 666: case 0x06: hexval= '6'; break;
  9173                           
  9174  0627  3036               	movlw	54
  9175  0628  2E3A               	goto	L15
  9176  0629                     l4569:	
  9177                           ;main.c: 667: case 0x07: hexval= '7'; break;
  9178                           
  9179  0629  3037               	movlw	55
  9180  062A  2E3A               	goto	L15
  9181  062B                     l4571:	
  9182                           ;main.c: 668: case 0x08: hexval= '8'; break;
  9183                           
  9184  062B  3038               	movlw	56
  9185  062C  2E3A               	goto	L15
  9186  062D                     l4573:	
  9187                           ;main.c: 669: case 0x09: hexval= '9'; break;
  9188                           
  9189  062D  3039               	movlw	57
  9190  062E  2E3A               	goto	L15
  9191  062F                     l4575:	
  9192                           ;main.c: 670: case 0x0A: hexval= 'A'; break;
  9193                           
  9194  062F  3041               	movlw	65
  9195  0630  2E3A               	goto	L15
  9196  0631                     l4577:	
  9197                           ;main.c: 671: case 0x0B: hexval= 'B'; break;
  9198                           
  9199  0631  3042               	movlw	66
  9200  0632  2E3A               	goto	L15
  9201  0633                     l4579:	
  9202                           ;main.c: 672: case 0x0C: hexval= 'C'; break;
  9203                           
  9204  0633  3043               	movlw	67
  9205  0634  2E3A               	goto	L15
  9206  0635                     l4581:	
  9207                           ;main.c: 673: case 0x0D: hexval= 'D'; break;
  9208                           
  9209  0635  3044               	movlw	68
  9210  0636  2E3A               	goto	L15
  9211  0637                     l4583:	
  9212                           ;main.c: 674: case 0x0E: hexval= 'E'; break;
  9213                           
  9214  0637  3045               	movlw	69
  9215  0638  2E3A               	goto	L15
  9216  0639                     l4585:	
  9217                           ;main.c: 675: case 0x0F: hexval= 'F'; break;
  9218                           
  9219  0639  3046               	movlw	70
  9220  063A                     L15:	
  9221  063A  00DF               	movwf	??_valtoasciichar^(0+128)
  9222  063B  085F               	movf	??_valtoasciichar^(0+128),w
  9223  063C  00E1               	movwf	valtoasciichar@hexval^(0+128)
  9224                           
  9225                           ;main.c: 677: }
  9226                           
  9227                           ;main.c: 676: default : break;
  9228  063D  2E48               	goto	l4591
  9229  063E                     l4589:	
  9230  063E  0860               	movf	valtoasciichar@hexvalue1^(0+128),w
  9231                           
  9232                           ; Switch size 1, requested type "space"
  9233                           ; Number of cases is 16, Range of values is 0 to 15
  9234                           ; switch strategies available:
  9235                           ; Name         Instructions Cycles
  9236                           ; direct_byte           38     6 (fixed)
  9237                           ; simple_byte           49    25 (average)
  9238                           ; jumptable            260     6 (fixed)
  9239                           ;	Chosen strategy is direct_byte
  9240  063F  0084               	movwf	4
  9241  0640  3010               	movlw	16
  9242  0641  0204               	subwf	4,w
  9243  0642  1803               	skipnc
  9244  0643  2E48               	goto	l4591
  9245  0644  3187               	movlp	high S5413
  9246  0645  3504               	lslf	4,w
  9247  0646  3E50               	addlw	low S5413
  9248  0647  0082               	movwf	2
  9249  0648                     l4591:	
  9250                           
  9251                           ;main.c: 678: return hexval;
  9252  0648  0861               	movf	valtoasciichar@hexval^(0+128),w
  9253  0649  0008               	return
  9254  064A                     __end_of_valtoasciichar:	
  9255                           
  9256                           	psect	swtext1
  9257  0750                     __pswtext1:	
  9258  0750                     S5413:	
  9259  0750  3186  2E1B         	ljmp	l4555
  9260  0752  3186  2E1D         	ljmp	l4557
  9261  0754  3186  2E1F         	ljmp	l4559
  9262  0756  3186  2E21         	ljmp	l4561
  9263  0758  3186  2E23         	ljmp	l4563
  9264  075A  3186  2E25         	ljmp	l4565
  9265  075C  3186  2E27         	ljmp	l4567
  9266  075E  3186  2E29         	ljmp	l4569
  9267  0760  3186  2E2B         	ljmp	l4571
  9268  0762  3186  2E2D         	ljmp	l4573
  9269  0764  3186  2E2F         	ljmp	l4575
  9270  0766  3186  2E31         	ljmp	l4577
  9271  0768  3186  2E33         	ljmp	l4579
  9272  076A  3186  2E35         	ljmp	l4581
  9273  076C  3186  2E37         	ljmp	l4583
  9274  076E  3186  2E39         	ljmp	l4585
  9275                           
  9276                           	psect	text38
  9277  0422                     __ptext38:	
  9278 ;; *************** function _LedONStartConfig *****************
  9279 ;; Defined at:
  9280 ;;		line 18 in file "LED_Ctrl.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;  LEDcolor        1    wreg     unsigned char 
  9283 ;;  LedONDuratio    1    8[BANK1 ] unsigned char 
  9284 ;;  LedONNumBlin    1    9[BANK1 ] unsigned char 
  9285 ;; Auto vars:     Size  Location     Type
  9286 ;;  LEDcolor        1   10[BANK1 ] unsigned char 
  9287 ;; Return value:  Size  Location     Type
  9288 ;;                  1    wreg      unsigned char 
  9289 ;; Registers used:
  9290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9291 ;; Tracked objects:
  9292 ;;		On entry : 0/0
  9293 ;;		On exit  : 0/0
  9294 ;;		Unchanged: 0/0
  9295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9296 ;;      Params:         0       0       2       0       0       0       0       0
  9297 ;;      Locals:         0       0       1       0       0       0       0       0
  9298 ;;      Temps:          0       0       0       2       0       0       0       0
  9299 ;;      Totals:         0       0       3       2       0       0       0       0
  9300 ;;Total ram usage:        5 bytes
  9301 ;; Hardware stack levels used:    1
  9302 ;; Hardware stack levels required when called:    8
  9303 ;; This function calls:
  9304 ;;		___lwdiv
  9305 ;;		___wmul
  9306 ;; This function is called by:
  9307 ;;		_main
  9308 ;;		_EPC_StateMachineControlLoop
  9309 ;; This function uses a non-reentrant model
  9310 ;;
  9311                           
  9312                           
  9313                           ;psect for function _LedONStartConfig
  9314  0422                     _LedONStartConfig:	
  9315                           
  9316                           ;incstack = 0
  9317                           ; Regs used in _LedONStartConfig: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9318                           ;LedONStartConfig@LEDcolor stored from wreg
  9319  0422  0021               	movlb	1	; select bank1
  9320  0423  00E9               	movwf	LedONStartConfig@LEDcolor^(0+128)
  9321                           
  9322                           ;LED_Ctrl.c: 20: if(Led_ON!=1 && (LedONDurationSec!=0)&& (LedONDurationSec <= 60))
  9323  0424  0020               	movlb	0	; select bank0
  9324  0425  0348               	decf	_Led_ON,w
  9325  0426  1903               	btfsc	3,2
  9326  0427  0008               	return
  9327  0428  0021               	movlb	1	; select bank1
  9328  0429  0867               	movf	LedONStartConfig@LedONDurationSec^(0+128),w
  9329  042A  1903               	btfsc	3,2
  9330  042B  0008               	return
  9331  042C  303D               	movlw	61
  9332  042D  0267               	subwf	LedONStartConfig@LedONDurationSec^(0+128),w
  9333  042E  1803               	skipnc
  9334  042F  0008               	return
  9335                           
  9336                           ;LED_Ctrl.c: 21: {
  9337                           ;LED_Ctrl.c: 22: Led_ON=1;
  9338  0430  0020               	movlb	0	; select bank0
  9339  0431  01C8               	clrf	_Led_ON
  9340  0432  0AC8               	incf	_Led_ON,f
  9341                           
  9342                           ;LED_Ctrl.c: 23: LED_Color=LEDcolor;
  9343  0433  0021               	movlb	1	; select bank1
  9344  0434  0869               	movf	LedONStartConfig@LEDcolor^(0+128),w
  9345  0435  0022               	movlb	2	; select bank2
  9346  0436  00A0               	movwf	??_LedONStartConfig^(0+256)
  9347  0437  0820               	movf	??_LedONStartConfig^(0+256),w
  9348  0438  0020               	movlb	0	; select bank0
  9349  0439  00DA               	movwf	_LED_Color
  9350                           
  9351                           ;LED_Ctrl.c: 25: switch(LED_Color)
  9352  043A  2C44               	goto	l4825
  9353  043B                     l1132:	
  9354                           ;LED_Ctrl.c: 26: {
  9355                           ;LED_Ctrl.c: 27: case 0 : do { LATCbits.LATC0 = 1; } while(0);
  9356                           
  9357  043B  0022               	movlb	2	; select bank2
  9358  043C  140E               	bsf	14,0	;volatile
  9359                           
  9360                           ;LED_Ctrl.c: 28: break;
  9361  043D  2C50               	goto	l4827
  9362  043E                     l1136:	
  9363                           ;LED_Ctrl.c: 29: case 1 : do { LATCbits.LATC1 = 1; } while(0);
  9364                           
  9365  043E  0022               	movlb	2	; select bank2
  9366  043F  148E               	bsf	14,1	;volatile
  9367                           
  9368                           ;LED_Ctrl.c: 30: break;
  9369  0440  2C50               	goto	l4827
  9370  0441                     l1139:	
  9371                           ;LED_Ctrl.c: 31: case 2 : do { LATCbits.LATC2 = 1; } while(0);
  9372                           
  9373  0441  0022               	movlb	2	; select bank2
  9374  0442  150E               	bsf	14,2	;volatile
  9375                           
  9376                           ;LED_Ctrl.c: 34: }
  9377                           
  9378                           ;LED_Ctrl.c: 33: default : break;
  9379                           
  9380                           ;LED_Ctrl.c: 32: break;
  9381  0443  2C50               	goto	l4827
  9382  0444                     l4825:	
  9383  0444  0020               	movlb	0	; select bank0
  9384  0445  085A               	movf	_LED_Color,w
  9385                           
  9386                           ; Switch size 1, requested type "space"
  9387                           ; Number of cases is 3, Range of values is 0 to 2
  9388                           ; switch strategies available:
  9389                           ; Name         Instructions Cycles
  9390                           ; simple_byte           10     6 (average)
  9391                           ; direct_byte           12     6 (fixed)
  9392                           ; jumptable            260     6 (fixed)
  9393                           ;	Chosen strategy is simple_byte
  9394  0446  3A00               	xorlw	0	; case 0
  9395  0447  1903               	skipnz
  9396  0448  2C3B               	goto	l1132
  9397  0449  3A01               	xorlw	1	; case 1
  9398  044A  1903               	skipnz
  9399  044B  2C3E               	goto	l1136
  9400  044C  3A03               	xorlw	3	; case 2
  9401  044D  1903               	skipnz
  9402  044E  2C41               	goto	l1139
  9403  044F  2C50               	goto	l4827
  9404  0450                     l4827:	
  9405                           
  9406                           ;LED_Ctrl.c: 36: LED_msec_Cnt=0;
  9407  0450  0021               	movlb	1	; select bank1
  9408  0451  01B6               	clrf	_LED_msec_Cnt^(0+128)
  9409  0452  01B7               	clrf	(_LED_msec_Cnt+1)^(0+128)
  9410                           
  9411                           ;LED_Ctrl.c: 37: LedON_Duration_msec=((unsigned int)LedONDurationSec)*1000;
  9412  0453  0867               	movf	LedONStartConfig@LedONDurationSec^(0+128),w
  9413  0454  0022               	movlb	2	; select bank2
  9414  0455  00A0               	movwf	??_LedONStartConfig^(0+256)
  9415  0456  01A1               	clrf	(??_LedONStartConfig^(0+256)+1)
  9416  0457  0820               	movf	??_LedONStartConfig^(0+256),w
  9417  0458  0021               	movlb	1	; select bank1
  9418  0459  00DF               	movwf	___wmul@multiplier^(0+128)
  9419  045A  0022               	movlb	2	; select bank2
  9420  045B  0821               	movf	(??_LedONStartConfig+1)^(0+256),w
  9421  045C  0021               	movlb	1	; select bank1
  9422  045D  00E0               	movwf	(___wmul@multiplier+1)^(0+128)
  9423  045E  30E8               	movlw	232
  9424  045F  00E1               	movwf	___wmul@multiplicand^(0+128)
  9425  0460  3003               	movlw	3
  9426  0461  00E2               	movwf	(___wmul@multiplicand^(0+128)+1)
  9427  0462  3187  2770  3184   	fcall	___wmul
  9428  0465  0021               	movlb	1	; select bank1
  9429  0466  0860               	movf	(?___wmul+1)^(0+128),w
  9430  0467  00B1               	movwf	(_LedON_Duration_msec+1)^(0+128)
  9431  0468  085F               	movf	?___wmul^(0+128),w
  9432  0469  00B0               	movwf	_LedON_Duration_msec^(0+128)
  9433                           
  9434                           ;LED_Ctrl.c: 38: if(LedONNumBlink > 1)
  9435  046A  3002               	movlw	2
  9436  046B  0268               	subwf	LedONStartConfig@LedONNumBlink^(0+128),w
  9437  046C  1C03               	skipc
  9438  046D  2C89               	goto	l4835
  9439                           
  9440                           ;LED_Ctrl.c: 39: Blick_tickPointMsec=(LedON_Duration_msec/(((LedONNumBlink-1)*2)+1));
  9441  046E  0868               	movf	LedONStartConfig@LedONNumBlink^(0+128),w
  9442  046F  0022               	movlb	2	; select bank2
  9443  0470  00A0               	movwf	??_LedONStartConfig^(0+256)
  9444  0471  01A1               	clrf	(??_LedONStartConfig^(0+256)+1)
  9445  0472  35A0               	lslf	??_LedONStartConfig^(0+256),f
  9446  0473  0DA1               	rlf	(??_LedONStartConfig^(0+256)+1),f
  9447  0474  0820               	movf	??_LedONStartConfig^(0+256),w
  9448  0475  3EFF               	addlw	255
  9449  0476  0021               	movlb	1	; select bank1
  9450  0477  00DF               	movwf	___lwdiv@divisor^(0+128)
  9451  0478  30FF               	movlw	255
  9452  0479  0022               	movlb	2	; select bank2
  9453  047A  3D21               	addwfc	(??_LedONStartConfig+1)^(0+256),w
  9454  047B  0021               	movlb	1	; select bank1
  9455  047C  00E0               	movwf	(___lwdiv@divisor+1)^(0+128)
  9456  047D  0831               	movf	(_LedON_Duration_msec+1)^(0+128),w
  9457  047E  00E2               	movwf	(___lwdiv@dividend+1)^(0+128)
  9458  047F  0830               	movf	_LedON_Duration_msec^(0+128),w
  9459  0480  00E1               	movwf	___lwdiv@dividend^(0+128)
  9460  0481  3186  264A  3184   	fcall	___lwdiv
  9461  0484  0021               	movlb	1	; select bank1
  9462  0485  0860               	movf	(?___lwdiv+1)^(0+128),w
  9463  0486  00B5               	movwf	(_Blick_tickPointMsec+1)^(0+128)
  9464  0487  085F               	movf	?___lwdiv^(0+128),w
  9465  0488  2C8C               	goto	L16
  9466  0489                     l4835:	
  9467                           
  9468                           ;LED_Ctrl.c: 40: else
  9469                           ;LED_Ctrl.c: 41: Blick_tickPointMsec=LedON_Duration_msec;
  9470  0489  0831               	movf	(_LedON_Duration_msec+1)^(0+128),w
  9471  048A  00B5               	movwf	(_Blick_tickPointMsec+1)^(0+128)
  9472  048B  0830               	movf	_LedON_Duration_msec^(0+128),w
  9473  048C                     L16:	
  9474  048C  00B4               	movwf	_Blick_tickPointMsec^(0+128)
  9475                           
  9476                           ;LED_Ctrl.c: 43: Blick_tickPoint=Blick_tickPointMsec;
  9477  048D  0835               	movf	(_Blick_tickPointMsec+1)^(0+128),w
  9478  048E  00B3               	movwf	(_Blick_tickPoint+1)^(0+128)
  9479  048F  0834               	movf	_Blick_tickPointMsec^(0+128),w
  9480  0490  00B2               	movwf	_Blick_tickPoint^(0+128)
  9481                           
  9482                           ;LED_Ctrl.c: 46: else
  9483                           ;LED_Ctrl.c: 47: {
  9484                           ;LED_Ctrl.c: 48: return 0;
  9485                           ;	Return value of _LedONStartConfig is never used
  9486                           
  9487                           ;LED_Ctrl.c: 45: }
  9488                           
  9489                           ;LED_Ctrl.c: 44: return 1;
  9490                           ;	Return value of _LedONStartConfig is never used
  9491  0491  0008               	return
  9492  0492                     __end_of_LedONStartConfig:	
  9493                           
  9494                           	psect	text39
  9495  0770                     __ptext39:	
  9496 ;; *************** function ___wmul *****************
  9497 ;; Defined at:
  9498 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;  multiplier      2    0[BANK1 ] unsigned int 
  9501 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  9502 ;; Auto vars:     Size  Location     Type
  9503 ;;  product         2    4[BANK1 ] unsigned int 
  9504 ;; Return value:  Size  Location     Type
  9505 ;;                  2    0[BANK1 ] unsigned int 
  9506 ;; Registers used:
  9507 ;;		wreg, status,2, status,0
  9508 ;; Tracked objects:
  9509 ;;		On entry : 0/0
  9510 ;;		On exit  : 0/0
  9511 ;;		Unchanged: 0/0
  9512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9513 ;;      Params:         0       0       4       0       0       0       0       0
  9514 ;;      Locals:         0       0       2       0       0       0       0       0
  9515 ;;      Temps:          0       0       0       0       0       0       0       0
  9516 ;;      Totals:         0       0       6       0       0       0       0       0
  9517 ;;Total ram usage:        6 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; Hardware stack levels required when called:    7
  9520 ;; This function calls:
  9521 ;;		Nothing
  9522 ;; This function is called by:
  9523 ;;		_LedONStartConfig
  9524 ;; This function uses a non-reentrant model
  9525 ;;
  9526                           
  9527                           
  9528                           ;psect for function ___wmul
  9529  0770                     ___wmul:	
  9530                           
  9531                           ;incstack = 0
  9532                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9533  0770  0021               	movlb	1	; select bank1
  9534  0771  01E3               	clrf	___wmul@product^(0+128)
  9535  0772  01E4               	clrf	(___wmul@product+1)^(0+128)
  9536  0773                     l4603:	
  9537  0773  1C5F               	btfss	___wmul@multiplier^(0+128),0
  9538  0774  2F79               	goto	l1285
  9539  0775  0861               	movf	___wmul@multiplicand^(0+128),w
  9540  0776  07E3               	addwf	___wmul@product^(0+128),f
  9541  0777  0862               	movf	(___wmul@multiplicand+1)^(0+128),w
  9542  0778  3DE4               	addwfc	(___wmul@product+1)^(0+128),f
  9543  0779                     l1285:	
  9544  0779  3001               	movlw	1
  9545  077A                     u3035:	
  9546  077A  35E1               	lslf	___wmul@multiplicand^(0+128),f
  9547  077B  0DE2               	rlf	(___wmul@multiplicand+1)^(0+128),f
  9548  077C  0B89               	decfsz	9,f
  9549  077D  2F7A               	goto	u3035
  9550  077E  3001               	movlw	1
  9551  077F                     u3045:	
  9552  077F  36E0               	lsrf	(___wmul@multiplier+1)^(0+128),f
  9553  0780  0CDF               	rrf	___wmul@multiplier^(0+128),f
  9554  0781  0B89               	decfsz	9,f
  9555  0782  2F7F               	goto	u3045
  9556  0783  085F               	movf	___wmul@multiplier^(0+128),w
  9557  0784  0460               	iorwf	(___wmul@multiplier+1)^(0+128),w
  9558  0785  1D03               	btfss	3,2
  9559  0786  2F73               	goto	l4603
  9560  0787  0864               	movf	(___wmul@product+1)^(0+128),w
  9561  0788  00E0               	movwf	(?___wmul+1)^(0+128)
  9562  0789  0863               	movf	___wmul@product^(0+128),w
  9563  078A  00DF               	movwf	?___wmul^(0+128)
  9564  078B  0008               	return
  9565  078C                     __end_of___wmul:	
  9566                           
  9567                           	psect	text40
  9568  064A                     __ptext40:	
  9569 ;; *************** function ___lwdiv *****************
  9570 ;; Defined at:
  9571 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;  divisor         2    0[BANK1 ] unsigned int 
  9574 ;;  dividend        2    2[BANK1 ] unsigned int 
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;  quotient        2    6[BANK1 ] unsigned int 
  9577 ;;  counter         1    5[BANK1 ] unsigned char 
  9578 ;; Return value:  Size  Location     Type
  9579 ;;                  2    0[BANK1 ] unsigned int 
  9580 ;; Registers used:
  9581 ;;		wreg, status,2, status,0
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9587 ;;      Params:         0       0       4       0       0       0       0       0
  9588 ;;      Locals:         0       0       3       0       0       0       0       0
  9589 ;;      Temps:          0       0       1       0       0       0       0       0
  9590 ;;      Totals:         0       0       8       0       0       0       0       0
  9591 ;;Total ram usage:        8 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:    7
  9594 ;; This function calls:
  9595 ;;		Nothing
  9596 ;; This function is called by:
  9597 ;;		_LedONStartConfig
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           
  9602                           ;psect for function ___lwdiv
  9603  064A                     ___lwdiv:	
  9604                           
  9605                           ;incstack = 0
  9606                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9607  064A  0021               	movlb	1	; select bank1
  9608  064B  01E5               	clrf	___lwdiv@quotient^(0+128)
  9609  064C  01E6               	clrf	(___lwdiv@quotient+1)^(0+128)
  9610  064D  085F               	movf	___lwdiv@divisor^(0+128),w
  9611  064E  0460               	iorwf	(___lwdiv@divisor+1)^(0+128),w
  9612  064F  1903               	btfsc	3,2
  9613  0650  2E7A               	goto	l4637
  9614  0651  01E4               	clrf	___lwdiv@counter^(0+128)
  9615  0652  0AE4               	incf	___lwdiv@counter^(0+128),f
  9616  0653                     l4625:	
  9617  0653  1BE0               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  9618  0654  2E5F               	goto	l4627
  9619  0655  3001               	movlw	1
  9620  0656                     u3075:	
  9621  0656  35DF               	lslf	___lwdiv@divisor^(0+128),f
  9622  0657  0DE0               	rlf	(___lwdiv@divisor+1)^(0+128),f
  9623  0658  0B89               	decfsz	9,f
  9624  0659  2E56               	goto	u3075
  9625  065A  3001               	movlw	1
  9626  065B  00E3               	movwf	??___lwdiv^(0+128)
  9627  065C  0863               	movf	??___lwdiv^(0+128),w
  9628  065D  07E4               	addwf	___lwdiv@counter^(0+128),f
  9629  065E  2E53               	goto	l4625
  9630  065F                     l4627:	
  9631  065F  3001               	movlw	1
  9632  0660                     u3095:	
  9633  0660  35E5               	lslf	___lwdiv@quotient^(0+128),f
  9634  0661  0DE6               	rlf	(___lwdiv@quotient+1)^(0+128),f
  9635  0662  0B89               	decfsz	9,f
  9636  0663  2E60               	goto	u3095
  9637  0664  0860               	movf	(___lwdiv@divisor+1)^(0+128),w
  9638  0665  0262               	subwf	(___lwdiv@dividend+1)^(0+128),w
  9639  0666  1D03               	skipz
  9640  0667  2E6A               	goto	u3105
  9641  0668  085F               	movf	___lwdiv@divisor^(0+128),w
  9642  0669  0261               	subwf	___lwdiv@dividend^(0+128),w
  9643  066A                     u3105:	
  9644  066A  1C03               	skipc
  9645  066B  2E71               	goto	l4633
  9646  066C  085F               	movf	___lwdiv@divisor^(0+128),w
  9647  066D  02E1               	subwf	___lwdiv@dividend^(0+128),f
  9648  066E  0860               	movf	(___lwdiv@divisor+1)^(0+128),w
  9649  066F  3BE2               	subwfb	(___lwdiv@dividend+1)^(0+128),f
  9650  0670  1465               	bsf	___lwdiv@quotient^(0+128),0
  9651  0671                     l4633:	
  9652  0671  3001               	movlw	1
  9653  0672                     u3115:	
  9654  0672  36E0               	lsrf	(___lwdiv@divisor+1)^(0+128),f
  9655  0673  0CDF               	rrf	___lwdiv@divisor^(0+128),f
  9656  0674  0B89               	decfsz	9,f
  9657  0675  2E72               	goto	u3115
  9658  0676  3001               	movlw	1
  9659  0677  02E4               	subwf	___lwdiv@counter^(0+128),f
  9660  0678  1D03               	btfss	3,2
  9661  0679  2E5F               	goto	l4627
  9662  067A                     l4637:	
  9663  067A  0866               	movf	(___lwdiv@quotient+1)^(0+128),w
  9664  067B  00E0               	movwf	(?___lwdiv+1)^(0+128)
  9665  067C  0865               	movf	___lwdiv@quotient^(0+128),w
  9666  067D  00DF               	movwf	?___lwdiv^(0+128)
  9667  067E  0008               	return
  9668  067F                     __end_of___lwdiv:	
  9669                           
  9670                           	psect	text41
  9671  0E46                     __ptext41:	
  9672 ;; *************** function _EUSART_Write *****************
  9673 ;; Defined at:
  9674 ;;		line 96 in file "mcc_generated_files/eusart.c"
  9675 ;; Parameters:    Size  Location     Type
  9676 ;;  txData          1    wreg     unsigned char 
  9677 ;; Auto vars:     Size  Location     Type
  9678 ;;  txData          1    0[BANK1 ] unsigned char 
  9679 ;; Return value:  Size  Location     Type
  9680 ;;                  1    wreg      void 
  9681 ;; Registers used:
  9682 ;;		wreg
  9683 ;; Tracked objects:
  9684 ;;		On entry : 0/0
  9685 ;;		On exit  : 0/0
  9686 ;;		Unchanged: 0/0
  9687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9688 ;;      Params:         0       0       0       0       0       0       0       0
  9689 ;;      Locals:         0       0       1       0       0       0       0       0
  9690 ;;      Temps:          0       0       0       0       0       0       0       0
  9691 ;;      Totals:         0       0       1       0       0       0       0       0
  9692 ;;Total ram usage:        1 bytes
  9693 ;; Hardware stack levels used:    1
  9694 ;; Hardware stack levels required when called:    7
  9695 ;; This function calls:
  9696 ;;		Nothing
  9697 ;; This function is called by:
  9698 ;;		_EPC_StateMachineControlLoop
  9699 ;;		_ModbusMasterTransaction
  9700 ;; This function uses a non-reentrant model
  9701 ;;
  9702                           
  9703                           
  9704                           ;psect for function _EUSART_Write
  9705  0E46                     _EUSART_Write:	
  9706                           
  9707                           ;incstack = 0
  9708                           ; Regs used in _EUSART_Write: [wreg]
  9709                           ;EUSART_Write@txData stored from wreg
  9710  0E46  0021               	movlb	1	; select bank1
  9711  0E47  00DF               	movwf	EUSART_Write@txData^(0+128)
  9712  0E48                     l159:	
  9713                           ;eusart.c: 99: {
  9714                           
  9715                           ;eusart.c: 98: while(0 == PIR1bits.TXIF)
  9716                           
  9717  0E48  0020               	movlb	0	; select bank0
  9718  0E49  1E11               	btfss	17,4	;volatile
  9719  0E4A  2E48               	goto	l159
  9720                           
  9721                           ;eusart.c: 100: }
  9722                           ;eusart.c: 102: TX1REG = txData;
  9723  0E4B  0021               	movlb	1	; select bank1
  9724  0E4C  085F               	movf	EUSART_Write@txData^(0+128),w
  9725  0E4D  0023               	movlb	3	; select bank3
  9726  0E4E  009A               	movwf	26	;volatile
  9727  0E4F  0008               	return
  9728  0E50                     __end_of_EUSART_Write:	
  9729                           
  9730                           	psect	intentry
  9731  0004                     __pintentry:	
  9732 ;; *************** function _INTERRUPT_InterruptManager *****************
  9733 ;; Defined at:
  9734 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9735 ;; Parameters:    Size  Location     Type
  9736 ;;		None
  9737 ;; Auto vars:     Size  Location     Type
  9738 ;;		None
  9739 ;; Return value:  Size  Location     Type
  9740 ;;                  1    wreg      void 
  9741 ;; Registers used:
  9742 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9743 ;; Tracked objects:
  9744 ;;		On entry : 0/0
  9745 ;;		On exit  : 0/0
  9746 ;;		Unchanged: 0/0
  9747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9748 ;;      Params:         0       0       0       0       0       0       0       0
  9749 ;;      Locals:         0       0       0       0       0       0       0       0
  9750 ;;      Temps:          0       1       0       0       0       0       0       0
  9751 ;;      Totals:         0       1       0       0       0       0       0       0
  9752 ;;Total ram usage:        1 bytes
  9753 ;; Hardware stack levels used:    1
  9754 ;; Hardware stack levels required when called:    6
  9755 ;; This function calls:
  9756 ;;		_CCP1_CaptureISR
  9757 ;;		_INT_ISR
  9758 ;;		_PIN_MANAGER_IOC
  9759 ;;		_TMR0_ISR
  9760 ;;		_TMR3_ISR
  9761 ;;		_TMR5_ISR
  9762 ;; This function is called by:
  9763 ;;		Interrupt level 1
  9764 ;; This function uses a non-reentrant model
  9765 ;;
  9766                           
  9767  0004                     _INTERRUPT_InterruptManager:	
  9768                           
  9769                           ;incstack = 0
  9770  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9771                           
  9772                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9773  0005  3180               	pagesel	$
  9774  0006  0020               	movlb	0	; select bank0
  9775  0007  087F               	movf	127,w
  9776  0008  00BD               	movwf	??_INTERRUPT_InterruptManager
  9777                           
  9778                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
  9779  0009  0021               	movlb	1	; select bank1
  9780  000A  1E90               	btfss	16,5	;volatile
  9781  000B  2813               	goto	i1l430
  9782  000C  0020               	movlb	0	; select bank0
  9783  000D  1E90               	btfss	16,5	;volatile
  9784  000E  2813               	goto	i1l430
  9785                           
  9786                           ;interrupt_manager.c: 55: {
  9787                           ;interrupt_manager.c: 56: TMR0_ISR();
  9788  000F  318D  25D2  3180   	fcall	_TMR0_ISR
  9789                           
  9790                           ;interrupt_manager.c: 57: }
  9791  0012  2849               	goto	i1l442
  9792  0013                     i1l430:	
  9793                           
  9794                           ;interrupt_manager.c: 58: else if(PIE0bits.INTE == 1 && PIR0bits.INTF == 1)
  9795  0013  0021               	movlb	1	; select bank1
  9796  0014  1C10               	btfss	16,0	;volatile
  9797  0015  281D               	goto	i1l432
  9798  0016  0020               	movlb	0	; select bank0
  9799  0017  1C10               	btfss	16,0	;volatile
  9800  0018  281D               	goto	i1l432
  9801                           
  9802                           ;interrupt_manager.c: 59: {
  9803                           ;interrupt_manager.c: 60: INT_ISR();
  9804  0019  318D  25CD  3180   	fcall	_INT_ISR
  9805                           
  9806                           ;interrupt_manager.c: 61: }
  9807  001C  2849               	goto	i1l442
  9808  001D                     i1l432:	
  9809                           
  9810                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE4bits.TMR5IE == 1 && PIR4bi
      +                          ts.TMR5IF == 1)
  9811  001D  1F0B               	btfss	11,6	;volatile
  9812  001E  2829               	goto	i1l434
  9813  001F  0021               	movlb	1	; select bank1
  9814  0020  1E14               	btfss	20,4	;volatile
  9815  0021  2829               	goto	i1l434
  9816  0022  0020               	movlb	0	; select bank0
  9817  0023  1E14               	btfss	20,4	;volatile
  9818  0024  2829               	goto	i1l434
  9819                           
  9820                           ;interrupt_manager.c: 63: {
  9821                           ;interrupt_manager.c: 64: TMR5_ISR();
  9822  0025  318F  2754  3180   	fcall	_TMR5_ISR
  9823                           
  9824                           ;interrupt_manager.c: 65: }
  9825  0028  2849               	goto	i1l442
  9826  0029                     i1l434:	
  9827                           
  9828                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE3bits.TMR3IE == 1 && PIR3bi
      +                          ts.TMR3IF == 1)
  9829  0029  1F0B               	btfss	11,6	;volatile
  9830  002A  2835               	goto	i1l436
  9831  002B  0021               	movlb	1	; select bank1
  9832  002C  1E13               	btfss	19,4	;volatile
  9833  002D  2835               	goto	i1l436
  9834  002E  0020               	movlb	0	; select bank0
  9835  002F  1E13               	btfss	19,4	;volatile
  9836  0030  2835               	goto	i1l436
  9837                           
  9838                           ;interrupt_manager.c: 67: {
  9839                           ;interrupt_manager.c: 68: TMR3_ISR();
  9840  0031  318F  2740  3180   	fcall	_TMR3_ISR
  9841                           
  9842                           ;interrupt_manager.c: 69: }
  9843  0034  2849               	goto	i1l442
  9844  0035                     i1l436:	
  9845                           
  9846                           ;interrupt_manager.c: 70: else if(INTCONbits.PEIE == 1 && PIE4bits.CCP1IE == 1 && PIR4bi
      +                          ts.CCP1IF == 1)
  9847  0035  1F0B               	btfss	11,6	;volatile
  9848  0036  2841               	goto	i1l438
  9849  0037  0021               	movlb	1	; select bank1
  9850  0038  1C14               	btfss	20,0	;volatile
  9851  0039  2841               	goto	i1l438
  9852  003A  0020               	movlb	0	; select bank0
  9853  003B  1C14               	btfss	20,0	;volatile
  9854  003C  2841               	goto	i1l438
  9855                           
  9856                           ;interrupt_manager.c: 71: {
  9857                           ;interrupt_manager.c: 72: CCP1_CaptureISR();
  9858  003D  318F  277C  3180   	fcall	_CCP1_CaptureISR
  9859                           
  9860                           ;interrupt_manager.c: 73: }
  9861  0040  2849               	goto	i1l442
  9862  0041                     i1l438:	
  9863                           
  9864                           ;interrupt_manager.c: 74: else if(PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1)
  9865  0041  0021               	movlb	1	; select bank1
  9866  0042  1E10               	btfss	16,4	;volatile
  9867  0043  2849               	goto	i1l442
  9868  0044  0020               	movlb	0	; select bank0
  9869  0045  1E10               	btfss	16,4	;volatile
  9870  0046  2849               	goto	i1l442
  9871                           
  9872                           ;interrupt_manager.c: 75: {
  9873                           ;interrupt_manager.c: 76: PIN_MANAGER_IOC();
  9874  0047  318E  2650         	fcall	_PIN_MANAGER_IOC
  9875  0049                     i1l442:	
  9876                           ;interrupt_manager.c: 78: else
  9877                           ;interrupt_manager.c: 79: {
  9878                           
  9879                           ;interrupt_manager.c: 77: }
  9880                           
  9881  0049  0020               	movlb	0	; select bank0
  9882  004A  083D               	movf	??_INTERRUPT_InterruptManager,w
  9883  004B  00FF               	movwf	127
  9884  004C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9885  004D  0009               	retfie
  9886  004E                     __end_of_INTERRUPT_InterruptManager:	
  9887                           
  9888                           	psect	text43
  9889  0F54                     __ptext43:	
  9890 ;; *************** function _TMR5_ISR *****************
  9891 ;; Defined at:
  9892 ;;		line 156 in file "mcc_generated_files/tmr5.c"
  9893 ;; Parameters:    Size  Location     Type
  9894 ;;		None
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;		None
  9897 ;; Return value:  Size  Location     Type
  9898 ;;                  1    wreg      void 
  9899 ;; Registers used:
  9900 ;;		wreg, status,2, status,0, pclath, cstack
  9901 ;; Tracked objects:
  9902 ;;		On entry : 0/0
  9903 ;;		On exit  : 0/0
  9904 ;;		Unchanged: 0/0
  9905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9906 ;;      Params:         0       0       0       0       0       0       0       0
  9907 ;;      Locals:         0       0       0       0       0       0       0       0
  9908 ;;      Temps:          0       0       0       0       0       0       0       0
  9909 ;;      Totals:         0       0       0       0       0       0       0       0
  9910 ;;Total ram usage:        0 bytes
  9911 ;; Hardware stack levels used:    1
  9912 ;; Hardware stack levels required when called:    2
  9913 ;; This function calls:
  9914 ;;		Absolute function
  9915 ;;		_TMR5_DefaultInterruptHandler
  9916 ;; This function is called by:
  9917 ;;		_INTERRUPT_InterruptManager
  9918 ;; This function uses a non-reentrant model
  9919 ;;
  9920                           
  9921                           
  9922                           ;psect for function _TMR5_ISR
  9923  0F54                     _TMR5_ISR:	
  9924                           
  9925                           ;tmr5.c: 160: PIR4bits.TMR5IF = 0;
  9926                           
  9927                           ;incstack = 0
  9928                           ; Regs used in _TMR5_ISR: [wreg+status,2+status,0+pclath+cstack]
  9929  0F54  0020               	movlb	0	; select bank0
  9930  0F55  1214               	bcf	20,4	;volatile
  9931                           
  9932                           ;tmr5.c: 162: TMR5H = (timer5ReloadVal >> 8);
  9933  0F56  085E               	movf	_timer5ReloadVal+1,w	;volatile
  9934  0F57  0028               	movlb	8	; select bank8
  9935  0F58  0099               	movwf	25	;volatile
  9936                           
  9937                           ;tmr5.c: 163: TMR5L = timer5ReloadVal;
  9938  0F59  0020               	movlb	0	; select bank0
  9939  0F5A  085D               	movf	_timer5ReloadVal,w	;volatile
  9940  0F5B  0028               	movlb	8	; select bank8
  9941  0F5C  0098               	movwf	24	;volatile
  9942                           
  9943                           ;tmr5.c: 165: if(TMR5_InterruptHandler)
  9944  0F5D  0021               	movlb	1	; select bank1
  9945  0F5E  085D               	movf	_TMR5_InterruptHandler^(0+128),w
  9946  0F5F  045E               	iorwf	(_TMR5_InterruptHandler+1)^(0+128),w
  9947  0F60  1903               	btfsc	3,2
  9948  0F61  0008               	return
  9949                           
  9950                           ;tmr5.c: 166: {
  9951                           ;tmr5.c: 167: TMR5_InterruptHandler();
  9952  0F62  085E               	movf	(_TMR5_InterruptHandler+1)^(0+128),w
  9953  0F63  008A               	movwf	10
  9954  0F64  085D               	movf	_TMR5_InterruptHandler^(0+128),w
  9955  0F65  000A               	callw
  9956  0F66  318F               	pagesel	$
  9957  0F67  0008               	return
  9958  0F68                     __end_of_TMR5_ISR:	
  9959                           
  9960                           	psect	text44
  9961  0DB4                     __ptext44:	
  9962 ;; *************** function _TMR5_DefaultInterruptHandler *****************
  9963 ;; Defined at:
  9964 ;;		line 176 in file "mcc_generated_files/tmr5.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;		None
  9967 ;; Auto vars:     Size  Location     Type
  9968 ;;		None
  9969 ;; Return value:  Size  Location     Type
  9970 ;;                  1    wreg      void 
  9971 ;; Registers used:
  9972 ;;		status,2, status,0, pclath, cstack
  9973 ;; Tracked objects:
  9974 ;;		On entry : 0/0
  9975 ;;		On exit  : 0/0
  9976 ;;		Unchanged: 0/0
  9977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9978 ;;      Params:         0       0       0       0       0       0       0       0
  9979 ;;      Locals:         0       0       0       0       0       0       0       0
  9980 ;;      Temps:          0       0       0       0       0       0       0       0
  9981 ;;      Totals:         0       0       0       0       0       0       0       0
  9982 ;;Total ram usage:        0 bytes
  9983 ;; Hardware stack levels used:    1
  9984 ;; Hardware stack levels required when called:    1
  9985 ;; This function calls:
  9986 ;;		_Timer5_Overflow
  9987 ;; This function is called by:
  9988 ;;		_TMR5_Initialize
  9989 ;;		_TMR5_ISR
  9990 ;; This function uses a non-reentrant model
  9991 ;;
  9992                           
  9993                           
  9994                           ;psect for function _TMR5_DefaultInterruptHandler
  9995  0DB4                     _TMR5_DefaultInterruptHandler:	
  9996                           
  9997                           ;tmr5.c: 178: Timer5_Overflow();
  9998                           
  9999                           ;incstack = 0
 10000                           ; Regs used in _TMR5_DefaultInterruptHandler: [status,2+status,0+pclath+cstack]
 10001  0DB4  3180  2003         	fcall	_Timer5_Overflow
 10002  0DB6  0008               	return
 10003  0DB7                     __end_of_TMR5_DefaultInterruptHandler:	
 10004                           
 10005                           	psect	text45
 10006  0003                     __ptext45:	
 10007 ;; *************** function _Timer5_Overflow *****************
 10008 ;; Defined at:
 10009 ;;		line 604 in file "main.c"
 10010 ;; Parameters:    Size  Location     Type
 10011 ;;		None
 10012 ;; Auto vars:     Size  Location     Type
 10013 ;;		None
 10014 ;; Return value:  Size  Location     Type
 10015 ;;                  1    wreg      void 
 10016 ;; Registers used:
 10017 ;;		None
 10018 ;; Tracked objects:
 10019 ;;		On entry : 0/0
 10020 ;;		On exit  : 0/0
 10021 ;;		Unchanged: 0/0
 10022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10023 ;;      Params:         0       0       0       0       0       0       0       0
 10024 ;;      Locals:         0       0       0       0       0       0       0       0
 10025 ;;      Temps:          0       0       0       0       0       0       0       0
 10026 ;;      Totals:         0       0       0       0       0       0       0       0
 10027 ;;Total ram usage:        0 bytes
 10028 ;; Hardware stack levels used:    1
 10029 ;; This function calls:
 10030 ;;		Nothing
 10031 ;; This function is called by:
 10032 ;;		_TMR5_DefaultInterruptHandler
 10033 ;; This function uses a non-reentrant model
 10034 ;;
 10035                           
 10036                           
 10037                           ;psect for function _Timer5_Overflow
 10038  0003                     _Timer5_Overflow:	
 10039                           
 10040                           ;incstack = 0
 10041                           ; Regs used in _Timer5_Overflow: []
 10042  0003  0008               	return
 10043  0004                     __end_of_Timer5_Overflow:	
 10044                           
 10045                           	psect	text46
 10046  0F40                     __ptext46:	
 10047 ;; *************** function _TMR3_ISR *****************
 10048 ;; Defined at:
 10049 ;;		line 156 in file "mcc_generated_files/tmr3.c"
 10050 ;; Parameters:    Size  Location     Type
 10051 ;;		None
 10052 ;; Auto vars:     Size  Location     Type
 10053 ;;		None
 10054 ;; Return value:  Size  Location     Type
 10055 ;;                  1    wreg      void 
 10056 ;; Registers used:
 10057 ;;		wreg, status,2, status,0, pclath, cstack
 10058 ;; Tracked objects:
 10059 ;;		On entry : 0/0
 10060 ;;		On exit  : 0/0
 10061 ;;		Unchanged: 0/0
 10062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10063 ;;      Params:         0       0       0       0       0       0       0       0
 10064 ;;      Locals:         0       0       0       0       0       0       0       0
 10065 ;;      Temps:          0       0       0       0       0       0       0       0
 10066 ;;      Totals:         0       0       0       0       0       0       0       0
 10067 ;;Total ram usage:        0 bytes
 10068 ;; Hardware stack levels used:    1
 10069 ;; Hardware stack levels required when called:    2
 10070 ;; This function calls:
 10071 ;;		Absolute function
 10072 ;;		_TMR3_DefaultInterruptHandler
 10073 ;; This function is called by:
 10074 ;;		_INTERRUPT_InterruptManager
 10075 ;; This function uses a non-reentrant model
 10076 ;;
 10077                           
 10078                           
 10079                           ;psect for function _TMR3_ISR
 10080  0F40                     _TMR3_ISR:	
 10081                           
 10082                           ;tmr3.c: 160: PIR3bits.TMR3IF = 0;
 10083                           
 10084                           ;incstack = 0
 10085                           ; Regs used in _TMR3_ISR: [wreg+status,2+status,0+pclath+cstack]
 10086  0F40  0020               	movlb	0	; select bank0
 10087  0F41  1213               	bcf	19,4	;volatile
 10088                           
 10089                           ;tmr3.c: 162: TMR3H = (timer3ReloadVal >> 8);
 10090  0F42  085C               	movf	_timer3ReloadVal+1,w	;volatile
 10091  0F43  0028               	movlb	8	; select bank8
 10092  0F44  0092               	movwf	18	;volatile
 10093                           
 10094                           ;tmr3.c: 163: TMR3L = timer3ReloadVal;
 10095  0F45  0020               	movlb	0	; select bank0
 10096  0F46  085B               	movf	_timer3ReloadVal,w	;volatile
 10097  0F47  0028               	movlb	8	; select bank8
 10098  0F48  0091               	movwf	17	;volatile
 10099                           
 10100                           ;tmr3.c: 165: if(TMR3_InterruptHandler)
 10101  0F49  0021               	movlb	1	; select bank1
 10102  0F4A  085B               	movf	_TMR3_InterruptHandler^(0+128),w
 10103  0F4B  045C               	iorwf	(_TMR3_InterruptHandler+1)^(0+128),w
 10104  0F4C  1903               	btfsc	3,2
 10105  0F4D  0008               	return
 10106                           
 10107                           ;tmr3.c: 166: {
 10108                           ;tmr3.c: 167: TMR3_InterruptHandler();
 10109  0F4E  085C               	movf	(_TMR3_InterruptHandler+1)^(0+128),w
 10110  0F4F  008A               	movwf	10
 10111  0F50  085B               	movf	_TMR3_InterruptHandler^(0+128),w
 10112  0F51  000A               	callw
 10113  0F52  318F               	pagesel	$
 10114  0F53  0008               	return
 10115  0F54                     __end_of_TMR3_ISR:	
 10116                           
 10117                           	psect	text47
 10118  0DB1                     __ptext47:	
 10119 ;; *************** function _TMR3_DefaultInterruptHandler *****************
 10120 ;; Defined at:
 10121 ;;		line 176 in file "mcc_generated_files/tmr3.c"
 10122 ;; Parameters:    Size  Location     Type
 10123 ;;		None
 10124 ;; Auto vars:     Size  Location     Type
 10125 ;;		None
 10126 ;; Return value:  Size  Location     Type
 10127 ;;                  1    wreg      void 
 10128 ;; Registers used:
 10129 ;;		wreg, status,2, status,0, pclath, cstack
 10130 ;; Tracked objects:
 10131 ;;		On entry : 0/0
 10132 ;;		On exit  : 0/0
 10133 ;;		Unchanged: 0/0
 10134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10135 ;;      Params:         0       0       0       0       0       0       0       0
 10136 ;;      Locals:         0       0       0       0       0       0       0       0
 10137 ;;      Temps:          0       0       0       0       0       0       0       0
 10138 ;;      Totals:         0       0       0       0       0       0       0       0
 10139 ;;Total ram usage:        0 bytes
 10140 ;; Hardware stack levels used:    1
 10141 ;; Hardware stack levels required when called:    1
 10142 ;; This function calls:
 10143 ;;		_Timer3_Overflow
 10144 ;; This function is called by:
 10145 ;;		_TMR3_Initialize
 10146 ;;		_TMR3_ISR
 10147 ;; This function uses a non-reentrant model
 10148 ;;
 10149                           
 10150                           
 10151                           ;psect for function _TMR3_DefaultInterruptHandler
 10152  0DB1                     _TMR3_DefaultInterruptHandler:	
 10153                           
 10154                           ;tmr3.c: 178: Timer3_Overflow();
 10155                           
 10156                           ;incstack = 0
 10157                           ; Regs used in _TMR3_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 10158  0DB1  3186  26E3         	fcall	_Timer3_Overflow
 10159  0DB3  0008               	return
 10160  0DB4                     __end_of_TMR3_DefaultInterruptHandler:	
 10161                           
 10162                           	psect	text48
 10163  06E3                     __ptext48:	
 10164 ;; *************** function _Timer3_Overflow *****************
 10165 ;; Defined at:
 10166 ;;		line 597 in file "main.c"
 10167 ;; Parameters:    Size  Location     Type
 10168 ;;		None
 10169 ;; Auto vars:     Size  Location     Type
 10170 ;;		None
 10171 ;; Return value:  Size  Location     Type
 10172 ;;                  1    wreg      void 
 10173 ;; Registers used:
 10174 ;;		wreg, status,2, status,0
 10175 ;; Tracked objects:
 10176 ;;		On entry : 0/0
 10177 ;;		On exit  : 0/0
 10178 ;;		Unchanged: 0/0
 10179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10180 ;;      Params:         0       0       0       0       0       0       0       0
 10181 ;;      Locals:         0       0       0       0       0       0       0       0
 10182 ;;      Temps:          4       0       0       0       0       0       0       0
 10183 ;;      Totals:         4       0       0       0       0       0       0       0
 10184 ;;Total ram usage:        4 bytes
 10185 ;; Hardware stack levels used:    1
 10186 ;; This function calls:
 10187 ;;		Nothing
 10188 ;; This function is called by:
 10189 ;;		_TMR3_DefaultInterruptHandler
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193                           
 10194                           ;psect for function _Timer3_Overflow
 10195  06E3                     _Timer3_Overflow:	
 10196                           
 10197                           ;main.c: 599: EncEdgeTimeInterval= EncEdgeTimeInterval + 0x0000FFFF;
 10198                           
 10199                           ;incstack = 0
 10200                           ; Regs used in _Timer3_Overflow: [wreg+status,2+status,0]
 10201  06E3  30FF               	movlw	255
 10202  06E4  00F0               	movwf	??_Timer3_Overflow
 10203  06E5  30FF               	movlw	255
 10204  06E6  00F1               	movwf	??_Timer3_Overflow+1
 10205  06E7  3000               	movlw	0
 10206  06E8  00F2               	movwf	??_Timer3_Overflow+2
 10207  06E9  3000               	movlw	0
 10208  06EA  00F3               	movwf	??_Timer3_Overflow+3
 10209  06EB  0020               	movlb	0	; select bank0
 10210  06EC  083E               	movf	_EncEdgeTimeInterval,w
 10211  06ED  07F0               	addwf	??_Timer3_Overflow,f
 10212  06EE  083F               	movf	_EncEdgeTimeInterval+1,w
 10213  06EF  3DF1               	addwfc	??_Timer3_Overflow+1,f
 10214  06F0  0840               	movf	_EncEdgeTimeInterval+2,w
 10215  06F1  3DF2               	addwfc	??_Timer3_Overflow+2,f
 10216  06F2  0841               	movf	_EncEdgeTimeInterval+3,w
 10217  06F3  3DF3               	addwfc	??_Timer3_Overflow+3,f
 10218  06F4  0873               	movf	??_Timer3_Overflow+3,w
 10219  06F5  00C1               	movwf	_EncEdgeTimeInterval+3
 10220  06F6  0872               	movf	??_Timer3_Overflow+2,w
 10221  06F7  00C0               	movwf	_EncEdgeTimeInterval+2
 10222  06F8  0871               	movf	??_Timer3_Overflow+1,w
 10223  06F9  00BF               	movwf	_EncEdgeTimeInterval+1
 10224  06FA  0870               	movf	??_Timer3_Overflow,w
 10225  06FB  00BE               	movwf	_EncEdgeTimeInterval
 10226                           
 10227                           ;main.c: 600: if(EncEdgeTimeInterval >0xEFFFFFFF)
 10228  06FC  30F0               	movlw	240
 10229  06FD  0241               	subwf	_EncEdgeTimeInterval+3,w
 10230  06FE  1C03               	btfss	3,0
 10231  06FF  0008               	return
 10232                           
 10233                           ;main.c: 601: EncEdgeTimeInterval=0xEFFFFFFF;
 10234  0700  30EF               	movlw	239
 10235  0701  00C1               	movwf	_EncEdgeTimeInterval+3
 10236  0702  30FF               	movlw	255
 10237  0703  00C0               	movwf	_EncEdgeTimeInterval+2
 10238  0704  30FF               	movlw	255
 10239  0705  00BF               	movwf	_EncEdgeTimeInterval+1
 10240  0706  30FF               	movlw	255
 10241  0707  00BE               	movwf	_EncEdgeTimeInterval
 10242  0708  0008               	return
 10243  0709                     __end_of_Timer3_Overflow:	
 10244                           
 10245                           	psect	text49
 10246  0DD2                     __ptext49:	
 10247 ;; *************** function _TMR0_ISR *****************
 10248 ;; Defined at:
 10249 ;;		line 123 in file "mcc_generated_files/tmr0.c"
 10250 ;; Parameters:    Size  Location     Type
 10251 ;;		None
 10252 ;; Auto vars:     Size  Location     Type
 10253 ;;		None
 10254 ;; Return value:  Size  Location     Type
 10255 ;;                  1    wreg      void 
 10256 ;; Registers used:
 10257 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10258 ;; Tracked objects:
 10259 ;;		On entry : 0/0
 10260 ;;		On exit  : 0/0
 10261 ;;		Unchanged: 0/0
 10262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10263 ;;      Params:         0       0       0       0       0       0       0       0
 10264 ;;      Locals:         0       0       0       0       0       0       0       0
 10265 ;;      Temps:          0       0       0       0       0       0       0       0
 10266 ;;      Totals:         0       0       0       0       0       0       0       0
 10267 ;;Total ram usage:        0 bytes
 10268 ;; Hardware stack levels used:    1
 10269 ;; Hardware stack levels required when called:    3
 10270 ;; This function calls:
 10271 ;;		_TMR0_CallBack
 10272 ;; This function is called by:
 10273 ;;		_INTERRUPT_InterruptManager
 10274 ;; This function uses a non-reentrant model
 10275 ;;
 10276                           
 10277                           
 10278                           ;psect for function _TMR0_ISR
 10279  0DD2                     _TMR0_ISR:	
 10280                           
 10281                           ;tmr0.c: 126: PIR0bits.TMR0IF = 0;
 10282                           
 10283                           ;incstack = 0
 10284                           ; Regs used in _TMR0_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10285  0DD2  0020               	movlb	0	; select bank0
 10286  0DD3  1290               	bcf	16,5	;volatile
 10287                           
 10288                           ;tmr0.c: 129: TMR0_CallBack();
 10289  0DD4  318E  26B7         	fcall	_TMR0_CallBack
 10290  0DD6  0008               	return
 10291  0DD7                     __end_of_TMR0_ISR:	
 10292                           
 10293                           	psect	text50
 10294  0EB7                     __ptext50:	
 10295 ;; *************** function _TMR0_CallBack *****************
 10296 ;; Defined at:
 10297 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 10298 ;; Parameters:    Size  Location     Type
 10299 ;;		None
 10300 ;; Auto vars:     Size  Location     Type
 10301 ;;		None
 10302 ;; Return value:  Size  Location     Type
 10303 ;;                  1    wreg      void 
 10304 ;; Registers used:
 10305 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10306 ;; Tracked objects:
 10307 ;;		On entry : 0/0
 10308 ;;		On exit  : 0/0
 10309 ;;		Unchanged: 0/0
 10310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10311 ;;      Params:         0       0       0       0       0       0       0       0
 10312 ;;      Locals:         0       0       0       0       0       0       0       0
 10313 ;;      Temps:          0       0       0       0       0       0       0       0
 10314 ;;      Totals:         0       0       0       0       0       0       0       0
 10315 ;;Total ram usage:        0 bytes
 10316 ;; Hardware stack levels used:    1
 10317 ;; Hardware stack levels required when called:    2
 10318 ;; This function calls:
 10319 ;;		Absolute function
 10320 ;;		_TMR0_DefaultInterruptHandler
 10321 ;;		_Timer0_tick10msecFunc
 10322 ;; This function is called by:
 10323 ;;		_TMR0_ISR
 10324 ;; This function uses a non-reentrant model
 10325 ;;
 10326                           
 10327                           
 10328                           ;psect for function _TMR0_CallBack
 10329  0EB7                     _TMR0_CallBack:	
 10330                           
 10331                           ;tmr0.c: 137: Timer0_tick10msecFunc();
 10332                           
 10333                           ;incstack = 0
 10334                           ; Regs used in _TMR0_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10335  0EB7  3187  2709  318E   	fcall	_Timer0_tick10msecFunc
 10336                           
 10337                           ;tmr0.c: 139: if(TMR0_InterruptHandler)
 10338  0EBA  0021               	movlb	1	; select bank1
 10339  0EBB  0859               	movf	_TMR0_InterruptHandler^(0+128),w
 10340  0EBC  045A               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 10341  0EBD  1903               	btfsc	3,2
 10342  0EBE  0008               	return
 10343                           
 10344                           ;tmr0.c: 140: {
 10345                           ;tmr0.c: 141: TMR0_InterruptHandler();
 10346  0EBF  085A               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 10347  0EC0  008A               	movwf	10
 10348  0EC1  0859               	movf	_TMR0_InterruptHandler^(0+128),w
 10349  0EC2  000A               	callw
 10350  0EC3  318E               	pagesel	$
 10351  0EC4  0008               	return
 10352  0EC5                     __end_of_TMR0_CallBack:	
 10353                           
 10354                           	psect	text51
 10355  0709                     __ptext51:	
 10356 ;; *************** function _Timer0_tick10msecFunc *****************
 10357 ;; Defined at:
 10358 ;;		line 609 in file "main.c"
 10359 ;; Parameters:    Size  Location     Type
 10360 ;;		None
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;		None
 10363 ;; Return value:  Size  Location     Type
 10364 ;;                  1    wreg      void 
 10365 ;; Registers used:
 10366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10367 ;; Tracked objects:
 10368 ;;		On entry : 0/0
 10369 ;;		On exit  : 0/0
 10370 ;;		Unchanged: 0/0
 10371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10372 ;;      Params:         0       0       0       0       0       0       0       0
 10373 ;;      Locals:         0       0       0       0       0       0       0       0
 10374 ;;      Temps:          4       0       0       0       0       0       0       0
 10375 ;;      Totals:         4       0       0       0       0       0       0       0
 10376 ;;Total ram usage:        4 bytes
 10377 ;; Hardware stack levels used:    1
 10378 ;; Hardware stack levels required when called:    1
 10379 ;; This function calls:
 10380 ;;		_LedON_Control_10msec
 10381 ;; This function is called by:
 10382 ;;		_TMR0_CallBack
 10383 ;; This function uses a non-reentrant model
 10384 ;;
 10385                           
 10386                           
 10387                           ;psect for function _Timer0_tick10msecFunc
 10388  0709                     _Timer0_tick10msecFunc:	
 10389                           
 10390                           ;main.c: 611: LedON_Control_10msec();
 10391                           
 10392                           ;incstack = 0
 10393                           ; Regs used in _Timer0_tick10msecFunc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10394  0709  3184  2492  3187   	fcall	_LedON_Control_10msec
 10395                           
 10396                           ;main.c: 613: TimertickMsec= TimertickMsec+5;
 10397  070C  3005               	movlw	5
 10398  070D  00F0               	movwf	??_Timer0_tick10msecFunc
 10399  070E  3000               	movlw	0
 10400  070F  00F1               	movwf	??_Timer0_tick10msecFunc+1
 10401  0710  3000               	movlw	0
 10402  0711  00F2               	movwf	??_Timer0_tick10msecFunc+2
 10403  0712  3000               	movlw	0
 10404  0713  00F3               	movwf	??_Timer0_tick10msecFunc+3
 10405  0714  0021               	movlb	1	; select bank1
 10406  0715  0820               	movf	_TimertickMsec^(0+128),w
 10407  0716  07F0               	addwf	??_Timer0_tick10msecFunc,f
 10408  0717  0821               	movf	(_TimertickMsec+1)^(0+128),w
 10409  0718  3DF1               	addwfc	??_Timer0_tick10msecFunc+1,f
 10410  0719  0822               	movf	(_TimertickMsec+2)^(0+128),w
 10411  071A  3DF2               	addwfc	??_Timer0_tick10msecFunc+2,f
 10412  071B  0823               	movf	(_TimertickMsec+3)^(0+128),w
 10413  071C  3DF3               	addwfc	??_Timer0_tick10msecFunc+3,f
 10414  071D  0873               	movf	??_Timer0_tick10msecFunc+3,w
 10415  071E  00A3               	movwf	(_TimertickMsec+3)^(0+128)
 10416  071F  0872               	movf	??_Timer0_tick10msecFunc+2,w
 10417  0720  00A2               	movwf	(_TimertickMsec+2)^(0+128)
 10418  0721  0871               	movf	??_Timer0_tick10msecFunc+1,w
 10419  0722  00A1               	movwf	(_TimertickMsec+1)^(0+128)
 10420  0723  0870               	movf	??_Timer0_tick10msecFunc,w
 10421  0724  00A0               	movwf	_TimertickMsec^(0+128)
 10422                           
 10423                           ;main.c: 615: if(delayFlag==1)
 10424  0725  0020               	movlb	0	; select bank0
 10425  0726  034D               	decf	_delayFlag,w
 10426  0727  1D03               	btfss	3,2
 10427  0728  0008               	return
 10428                           
 10429                           ;main.c: 616: delayCount+=5;
 10430  0729  3005               	movlw	5
 10431  072A  0021               	movlb	1	; select bank1
 10432  072B  07C4               	addwf	_delayCount^(0+128),f
 10433  072C  3000               	movlw	0
 10434  072D  3DC5               	addwfc	(_delayCount+1)^(0+128),f
 10435  072E  0008               	return
 10436  072F                     __end_of_Timer0_tick10msecFunc:	
 10437                           
 10438                           	psect	text52
 10439  0492                     __ptext52:	
 10440 ;; *************** function _LedON_Control_10msec *****************
 10441 ;; Defined at:
 10442 ;;		line 54 in file "LED_Ctrl.c"
 10443 ;; Parameters:    Size  Location     Type
 10444 ;;		None
 10445 ;; Auto vars:     Size  Location     Type
 10446 ;;		None
 10447 ;; Return value:  Size  Location     Type
 10448 ;;                  1    wreg      void 
 10449 ;; Registers used:
 10450 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10451 ;; Tracked objects:
 10452 ;;		On entry : 0/0
 10453 ;;		On exit  : 0/0
 10454 ;;		Unchanged: 0/0
 10455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10456 ;;      Params:         0       0       0       0       0       0       0       0
 10457 ;;      Locals:         0       0       0       0       0       0       0       0
 10458 ;;      Temps:          0       0       0       0       0       0       0       0
 10459 ;;      Totals:         0       0       0       0       0       0       0       0
 10460 ;;Total ram usage:        0 bytes
 10461 ;; Hardware stack levels used:    1
 10462 ;; This function calls:
 10463 ;;		Nothing
 10464 ;; This function is called by:
 10465 ;;		_Timer0_tick10msecFunc
 10466 ;; This function uses a non-reentrant model
 10467 ;;
 10468                           
 10469                           
 10470                           ;psect for function _LedON_Control_10msec
 10471  0492                     _LedON_Control_10msec:	
 10472                           
 10473                           ;LED_Ctrl.c: 56: if(1==Led_ON)
 10474                           
 10475                           ;incstack = 0
 10476                           ; Regs used in _LedON_Control_10msec: [wreg-fsr0h+status,2+status,0]
 10477  0492  0020               	movlb	0	; select bank0
 10478  0493  0348               	decf	_Led_ON,w
 10479  0494  1D03               	btfss	3,2
 10480  0495  0008               	return
 10481                           
 10482                           ;LED_Ctrl.c: 57: {
 10483                           ;LED_Ctrl.c: 59: if(LED_msec_Cnt >= Blick_tickPoint)
 10484  0496  0021               	movlb	1	; select bank1
 10485  0497  0833               	movf	(_Blick_tickPoint+1)^(0+128),w
 10486  0498  0237               	subwf	(_LED_msec_Cnt+1)^(0+128),w
 10487  0499  1D03               	skipz
 10488  049A  2C9D               	goto	u182_25
 10489  049B  0832               	movf	_Blick_tickPoint^(0+128),w
 10490  049C  0236               	subwf	_LED_msec_Cnt^(0+128),w
 10491  049D                     u182_25:	
 10492  049D  1803               	btfsc	3,0
 10493  049E  2CC4               	goto	i1l3389
 10494  049F  2CD7               	goto	i1l3393
 10495  04A0                     i1l3381:	
 10496                           ;LED_Ctrl.c: 62: {
 10497                           ;LED_Ctrl.c: 63: case 0 : do { LATCbits.LATC0 = ~LATCbits.LATC0; } while(0);
 10498                           
 10499                           ;LED_Ctrl.c: 60: {
 10500                           ;LED_Ctrl.c: 61: switch(LED_Color)
 10501                           
 10502  04A0  1003               	clrc
 10503  04A1  0022               	movlb	2	; select bank2
 10504  04A2  1C0E               	btfss	14,0	;volatile
 10505  04A3  1403               	setc
 10506  04A4  1C03               	btfss	3,0
 10507  04A5  2CA9               	goto	u183_20
 10508  04A6  0022               	movlb	2	; select bank2
 10509  04A7  140E               	bsf	14,0	;volatile
 10510  04A8  2CD0               	goto	i1l3391
 10511  04A9                     u183_20:	
 10512  04A9  0022               	movlb	2	; select bank2
 10513  04AA  100E               	bcf	14,0	;volatile
 10514                           
 10515                           ;LED_Ctrl.c: 64: break;
 10516  04AB  2CD0               	goto	i1l3391
 10517  04AC                     i1l3383:	
 10518                           ;LED_Ctrl.c: 65: case 1 : do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
 10519                           
 10520  04AC  1003               	clrc
 10521  04AD  0022               	movlb	2	; select bank2
 10522  04AE  1C8E               	btfss	14,1	;volatile
 10523  04AF  1403               	setc
 10524  04B0  1C03               	btfss	3,0
 10525  04B1  2CB5               	goto	u185_20
 10526  04B2  0022               	movlb	2	; select bank2
 10527  04B3  148E               	bsf	14,1	;volatile
 10528  04B4  2CD0               	goto	i1l3391
 10529  04B5                     u185_20:	
 10530  04B5  0022               	movlb	2	; select bank2
 10531  04B6  108E               	bcf	14,1	;volatile
 10532                           
 10533                           ;LED_Ctrl.c: 66: break;
 10534  04B7  2CD0               	goto	i1l3391
 10535  04B8                     i1l3385:	
 10536                           ;LED_Ctrl.c: 67: case 2 : do { LATCbits.LATC2 = ~LATCbits.LATC2; } while(0);
 10537                           
 10538  04B8  1003               	clrc
 10539  04B9  0022               	movlb	2	; select bank2
 10540  04BA  1D0E               	btfss	14,2	;volatile
 10541  04BB  1403               	setc
 10542  04BC  1C03               	btfss	3,0
 10543  04BD  2CC1               	goto	u187_20
 10544  04BE  0022               	movlb	2	; select bank2
 10545  04BF  150E               	bsf	14,2	;volatile
 10546  04C0  2CD0               	goto	i1l3391
 10547  04C1                     u187_20:	
 10548  04C1  0022               	movlb	2	; select bank2
 10549  04C2  110E               	bcf	14,2	;volatile
 10550                           
 10551                           ;LED_Ctrl.c: 70: }
 10552                           
 10553                           ;LED_Ctrl.c: 69: default : break;
 10554                           
 10555                           ;LED_Ctrl.c: 68: break;
 10556  04C3  2CD0               	goto	i1l3391
 10557  04C4                     i1l3389:	
 10558  04C4  0020               	movlb	0	; select bank0
 10559  04C5  085A               	movf	_LED_Color,w
 10560                           
 10561                           ; Switch size 1, requested type "space"
 10562                           ; Number of cases is 3, Range of values is 0 to 2
 10563                           ; switch strategies available:
 10564                           ; Name         Instructions Cycles
 10565                           ; simple_byte           10     6 (average)
 10566                           ; direct_byte           12     6 (fixed)
 10567                           ; jumptable            260     6 (fixed)
 10568                           ;	Chosen strategy is simple_byte
 10569  04C6  3A00               	xorlw	0	; case 0
 10570  04C7  1903               	skipnz
 10571  04C8  2CA0               	goto	i1l3381
 10572  04C9  3A01               	xorlw	1	; case 1
 10573  04CA  1903               	skipnz
 10574  04CB  2CAC               	goto	i1l3383
 10575  04CC  3A03               	xorlw	3	; case 2
 10576  04CD  1903               	skipnz
 10577  04CE  2CB8               	goto	i1l3385
 10578  04CF  2CD0               	goto	i1l3391
 10579  04D0                     i1l3391:	
 10580                           
 10581                           ;LED_Ctrl.c: 73: Blick_tickPoint=Blick_tickPoint+Blick_tickPointMsec;
 10582  04D0  0021               	movlb	1	; select bank1
 10583  04D1  0834               	movf	_Blick_tickPointMsec^(0+128),w
 10584  04D2  0732               	addwf	_Blick_tickPoint^(0+128),w
 10585  04D3  00B2               	movwf	_Blick_tickPoint^(0+128)
 10586  04D4  0835               	movf	(_Blick_tickPointMsec+1)^(0+128),w
 10587  04D5  3D33               	addwfc	(_Blick_tickPoint+1)^(0+128),w
 10588  04D6  00B3               	movwf	(_Blick_tickPoint+1)^(0+128)
 10589  04D7                     i1l3393:	
 10590                           
 10591                           ;LED_Ctrl.c: 75: }
 10592                           ;LED_Ctrl.c: 77: if(LED_msec_Cnt > LedON_Duration_msec)
 10593  04D7  0837               	movf	(_LED_msec_Cnt+1)^(0+128),w
 10594  04D8  0231               	subwf	(_LedON_Duration_msec+1)^(0+128),w
 10595  04D9  1D03               	skipz
 10596  04DA  2CDD               	goto	u189_25
 10597  04DB  0836               	movf	_LED_msec_Cnt^(0+128),w
 10598  04DC  0230               	subwf	_LedON_Duration_msec^(0+128),w
 10599  04DD                     u189_25:	
 10600  04DD  1C03               	btfss	3,0
 10601  04DE  2CE9               	goto	i1l3399
 10602  04DF  2CFA               	goto	i1l3403
 10603  04E0                     i1l1165:	
 10604                           ;LED_Ctrl.c: 80: {
 10605                           ;LED_Ctrl.c: 81: case 0 : do { LATCbits.LATC0 = 0; } while(0);
 10606                           
 10607                           ;LED_Ctrl.c: 78: {
 10608                           ;LED_Ctrl.c: 79: switch(LED_Color)
 10609                           
 10610  04E0  0022               	movlb	2	; select bank2
 10611  04E1  100E               	bcf	14,0	;volatile
 10612                           
 10613                           ;LED_Ctrl.c: 82: break;
 10614  04E2  2CF5               	goto	i1l3401
 10615  04E3                     i1l1169:	
 10616                           ;LED_Ctrl.c: 83: case 1 : do { LATCbits.LATC1 = 0; } while(0);
 10617                           
 10618  04E3  0022               	movlb	2	; select bank2
 10619  04E4  108E               	bcf	14,1	;volatile
 10620                           
 10621                           ;LED_Ctrl.c: 84: break;
 10622  04E5  2CF5               	goto	i1l3401
 10623  04E6                     i1l1172:	
 10624                           ;LED_Ctrl.c: 85: case 2 : do { LATCbits.LATC2 = 0; } while(0);
 10625                           
 10626  04E6  0022               	movlb	2	; select bank2
 10627  04E7  110E               	bcf	14,2	;volatile
 10628                           
 10629                           ;LED_Ctrl.c: 88: }
 10630                           
 10631                           ;LED_Ctrl.c: 87: default : break;
 10632                           
 10633                           ;LED_Ctrl.c: 86: break;
 10634  04E8  2CF5               	goto	i1l3401
 10635  04E9                     i1l3399:	
 10636  04E9  0020               	movlb	0	; select bank0
 10637  04EA  085A               	movf	_LED_Color,w
 10638                           
 10639                           ; Switch size 1, requested type "space"
 10640                           ; Number of cases is 3, Range of values is 0 to 2
 10641                           ; switch strategies available:
 10642                           ; Name         Instructions Cycles
 10643                           ; simple_byte           10     6 (average)
 10644                           ; direct_byte           12     6 (fixed)
 10645                           ; jumptable            260     6 (fixed)
 10646                           ;	Chosen strategy is simple_byte
 10647  04EB  3A00               	xorlw	0	; case 0
 10648  04EC  1903               	skipnz
 10649  04ED  2CE0               	goto	i1l1165
 10650  04EE  3A01               	xorlw	1	; case 1
 10651  04EF  1903               	skipnz
 10652  04F0  2CE3               	goto	i1l1169
 10653  04F1  3A03               	xorlw	3	; case 2
 10654  04F2  1903               	skipnz
 10655  04F3  2CE6               	goto	i1l1172
 10656  04F4  2CF5               	goto	i1l3401
 10657  04F5                     i1l3401:	
 10658                           
 10659                           ;LED_Ctrl.c: 90: Led_ON=0;
 10660  04F5  0020               	movlb	0	; select bank0
 10661  04F6  01C8               	clrf	_Led_ON
 10662                           
 10663                           ;LED_Ctrl.c: 91: LED_msec_Cnt=0;
 10664  04F7  0021               	movlb	1	; select bank1
 10665  04F8  01B6               	clrf	_LED_msec_Cnt^(0+128)
 10666  04F9  01B7               	clrf	(_LED_msec_Cnt+1)^(0+128)
 10667  04FA                     i1l3403:	
 10668                           
 10669                           ;LED_Ctrl.c: 92: }
 10670                           ;LED_Ctrl.c: 94: LED_msec_Cnt+=5;
 10671  04FA  3005               	movlw	5
 10672  04FB  07B6               	addwf	_LED_msec_Cnt^(0+128),f
 10673  04FC  3000               	movlw	0
 10674  04FD  3DB7               	addwfc	(_LED_msec_Cnt+1)^(0+128),f
 10675  04FE  0008               	return
 10676  04FF                     __end_of_LedON_Control_10msec:	
 10677                           
 10678                           	psect	text53
 10679  0002                     __ptext53:	
 10680 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 10681 ;; Defined at:
 10682 ;;		line 149 in file "mcc_generated_files/tmr0.c"
 10683 ;; Parameters:    Size  Location     Type
 10684 ;;		None
 10685 ;; Auto vars:     Size  Location     Type
 10686 ;;		None
 10687 ;; Return value:  Size  Location     Type
 10688 ;;                  1    wreg      void 
 10689 ;; Registers used:
 10690 ;;		None
 10691 ;; Tracked objects:
 10692 ;;		On entry : 0/0
 10693 ;;		On exit  : 0/0
 10694 ;;		Unchanged: 0/0
 10695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10696 ;;      Params:         0       0       0       0       0       0       0       0
 10697 ;;      Locals:         0       0       0       0       0       0       0       0
 10698 ;;      Temps:          0       0       0       0       0       0       0       0
 10699 ;;      Totals:         0       0       0       0       0       0       0       0
 10700 ;;Total ram usage:        0 bytes
 10701 ;; Hardware stack levels used:    1
 10702 ;; This function calls:
 10703 ;;		Nothing
 10704 ;; This function is called by:
 10705 ;;		_TMR0_Initialize
 10706 ;;		_TMR0_CallBack
 10707 ;; This function uses a non-reentrant model
 10708 ;;
 10709                           
 10710                           
 10711                           ;psect for function _TMR0_DefaultInterruptHandler
 10712  0002                     _TMR0_DefaultInterruptHandler:	
 10713                           
 10714                           ;incstack = 0
 10715                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 10716  0002  0008               	return
 10717  0003                     __end_of_TMR0_DefaultInterruptHandler:	
 10718                           
 10719                           	psect	text54
 10720  0E50                     __ptext54:	
 10721 ;; *************** function _PIN_MANAGER_IOC *****************
 10722 ;; Defined at:
 10723 ;;		line 132 in file "mcc_generated_files/pin_manager.c"
 10724 ;; Parameters:    Size  Location     Type
 10725 ;;		None
 10726 ;; Auto vars:     Size  Location     Type
 10727 ;;		None
 10728 ;; Return value:  Size  Location     Type
 10729 ;;                  1    wreg      void 
 10730 ;; Registers used:
 10731 ;;		wreg, status,2, status,0, pclath, cstack
 10732 ;; Tracked objects:
 10733 ;;		On entry : 0/0
 10734 ;;		On exit  : 0/0
 10735 ;;		Unchanged: 0/0
 10736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10737 ;;      Params:         0       0       0       0       0       0       0       0
 10738 ;;      Locals:         0       0       0       0       0       0       0       0
 10739 ;;      Temps:          0       0       0       0       0       0       0       0
 10740 ;;      Totals:         0       0       0       0       0       0       0       0
 10741 ;;Total ram usage:        0 bytes
 10742 ;; Hardware stack levels used:    1
 10743 ;; Hardware stack levels required when called:    2
 10744 ;; This function calls:
 10745 ;;		_IOCCF4_ISR
 10746 ;;		_IOCCF5_ISR
 10747 ;; This function is called by:
 10748 ;;		_INTERRUPT_InterruptManager
 10749 ;; This function uses a non-reentrant model
 10750 ;;
 10751                           
 10752                           
 10753                           ;psect for function _PIN_MANAGER_IOC
 10754  0E50                     _PIN_MANAGER_IOC:	
 10755                           
 10756                           ;pin_manager.c: 135: if(IOCCFbits.IOCCF4 == 1)
 10757                           
 10758                           ;incstack = 0
 10759                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 10760  0E50  0027               	movlb	7	; select bank7
 10761  0E51  1E19               	btfss	25,4	;volatile
 10762  0E52  2E56               	goto	i1l4181
 10763                           
 10764                           ;pin_manager.c: 136: {
 10765                           ;pin_manager.c: 137: IOCCF4_ISR();
 10766  0E53  318E  2674  318E   	fcall	_IOCCF4_ISR
 10767  0E56                     i1l4181:	
 10768                           
 10769                           ;pin_manager.c: 138: }
 10770                           ;pin_manager.c: 141: if(IOCCFbits.IOCCF5 == 1)
 10771  0E56  0027               	movlb	7	; select bank7
 10772  0E57  1E99               	btfss	25,5	;volatile
 10773  0E58  0008               	return
 10774                           
 10775                           ;pin_manager.c: 142: {
 10776                           ;pin_manager.c: 143: IOCCF5_ISR();
 10777  0E59  318E  2681         	fcall	_IOCCF5_ISR
 10778  0E5B  0008               	return
 10779  0E5C                     __end_of_PIN_MANAGER_IOC:	
 10780                           
 10781                           	psect	text55
 10782  0E81                     __ptext55:	
 10783 ;; *************** function _IOCCF5_ISR *****************
 10784 ;; Defined at:
 10785 ;;		line 182 in file "mcc_generated_files/pin_manager.c"
 10786 ;; Parameters:    Size  Location     Type
 10787 ;;		None
 10788 ;; Auto vars:     Size  Location     Type
 10789 ;;		None
 10790 ;; Return value:  Size  Location     Type
 10791 ;;                  1    wreg      void 
 10792 ;; Registers used:
 10793 ;;		wreg, status,2, status,0, pclath, cstack
 10794 ;; Tracked objects:
 10795 ;;		On entry : 0/0
 10796 ;;		On exit  : 0/0
 10797 ;;		Unchanged: 0/0
 10798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10799 ;;      Params:         0       0       0       0       0       0       0       0
 10800 ;;      Locals:         0       0       0       0       0       0       0       0
 10801 ;;      Temps:          0       0       0       0       0       0       0       0
 10802 ;;      Totals:         0       0       0       0       0       0       0       0
 10803 ;;Total ram usage:        0 bytes
 10804 ;; Hardware stack levels used:    1
 10805 ;; Hardware stack levels required when called:    1
 10806 ;; This function calls:
 10807 ;;		Absolute function
 10808 ;;		_IOCCF5_DefaultInterruptHandler
 10809 ;; This function is called by:
 10810 ;;		_PIN_MANAGER_IOC
 10811 ;; This function uses a non-reentrant model
 10812 ;;
 10813                           
 10814                           
 10815                           ;psect for function _IOCCF5_ISR
 10816  0E81                     _IOCCF5_ISR:	
 10817                           
 10818                           ;pin_manager.c: 187: if(IOCCF5_InterruptHandler)
 10819                           
 10820                           ;incstack = 0
 10821                           ; Regs used in _IOCCF5_ISR: [wreg+status,2+status,0+pclath+cstack]
 10822  0E81  0021               	movlb	1	; select bank1
 10823  0E82  0855               	movf	_IOCCF5_InterruptHandler^(0+128),w
 10824  0E83  0456               	iorwf	(_IOCCF5_InterruptHandler+1)^(0+128),w
 10825  0E84  1903               	btfsc	3,2
 10826  0E85  2E8B               	goto	i1l3743
 10827                           
 10828                           ;pin_manager.c: 188: {
 10829                           ;pin_manager.c: 189: IOCCF5_InterruptHandler();
 10830  0E86  0856               	movf	(_IOCCF5_InterruptHandler+1)^(0+128),w
 10831  0E87  008A               	movwf	10
 10832  0E88  0855               	movf	_IOCCF5_InterruptHandler^(0+128),w
 10833  0E89  000A               	callw
 10834  0E8A  318E               	pagesel	$
 10835  0E8B                     i1l3743:	
 10836                           
 10837                           ;pin_manager.c: 190: }
 10838                           ;pin_manager.c: 191: IOCCFbits.IOCCF5 = 0;
 10839  0E8B  0027               	movlb	7	; select bank7
 10840  0E8C  1299               	bcf	25,5	;volatile
 10841  0E8D  0008               	return
 10842  0E8E                     __end_of_IOCCF5_ISR:	
 10843                           
 10844                           	psect	text56
 10845  0DA7                     __ptext56:	
 10846 ;; *************** function _IOCCF5_DefaultInterruptHandler *****************
 10847 ;; Defined at:
 10848 ;;		line 204 in file "mcc_generated_files/pin_manager.c"
 10849 ;; Parameters:    Size  Location     Type
 10850 ;;		None
 10851 ;; Auto vars:     Size  Location     Type
 10852 ;;		None
 10853 ;; Return value:  Size  Location     Type
 10854 ;;                  1    wreg      void 
 10855 ;; Registers used:
 10856 ;;		None
 10857 ;; Tracked objects:
 10858 ;;		On entry : 0/0
 10859 ;;		On exit  : 0/0
 10860 ;;		Unchanged: 0/0
 10861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10862 ;;      Params:         0       0       0       0       0       0       0       0
 10863 ;;      Locals:         0       0       0       0       0       0       0       0
 10864 ;;      Temps:          0       0       0       0       0       0       0       0
 10865 ;;      Totals:         0       0       0       0       0       0       0       0
 10866 ;;Total ram usage:        0 bytes
 10867 ;; Hardware stack levels used:    1
 10868 ;; This function calls:
 10869 ;;		Nothing
 10870 ;; This function is called by:
 10871 ;;		_PIN_MANAGER_Initialize
 10872 ;;		_IOCCF5_ISR
 10873 ;; This function uses a non-reentrant model
 10874 ;;
 10875                           
 10876                           
 10877                           ;psect for function _IOCCF5_DefaultInterruptHandler
 10878  0DA7                     _IOCCF5_DefaultInterruptHandler:	
 10879                           
 10880                           ;incstack = 0
 10881                           ; Regs used in _IOCCF5_DefaultInterruptHandler: []
 10882  0DA7  0008               	return
 10883  0DA8                     __end_of_IOCCF5_DefaultInterruptHandler:	
 10884                           
 10885                           	psect	text57
 10886  0E74                     __ptext57:	
 10887 ;; *************** function _IOCCF4_ISR *****************
 10888 ;; Defined at:
 10889 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
 10890 ;; Parameters:    Size  Location     Type
 10891 ;;		None
 10892 ;; Auto vars:     Size  Location     Type
 10893 ;;		None
 10894 ;; Return value:  Size  Location     Type
 10895 ;;                  1    wreg      void 
 10896 ;; Registers used:
 10897 ;;		wreg, status,2, status,0, pclath, cstack
 10898 ;; Tracked objects:
 10899 ;;		On entry : 0/0
 10900 ;;		On exit  : 0/0
 10901 ;;		Unchanged: 0/0
 10902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10903 ;;      Params:         0       0       0       0       0       0       0       0
 10904 ;;      Locals:         0       0       0       0       0       0       0       0
 10905 ;;      Temps:          0       0       0       0       0       0       0       0
 10906 ;;      Totals:         0       0       0       0       0       0       0       0
 10907 ;;Total ram usage:        0 bytes
 10908 ;; Hardware stack levels used:    1
 10909 ;; Hardware stack levels required when called:    1
 10910 ;; This function calls:
 10911 ;;		Absolute function
 10912 ;;		_IOCCF4_DefaultInterruptHandler
 10913 ;; This function is called by:
 10914 ;;		_PIN_MANAGER_IOC
 10915 ;; This function uses a non-reentrant model
 10916 ;;
 10917                           
 10918                           
 10919                           ;psect for function _IOCCF4_ISR
 10920  0E74                     _IOCCF4_ISR:	
 10921                           
 10922                           ;pin_manager.c: 157: if(IOCCF4_InterruptHandler)
 10923                           
 10924                           ;incstack = 0
 10925                           ; Regs used in _IOCCF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 10926  0E74  0021               	movlb	1	; select bank1
 10927  0E75  0857               	movf	_IOCCF4_InterruptHandler^(0+128),w
 10928  0E76  0458               	iorwf	(_IOCCF4_InterruptHandler+1)^(0+128),w
 10929  0E77  1903               	btfsc	3,2
 10930  0E78  2E7E               	goto	i1l3737
 10931                           
 10932                           ;pin_manager.c: 158: {
 10933                           ;pin_manager.c: 159: IOCCF4_InterruptHandler();
 10934  0E79  0858               	movf	(_IOCCF4_InterruptHandler+1)^(0+128),w
 10935  0E7A  008A               	movwf	10
 10936  0E7B  0857               	movf	_IOCCF4_InterruptHandler^(0+128),w
 10937  0E7C  000A               	callw
 10938  0E7D  318E               	pagesel	$
 10939  0E7E                     i1l3737:	
 10940                           
 10941                           ;pin_manager.c: 160: }
 10942                           ;pin_manager.c: 161: IOCCFbits.IOCCF4 = 0;
 10943  0E7E  0027               	movlb	7	; select bank7
 10944  0E7F  1219               	bcf	25,4	;volatile
 10945  0E80  0008               	return
 10946  0E81                     __end_of_IOCCF4_ISR:	
 10947                           
 10948                           	psect	text58
 10949  0DA6                     __ptext58:	
 10950 ;; *************** function _IOCCF4_DefaultInterruptHandler *****************
 10951 ;; Defined at:
 10952 ;;		line 174 in file "mcc_generated_files/pin_manager.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;		None
 10955 ;; Auto vars:     Size  Location     Type
 10956 ;;		None
 10957 ;; Return value:  Size  Location     Type
 10958 ;;                  1    wreg      void 
 10959 ;; Registers used:
 10960 ;;		None
 10961 ;; Tracked objects:
 10962 ;;		On entry : 0/0
 10963 ;;		On exit  : 0/0
 10964 ;;		Unchanged: 0/0
 10965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10966 ;;      Params:         0       0       0       0       0       0       0       0
 10967 ;;      Locals:         0       0       0       0       0       0       0       0
 10968 ;;      Temps:          0       0       0       0       0       0       0       0
 10969 ;;      Totals:         0       0       0       0       0       0       0       0
 10970 ;;Total ram usage:        0 bytes
 10971 ;; Hardware stack levels used:    1
 10972 ;; This function calls:
 10973 ;;		Nothing
 10974 ;; This function is called by:
 10975 ;;		_PIN_MANAGER_Initialize
 10976 ;;		_IOCCF4_ISR
 10977 ;; This function uses a non-reentrant model
 10978 ;;
 10979                           
 10980                           
 10981                           ;psect for function _IOCCF4_DefaultInterruptHandler
 10982  0DA6                     _IOCCF4_DefaultInterruptHandler:	
 10983                           
 10984                           ;incstack = 0
 10985                           ; Regs used in _IOCCF4_DefaultInterruptHandler: []
 10986  0DA6  0008               	return
 10987  0DA7                     __end_of_IOCCF4_DefaultInterruptHandler:	
 10988                           
 10989                           	psect	text59
 10990  0DCD                     __ptext59:	
 10991 ;; *************** function _INT_ISR *****************
 10992 ;; Defined at:
 10993 ;;		line 44 in file "mcc_generated_files/ext_int.c"
 10994 ;; Parameters:    Size  Location     Type
 10995 ;;		None
 10996 ;; Auto vars:     Size  Location     Type
 10997 ;;		None
 10998 ;; Return value:  Size  Location     Type
 10999 ;;                  1    wreg      void 
 11000 ;; Registers used:
 11001 ;;		wreg, status,2, status,0, pclath, cstack
 11002 ;; Tracked objects:
 11003 ;;		On entry : 0/0
 11004 ;;		On exit  : 0/0
 11005 ;;		Unchanged: 0/0
 11006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11007 ;;      Params:         0       0       0       0       0       0       0       0
 11008 ;;      Locals:         0       0       0       0       0       0       0       0
 11009 ;;      Temps:          0       0       0       0       0       0       0       0
 11010 ;;      Totals:         0       0       0       0       0       0       0       0
 11011 ;;Total ram usage:        0 bytes
 11012 ;; Hardware stack levels used:    1
 11013 ;; Hardware stack levels required when called:    3
 11014 ;; This function calls:
 11015 ;;		_INT_CallBack
 11016 ;; This function is called by:
 11017 ;;		_INTERRUPT_InterruptManager
 11018 ;; This function uses a non-reentrant model
 11019 ;;
 11020                           
 11021                           
 11022                           ;psect for function _INT_ISR
 11023  0DCD                     _INT_ISR:	
 11024                           
 11025                           ;ext_int.c: 50: (PIR0bits.INTF = 0);
 11026                           
 11027                           ;incstack = 0
 11028                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 11029  0DCD  0020               	movlb	0	; select bank0
 11030  0DCE  1010               	bcf	16,0	;volatile
 11031                           
 11032                           ;ext_int.c: 53: INT_CallBack();
 11033  0DCF  318E  26A9         	fcall	_INT_CallBack
 11034  0DD1  0008               	return
 11035  0DD2                     __end_of_INT_ISR:	
 11036                           
 11037                           	psect	text60
 11038  0EA9                     __ptext60:	
 11039 ;; *************** function _INT_CallBack *****************
 11040 ;; Defined at:
 11041 ;;		line 59 in file "mcc_generated_files/ext_int.c"
 11042 ;; Parameters:    Size  Location     Type
 11043 ;;		None
 11044 ;; Auto vars:     Size  Location     Type
 11045 ;;		None
 11046 ;; Return value:  Size  Location     Type
 11047 ;;                  1    wreg      void 
 11048 ;; Registers used:
 11049 ;;		wreg, status,2, status,0, pclath, cstack
 11050 ;; Tracked objects:
 11051 ;;		On entry : 0/0
 11052 ;;		On exit  : 0/0
 11053 ;;		Unchanged: 0/0
 11054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11055 ;;      Params:         0       0       0       0       0       0       0       0
 11056 ;;      Locals:         0       0       0       0       0       0       0       0
 11057 ;;      Temps:          0       0       0       0       0       0       0       0
 11058 ;;      Totals:         0       0       0       0       0       0       0       0
 11059 ;;Total ram usage:        0 bytes
 11060 ;; Hardware stack levels used:    1
 11061 ;; Hardware stack levels required when called:    2
 11062 ;; This function calls:
 11063 ;;		Absolute function
 11064 ;;		_EncINX_PulseRisingEvent
 11065 ;;		_INT_DefaultInterruptHandler
 11066 ;; This function is called by:
 11067 ;;		_INT_ISR
 11068 ;; This function uses a non-reentrant model
 11069 ;;
 11070                           
 11071                           
 11072                           ;psect for function _INT_CallBack
 11073  0EA9                     _INT_CallBack:	
 11074                           
 11075                           ;ext_int.c: 62: EncINX_PulseRisingEvent();
 11076                           
 11077                           ;incstack = 0
 11078                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 11079  0EA9  3186  267F  318E   	fcall	_EncINX_PulseRisingEvent
 11080                           
 11081                           ;ext_int.c: 64: if(INT_InterruptHandler)
 11082  0EAC  0021               	movlb	1	; select bank1
 11083  0EAD  0853               	movf	_INT_InterruptHandler^(0+128),w
 11084  0EAE  0454               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 11085  0EAF  1903               	btfsc	3,2
 11086  0EB0  0008               	return
 11087                           
 11088                           ;ext_int.c: 65: {
 11089                           ;ext_int.c: 66: INT_InterruptHandler();
 11090  0EB1  0854               	movf	(_INT_InterruptHandler+1)^(0+128),w
 11091  0EB2  008A               	movwf	10
 11092  0EB3  0853               	movf	_INT_InterruptHandler^(0+128),w
 11093  0EB4  000A               	callw
 11094  0EB5  318E               	pagesel	$
 11095  0EB6  0008               	return
 11096  0EB7                     __end_of_INT_CallBack:	
 11097                           
 11098                           	psect	text61
 11099  0DA5                     __ptext61:	
 11100 ;; *************** function _INT_DefaultInterruptHandler *****************
 11101 ;; Defined at:
 11102 ;;		line 80 in file "mcc_generated_files/ext_int.c"
 11103 ;; Parameters:    Size  Location     Type
 11104 ;;		None
 11105 ;; Auto vars:     Size  Location     Type
 11106 ;;		None
 11107 ;; Return value:  Size  Location     Type
 11108 ;;                  1    wreg      void 
 11109 ;; Registers used:
 11110 ;;		None
 11111 ;; Tracked objects:
 11112 ;;		On entry : 0/0
 11113 ;;		On exit  : 0/0
 11114 ;;		Unchanged: 0/0
 11115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11116 ;;      Params:         0       0       0       0       0       0       0       0
 11117 ;;      Locals:         0       0       0       0       0       0       0       0
 11118 ;;      Temps:          0       0       0       0       0       0       0       0
 11119 ;;      Totals:         0       0       0       0       0       0       0       0
 11120 ;;Total ram usage:        0 bytes
 11121 ;; Hardware stack levels used:    1
 11122 ;; This function calls:
 11123 ;;		Nothing
 11124 ;; This function is called by:
 11125 ;;		_EXT_INT_Initialize
 11126 ;;		_INT_CallBack
 11127 ;; This function uses a non-reentrant model
 11128 ;;
 11129                           
 11130                           
 11131                           ;psect for function _INT_DefaultInterruptHandler
 11132  0DA5                     _INT_DefaultInterruptHandler:	
 11133                           
 11134                           ;incstack = 0
 11135                           ; Regs used in _INT_DefaultInterruptHandler: []
 11136  0DA5  0008               	return
 11137  0DA6                     __end_of_INT_DefaultInterruptHandler:	
 11138                           
 11139                           	psect	text62
 11140  067F                     __ptext62:	
 11141 ;; *************** function _EncINX_PulseRisingEvent *****************
 11142 ;; Defined at:
 11143 ;;		line 554 in file "main.c"
 11144 ;; Parameters:    Size  Location     Type
 11145 ;;		None
 11146 ;; Auto vars:     Size  Location     Type
 11147 ;;		None
 11148 ;; Return value:  Size  Location     Type
 11149 ;;                  1    wreg      void 
 11150 ;; Registers used:
 11151 ;;		wreg, status,2, status,0, pclath, cstack
 11152 ;; Tracked objects:
 11153 ;;		On entry : 0/0
 11154 ;;		On exit  : 0/0
 11155 ;;		Unchanged: 0/0
 11156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11157 ;;      Params:         0       0       0       0       0       0       0       0
 11158 ;;      Locals:         0       0       0       0       0       0       0       0
 11159 ;;      Temps:          0       0       0       0       0       0       0       0
 11160 ;;      Totals:         0       0       0       0       0       0       0       0
 11161 ;;Total ram usage:        0 bytes
 11162 ;; Hardware stack levels used:    1
 11163 ;; Hardware stack levels required when called:    1
 11164 ;; This function calls:
 11165 ;;		i1_EUSART_Write
 11166 ;; This function is called by:
 11167 ;;		_INT_CallBack
 11168 ;; This function uses a non-reentrant model
 11169 ;;
 11170                           
 11171                           
 11172                           ;psect for function _EncINX_PulseRisingEvent
 11173  067F                     _EncINX_PulseRisingEvent:	
 11174                           
 11175                           ;main.c: 556: EncoderPositionAtIndex = EncoderPosition;
 11176                           
 11177                           ;incstack = 0
 11178                           ; Regs used in _EncINX_PulseRisingEvent: [wreg+status,2+status,0+pclath+cstack]
 11179  067F  0020               	movlb	0	; select bank0
 11180  0680  0845               	movf	_EncoderPosition+1,w
 11181  0681  0021               	movlb	1	; select bank1
 11182  0682  00C7               	movwf	(_EncoderPositionAtIndex+1)^(0+128)
 11183  0683  0020               	movlb	0	; select bank0
 11184  0684  0844               	movf	_EncoderPosition,w
 11185  0685  0021               	movlb	1	; select bank1
 11186  0686  00C6               	movwf	_EncoderPositionAtIndex^(0+128)
 11187                           
 11188                           ;main.c: 558: if(flagForFirstRevolution == 1)
 11189  0687  0020               	movlb	0	; select bank0
 11190  0688  0351               	decf	_flagForFirstRevolution,w
 11191  0689  1D03               	btfss	3,2
 11192  068A  2EAF               	goto	i1l3475
 11193                           
 11194                           ;main.c: 559: {
 11195                           ;main.c: 560: if((EncoderPositionOneCycle < 32) && (EncoderPositionOneCycle>0))
 11196  068B  0852               	movf	_EncoderPositionOneCycle,w
 11197  068C  3A80               	xorlw	128
 11198  068D  3E60               	addlw	-160
 11199  068E  1803               	skipnc
 11200  068F  2E95               	goto	i1l3461
 11201  0690  0852               	movf	_EncoderPositionOneCycle,w
 11202  0691  3A80               	xorlw	128
 11203  0692  3E7F               	addlw	-129
 11204  0693  1803               	btfsc	3,0
 11205  0694  2E9C               	goto	L18
 11206  0695                     i1l3461:	
 11207                           ;main.c: 564: }
 11208                           
 11209                           ;main.c: 563: EUSART_Write('X');
 11210                           
 11211                           ;main.c: 561: {
 11212                           ;main.c: 562: EncPulseError=1;
 11213                           
 11214                           
 11215                           ;main.c: 565: else if((EncoderPositionOneCycle > -32) && (EncoderPositionOneCycle<0))
 11216  0695  0020               	movlb	0	; select bank0
 11217  0696  0852               	movf	_EncoderPositionOneCycle,w
 11218  0697  3A80               	xorlw	128
 11219  0698  3E9F               	addlw	159
 11220  0699  1803               	btfsc	3,0
 11221  069A  1FD2               	btfss	_EncoderPositionOneCycle,7
 11222  069B  2EA1               	goto	i1l3469
 11223  069C                     L18:	
 11224                           
 11225                           ;main.c: 566: {
 11226                           ;main.c: 567: EncPulseError=1;
 11227  069C  0021               	movlb	1	; select bank1
 11228  069D  01D2               	clrf	_EncPulseError^(0+128)
 11229  069E  0AD2               	incf	_EncPulseError^(0+128),f
 11230                           
 11231                           ;main.c: 568: EUSART_Write('X');
 11232  069F  3058               	movlw	88
 11233  06A0  2EAD               	goto	L17
 11234  06A1                     i1l3469:	
 11235                           ;main.c: 569: }
 11236                           
 11237                           
 11238                           ;main.c: 570: else if((EncoderPositionOneCycle > 32) || (EncoderPositionOneCycle < -32))
 11239  06A1  0020               	movlb	0	; select bank0
 11240  06A2  0852               	movf	_EncoderPositionOneCycle,w
 11241  06A3  3A80               	xorlw	128
 11242  06A4  3E5F               	addlw	-161
 11243  06A5  1803               	skipnc
 11244  06A6  2EAC               	goto	i1l3473
 11245  06A7  0852               	movf	_EncoderPositionOneCycle,w
 11246  06A8  3A80               	xorlw	128
 11247  06A9  3EA0               	addlw	160
 11248  06AA  1803               	skipnc
 11249  06AB  2EAF               	goto	i1l3475
 11250  06AC                     i1l3473:	
 11251                           
 11252                           ;main.c: 571: {
 11253                           ;main.c: 572: EUSART_Write('Y');
 11254  06AC  3059               	movlw	89
 11255  06AD                     L17:	
 11256  06AD  318E  2612         	fcall	i1_EUSART_Write
 11257  06AF                     i1l3475:	
 11258                           
 11259                           ;main.c: 573: }
 11260                           ;main.c: 588: }
 11261                           ;main.c: 590: flagForFirstRevolution=1;
 11262  06AF  0020               	movlb	0	; select bank0
 11263  06B0  01D1               	clrf	_flagForFirstRevolution
 11264  06B1  0AD1               	incf	_flagForFirstRevolution,f
 11265                           
 11266                           ;main.c: 593: EncoderPositionOneCycle=0;
 11267  06B2  01D2               	clrf	_EncoderPositionOneCycle
 11268  06B3  0008               	return
 11269  06B4                     __end_of_EncINX_PulseRisingEvent:	
 11270                           
 11271                           	psect	text63
 11272  0F7C                     __ptext63:	
 11273 ;; *************** function _CCP1_CaptureISR *****************
 11274 ;; Defined at:
 11275 ;;		line 84 in file "mcc_generated_files/ccp1.c"
 11276 ;; Parameters:    Size  Location     Type
 11277 ;;		None
 11278 ;; Auto vars:     Size  Location     Type
 11279 ;;  module          2   27[BANK0 ] struct CCPR1Reg_tag
 11280 ;; Return value:  Size  Location     Type
 11281 ;;                  1    wreg      void 
 11282 ;; Registers used:
 11283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11284 ;; Tracked objects:
 11285 ;;		On entry : 0/0
 11286 ;;		On exit  : 0/0
 11287 ;;		Unchanged: 0/0
 11288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11289 ;;      Params:         0       0       0       0       0       0       0       0
 11290 ;;      Locals:         0       2       0       0       0       0       0       0
 11291 ;;      Temps:          1       0       0       0       0       0       0       0
 11292 ;;      Totals:         1       2       0       0       0       0       0       0
 11293 ;;Total ram usage:        3 bytes
 11294 ;; Hardware stack levels used:    1
 11295 ;; Hardware stack levels required when called:    5
 11296 ;; This function calls:
 11297 ;;		_CCP1_CallBack
 11298 ;; This function is called by:
 11299 ;;		_INTERRUPT_InterruptManager
 11300 ;; This function uses a non-reentrant model
 11301 ;;
 11302                           
 11303                           
 11304                           ;psect for function _CCP1_CaptureISR
 11305  0F7C                     _CCP1_CaptureISR:	
 11306                           
 11307                           ;ccp1.c: 86: CCP_PERIOD_REG_T module;
 11308                           ;ccp1.c: 89: PIR4bits.CCP1IF = 0;
 11309                           
 11310                           ;incstack = 0
 11311                           ; Regs used in _CCP1_CaptureISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11312  0F7C  0020               	movlb	0	; select bank0
 11313  0F7D  1014               	bcf	20,0	;volatile
 11314                           
 11315                           ;ccp1.c: 92: module.ccpr1l = CCPR1L;
 11316  0F7E  0025               	movlb	5	; select bank5
 11317  0F7F  0811               	movf	17,w	;volatile
 11318  0F80  00FD               	movwf	??_CCP1_CaptureISR
 11319  0F81  087D               	movf	??_CCP1_CaptureISR,w
 11320  0F82  0020               	movlb	0	; select bank0
 11321  0F83  00BB               	movwf	CCP1_CaptureISR@module
 11322                           
 11323                           ;ccp1.c: 93: module.ccpr1h = CCPR1H;
 11324  0F84  0025               	movlb	5	; select bank5
 11325  0F85  0812               	movf	18,w	;volatile
 11326  0F86  00FD               	movwf	??_CCP1_CaptureISR
 11327  0F87  087D               	movf	??_CCP1_CaptureISR,w
 11328  0F88  0020               	movlb	0	; select bank0
 11329  0F89  00BC               	movwf	CCP1_CaptureISR@module+1
 11330                           
 11331                           ;ccp1.c: 96: CCP1_CallBack(module.ccpr1_16Bit);
 11332  0F8A  083C               	movf	CCP1_CaptureISR@module+1,w
 11333  0F8B  00BA               	movwf	CCP1_CallBack@capturedValue+1
 11334  0F8C  083B               	movf	CCP1_CaptureISR@module,w
 11335  0F8D  00B9               	movwf	CCP1_CallBack@capturedValue
 11336  0F8E  318E  261A         	fcall	_CCP1_CallBack
 11337  0F90  0008               	return
 11338  0F91                     __end_of_CCP1_CaptureISR:	
 11339                           
 11340                           	psect	text64
 11341  0E1A                     __ptext64:	
 11342 ;; *************** function _CCP1_CallBack *****************
 11343 ;; Defined at:
 11344 ;;		line 99 in file "mcc_generated_files/ccp1.c"
 11345 ;; Parameters:    Size  Location     Type
 11346 ;;  capturedValu    2   25[BANK0 ] unsigned int 
 11347 ;; Auto vars:     Size  Location     Type
 11348 ;;		None
 11349 ;; Return value:  Size  Location     Type
 11350 ;;                  1    wreg      void 
 11351 ;; Registers used:
 11352 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11353 ;; Tracked objects:
 11354 ;;		On entry : 0/0
 11355 ;;		On exit  : 0/0
 11356 ;;		Unchanged: 0/0
 11357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11358 ;;      Params:         0       2       0       0       0       0       0       0
 11359 ;;      Locals:         0       0       0       0       0       0       0       0
 11360 ;;      Temps:          0       0       0       0       0       0       0       0
 11361 ;;      Totals:         0       2       0       0       0       0       0       0
 11362 ;;Total ram usage:        2 bytes
 11363 ;; Hardware stack levels used:    1
 11364 ;; Hardware stack levels required when called:    4
 11365 ;; This function calls:
 11366 ;;		_EncA_PulseEdgeEvent
 11367 ;; This function is called by:
 11368 ;;		_CCP1_CaptureISR
 11369 ;; This function uses a non-reentrant model
 11370 ;;
 11371                           
 11372                           
 11373                           ;psect for function _CCP1_CallBack
 11374  0E1A                     _CCP1_CallBack:	
 11375                           
 11376                           ;ccp1.c: 102: EncA_PulseEdgeEvent(capturedValue);
 11377                           
 11378                           ;incstack = 0
 11379                           ; Regs used in _CCP1_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11380  0E1A  0020               	movlb	0	; select bank0
 11381  0E1B  083A               	movf	CCP1_CallBack@capturedValue+1,w
 11382  0E1C  00B8               	movwf	EncA_PulseEdgeEvent@capturedValue+1
 11383  0E1D  0839               	movf	CCP1_CallBack@capturedValue,w
 11384  0E1E  00B7               	movwf	EncA_PulseEdgeEvent@capturedValue
 11385  0E1F  318F  272F         	fcall	_EncA_PulseEdgeEvent
 11386  0E21  0008               	return
 11387  0E22                     __end_of_CCP1_CallBack:	
 11388                           
 11389                           	psect	text65
 11390  0F2F                     __ptext65:	
 11391 ;; *************** function _EncA_PulseEdgeEvent *****************
 11392 ;; Defined at:
 11393 ;;		line 259 in file "main.c"
 11394 ;; Parameters:    Size  Location     Type
 11395 ;;  capturedValu    2   23[BANK0 ] unsigned int 
 11396 ;; Auto vars:     Size  Location     Type
 11397 ;;		None
 11398 ;; Return value:  Size  Location     Type
 11399 ;;                  1    wreg      void 
 11400 ;; Registers used:
 11401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11402 ;; Tracked objects:
 11403 ;;		On entry : 0/0
 11404 ;;		On exit  : 0/0
 11405 ;;		Unchanged: 0/0
 11406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11407 ;;      Params:         0       2       0       0       0       0       0       0
 11408 ;;      Locals:         0       0       0       0       0       0       0       0
 11409 ;;      Temps:          0       0       0       0       0       0       0       0
 11410 ;;      Totals:         0       2       0       0       0       0       0       0
 11411 ;;Total ram usage:        2 bytes
 11412 ;; Hardware stack levels used:    1
 11413 ;; Hardware stack levels required when called:    3
 11414 ;; This function calls:
 11415 ;;		_OnEncPulseEdgeEvent
 11416 ;; This function is called by:
 11417 ;;		_CCP1_CallBack
 11418 ;; This function uses a non-reentrant model
 11419 ;;
 11420                           
 11421                           
 11422                           ;psect for function _EncA_PulseEdgeEvent
 11423  0F2F                     _EncA_PulseEdgeEvent:	
 11424                           
 11425                           ;incstack = 0
 11426                           ; Regs used in _EncA_PulseEdgeEvent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11427                           ;main.c: 261: do { LATCbits.LATC3 = 1; } while(0);
 11428  0F2F  0022               	movlb	2	; select bank2
 11429  0F30  158E               	bsf	14,3	;volatile
 11430                           
 11431                           ;main.c: 263: PIE4bits.CCP1IE = 0;
 11432  0F31  0021               	movlb	1	; select bank1
 11433  0F32  1014               	bcf	20,0	;volatile
 11434                           
 11435                           ;main.c: 265: PIE4bits.CCP2IE = 0;
 11436  0F33  1094               	bcf	20,1	;volatile
 11437                           
 11438                           ;main.c: 266: OnEncPulseEdgeEvent(capturedValue);
 11439  0F34  0020               	movlb	0	; select bank0
 11440  0F35  0838               	movf	EncA_PulseEdgeEvent@capturedValue+1,w
 11441  0F36  00AE               	movwf	OnEncPulseEdgeEvent@capturevalue+1
 11442  0F37  0837               	movf	EncA_PulseEdgeEvent@capturedValue,w
 11443  0F38  00AD               	movwf	OnEncPulseEdgeEvent@capturevalue
 11444  0F39  3180  2093         	fcall	_OnEncPulseEdgeEvent
 11445                           
 11446                           ;main.c: 268: PIE4bits.CCP1IE = 1;
 11447  0F3B  0021               	movlb	1	; select bank1
 11448  0F3C  1414               	bsf	20,0	;volatile
 11449                           
 11450                           ;main.c: 271: do { LATCbits.LATC3 = 0; } while(0);
 11451  0F3D  0022               	movlb	2	; select bank2
 11452  0F3E  118E               	bcf	14,3	;volatile
 11453  0F3F  0008               	return
 11454  0F40                     __end_of_EncA_PulseEdgeEvent:	
 11455                           
 11456                           	psect	text66
 11457  0093                     __ptext66:	
 11458 ;; *************** function _OnEncPulseEdgeEvent *****************
 11459 ;; Defined at:
 11460 ;;		line 290 in file "main.c"
 11461 ;; Parameters:    Size  Location     Type
 11462 ;;  capturevalue    2   13[BANK0 ] unsigned int 
 11463 ;; Auto vars:     Size  Location     Type
 11464 ;;		None
 11465 ;; Return value:  Size  Location     Type
 11466 ;;                  1    wreg      void 
 11467 ;; Registers used:
 11468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11469 ;; Tracked objects:
 11470 ;;		On entry : 0/0
 11471 ;;		On exit  : 0/0
 11472 ;;		Unchanged: 0/0
 11473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11474 ;;      Params:         0       2       0       0       0       0       0       0
 11475 ;;      Locals:         0       0       0       0       0       0       0       0
 11476 ;;      Temps:          0       8       0       0       0       0       0       0
 11477 ;;      Totals:         0      10       0       0       0       0       0       0
 11478 ;;Total ram usage:       10 bytes
 11479 ;; Hardware stack levels used:    1
 11480 ;; Hardware stack levels required when called:    2
 11481 ;; This function calls:
 11482 ;;		_NutRunCycleStop
 11483 ;;		___lldiv
 11484 ;;		___lmul
 11485 ;;		_millis
 11486 ;;		i1_EUSART_Write
 11487 ;;		i1_NutRunCycleStart
 11488 ;;		i1_TMR3_StartTimer
 11489 ;;		i1_TMR3_WriteTimer
 11490 ;;		i1_getEncoderState
 11491 ;; This function is called by:
 11492 ;;		_EncA_PulseEdgeEvent
 11493 ;; This function uses a non-reentrant model
 11494 ;;
 11495                           
 11496                           
 11497                           ;psect for function _OnEncPulseEdgeEvent
 11498  0093                     _OnEncPulseEdgeEvent:	
 11499                           
 11500                           ;main.c: 293: TMR3_WriteTimer(0);
 11501                           
 11502                           ;incstack = 0
 11503                           ; Regs used in _OnEncPulseEdgeEvent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11504  0093  3000               	movlw	0
 11505  0094  00F0               	movwf	i1TMR3_WriteTimer@timerVal
 11506  0095  00F1               	movwf	i1TMR3_WriteTimer@timerVal+1
 11507  0096  318E  26C5  3180   	fcall	i1_TMR3_WriteTimer
 11508                           
 11509                           ;main.c: 294: TMR3_StartTimer();
 11510  0099  318D  25AE  3180   	fcall	i1_TMR3_StartTimer
 11511                           
 11512                           ;main.c: 298: EncEdgeTimeInterval= EncEdgeTimeInterval + capturevalue;
 11513  009C  0020               	movlb	0	; select bank0
 11514  009D  083E               	movf	_EncEdgeTimeInterval,w
 11515  009E  00AF               	movwf	??_OnEncPulseEdgeEvent
 11516  009F  083F               	movf	_EncEdgeTimeInterval+1,w
 11517  00A0  00B0               	movwf	??_OnEncPulseEdgeEvent+1
 11518  00A1  0840               	movf	_EncEdgeTimeInterval+2,w
 11519  00A2  00B1               	movwf	??_OnEncPulseEdgeEvent+2
 11520  00A3  0841               	movf	_EncEdgeTimeInterval+3,w
 11521  00A4  00B2               	movwf	??_OnEncPulseEdgeEvent+3
 11522  00A5  082D               	movf	OnEncPulseEdgeEvent@capturevalue,w
 11523  00A6  00B3               	movwf	??_OnEncPulseEdgeEvent+4
 11524  00A7  082E               	movf	OnEncPulseEdgeEvent@capturevalue+1,w
 11525  00A8  00B4               	movwf	??_OnEncPulseEdgeEvent+5
 11526  00A9  01B5               	clrf	??_OnEncPulseEdgeEvent+6
 11527  00AA  01B6               	clrf	??_OnEncPulseEdgeEvent+7
 11528  00AB  0833               	movf	??_OnEncPulseEdgeEvent+4,w
 11529  00AC  07AF               	addwf	??_OnEncPulseEdgeEvent,f
 11530  00AD  0834               	movf	??_OnEncPulseEdgeEvent+5,w
 11531  00AE  3DB0               	addwfc	??_OnEncPulseEdgeEvent+1,f
 11532  00AF  0835               	movf	??_OnEncPulseEdgeEvent+6,w
 11533  00B0  3DB1               	addwfc	??_OnEncPulseEdgeEvent+2,f
 11534  00B1  0836               	movf	??_OnEncPulseEdgeEvent+7,w
 11535  00B2  3DB2               	addwfc	??_OnEncPulseEdgeEvent+3,f
 11536  00B3  0832               	movf	??_OnEncPulseEdgeEvent+3,w
 11537  00B4  00C1               	movwf	_EncEdgeTimeInterval+3
 11538  00B5  0831               	movf	??_OnEncPulseEdgeEvent+2,w
 11539  00B6  00C0               	movwf	_EncEdgeTimeInterval+2
 11540  00B7  0830               	movf	??_OnEncPulseEdgeEvent+1,w
 11541  00B8  00BF               	movwf	_EncEdgeTimeInterval+1
 11542  00B9  082F               	movf	??_OnEncPulseEdgeEvent,w
 11543  00BA  00BE               	movwf	_EncEdgeTimeInterval
 11544                           
 11545                           ;main.c: 300: switch(NutRunstate)
 11546  00BB  2A86               	goto	i1l3363
 11547  00BC                     i1l3279:	
 11548                           ;main.c: 301: {
 11549                           ;main.c: 302: case 0:
 11550                           
 11551                           
 11552                           ;main.c: 303: if((EncoderPosition>32)||(EncoderPosition < -32))
 11553  00BC  0845               	movf	_EncoderPosition+1,w
 11554  00BD  3A80               	xorlw	128
 11555  00BE  00AF               	movwf	??_OnEncPulseEdgeEvent
 11556  00BF  3080               	movlw	128
 11557  00C0  022F               	subwf	??_OnEncPulseEdgeEvent,w
 11558  00C1  1D03               	skipz
 11559  00C2  28C5               	goto	u172_25
 11560  00C3  3021               	movlw	33
 11561  00C4  0244               	subwf	_EncoderPosition,w
 11562  00C5                     u172_25:	
 11563  00C5  1803               	skipnc
 11564  00C6  28D3               	goto	i1l642
 11565  00C7  0020               	movlb	0	; select bank0
 11566  00C8  0845               	movf	_EncoderPosition+1,w
 11567  00C9  3A80               	xorlw	128
 11568  00CA  00AF               	movwf	??_OnEncPulseEdgeEvent
 11569  00CB  307F               	movlw	127
 11570  00CC  022F               	subwf	??_OnEncPulseEdgeEvent,w
 11571  00CD  1D03               	skipz
 11572  00CE  28D1               	goto	u173_25
 11573  00CF  30E0               	movlw	224
 11574  00D0  0244               	subwf	_EncoderPosition,w
 11575  00D1                     u173_25:	
 11576  00D1  1803               	skipnc
 11577  00D2  2A95               	goto	i1l3365
 11578  00D3                     i1l642:	
 11579                           
 11580                           ;main.c: 305: {
 11581                           ;main.c: 306: NutRunstate= 1;
 11582  00D3  0020               	movlb	0	; select bank0
 11583  00D4  01CE               	clrf	_NutRunstate
 11584  00D5  0ACE               	incf	_NutRunstate,f
 11585                           
 11586                           ;main.c: 307: EUSART_Write('!');
 11587  00D6  3021               	movlw	33
 11588  00D7  318E  2612  3180   	fcall	i1_EUSART_Write
 11589                           
 11590                           ;main.c: 308: }
 11591                           ;main.c: 309: break;
 11592  00DA  2A95               	goto	i1l3365
 11593  00DB                     i1l3285:	
 11594                           ;main.c: 311: case 1:
 11595                           
 11596                           
 11597                           ;main.c: 312: if(EncEdgeTimeInterval < 3000)
 11598  00DB  0020               	movlb	0	; select bank0
 11599  00DC  0841               	movf	_EncEdgeTimeInterval+3,w
 11600  00DD  1D03               	btfss	3,2
 11601  00DE  2A95               	goto	i1l3365
 11602  00DF  0840               	movf	_EncEdgeTimeInterval+2,w
 11603  00E0  1D03               	btfss	3,2
 11604  00E1  2A95               	goto	i1l3365
 11605  00E2  30B8               	movlw	184
 11606  00E3  023E               	subwf	_EncEdgeTimeInterval,w
 11607  00E4  300B               	movlw	11
 11608  00E5  3B3F               	subwfb	_EncEdgeTimeInterval+1,w
 11609  00E6  1803               	btfsc	3,0
 11610  00E7  2A95               	goto	i1l3365
 11611                           
 11612                           ;main.c: 313: {
 11613                           ;main.c: 314: NutRunstate= 2;
 11614  00E8  3002               	movlw	2
 11615  00E9  00AF               	movwf	??_OnEncPulseEdgeEvent
 11616  00EA  082F               	movf	??_OnEncPulseEdgeEvent,w
 11617  00EB  00CE               	movwf	_NutRunstate
 11618                           
 11619                           ;main.c: 315: multipleTimecheck0=0;
 11620  00EC  01D4               	clrf	_multipleTimecheck0
 11621                           
 11622                           ;main.c: 316: EncEdgeMinTimeIntSumAvg=0;
 11623  00ED  3000               	movlw	0
 11624  00EE  0021               	movlb	1	; select bank1
 11625  00EF  00AB               	movwf	(_EncEdgeMinTimeIntSumAvg+3)^(0+128)
 11626  00F0  3000               	movlw	0
 11627  00F1  00AA               	movwf	(_EncEdgeMinTimeIntSumAvg+2)^(0+128)
 11628  00F2  3000               	movlw	0
 11629  00F3  00A9               	movwf	(_EncEdgeMinTimeIntSumAvg+1)^(0+128)
 11630  00F4  3000               	movlw	0
 11631  00F5  00A8               	movwf	_EncEdgeMinTimeIntSumAvg^(0+128)
 11632                           
 11633                           ;main.c: 317: multipleTimecheck1=0;
 11634  00F6  0020               	movlb	0	; select bank0
 11635  00F7  01D3               	clrf	_multipleTimecheck1
 11636                           
 11637                           ;main.c: 318: EncEdgeMinTimeInterval=0xEFFFFFFF;
 11638  00F8  30EF               	movlw	239
 11639  00F9  00D9               	movwf	_EncEdgeMinTimeInterval+3
 11640  00FA  30FF               	movlw	255
 11641  00FB  00D8               	movwf	_EncEdgeMinTimeInterval+2
 11642  00FC  30FF               	movlw	255
 11643  00FD  00D7               	movwf	_EncEdgeMinTimeInterval+1
 11644  00FE  30FF               	movlw	255
 11645  00FF  00D6               	movwf	_EncEdgeMinTimeInterval
 11646                           
 11647                           ;main.c: 319: EUSART_Write('@');
 11648  0100  3040               	movlw	64
 11649  0101  318E  2612  3180   	fcall	i1_EUSART_Write
 11650                           
 11651                           ;main.c: 320: }
 11652                           ;main.c: 321: break;
 11653  0104  2A95               	goto	i1l3365
 11654  0105                     i1l3297:	
 11655                           ;main.c: 323: case 2:
 11656                           
 11657                           
 11658                           ;main.c: 324: if(EncEdgeTimeInterval < EncEdgeMinTimeInterval)
 11659  0105  0020               	movlb	0	; select bank0
 11660  0106  0859               	movf	_EncEdgeMinTimeInterval+3,w
 11661  0107  0241               	subwf	_EncEdgeTimeInterval+3,w
 11662  0108  1D03               	skipz
 11663  0109  2914               	goto	u175_25
 11664  010A  0858               	movf	_EncEdgeMinTimeInterval+2,w
 11665  010B  0240               	subwf	_EncEdgeTimeInterval+2,w
 11666  010C  1D03               	skipz
 11667  010D  2914               	goto	u175_25
 11668  010E  0857               	movf	_EncEdgeMinTimeInterval+1,w
 11669  010F  023F               	subwf	_EncEdgeTimeInterval+1,w
 11670  0110  1D03               	skipz
 11671  0111  2914               	goto	u175_25
 11672  0112  0856               	movf	_EncEdgeMinTimeInterval,w
 11673  0113  023E               	subwf	_EncEdgeTimeInterval,w
 11674  0114                     u175_25:	
 11675  0114  1803               	skipnc
 11676  0115  29AB               	goto	i1l3323
 11677                           
 11678                           ;main.c: 325: {
 11679                           ;main.c: 326: multipleTimecheck0++;
 11680  0116  3001               	movlw	1
 11681  0117  00AF               	movwf	??_OnEncPulseEdgeEvent
 11682  0118  082F               	movf	??_OnEncPulseEdgeEvent,w
 11683  0119  07D4               	addwf	_multipleTimecheck0,f
 11684                           
 11685                           ;main.c: 327: switch(multipleTimecheck0)
 11686  011A  2998               	goto	i1l3321
 11687  011B                     i1l3301:	
 11688                           ;main.c: 328: {
 11689                           ;main.c: 329: case 1: OldEncPos=EncoderPosition;
 11690                           
 11691  011B  0845               	movf	_EncoderPosition+1,w
 11692  011C  0021               	movlb	1	; select bank1
 11693  011D  00C9               	movwf	(_OldEncPos+1)^(0+128)
 11694  011E  0020               	movlb	0	; select bank0
 11695  011F  0844               	movf	_EncoderPosition,w
 11696  0120  0021               	movlb	1	; select bank1
 11697  0121  00C8               	movwf	_OldEncPos^(0+128)
 11698  0122                     i1l3303:	
 11699                           ;main.c: 332: case 2: EncEdgeMinTimeIntSumAvg+=EncEdgeTimeInterval;
 11700                           
 11701                           ;main.c: 331: break;
 11702                           
 11703                           ;main.c: 330: EncEdgeMinTimeIntSumAvg+=EncEdgeTimeInterval;
 11704                           
 11705  0122                     i1l3305:	
 11706                           ;main.c: 334: case 3: EncEdgeMinTimeIntSumAvg+=EncEdgeTimeInterval;
 11707                           
 11708                           ;main.c: 333: break;
 11709                           
 11710  0122                     i1l3307:	
 11711                           ;main.c: 336: case 4: EncEdgeMinTimeIntSumAvg+=EncEdgeTimeInterval;
 11712                           
 11713                           ;main.c: 335: break;
 11714                           
 11715  0122  0020               	movlb	0	; select bank0
 11716  0123  083E               	movf	_EncEdgeTimeInterval,w
 11717  0124  0021               	movlb	1	; select bank1
 11718  0125  07A8               	addwf	_EncEdgeMinTimeIntSumAvg^(0+128),f
 11719  0126  0020               	movlb	0	; select bank0
 11720  0127  083F               	movf	_EncEdgeTimeInterval+1,w
 11721  0128  0021               	movlb	1	; select bank1
 11722  0129  3DA9               	addwfc	(_EncEdgeMinTimeIntSumAvg+1)^(0+128),f
 11723  012A  0020               	movlb	0	; select bank0
 11724  012B  0840               	movf	_EncEdgeTimeInterval+2,w
 11725  012C  0021               	movlb	1	; select bank1
 11726  012D  3DAA               	addwfc	(_EncEdgeMinTimeIntSumAvg+2)^(0+128),f
 11727  012E  0020               	movlb	0	; select bank0
 11728  012F  0841               	movf	_EncEdgeTimeInterval+3,w
 11729  0130  0021               	movlb	1	; select bank1
 11730  0131  3DAB               	addwfc	(_EncEdgeMinTimeIntSumAvg+3)^(0+128),f
 11731                           
 11732                           ;main.c: 337: break;
 11733  0132  2A95               	goto	i1l3365
 11734  0133                     i1l3309:	
 11735                           ;main.c: 338: case 5: EncEdgeMinTimeIntSumAvg+=EncEdgeTimeInterval;
 11736                           
 11737  0133  0020               	movlb	0	; select bank0
 11738  0134  083E               	movf	_EncEdgeTimeInterval,w
 11739  0135  0021               	movlb	1	; select bank1
 11740  0136  07A8               	addwf	_EncEdgeMinTimeIntSumAvg^(0+128),f
 11741  0137  0020               	movlb	0	; select bank0
 11742  0138  083F               	movf	_EncEdgeTimeInterval+1,w
 11743  0139  0021               	movlb	1	; select bank1
 11744  013A  3DA9               	addwfc	(_EncEdgeMinTimeIntSumAvg+1)^(0+128),f
 11745  013B  0020               	movlb	0	; select bank0
 11746  013C  0840               	movf	_EncEdgeTimeInterval+2,w
 11747  013D  0021               	movlb	1	; select bank1
 11748  013E  3DAA               	addwfc	(_EncEdgeMinTimeIntSumAvg+2)^(0+128),f
 11749  013F  0020               	movlb	0	; select bank0
 11750  0140  0841               	movf	_EncEdgeTimeInterval+3,w
 11751  0141  0021               	movlb	1	; select bank1
 11752  0142  3DAB               	addwfc	(_EncEdgeMinTimeIntSumAvg+3)^(0+128),f
 11753                           
 11754                           ;main.c: 339: if((EncoderPosition-OldEncPos) == (multipleTimecheck0-1))
 11755  0143  0020               	movlb	0	; select bank0
 11756  0144  0854               	movf	_multipleTimecheck0,w
 11757  0145  3EFF               	addlw	255
 11758  0146  00AF               	movwf	??_OnEncPulseEdgeEvent
 11759  0147  30FF               	movlw	255
 11760  0148  1803               	skipnc
 11761  0149  3000               	movlw	0
 11762  014A  00B0               	movwf	??_OnEncPulseEdgeEvent+1
 11763  014B  0021               	movlb	1	; select bank1
 11764  014C  0948               	comf	_OldEncPos^(0+128),w
 11765  014D  0020               	movlb	0	; select bank0
 11766  014E  00B1               	movwf	??_OnEncPulseEdgeEvent+2
 11767  014F  0021               	movlb	1	; select bank1
 11768  0150  0949               	comf	(_OldEncPos+1)^(0+128),w
 11769  0151  0020               	movlb	0	; select bank0
 11770  0152  00B2               	movwf	??_OnEncPulseEdgeEvent+3
 11771  0153  0AB1               	incf	??_OnEncPulseEdgeEvent+2,f
 11772  0154  1903               	skipnz
 11773  0155  0AB2               	incf	??_OnEncPulseEdgeEvent+3,f
 11774  0156  0844               	movf	_EncoderPosition,w
 11775  0157  0731               	addwf	??_OnEncPulseEdgeEvent+2,w
 11776  0158  00B3               	movwf	??_OnEncPulseEdgeEvent+4
 11777  0159  0845               	movf	_EncoderPosition+1,w
 11778  015A  3D32               	addwfc	??_OnEncPulseEdgeEvent+3,w
 11779  015B  00B4               	movwf	??_OnEncPulseEdgeEvent+5
 11780  015C  0830               	movf	??_OnEncPulseEdgeEvent+1,w
 11781  015D  0634               	xorwf	??_OnEncPulseEdgeEvent+5,w
 11782  015E  1D03               	skipz
 11783  015F  2962               	goto	u176_25
 11784  0160  082F               	movf	??_OnEncPulseEdgeEvent,w
 11785  0161  0633               	xorwf	??_OnEncPulseEdgeEvent+4,w
 11786  0162                     u176_25:	
 11787  0162  1D03               	skipz
 11788  0163  298D               	goto	i1l3315
 11789                           
 11790                           ;main.c: 340: {
 11791                           ;main.c: 341: EncEdgeMinTimeInterval= EncEdgeMinTimeIntSumAvg/multipleTimecheck0;
 11792  0164  0854               	movf	_multipleTimecheck0,w
 11793  0165  00AF               	movwf	??_OnEncPulseEdgeEvent
 11794  0166  01B0               	clrf	??_OnEncPulseEdgeEvent+1
 11795  0167  01B1               	clrf	??_OnEncPulseEdgeEvent+2
 11796  0168  01B2               	clrf	??_OnEncPulseEdgeEvent+3
 11797  0169  0832               	movf	??_OnEncPulseEdgeEvent+3,w
 11798  016A  00A3               	movwf	___lldiv@divisor+3
 11799  016B  0831               	movf	??_OnEncPulseEdgeEvent+2,w
 11800  016C  00A2               	movwf	___lldiv@divisor+2
 11801  016D  0830               	movf	??_OnEncPulseEdgeEvent+1,w
 11802  016E  00A1               	movwf	___lldiv@divisor+1
 11803  016F  082F               	movf	??_OnEncPulseEdgeEvent,w
 11804  0170  00A0               	movwf	___lldiv@divisor
 11805  0171  0021               	movlb	1	; select bank1
 11806  0172  082B               	movf	(_EncEdgeMinTimeIntSumAvg+3)^(0+128),w
 11807  0173  0020               	movlb	0	; select bank0
 11808  0174  00A7               	movwf	___lldiv@dividend+3
 11809  0175  0021               	movlb	1	; select bank1
 11810  0176  082A               	movf	(_EncEdgeMinTimeIntSumAvg+2)^(0+128),w
 11811  0177  0020               	movlb	0	; select bank0
 11812  0178  00A6               	movwf	___lldiv@dividend+2
 11813  0179  0021               	movlb	1	; select bank1
 11814  017A  0829               	movf	(_EncEdgeMinTimeIntSumAvg+1)^(0+128),w
 11815  017B  0020               	movlb	0	; select bank0
 11816  017C  00A5               	movwf	___lldiv@dividend+1
 11817  017D  0021               	movlb	1	; select bank1
 11818  017E  0828               	movf	_EncEdgeMinTimeIntSumAvg^(0+128),w
 11819  017F  0020               	movlb	0	; select bank0
 11820  0180  00A4               	movwf	___lldiv@dividend
 11821  0181  3185  25C1  3180   	fcall	___lldiv
 11822  0184  0020               	movlb	0	; select bank0
 11823  0185  0823               	movf	?___lldiv+3,w
 11824  0186  00D9               	movwf	_EncEdgeMinTimeInterval+3
 11825  0187  0822               	movf	?___lldiv+2,w
 11826  0188  00D8               	movwf	_EncEdgeMinTimeInterval+2
 11827  0189  0821               	movf	?___lldiv+1,w
 11828  018A  00D7               	movwf	_EncEdgeMinTimeInterval+1
 11829  018B  0820               	movf	?___lldiv,w
 11830  018C  00D6               	movwf	_EncEdgeMinTimeInterval
 11831  018D                     i1l3315:	
 11832                           
 11833                           ;main.c: 342: }
 11834                           ;main.c: 343: multipleTimecheck0=0;
 11835  018D  01D4               	clrf	_multipleTimecheck0
 11836                           
 11837                           ;main.c: 344: EncEdgeMinTimeIntSumAvg=0;
 11838  018E  3000               	movlw	0
 11839  018F  0021               	movlb	1	; select bank1
 11840  0190  00AB               	movwf	(_EncEdgeMinTimeIntSumAvg+3)^(0+128)
 11841  0191  3000               	movlw	0
 11842  0192  00AA               	movwf	(_EncEdgeMinTimeIntSumAvg+2)^(0+128)
 11843  0193  3000               	movlw	0
 11844  0194  00A9               	movwf	(_EncEdgeMinTimeIntSumAvg+1)^(0+128)
 11845  0195  3000               	movlw	0
 11846  0196  00A8               	movwf	_EncEdgeMinTimeIntSumAvg^(0+128)
 11847                           
 11848                           ;main.c: 347: }
 11849                           
 11850                           ;main.c: 346: default:break;
 11851                           
 11852                           ;main.c: 345: break;
 11853  0197  2A95               	goto	i1l3365
 11854  0198                     i1l3321:	
 11855  0198  0020               	movlb	0	; select bank0
 11856  0199  0854               	movf	_multipleTimecheck0,w
 11857                           
 11858                           ; Switch size 1, requested type "space"
 11859                           ; Number of cases is 5, Range of values is 1 to 5
 11860                           ; switch strategies available:
 11861                           ; Name         Instructions Cycles
 11862                           ; simple_byte           16     9 (average)
 11863                           ; direct_byte           19     9 (fixed)
 11864                           ; jumptable            263     9 (fixed)
 11865                           ;	Chosen strategy is simple_byte
 11866  019A  3A01               	xorlw	1	; case 1
 11867  019B  1903               	skipnz
 11868  019C  291B               	goto	i1l3301
 11869  019D  3A03               	xorlw	3	; case 2
 11870  019E  1903               	skipnz
 11871  019F  2922               	goto	i1l3303
 11872  01A0  3A01               	xorlw	1	; case 3
 11873  01A1  1903               	skipnz
 11874  01A2  2922               	goto	i1l3305
 11875  01A3  3A07               	xorlw	7	; case 4
 11876  01A4  1903               	skipnz
 11877  01A5  2922               	goto	i1l3307
 11878  01A6  3A01               	xorlw	1	; case 5
 11879  01A7  1903               	skipnz
 11880  01A8  2933               	goto	i1l3309
 11881  01A9  2A95               	goto	i1l3365
 11882                           
 11883                           ;main.c: 350: }
 11884  01AA  2A95               	goto	i1l3365
 11885  01AB                     i1l3323:	
 11886                           
 11887                           ;main.c: 351: else if(EncEdgeTimeInterval >= (EncEdgeMinTimeInterval + ((EncEdgeMinTimeI
      +                          nterval*EncSpdredFact)/10)))
 11888  01AB  3000               	movlw	0
 11889  01AC  00A3               	movwf	___lldiv@divisor+3
 11890  01AD  3000               	movlw	0
 11891  01AE  00A2               	movwf	___lldiv@divisor+2
 11892  01AF  3000               	movlw	0
 11893  01B0  00A1               	movwf	___lldiv@divisor+1
 11894  01B1  300A               	movlw	10
 11895  01B2  00A0               	movwf	___lldiv@divisor
 11896  01B3  0021               	movlb	1	; select bank1
 11897  01B4  086A               	movf	_EncSpdredFact^(0+128),w
 11898  01B5  00F0               	movwf	___lmul@multiplier
 11899  01B6  086B               	movf	(_EncSpdredFact+1)^(0+128),w
 11900  01B7  00F1               	movwf	___lmul@multiplier+1
 11901  01B8  01F2               	clrf	___lmul@multiplier+2
 11902  01B9  01F3               	clrf	___lmul@multiplier+3
 11903  01BA  0020               	movlb	0	; select bank0
 11904  01BB  0859               	movf	_EncEdgeMinTimeInterval+3,w
 11905  01BC  00F7               	movwf	___lmul@multiplicand+3
 11906  01BD  0858               	movf	_EncEdgeMinTimeInterval+2,w
 11907  01BE  00F6               	movwf	___lmul@multiplicand+2
 11908  01BF  0857               	movf	_EncEdgeMinTimeInterval+1,w
 11909  01C0  00F5               	movwf	___lmul@multiplicand+1
 11910  01C1  0856               	movf	_EncEdgeMinTimeInterval,w
 11911  01C2  00F4               	movwf	___lmul@multiplicand
 11912  01C3  3186  26B4  3180   	fcall	___lmul
 11913  01C6  0873               	movf	?___lmul+3,w
 11914  01C7  0020               	movlb	0	; select bank0
 11915  01C8  00A7               	movwf	___lldiv@dividend+3
 11916  01C9  0872               	movf	?___lmul+2,w
 11917  01CA  00A6               	movwf	___lldiv@dividend+2
 11918  01CB  0871               	movf	?___lmul+1,w
 11919  01CC  00A5               	movwf	___lldiv@dividend+1
 11920  01CD  0870               	movf	?___lmul,w
 11921  01CE  00A4               	movwf	___lldiv@dividend
 11922  01CF  3185  25C1  3180   	fcall	___lldiv
 11923  01D2  0020               	movlb	0	; select bank0
 11924  01D3  0820               	movf	?___lldiv,w
 11925  01D4  0756               	addwf	_EncEdgeMinTimeInterval,w
 11926  01D5  00AF               	movwf	??_OnEncPulseEdgeEvent
 11927  01D6  0821               	movf	?___lldiv+1,w
 11928  01D7  3D57               	addwfc	_EncEdgeMinTimeInterval+1,w
 11929  01D8  00B0               	movwf	??_OnEncPulseEdgeEvent+1
 11930  01D9  0822               	movf	?___lldiv+2,w
 11931  01DA  3D58               	addwfc	_EncEdgeMinTimeInterval+2,w
 11932  01DB  00B1               	movwf	??_OnEncPulseEdgeEvent+2
 11933  01DC  0823               	movf	?___lldiv+3,w
 11934  01DD  3D59               	addwfc	_EncEdgeMinTimeInterval+3,w
 11935  01DE  00B2               	movwf	??_OnEncPulseEdgeEvent+3
 11936  01DF  0832               	movf	??_OnEncPulseEdgeEvent+3,w
 11937  01E0  0241               	subwf	_EncEdgeTimeInterval+3,w
 11938  01E1  1D03               	skipz
 11939  01E2  29ED               	goto	u177_25
 11940  01E3  0831               	movf	??_OnEncPulseEdgeEvent+2,w
 11941  01E4  0240               	subwf	_EncEdgeTimeInterval+2,w
 11942  01E5  1D03               	skipz
 11943  01E6  29ED               	goto	u177_25
 11944  01E7  0830               	movf	??_OnEncPulseEdgeEvent+1,w
 11945  01E8  023F               	subwf	_EncEdgeTimeInterval+1,w
 11946  01E9  1D03               	skipz
 11947  01EA  29ED               	goto	u177_25
 11948  01EB  082F               	movf	??_OnEncPulseEdgeEvent,w
 11949  01EC  023E               	subwf	_EncEdgeTimeInterval,w
 11950  01ED                     u177_25:	
 11951  01ED  1C03               	skipc
 11952  01EE  2A95               	goto	i1l3365
 11953                           
 11954                           ;main.c: 352: {
 11955                           ;main.c: 355: multipleTimecheck1++;
 11956  01EF  3001               	movlw	1
 11957  01F0  00AF               	movwf	??_OnEncPulseEdgeEvent
 11958  01F1  082F               	movf	??_OnEncPulseEdgeEvent,w
 11959  01F2  07D3               	addwf	_multipleTimecheck1,f
 11960                           
 11961                           ;main.c: 356: switch(multipleTimecheck1)
 11962  01F3  2A4C               	goto	i1l3349
 11963  01F4                     i1l3327:	
 11964                           ;main.c: 357: {
 11965                           ;main.c: 358: case 1: OldEncPos=EncoderPosition;
 11966                           
 11967  01F4  0845               	movf	_EncoderPosition+1,w
 11968  01F5  0021               	movlb	1	; select bank1
 11969  01F6  00C9               	movwf	(_OldEncPos+1)^(0+128)
 11970  01F7  0020               	movlb	0	; select bank0
 11971  01F8  0844               	movf	_EncoderPosition,w
 11972  01F9  0021               	movlb	1	; select bank1
 11973  01FA  00C8               	movwf	_OldEncPos^(0+128)
 11974                           
 11975                           ;main.c: 365: break;
 11976                           
 11977                           ;main.c: 364: case 4:
 11978                           
 11979                           ;main.c: 363: break;
 11980                           
 11981                           ;main.c: 362: case 3:
 11982                           
 11983                           ;main.c: 361: break;
 11984                           
 11985                           ;main.c: 360: case 2:
 11986                           
 11987                           ;main.c: 359: break;
 11988  01FB  2A95               	goto	i1l3365
 11989  01FC                     i1l3329:	
 11990                           ;main.c: 366: case 5: if((EncoderPosition-OldEncPos) == (multipleTimecheck1-1))
 11991                           
 11992  01FC  0020               	movlb	0	; select bank0
 11993  01FD  0853               	movf	_multipleTimecheck1,w
 11994  01FE  3EFF               	addlw	255
 11995  01FF  00AF               	movwf	??_OnEncPulseEdgeEvent
 11996  0200  30FF               	movlw	255
 11997  0201  1803               	skipnc
 11998  0202  3000               	movlw	0
 11999  0203  00B0               	movwf	??_OnEncPulseEdgeEvent+1
 12000  0204  0021               	movlb	1	; select bank1
 12001  0205  0948               	comf	_OldEncPos^(0+128),w
 12002  0206  0020               	movlb	0	; select bank0
 12003  0207  00B1               	movwf	??_OnEncPulseEdgeEvent+2
 12004  0208  0021               	movlb	1	; select bank1
 12005  0209  0949               	comf	(_OldEncPos+1)^(0+128),w
 12006  020A  0020               	movlb	0	; select bank0
 12007  020B  00B2               	movwf	??_OnEncPulseEdgeEvent+3
 12008  020C  0AB1               	incf	??_OnEncPulseEdgeEvent+2,f
 12009  020D  1903               	skipnz
 12010  020E  0AB2               	incf	??_OnEncPulseEdgeEvent+3,f
 12011  020F  0844               	movf	_EncoderPosition,w
 12012  0210  0731               	addwf	??_OnEncPulseEdgeEvent+2,w
 12013  0211  00B3               	movwf	??_OnEncPulseEdgeEvent+4
 12014  0212  0845               	movf	_EncoderPosition+1,w
 12015  0213  3D32               	addwfc	??_OnEncPulseEdgeEvent+3,w
 12016  0214  00B4               	movwf	??_OnEncPulseEdgeEvent+5
 12017  0215  0830               	movf	??_OnEncPulseEdgeEvent+1,w
 12018  0216  0634               	xorwf	??_OnEncPulseEdgeEvent+5,w
 12019  0217  1D03               	skipz
 12020  0218  2A1B               	goto	u178_25
 12021  0219  082F               	movf	??_OnEncPulseEdgeEvent,w
 12022  021A  0633               	xorwf	??_OnEncPulseEdgeEvent+4,w
 12023  021B                     u178_25:	
 12024  021B  1D03               	skipz
 12025  021C  2A4A               	goto	i1l3345
 12026                           
 12027                           ;main.c: 367: {
 12028                           ;main.c: 368: ShutdownDetected = 1;
 12029  021D  01CF               	clrf	_ShutdownDetected
 12030  021E  0ACF               	incf	_ShutdownDetected,f
 12031                           
 12032                           ;main.c: 369: NutRunCycleStop();
 12033  021F  318F  2791  3180   	fcall	_NutRunCycleStop
 12034                           
 12035                           ;main.c: 371: if(EncoderPosition < 0)
 12036  0222  0020               	movlb	0	; select bank0
 12037  0223  1FC5               	btfss	_EncoderPosition+1,7
 12038  0224  2A31               	goto	i1l3339
 12039                           
 12040                           ;main.c: 372: NutRunLength = -EncoderPosition;
 12041  0225  0944               	comf	_EncoderPosition,w
 12042  0226  00AF               	movwf	??_OnEncPulseEdgeEvent
 12043  0227  0945               	comf	_EncoderPosition+1,w
 12044  0228  00B0               	movwf	??_OnEncPulseEdgeEvent+1
 12045  0229  0AAF               	incf	??_OnEncPulseEdgeEvent,f
 12046  022A  1903               	skipnz
 12047  022B  0AB0               	incf	??_OnEncPulseEdgeEvent+1,f
 12048  022C  082F               	movf	??_OnEncPulseEdgeEvent,w
 12049  022D  00C6               	movwf	_NutRunLength
 12050  022E  0830               	movf	??_OnEncPulseEdgeEvent+1,w
 12051  022F  00C7               	movwf	_NutRunLength+1
 12052  0230  2A35               	goto	i1l3341
 12053  0231                     i1l3339:	
 12054                           
 12055                           ;main.c: 373: else
 12056                           ;main.c: 374: NutRunLength = EncoderPosition;
 12057  0231  0845               	movf	_EncoderPosition+1,w
 12058  0232  00C7               	movwf	_NutRunLength+1
 12059  0233  0844               	movf	_EncoderPosition,w
 12060  0234  00C6               	movwf	_NutRunLength
 12061  0235                     i1l3341:	
 12062                           
 12063                           ;main.c: 376: IdleTimeOnShutOff = millis() + 2100;
 12064  0235  318E  263C  3180   	fcall	_millis
 12065  0238  3034               	movlw	52
 12066  0239  0770               	addwf	?_millis,w
 12067  023A  0021               	movlb	1	; select bank1
 12068  023B  00A4               	movwf	_IdleTimeOnShutOff^(0+128)
 12069  023C  3008               	movlw	8
 12070  023D  3D71               	addwfc	?_millis+1,w
 12071  023E  00A5               	movwf	(_IdleTimeOnShutOff+1)^(0+128)
 12072  023F  3000               	movlw	0
 12073  0240  3D72               	addwfc	?_millis+2,w
 12074  0241  00A6               	movwf	(_IdleTimeOnShutOff+2)^(0+128)
 12075  0242  3000               	movlw	0
 12076  0243  3D73               	addwfc	?_millis+3,w
 12077  0244  00A7               	movwf	(_IdleTimeOnShutOff+3)^(0+128)
 12078                           
 12079                           ;main.c: 378: NutRunstate = 3;
 12080  0245  3003               	movlw	3
 12081  0246  0020               	movlb	0	; select bank0
 12082  0247  00AF               	movwf	??_OnEncPulseEdgeEvent
 12083  0248  082F               	movf	??_OnEncPulseEdgeEvent,w
 12084  0249  00CE               	movwf	_NutRunstate
 12085  024A                     i1l3345:	
 12086                           
 12087                           ;main.c: 379: }
 12088                           ;main.c: 380: multipleTimecheck1=0;
 12089  024A  01D3               	clrf	_multipleTimecheck1
 12090                           
 12091                           ;main.c: 383: }
 12092                           
 12093                           ;main.c: 382: default:break;
 12094                           
 12095                           ;main.c: 381: break;
 12096  024B  2A95               	goto	i1l3365
 12097  024C                     i1l3349:	
 12098  024C  0853               	movf	_multipleTimecheck1,w
 12099                           
 12100                           ; Switch size 1, requested type "space"
 12101                           ; Number of cases is 5, Range of values is 1 to 5
 12102                           ; switch strategies available:
 12103                           ; Name         Instructions Cycles
 12104                           ; simple_byte           16     9 (average)
 12105                           ; direct_byte           19     9 (fixed)
 12106                           ; jumptable            263     9 (fixed)
 12107                           ;	Chosen strategy is simple_byte
 12108  024D  3A01               	xorlw	1	; case 1
 12109  024E  1903               	skipnz
 12110  024F  29F4               	goto	i1l3327
 12111  0250  3A03               	xorlw	3	; case 2
 12112  0251  1903               	skipnz
 12113  0252  2A95               	goto	i1l3365
 12114  0253  3A01               	xorlw	1	; case 3
 12115  0254  1903               	skipnz
 12116  0255  2A95               	goto	i1l3365
 12117  0256  3A07               	xorlw	7	; case 4
 12118  0257  1903               	skipnz
 12119  0258  2A95               	goto	i1l3365
 12120  0259  3A01               	xorlw	1	; case 5
 12121  025A  1903               	skipnz
 12122  025B  29FC               	goto	i1l3329
 12123  025C  2A95               	goto	i1l3365
 12124                           
 12125                           ;main.c: 386: }
 12126                           ;main.c: 387: break;
 12127  025D  2A95               	goto	i1l3365
 12128  025E                     i1l3351:	
 12129                           ;main.c: 389: case 3:
 12130                           
 12131                           
 12132                           ;main.c: 390: if(millis() > IdleTimeOnShutOff )
 12133  025E  318E  263C  3180   	fcall	_millis
 12134  0261  0873               	movf	?_millis+3,w
 12135  0262  0021               	movlb	1	; select bank1
 12136  0263  0227               	subwf	(_IdleTimeOnShutOff+3)^(0+128),w
 12137  0264  1D03               	skipz
 12138  0265  2A70               	goto	u180_25
 12139  0266  0872               	movf	?_millis+2,w
 12140  0267  0226               	subwf	(_IdleTimeOnShutOff+2)^(0+128),w
 12141  0268  1D03               	skipz
 12142  0269  2A70               	goto	u180_25
 12143  026A  0871               	movf	?_millis+1,w
 12144  026B  0225               	subwf	(_IdleTimeOnShutOff+1)^(0+128),w
 12145  026C  1D03               	skipz
 12146  026D  2A70               	goto	u180_25
 12147  026E  0870               	movf	?_millis,w
 12148  026F  0224               	subwf	_IdleTimeOnShutOff^(0+128),w
 12149  0270                     u180_25:	
 12150  0270  1803               	skipnc
 12151  0271  2A95               	goto	i1l3365
 12152                           
 12153                           ;main.c: 391: {
 12154                           ;main.c: 392: NutRunstate = 0;
 12155  0272  0020               	movlb	0	; select bank0
 12156  0273  01CE               	clrf	_NutRunstate
 12157                           
 12158                           ;main.c: 393: EncoderPosition = 0;
 12159  0274  01C4               	clrf	_EncoderPosition
 12160  0275  01C5               	clrf	_EncoderPosition+1
 12161                           
 12162                           ;main.c: 394: EncEdgeMinTimeInterval= 0xEFFFFFFF;
 12163  0276  30EF               	movlw	239
 12164  0277  00D9               	movwf	_EncEdgeMinTimeInterval+3
 12165  0278  30FF               	movlw	255
 12166  0279  00D8               	movwf	_EncEdgeMinTimeInterval+2
 12167  027A  30FF               	movlw	255
 12168  027B  00D7               	movwf	_EncEdgeMinTimeInterval+1
 12169  027C  30FF               	movlw	255
 12170  027D  00D6               	movwf	_EncEdgeMinTimeInterval
 12171                           
 12172                           ;main.c: 395: EUSART_Write('$');
 12173  027E  3024               	movlw	36
 12174  027F  318E  2612  3180   	fcall	i1_EUSART_Write
 12175                           
 12176                           ;main.c: 396: NutRunCycleStart();
 12177  0282  318E  269B  3180   	fcall	i1_NutRunCycleStart
 12178                           
 12179                           ;main.c: 401: }
 12180                           
 12181                           ;main.c: 400: default : break;
 12182                           
 12183                           ;main.c: 397: }
 12184                           ;main.c: 398: break;
 12185  0285  2A95               	goto	i1l3365
 12186  0286                     i1l3363:	
 12187  0286  0020               	movlb	0	; select bank0
 12188  0287  084E               	movf	_NutRunstate,w
 12189                           
 12190                           ; Switch size 1, requested type "space"
 12191                           ; Number of cases is 4, Range of values is 0 to 3
 12192                           ; switch strategies available:
 12193                           ; Name         Instructions Cycles
 12194                           ; simple_byte           13     7 (average)
 12195                           ; direct_byte           14     6 (fixed)
 12196                           ; jumptable            260     6 (fixed)
 12197                           ;	Chosen strategy is simple_byte
 12198  0288  3A00               	xorlw	0	; case 0
 12199  0289  1903               	skipnz
 12200  028A  28BC               	goto	i1l3279
 12201  028B  3A01               	xorlw	1	; case 1
 12202  028C  1903               	skipnz
 12203  028D  28DB               	goto	i1l3285
 12204  028E  3A03               	xorlw	3	; case 2
 12205  028F  1903               	skipnz
 12206  0290  2905               	goto	i1l3297
 12207  0291  3A01               	xorlw	1	; case 3
 12208  0292  1903               	skipnz
 12209  0293  2A5E               	goto	i1l3351
 12210  0294  2A95               	goto	i1l3365
 12211  0295                     i1l3365:	
 12212                           
 12213                           ;main.c: 403: EncEdgeTimeIntervalOld= EncEdgeTimeInterval;
 12214  0295  0020               	movlb	0	; select bank0
 12215  0296  0841               	movf	_EncEdgeTimeInterval+3,w
 12216  0297  0021               	movlb	1	; select bank1
 12217  0298  00AF               	movwf	(_EncEdgeTimeIntervalOld+3)^(0+128)
 12218  0299  0020               	movlb	0	; select bank0
 12219  029A  0840               	movf	_EncEdgeTimeInterval+2,w
 12220  029B  0021               	movlb	1	; select bank1
 12221  029C  00AE               	movwf	(_EncEdgeTimeIntervalOld+2)^(0+128)
 12222  029D  0020               	movlb	0	; select bank0
 12223  029E  083F               	movf	_EncEdgeTimeInterval+1,w
 12224  029F  0021               	movlb	1	; select bank1
 12225  02A0  00AD               	movwf	(_EncEdgeTimeIntervalOld+1)^(0+128)
 12226  02A1  0020               	movlb	0	; select bank0
 12227  02A2  083E               	movf	_EncEdgeTimeInterval,w
 12228  02A3  0021               	movlb	1	; select bank1
 12229  02A4  00AC               	movwf	_EncEdgeTimeIntervalOld^(0+128)
 12230                           
 12231                           ;main.c: 404: EncEdgeTimeInterval=0;
 12232  02A5  3000               	movlw	0
 12233  02A6  0020               	movlb	0	; select bank0
 12234  02A7  00C1               	movwf	_EncEdgeTimeInterval+3
 12235  02A8  3000               	movlw	0
 12236  02A9  00C0               	movwf	_EncEdgeTimeInterval+2
 12237  02AA  3000               	movlw	0
 12238  02AB  00BF               	movwf	_EncEdgeTimeInterval+1
 12239  02AC  3000               	movlw	0
 12240  02AD  00BE               	movwf	_EncEdgeTimeInterval
 12241                           
 12242                           ;main.c: 406: EncEdgeGotFlag=1;
 12243  02AE  01D0               	clrf	_EncEdgeGotFlag
 12244  02AF  0AD0               	incf	_EncEdgeGotFlag,f
 12245                           
 12246                           ;main.c: 408: OldEncPulseOpState=EncPulseOpState;
 12247  02B0  0021               	movlb	1	; select bank1
 12248  02B1  084F               	movf	(_EncPulseOpState+1)^(0+128),w
 12249  02B2  00CB               	movwf	(_OldEncPulseOpState+1)^(0+128)
 12250  02B3  084E               	movf	_EncPulseOpState^(0+128),w
 12251  02B4  00CA               	movwf	_OldEncPulseOpState^(0+128)
 12252                           
 12253                           ;main.c: 409: getEncoderState();
 12254  02B5  318E  26E3         	fcall	i1_getEncoderState
 12255                           
 12256                           ;main.c: 411: EncoderPosition++;
 12257  02B7  3001               	movlw	1
 12258  02B8  0020               	movlb	0	; select bank0
 12259  02B9  07C4               	addwf	_EncoderPosition,f
 12260  02BA  3000               	movlw	0
 12261  02BB  3DC5               	addwfc	_EncoderPosition+1,f
 12262                           
 12263                           ;main.c: 412: EncoderPositionOneCycle++;
 12264  02BC  3001               	movlw	1
 12265  02BD  00AF               	movwf	??_OnEncPulseEdgeEvent
 12266  02BE  082F               	movf	??_OnEncPulseEdgeEvent,w
 12267  02BF  07D2               	addwf	_EncoderPositionOneCycle,f
 12268  02C0  0008               	return
 12269  02C1                     __end_of_OnEncPulseEdgeEvent:	
 12270                           
 12271                           	psect	text67
 12272  0EE3                     __ptext67:	
 12273 ;; *************** function i1_getEncoderState *****************
 12274 ;; Defined at:
 12275 ;;		line 510 in file "main.c"
 12276 ;; Parameters:    Size  Location     Type
 12277 ;;		None
 12278 ;; Auto vars:     Size  Location     Type
 12279 ;;		None
 12280 ;; Return value:  Size  Location     Type
 12281 ;;                  1    wreg      void 
 12282 ;; Registers used:
 12283 ;;		wreg
 12284 ;; Tracked objects:
 12285 ;;		On entry : 0/0
 12286 ;;		On exit  : 0/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12289 ;;      Params:         0       0       0       0       0       0       0       0
 12290 ;;      Locals:         0       0       0       0       0       0       0       0
 12291 ;;      Temps:          0       0       0       0       0       0       0       0
 12292 ;;      Totals:         0       0       0       0       0       0       0       0
 12293 ;;Total ram usage:        0 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; This function calls:
 12296 ;;		Nothing
 12297 ;; This function is called by:
 12298 ;;		_OnEncPulseEdgeEvent
 12299 ;; This function uses a non-reentrant model
 12300 ;;
 12301                           
 12302                           
 12303                           ;psect for function i1_getEncoderState
 12304  0EE3                     i1_getEncoderState:	
 12305                           
 12306                           ;main.c: 512: if(PORTCbits.RC5)
 12307                           
 12308                           ;incstack = 0
 12309                           ; Regs used in i1_getEncoderState: [wreg]
 12310  0EE3  0020               	movlb	0	; select bank0
 12311  0EE4  1E8E               	btfss	14,5	;volatile
 12312  0EE5  2EEC               	goto	i1l3273
 12313                           
 12314                           ;main.c: 513: {
 12315                           ;main.c: 514: EncPulseOpState= 2;
 12316  0EE6  3002               	movlw	2
 12317  0EE7  0021               	movlb	1	; select bank1
 12318  0EE8  00CE               	movwf	_EncPulseOpState^(0+128)
 12319  0EE9  3000               	movlw	0
 12320  0EEA  00CF               	movwf	(_EncPulseOpState^(0+128)+1)
 12321                           
 12322                           ;main.c: 517: }
 12323  0EEB  0008               	return
 12324  0EEC                     i1l3273:	
 12325                           
 12326                           ;main.c: 518: else
 12327                           ;main.c: 519: {
 12328                           ;main.c: 520: EncPulseOpState= 1;
 12329  0EEC  3001               	movlw	1
 12330  0EED  0021               	movlb	1	; select bank1
 12331  0EEE  00CE               	movwf	_EncPulseOpState^(0+128)
 12332  0EEF  3000               	movlw	0
 12333  0EF0  00CF               	movwf	(_EncPulseOpState^(0+128)+1)
 12334  0EF1  0008               	return
 12335  0EF2                     __end_ofi1_getEncoderState:	
 12336                           
 12337                           	psect	text68
 12338  0E9B                     __ptext68:	
 12339 ;; *************** function i1_NutRunCycleStart *****************
 12340 ;; Defined at:
 12341 ;;		line 487 in file "main.c"
 12342 ;; Parameters:    Size  Location     Type
 12343 ;;		None
 12344 ;; Auto vars:     Size  Location     Type
 12345 ;;		None
 12346 ;; Return value:  Size  Location     Type
 12347 ;;                  1    wreg      void 
 12348 ;; Registers used:
 12349 ;;		wreg, status,2, status,0, pclath, cstack
 12350 ;; Tracked objects:
 12351 ;;		On entry : 0/0
 12352 ;;		On exit  : 0/0
 12353 ;;		Unchanged: 0/0
 12354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12355 ;;      Params:         0       0       0       0       0       0       0       0
 12356 ;;      Locals:         0       0       0       0       0       0       0       0
 12357 ;;      Temps:          0       0       0       0       0       0       0       0
 12358 ;;      Totals:         0       0       0       0       0       0       0       0
 12359 ;;Total ram usage:        0 bytes
 12360 ;; Hardware stack levels used:    1
 12361 ;; Hardware stack levels required when called:    1
 12362 ;; This function calls:
 12363 ;;		i1_NutRunCycleReset
 12364 ;;		i1_TMR3_StartTimer
 12365 ;;		i1_TMR3_WriteTimer
 12366 ;; This function is called by:
 12367 ;;		_OnEncPulseEdgeEvent
 12368 ;; This function uses a non-reentrant model
 12369 ;;
 12370                           
 12371                           
 12372                           ;psect for function i1_NutRunCycleStart
 12373  0E9B                     i1_NutRunCycleStart:	
 12374                           
 12375                           ;main.c: 489: NutRunCycleReset();
 12376                           
 12377                           ;incstack = 0
 12378                           ; Regs used in i1_NutRunCycleStart: [wreg+status,2+status,0+pclath+cstack]
 12379  0E9B  318F  27A7  318E   	fcall	i1_NutRunCycleReset
 12380                           
 12381                           ;main.c: 491: TMR3_WriteTimer(0);
 12382  0E9E  3000               	movlw	0
 12383  0E9F  00F0               	movwf	i1TMR3_WriteTimer@timerVal
 12384  0EA0  00F1               	movwf	i1TMR3_WriteTimer@timerVal+1
 12385  0EA1  318E  26C5  318E   	fcall	i1_TMR3_WriteTimer
 12386                           
 12387                           ;main.c: 492: TMR3_StartTimer();
 12388  0EA4  318D  25AE         	fcall	i1_TMR3_StartTimer
 12389                           
 12390                           ;main.c: 493: PIE3bits.TMR3IE = 1;
 12391  0EA6  0021               	movlb	1	; select bank1
 12392  0EA7  1613               	bsf	19,4	;volatile
 12393  0EA8  0008               	return
 12394  0EA9                     __end_ofi1_NutRunCycleStart:	
 12395                           
 12396                           	psect	text69
 12397  0DAE                     __ptext69:	
 12398 ;; *************** function i1_TMR3_StartTimer *****************
 12399 ;; Defined at:
 12400 ;;		line 96 in file "mcc_generated_files/tmr3.c"
 12401 ;; Parameters:    Size  Location     Type
 12402 ;;		None
 12403 ;; Auto vars:     Size  Location     Type
 12404 ;;		None
 12405 ;; Return value:  Size  Location     Type
 12406 ;;                  1    wreg      void 
 12407 ;; Registers used:
 12408 ;;		None
 12409 ;; Tracked objects:
 12410 ;;		On entry : 0/0
 12411 ;;		On exit  : 0/0
 12412 ;;		Unchanged: 0/0
 12413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12414 ;;      Params:         0       0       0       0       0       0       0       0
 12415 ;;      Locals:         0       0       0       0       0       0       0       0
 12416 ;;      Temps:          0       0       0       0       0       0       0       0
 12417 ;;      Totals:         0       0       0       0       0       0       0       0
 12418 ;;Total ram usage:        0 bytes
 12419 ;; Hardware stack levels used:    1
 12420 ;; This function calls:
 12421 ;;		Nothing
 12422 ;; This function is called by:
 12423 ;;		_OnEncPulseEdgeEvent
 12424 ;;		i1_NutRunCycleStart
 12425 ;; This function uses a non-reentrant model
 12426 ;;
 12427                           
 12428                           
 12429                           ;psect for function i1_TMR3_StartTimer
 12430  0DAE                     i1_TMR3_StartTimer:	
 12431                           
 12432                           ;tmr3.c: 99: T3CONbits.TMR3ON = 1;
 12433                           
 12434                           ;incstack = 0
 12435                           ; Regs used in i1_TMR3_StartTimer: []
 12436  0DAE  0028               	movlb	8	; select bank8
 12437  0DAF  1413               	bsf	19,0	;volatile
 12438  0DB0  0008               	return
 12439  0DB1                     __end_ofi1_TMR3_StartTimer:	
 12440                           
 12441                           	psect	text70
 12442  0FA7                     __ptext70:	
 12443 ;; *************** function i1_NutRunCycleReset *****************
 12444 ;; Defined at:
 12445 ;;		line 476 in file "main.c"
 12446 ;; Parameters:    Size  Location     Type
 12447 ;;		None
 12448 ;; Auto vars:     Size  Location     Type
 12449 ;;		None
 12450 ;; Return value:  Size  Location     Type
 12451 ;;                  1    wreg      void 
 12452 ;; Registers used:
 12453 ;;		wreg, status,2
 12454 ;; Tracked objects:
 12455 ;;		On entry : 0/0
 12456 ;;		On exit  : 0/0
 12457 ;;		Unchanged: 0/0
 12458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12459 ;;      Params:         0       0       0       0       0       0       0       0
 12460 ;;      Locals:         0       0       0       0       0       0       0       0
 12461 ;;      Temps:          0       0       0       0       0       0       0       0
 12462 ;;      Totals:         0       0       0       0       0       0       0       0
 12463 ;;Total ram usage:        0 bytes
 12464 ;; Hardware stack levels used:    1
 12465 ;; This function calls:
 12466 ;;		Nothing
 12467 ;; This function is called by:
 12468 ;;		i1_NutRunCycleStart
 12469 ;; This function uses a non-reentrant model
 12470 ;;
 12471                           
 12472                           
 12473                           ;psect for function i1_NutRunCycleReset
 12474  0FA7                     i1_NutRunCycleReset:	
 12475                           
 12476                           ;main.c: 478: EncEdgeMinTimeInterval= 0xEFFFFFFF;
 12477                           
 12478                           ;incstack = 0
 12479                           ; Regs used in i1_NutRunCycleReset: [wreg+status,2]
 12480  0FA7  30EF               	movlw	239
 12481  0FA8  0020               	movlb	0	; select bank0
 12482  0FA9  00D9               	movwf	_EncEdgeMinTimeInterval+3
 12483  0FAA  30FF               	movlw	255
 12484  0FAB  00D8               	movwf	_EncEdgeMinTimeInterval+2
 12485  0FAC  30FF               	movlw	255
 12486  0FAD  00D7               	movwf	_EncEdgeMinTimeInterval+1
 12487  0FAE  30FF               	movlw	255
 12488  0FAF  00D6               	movwf	_EncEdgeMinTimeInterval
 12489                           
 12490                           ;main.c: 479: EncEdgeTimeInterval= 0x00000000;
 12491  0FB0  3000               	movlw	0
 12492  0FB1  00C1               	movwf	_EncEdgeTimeInterval+3
 12493  0FB2  3000               	movlw	0
 12494  0FB3  00C0               	movwf	_EncEdgeTimeInterval+2
 12495  0FB4  3000               	movlw	0
 12496  0FB5  00BF               	movwf	_EncEdgeTimeInterval+1
 12497  0FB6  3000               	movlw	0
 12498  0FB7  00BE               	movwf	_EncEdgeTimeInterval
 12499                           
 12500                           ;main.c: 481: EncoderPosition= 0;
 12501  0FB8  01C4               	clrf	_EncoderPosition
 12502  0FB9  01C5               	clrf	_EncoderPosition+1
 12503                           
 12504                           ;main.c: 483: NutRunLength = 0;
 12505  0FBA  01C6               	clrf	_NutRunLength
 12506  0FBB  01C7               	clrf	_NutRunLength+1
 12507  0FBC  0008               	return
 12508  0FBD                     __end_ofi1_NutRunCycleReset:	
 12509                           
 12510                           	psect	text71
 12511  0E12                     __ptext71:	
 12512 ;; *************** function i1_EUSART_Write *****************
 12513 ;; Defined at:
 12514 ;;		line 96 in file "mcc_generated_files/eusart.c"
 12515 ;; Parameters:    Size  Location     Type
 12516 ;;  txData          1    wreg     unsigned char 
 12517 ;; Auto vars:     Size  Location     Type
 12518 ;;  txData          1    0[COMMON] unsigned char 
 12519 ;; Return value:  Size  Location     Type
 12520 ;;                  1    wreg      void 
 12521 ;; Registers used:
 12522 ;;		wreg
 12523 ;; Tracked objects:
 12524 ;;		On entry : 0/0
 12525 ;;		On exit  : 0/0
 12526 ;;		Unchanged: 0/0
 12527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12528 ;;      Params:         0       0       0       0       0       0       0       0
 12529 ;;      Locals:         1       0       0       0       0       0       0       0
 12530 ;;      Temps:          0       0       0       0       0       0       0       0
 12531 ;;      Totals:         1       0       0       0       0       0       0       0
 12532 ;;Total ram usage:        1 bytes
 12533 ;; Hardware stack levels used:    1
 12534 ;; This function calls:
 12535 ;;		Nothing
 12536 ;; This function is called by:
 12537 ;;		_OnEncPulseEdgeEvent
 12538 ;;		_EncINX_PulseRisingEvent
 12539 ;; This function uses a non-reentrant model
 12540 ;;
 12541                           
 12542                           
 12543                           ;psect for function i1_EUSART_Write
 12544  0E12                     i1_EUSART_Write:	
 12545                           
 12546                           ;incstack = 0
 12547                           ; Regs used in i1_EUSART_Write: [wreg]
 12548                           ;i1EUSART_Write@txData stored from wreg
 12549  0E12  00F0               	movwf	i1EUSART_Write@txData
 12550  0E13                     i1l159:	
 12551                           ;eusart.c: 99: {
 12552                           
 12553                           ;eusart.c: 98: while(0 == PIR1bits.TXIF)
 12554                           
 12555  0E13  0020               	movlb	0	; select bank0
 12556  0E14  1E11               	btfss	17,4	;volatile
 12557  0E15  2E13               	goto	i1l159
 12558                           
 12559                           ;eusart.c: 100: }
 12560                           ;eusart.c: 102: TX1REG = txData;
 12561  0E16  0870               	movf	i1EUSART_Write@txData,w
 12562  0E17  0023               	movlb	3	; select bank3
 12563  0E18  009A               	movwf	26	;volatile
 12564  0E19  0008               	return
 12565  0E1A                     __end_ofi1_EUSART_Write:	
 12566                           
 12567                           	psect	text72
 12568  0E3C                     __ptext72:	
 12569 ;; *************** function _millis *****************
 12570 ;; Defined at:
 12571 ;;		line 619 in file "main.c"
 12572 ;; Parameters:    Size  Location     Type
 12573 ;;		None
 12574 ;; Auto vars:     Size  Location     Type
 12575 ;;		None
 12576 ;; Return value:  Size  Location     Type
 12577 ;;                  4    0[COMMON] unsigned long 
 12578 ;; Registers used:
 12579 ;;		wreg
 12580 ;; Tracked objects:
 12581 ;;		On entry : 0/0
 12582 ;;		On exit  : 0/0
 12583 ;;		Unchanged: 0/0
 12584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12585 ;;      Params:         4       0       0       0       0       0       0       0
 12586 ;;      Locals:         0       0       0       0       0       0       0       0
 12587 ;;      Temps:          0       0       0       0       0       0       0       0
 12588 ;;      Totals:         4       0       0       0       0       0       0       0
 12589 ;;Total ram usage:        4 bytes
 12590 ;; Hardware stack levels used:    1
 12591 ;; This function calls:
 12592 ;;		Nothing
 12593 ;; This function is called by:
 12594 ;;		_OnEncPulseEdgeEvent
 12595 ;;		_ModbusMasterTransaction
 12596 ;; This function uses a non-reentrant model
 12597 ;;
 12598                           
 12599                           
 12600                           ;psect for function _millis
 12601  0E3C                     _millis:	
 12602                           
 12603                           ;main.c: 621: return TimertickMsec;
 12604                           
 12605                           ;incstack = 0
 12606                           ; Regs used in _millis: [wreg]
 12607  0E3C  0021               	movlb	1	; select bank1
 12608  0E3D  0823               	movf	(_TimertickMsec+3)^(0+128),w
 12609  0E3E  00F3               	movwf	?_millis+3
 12610  0E3F  0822               	movf	(_TimertickMsec+2)^(0+128),w
 12611  0E40  00F2               	movwf	?_millis+2
 12612  0E41  0821               	movf	(_TimertickMsec+1)^(0+128),w
 12613  0E42  00F1               	movwf	?_millis+1
 12614  0E43  0820               	movf	_TimertickMsec^(0+128),w
 12615  0E44  00F0               	movwf	?_millis
 12616  0E45  0008               	return
 12617  0E46                     __end_of_millis:	
 12618                           
 12619                           	psect	text73
 12620  06B4                     __ptext73:	
 12621 ;; *************** function ___lmul *****************
 12622 ;; Defined at:
 12623 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
 12624 ;; Parameters:    Size  Location     Type
 12625 ;;  multiplier      4    0[COMMON] unsigned long 
 12626 ;;  multiplicand    4    4[COMMON] unsigned long 
 12627 ;; Auto vars:     Size  Location     Type
 12628 ;;  product         4    8[COMMON] unsigned long 
 12629 ;; Return value:  Size  Location     Type
 12630 ;;                  4    0[COMMON] unsigned long 
 12631 ;; Registers used:
 12632 ;;		wreg, status,2, status,0
 12633 ;; Tracked objects:
 12634 ;;		On entry : 0/0
 12635 ;;		On exit  : 0/0
 12636 ;;		Unchanged: 0/0
 12637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12638 ;;      Params:         8       0       0       0       0       0       0       0
 12639 ;;      Locals:         4       0       0       0       0       0       0       0
 12640 ;;      Temps:          0       0       0       0       0       0       0       0
 12641 ;;      Totals:        12       0       0       0       0       0       0       0
 12642 ;;Total ram usage:       12 bytes
 12643 ;; Hardware stack levels used:    1
 12644 ;; This function calls:
 12645 ;;		Nothing
 12646 ;; This function is called by:
 12647 ;;		_OnEncPulseEdgeEvent
 12648 ;; This function uses a non-reentrant model
 12649 ;;
 12650                           
 12651                           
 12652                           ;psect for function ___lmul
 12653  06B4                     ___lmul:	
 12654                           
 12655                           ;incstack = 0
 12656                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 12657  06B4  3000               	movlw	0
 12658  06B5  00FB               	movwf	___lmul@product+3
 12659  06B6  3000               	movlw	0
 12660  06B7  00FA               	movwf	___lmul@product+2
 12661  06B8  3000               	movlw	0
 12662  06B9  00F9               	movwf	___lmul@product+1
 12663  06BA  3000               	movlw	0
 12664  06BB  00F8               	movwf	___lmul@product
 12665  06BC                     i1l3223:	
 12666  06BC  1C70               	btfss	___lmul@multiplier,0
 12667  06BD  2EC6               	goto	i1l3227
 12668  06BE  0874               	movf	___lmul@multiplicand,w
 12669  06BF  07F8               	addwf	___lmul@product,f
 12670  06C0  0875               	movf	___lmul@multiplicand+1,w
 12671  06C1  3DF9               	addwfc	___lmul@product+1,f
 12672  06C2  0876               	movf	___lmul@multiplicand+2,w
 12673  06C3  3DFA               	addwfc	___lmul@product+2,f
 12674  06C4  0877               	movf	___lmul@multiplicand+3,w
 12675  06C5  3DFB               	addwfc	___lmul@product+3,f
 12676  06C6                     i1l3227:	
 12677  06C6  3001               	movlw	1
 12678  06C7                     u160_25:	
 12679  06C7  35F4               	lslf	___lmul@multiplicand,f
 12680  06C8  0DF5               	rlf	___lmul@multiplicand+1,f
 12681  06C9  0DF6               	rlf	___lmul@multiplicand+2,f
 12682  06CA  0DF7               	rlf	___lmul@multiplicand+3,f
 12683  06CB  0B89               	decfsz	9,f
 12684  06CC  2EC7               	goto	u160_25
 12685  06CD  3001               	movlw	1
 12686  06CE                     u161_25:	
 12687  06CE  36F3               	lsrf	___lmul@multiplier+3,f
 12688  06CF  0CF2               	rrf	___lmul@multiplier+2,f
 12689  06D0  0CF1               	rrf	___lmul@multiplier+1,f
 12690  06D1  0CF0               	rrf	___lmul@multiplier,f
 12691  06D2  0B89               	decfsz	9,f
 12692  06D3  2ECE               	goto	u161_25
 12693  06D4  0873               	movf	___lmul@multiplier+3,w
 12694  06D5  0472               	iorwf	___lmul@multiplier+2,w
 12695  06D6  0471               	iorwf	___lmul@multiplier+1,w
 12696  06D7  0470               	iorwf	___lmul@multiplier,w
 12697  06D8  1D03               	skipz
 12698  06D9  2EBC               	goto	i1l3223
 12699  06DA  087B               	movf	___lmul@product+3,w
 12700  06DB  00F3               	movwf	?___lmul+3
 12701  06DC  087A               	movf	___lmul@product+2,w
 12702  06DD  00F2               	movwf	?___lmul+2
 12703  06DE  0879               	movf	___lmul@product+1,w
 12704  06DF  00F1               	movwf	?___lmul+1
 12705  06E0  0878               	movf	___lmul@product,w
 12706  06E1  00F0               	movwf	?___lmul
 12707  06E2  0008               	return
 12708  06E3                     __end_of___lmul:	
 12709                           
 12710                           	psect	text74
 12711  05C1                     __ptext74:	
 12712 ;; *************** function ___lldiv *****************
 12713 ;; Defined at:
 12714 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
 12715 ;; Parameters:    Size  Location     Type
 12716 ;;  divisor         4    0[BANK0 ] unsigned long 
 12717 ;;  dividend        4    4[BANK0 ] unsigned long 
 12718 ;; Auto vars:     Size  Location     Type
 12719 ;;  quotient        4    8[BANK0 ] unsigned long 
 12720 ;;  counter         1   12[BANK0 ] unsigned char 
 12721 ;; Return value:  Size  Location     Type
 12722 ;;                  4    0[BANK0 ] unsigned long 
 12723 ;; Registers used:
 12724 ;;		wreg, status,2, status,0
 12725 ;; Tracked objects:
 12726 ;;		On entry : 0/0
 12727 ;;		On exit  : 0/0
 12728 ;;		Unchanged: 0/0
 12729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12730 ;;      Params:         0       8       0       0       0       0       0       0
 12731 ;;      Locals:         0       5       0       0       0       0       0       0
 12732 ;;      Temps:          1       0       0       0       0       0       0       0
 12733 ;;      Totals:         1      13       0       0       0       0       0       0
 12734 ;;Total ram usage:       14 bytes
 12735 ;; Hardware stack levels used:    1
 12736 ;; This function calls:
 12737 ;;		Nothing
 12738 ;; This function is called by:
 12739 ;;		_OnEncPulseEdgeEvent
 12740 ;; This function uses a non-reentrant model
 12741 ;;
 12742                           
 12743                           
 12744                           ;psect for function ___lldiv
 12745  05C1                     ___lldiv:	
 12746                           
 12747                           ;incstack = 0
 12748                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 12749  05C1  3000               	movlw	0
 12750  05C2  0020               	movlb	0	; select bank0
 12751  05C3  00AB               	movwf	___lldiv@quotient+3
 12752  05C4  3000               	movlw	0
 12753  05C5  00AA               	movwf	___lldiv@quotient+2
 12754  05C6  3000               	movlw	0
 12755  05C7  00A9               	movwf	___lldiv@quotient+1
 12756  05C8  3000               	movlw	0
 12757  05C9  00A8               	movwf	___lldiv@quotient
 12758  05CA  0823               	movf	___lldiv@divisor+3,w
 12759  05CB  0422               	iorwf	___lldiv@divisor+2,w
 12760  05CC  0421               	iorwf	___lldiv@divisor+1,w
 12761  05CD  0420               	iorwf	___lldiv@divisor,w
 12762  05CE  1903               	skipnz
 12763  05CF  2E0B               	goto	i1l3255
 12764  05D0  01AC               	clrf	___lldiv@counter
 12765  05D1  0AAC               	incf	___lldiv@counter,f
 12766  05D2                     i1l3241:	
 12767  05D2  1BA3               	btfsc	___lldiv@divisor+3,7
 12768  05D3  2DE0               	goto	i1l3243
 12769  05D4  3001               	movlw	1
 12770  05D5                     u164_25:	
 12771  05D5  35A0               	lslf	___lldiv@divisor,f
 12772  05D6  0DA1               	rlf	___lldiv@divisor+1,f
 12773  05D7  0DA2               	rlf	___lldiv@divisor+2,f
 12774  05D8  0DA3               	rlf	___lldiv@divisor+3,f
 12775  05D9  0B89               	decfsz	9,f
 12776  05DA  2DD5               	goto	u164_25
 12777  05DB  3001               	movlw	1
 12778  05DC  00FC               	movwf	??___lldiv
 12779  05DD  087C               	movf	??___lldiv,w
 12780  05DE  07AC               	addwf	___lldiv@counter,f
 12781  05DF  2DD2               	goto	i1l3241
 12782  05E0                     i1l3243:	
 12783  05E0  3001               	movlw	1
 12784  05E1                     u166_25:	
 12785  05E1  35A8               	lslf	___lldiv@quotient,f
 12786  05E2  0DA9               	rlf	___lldiv@quotient+1,f
 12787  05E3  0DAA               	rlf	___lldiv@quotient+2,f
 12788  05E4  0DAB               	rlf	___lldiv@quotient+3,f
 12789  05E5  0B89               	decfsz	9,f
 12790  05E6  2DE1               	goto	u166_25
 12791  05E7  0823               	movf	___lldiv@divisor+3,w
 12792  05E8  0227               	subwf	___lldiv@dividend+3,w
 12793  05E9  1D03               	skipz
 12794  05EA  2DF5               	goto	u167_25
 12795  05EB  0822               	movf	___lldiv@divisor+2,w
 12796  05EC  0226               	subwf	___lldiv@dividend+2,w
 12797  05ED  1D03               	skipz
 12798  05EE  2DF5               	goto	u167_25
 12799  05EF  0821               	movf	___lldiv@divisor+1,w
 12800  05F0  0225               	subwf	___lldiv@dividend+1,w
 12801  05F1  1D03               	skipz
 12802  05F2  2DF5               	goto	u167_25
 12803  05F3  0820               	movf	___lldiv@divisor,w
 12804  05F4  0224               	subwf	___lldiv@dividend,w
 12805  05F5                     u167_25:	
 12806  05F5  1C03               	skipc
 12807  05F6  2E00               	goto	i1l3251
 12808  05F7  0820               	movf	___lldiv@divisor,w
 12809  05F8  02A4               	subwf	___lldiv@dividend,f
 12810  05F9  0821               	movf	___lldiv@divisor+1,w
 12811  05FA  3BA5               	subwfb	___lldiv@dividend+1,f
 12812  05FB  0822               	movf	___lldiv@divisor+2,w
 12813  05FC  3BA6               	subwfb	___lldiv@dividend+2,f
 12814  05FD  0823               	movf	___lldiv@divisor+3,w
 12815  05FE  3BA7               	subwfb	___lldiv@dividend+3,f
 12816  05FF  1428               	bsf	___lldiv@quotient,0
 12817  0600                     i1l3251:	
 12818  0600  3001               	movlw	1
 12819  0601                     u168_25:	
 12820  0601  36A3               	lsrf	___lldiv@divisor+3,f
 12821  0602  0CA2               	rrf	___lldiv@divisor+2,f
 12822  0603  0CA1               	rrf	___lldiv@divisor+1,f
 12823  0604  0CA0               	rrf	___lldiv@divisor,f
 12824  0605  0B89               	decfsz	9,f
 12825  0606  2E01               	goto	u168_25
 12826  0607  3001               	movlw	1
 12827  0608  02AC               	subwf	___lldiv@counter,f
 12828  0609  1D03               	btfss	3,2
 12829  060A  2DE0               	goto	i1l3243
 12830  060B                     i1l3255:	
 12831  060B  082B               	movf	___lldiv@quotient+3,w
 12832  060C  00A3               	movwf	?___lldiv+3
 12833  060D  082A               	movf	___lldiv@quotient+2,w
 12834  060E  00A2               	movwf	?___lldiv+2
 12835  060F  0829               	movf	___lldiv@quotient+1,w
 12836  0610  00A1               	movwf	?___lldiv+1
 12837  0611  0828               	movf	___lldiv@quotient,w
 12838  0612  00A0               	movwf	?___lldiv
 12839  0613  0008               	return
 12840  0614                     __end_of___lldiv:	
 12841                           
 12842                           	psect	text75
 12843  0F91                     __ptext75:	
 12844 ;; *************** function _NutRunCycleStop *****************
 12845 ;; Defined at:
 12846 ;;		line 500 in file "main.c"
 12847 ;; Parameters:    Size  Location     Type
 12848 ;;		None
 12849 ;; Auto vars:     Size  Location     Type
 12850 ;;		None
 12851 ;; Return value:  Size  Location     Type
 12852 ;;                  1    wreg      void 
 12853 ;; Registers used:
 12854 ;;		wreg, status,2, status,0, pclath, cstack
 12855 ;; Tracked objects:
 12856 ;;		On entry : 0/0
 12857 ;;		On exit  : 0/0
 12858 ;;		Unchanged: 0/0
 12859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12860 ;;      Params:         0       0       0       0       0       0       0       0
 12861 ;;      Locals:         0       0       0       0       0       0       0       0
 12862 ;;      Temps:          0       0       0       0       0       0       0       0
 12863 ;;      Totals:         0       0       0       0       0       0       0       0
 12864 ;;Total ram usage:        0 bytes
 12865 ;; Hardware stack levels used:    1
 12866 ;; Hardware stack levels required when called:    1
 12867 ;; This function calls:
 12868 ;;		i1_TMR3_StopTimer
 12869 ;;		i1_TMR3_WriteTimer
 12870 ;;		i1_TMR5_StopTimer
 12871 ;;		i1_TMR5_WriteTimer
 12872 ;; This function is called by:
 12873 ;;		_OnEncPulseEdgeEvent
 12874 ;; This function uses a non-reentrant model
 12875 ;;
 12876                           
 12877                           
 12878                           ;psect for function _NutRunCycleStop
 12879  0F91                     _NutRunCycleStop:	
 12880                           
 12881                           ;main.c: 502: TMR3_WriteTimer(0);
 12882                           
 12883                           ;incstack = 0
 12884                           ; Regs used in _NutRunCycleStop: [wreg+status,2+status,0+pclath+cstack]
 12885  0F91  3000               	movlw	0
 12886  0F92  00F0               	movwf	i1TMR3_WriteTimer@timerVal
 12887  0F93  00F1               	movwf	i1TMR3_WriteTimer@timerVal+1
 12888  0F94  318E  26C5  318F   	fcall	i1_TMR3_WriteTimer
 12889                           
 12890                           ;main.c: 503: TMR3_StopTimer();
 12891  0F97  318D  25A8  318F   	fcall	i1_TMR3_StopTimer
 12892                           
 12893                           ;main.c: 504: PIE3bits.TMR3IE = 0;
 12894  0F9A  0021               	movlb	1	; select bank1
 12895  0F9B  1213               	bcf	19,4	;volatile
 12896                           
 12897                           ;main.c: 505: TMR5_WriteTimer(0);
 12898  0F9C  3000               	movlw	0
 12899  0F9D  00F0               	movwf	i1TMR5_WriteTimer@timerVal
 12900  0F9E  00F1               	movwf	i1TMR5_WriteTimer@timerVal+1
 12901  0F9F  318E  26D4  318F   	fcall	i1_TMR5_WriteTimer
 12902                           
 12903                           ;main.c: 506: TMR5_StopTimer();
 12904  0FA2  318D  25AB         	fcall	i1_TMR5_StopTimer
 12905                           
 12906                           ;main.c: 507: PIE4bits.TMR5IE = 0;
 12907  0FA4  0021               	movlb	1	; select bank1
 12908  0FA5  1214               	bcf	20,4	;volatile
 12909  0FA6  0008               	return
 12910  0FA7                     __end_of_NutRunCycleStop:	
 12911                           
 12912                           	psect	text76
 12913  0ED4                     __ptext76:	
 12914 ;; *************** function i1_TMR5_WriteTimer *****************
 12915 ;; Defined at:
 12916 ;;		line 117 in file "mcc_generated_files/tmr5.c"
 12917 ;; Parameters:    Size  Location     Type
 12918 ;;  timerVal        2    0[COMMON] unsigned int 
 12919 ;; Auto vars:     Size  Location     Type
 12920 ;;		None
 12921 ;; Return value:  Size  Location     Type
 12922 ;;                  1    wreg      void 
 12923 ;; Registers used:
 12924 ;;		wreg, status,2
 12925 ;; Tracked objects:
 12926 ;;		On entry : 0/0
 12927 ;;		On exit  : 0/0
 12928 ;;		Unchanged: 0/0
 12929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12930 ;;      Params:         2       0       0       0       0       0       0       0
 12931 ;;      Locals:         0       0       0       0       0       0       0       0
 12932 ;;      Temps:          0       0       0       0       0       0       0       0
 12933 ;;      Totals:         2       0       0       0       0       0       0       0
 12934 ;;Total ram usage:        2 bytes
 12935 ;; Hardware stack levels used:    1
 12936 ;; This function calls:
 12937 ;;		Nothing
 12938 ;; This function is called by:
 12939 ;;		_NutRunCycleStop
 12940 ;; This function uses a non-reentrant model
 12941 ;;
 12942                           
 12943                           
 12944                           ;psect for function i1_TMR5_WriteTimer
 12945  0ED4                     i1_TMR5_WriteTimer:	
 12946                           
 12947                           ;tmr5.c: 119: if (T5CONbits.T5SYNC == 1)
 12948                           
 12949                           ;incstack = 0
 12950                           ; Regs used in i1_TMR5_WriteTimer: [wreg+status,2]
 12951  0ED4  0028               	movlb	8	; select bank8
 12952  0ED5  1D1A               	btfss	26,2	;volatile
 12953  0ED6  2EDE               	goto	i1l3179
 12954                           
 12955                           ;tmr5.c: 120: {
 12956                           ;tmr5.c: 122: T5CONbits.TMR5ON = 0;
 12957  0ED7  101A               	bcf	26,0	;volatile
 12958                           
 12959                           ;tmr5.c: 125: TMR5H = (timerVal >> 8);
 12960  0ED8  0871               	movf	i1TMR5_WriteTimer@timerVal+1,w
 12961  0ED9  0099               	movwf	25	;volatile
 12962                           
 12963                           ;tmr5.c: 126: TMR5L = timerVal;
 12964  0EDA  0870               	movf	i1TMR5_WriteTimer@timerVal,w
 12965  0EDB  0098               	movwf	24	;volatile
 12966                           
 12967                           ;tmr5.c: 129: T5CONbits.TMR5ON =1;
 12968  0EDC  141A               	bsf	26,0	;volatile
 12969                           
 12970                           ;tmr5.c: 130: }
 12971  0EDD  0008               	return
 12972  0EDE                     i1l3179:	
 12973                           
 12974                           ;tmr5.c: 131: else
 12975                           ;tmr5.c: 132: {
 12976                           ;tmr5.c: 134: TMR5H = (timerVal >> 8);
 12977  0EDE  0871               	movf	i1TMR5_WriteTimer@timerVal+1,w
 12978  0EDF  0099               	movwf	25	;volatile
 12979                           
 12980                           ;tmr5.c: 135: TMR5L = timerVal;
 12981  0EE0  0870               	movf	i1TMR5_WriteTimer@timerVal,w
 12982  0EE1  0098               	movwf	24	;volatile
 12983  0EE2  0008               	return
 12984  0EE3                     __end_ofi1_TMR5_WriteTimer:	
 12985                           
 12986                           	psect	text77
 12987  0DAB                     __ptext77:	
 12988 ;; *************** function i1_TMR5_StopTimer *****************
 12989 ;; Defined at:
 12990 ;;		line 102 in file "mcc_generated_files/tmr5.c"
 12991 ;; Parameters:    Size  Location     Type
 12992 ;;		None
 12993 ;; Auto vars:     Size  Location     Type
 12994 ;;		None
 12995 ;; Return value:  Size  Location     Type
 12996 ;;                  1    wreg      void 
 12997 ;; Registers used:
 12998 ;;		None
 12999 ;; Tracked objects:
 13000 ;;		On entry : 0/0
 13001 ;;		On exit  : 0/0
 13002 ;;		Unchanged: 0/0
 13003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13004 ;;      Params:         0       0       0       0       0       0       0       0
 13005 ;;      Locals:         0       0       0       0       0       0       0       0
 13006 ;;      Temps:          0       0       0       0       0       0       0       0
 13007 ;;      Totals:         0       0       0       0       0       0       0       0
 13008 ;;Total ram usage:        0 bytes
 13009 ;; Hardware stack levels used:    1
 13010 ;; This function calls:
 13011 ;;		Nothing
 13012 ;; This function is called by:
 13013 ;;		_NutRunCycleStop
 13014 ;; This function uses a non-reentrant model
 13015 ;;
 13016                           
 13017                           
 13018                           ;psect for function i1_TMR5_StopTimer
 13019  0DAB                     i1_TMR5_StopTimer:	
 13020                           
 13021                           ;tmr5.c: 105: T5CONbits.TMR5ON = 0;
 13022                           
 13023                           ;incstack = 0
 13024                           ; Regs used in i1_TMR5_StopTimer: []
 13025  0DAB  0028               	movlb	8	; select bank8
 13026  0DAC  101A               	bcf	26,0	;volatile
 13027  0DAD  0008               	return
 13028  0DAE                     __end_ofi1_TMR5_StopTimer:	
 13029                           
 13030                           	psect	text78
 13031  0EC5                     __ptext78:	
 13032 ;; *************** function i1_TMR3_WriteTimer *****************
 13033 ;; Defined at:
 13034 ;;		line 117 in file "mcc_generated_files/tmr3.c"
 13035 ;; Parameters:    Size  Location     Type
 13036 ;;  timerVal        2    0[COMMON] unsigned int 
 13037 ;; Auto vars:     Size  Location     Type
 13038 ;;		None
 13039 ;; Return value:  Size  Location     Type
 13040 ;;                  1    wreg      void 
 13041 ;; Registers used:
 13042 ;;		wreg, status,2
 13043 ;; Tracked objects:
 13044 ;;		On entry : 0/0
 13045 ;;		On exit  : 0/0
 13046 ;;		Unchanged: 0/0
 13047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13048 ;;      Params:         2       0       0       0       0       0       0       0
 13049 ;;      Locals:         0       0       0       0       0       0       0       0
 13050 ;;      Temps:          0       0       0       0       0       0       0       0
 13051 ;;      Totals:         2       0       0       0       0       0       0       0
 13052 ;;Total ram usage:        2 bytes
 13053 ;; Hardware stack levels used:    1
 13054 ;; This function calls:
 13055 ;;		Nothing
 13056 ;; This function is called by:
 13057 ;;		_OnEncPulseEdgeEvent
 13058 ;;		_NutRunCycleStop
 13059 ;;		i1_NutRunCycleStart
 13060 ;; This function uses a non-reentrant model
 13061 ;;
 13062                           
 13063                           
 13064                           ;psect for function i1_TMR3_WriteTimer
 13065  0EC5                     i1_TMR3_WriteTimer:	
 13066                           
 13067                           ;tmr3.c: 119: if (T3CONbits.T3SYNC == 1)
 13068                           
 13069                           ;incstack = 0
 13070                           ; Regs used in i1_TMR3_WriteTimer: [wreg+status,2]
 13071  0EC5  0028               	movlb	8	; select bank8
 13072  0EC6  1D13               	btfss	19,2	;volatile
 13073  0EC7  2ECF               	goto	i1l3197
 13074                           
 13075                           ;tmr3.c: 120: {
 13076                           ;tmr3.c: 122: T3CONbits.TMR3ON = 0;
 13077  0EC8  1013               	bcf	19,0	;volatile
 13078                           
 13079                           ;tmr3.c: 125: TMR3H = (timerVal >> 8);
 13080  0EC9  0871               	movf	i1TMR3_WriteTimer@timerVal+1,w
 13081  0ECA  0092               	movwf	18	;volatile
 13082                           
 13083                           ;tmr3.c: 126: TMR3L = timerVal;
 13084  0ECB  0870               	movf	i1TMR3_WriteTimer@timerVal,w
 13085  0ECC  0091               	movwf	17	;volatile
 13086                           
 13087                           ;tmr3.c: 129: T3CONbits.TMR3ON =1;
 13088  0ECD  1413               	bsf	19,0	;volatile
 13089                           
 13090                           ;tmr3.c: 130: }
 13091  0ECE  0008               	return
 13092  0ECF                     i1l3197:	
 13093                           
 13094                           ;tmr3.c: 131: else
 13095                           ;tmr3.c: 132: {
 13096                           ;tmr3.c: 134: TMR3H = (timerVal >> 8);
 13097  0ECF  0871               	movf	i1TMR3_WriteTimer@timerVal+1,w
 13098  0ED0  0092               	movwf	18	;volatile
 13099                           
 13100                           ;tmr3.c: 135: TMR3L = timerVal;
 13101  0ED1  0870               	movf	i1TMR3_WriteTimer@timerVal,w
 13102  0ED2  0091               	movwf	17	;volatile
 13103  0ED3  0008               	return
 13104  0ED4                     __end_ofi1_TMR3_WriteTimer:	
 13105                           
 13106                           	psect	text79
 13107  0DA8                     __ptext79:	
 13108 ;; *************** function i1_TMR3_StopTimer *****************
 13109 ;; Defined at:
 13110 ;;		line 102 in file "mcc_generated_files/tmr3.c"
 13111 ;; Parameters:    Size  Location     Type
 13112 ;;		None
 13113 ;; Auto vars:     Size  Location     Type
 13114 ;;		None
 13115 ;; Return value:  Size  Location     Type
 13116 ;;                  1    wreg      void 
 13117 ;; Registers used:
 13118 ;;		None
 13119 ;; Tracked objects:
 13120 ;;		On entry : 0/0
 13121 ;;		On exit  : 0/0
 13122 ;;		Unchanged: 0/0
 13123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13124 ;;      Params:         0       0       0       0       0       0       0       0
 13125 ;;      Locals:         0       0       0       0       0       0       0       0
 13126 ;;      Temps:          0       0       0       0       0       0       0       0
 13127 ;;      Totals:         0       0       0       0       0       0       0       0
 13128 ;;Total ram usage:        0 bytes
 13129 ;; Hardware stack levels used:    1
 13130 ;; This function calls:
 13131 ;;		Nothing
 13132 ;; This function is called by:
 13133 ;;		_NutRunCycleStop
 13134 ;; This function uses a non-reentrant model
 13135 ;;
 13136                           
 13137                           
 13138                           ;psect for function i1_TMR3_StopTimer
 13139  0DA8                     i1_TMR3_StopTimer:	
 13140                           
 13141                           ;tmr3.c: 105: T3CONbits.TMR3ON = 0;
 13142                           
 13143                           ;incstack = 0
 13144                           ; Regs used in i1_TMR3_StopTimer: []
 13145  0DA8  0028               	movlb	8	; select bank8
 13146  0DA9  1013               	bcf	19,0	;volatile
 13147  0DAA  0008               	return
 13148  0DAB                     __end_ofi1_TMR3_StopTimer:	
 13149  007E                     btemp	set	126	;btemp
 13150  007E                     int$flags	set	126
 13151  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        11
    BSS         75
    Persistent  16
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      63
    BANK1            80     11      80
    BANK2            80      6       6
    BANK3             0      0       0
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    rxBuffer	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    txBuffer	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    INT_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    postTransmission@postTransmission	PTR FTN()void  size(2) Largest target is 1
		 -> postTransmission_App(), 

    preTransmission@preTransmission	PTR FTN()void  size(2) Largest target is 1
		 -> preTransmission_App(), 

    _postTransmission	PTR FTN()void  size(2) Largest target is 1
		 -> postTransmission_App(), Absolute function(), 

    _preTransmission	PTR FTN()void  size(2) Largest target is 1
		 -> preTransmission_App(), Absolute function(), 

    IOCCF5_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> IOCCF5_DefaultInterruptHandler(), 

    IOCCF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF5_DefaultInterruptHandler(), Absolute function(), 

    IOCCF4_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> IOCCF4_DefaultInterruptHandler(), 

    IOCCF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF4_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR3_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), 

    TMR3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), Absolute function(), 

    TMR5_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR5_DefaultInterruptHandler(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR5_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_CCP1_CaptureISR
    _TMR3_DefaultInterruptHandler->_Timer3_Overflow
    _TMR0_CallBack->_Timer0_tick10msecFunc
    _EncINX_PulseRisingEvent->i1_EUSART_Write
    _OnEncPulseEdgeEvent->___lldiv
    i1_NutRunCycleStart->i1_TMR3_WriteTimer
    ___lldiv->___lmul
    _NutRunCycleStop->i1_TMR3_WriteTimer
    _NutRunCycleStop->i1_TMR5_WriteTimer

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_CCP1_CaptureISR
    _CCP1_CaptureISR->_CCP1_CallBack
    _CCP1_CallBack->_EncA_PulseEdgeEvent
    _EncA_PulseEdgeEvent->_OnEncPulseEdgeEvent
    _OnEncPulseEdgeEvent->___lldiv

Critical Paths under _main in BANK1

    _main->_LedONStartConfig
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _TMR5_Initialize->_TMR5_SetInterruptHandler
    _TMR3_Initialize->_TMR3_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF5_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _NutRunCycleStart->_TMR3_WriteTimer
    _ModbusMasterSetup->_ModbusMasterInit
    _ModbusMasterSetup->_postTransmission
    _ModbusMasterSetup->_preTransmission
    _EPC_StateMachineControlLoop->_LedONStartConfig
    _valuetocharLowNibble->_valtoasciichar
    _valuetocharHighNibble->_valtoasciichar
    _LedONStartConfig->___lwdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_EPC_StateMachineControlLoop
    _EPC_StateMachineControlLoop->_LedONStartConfig

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5325
        _EPC_StateMachineControlLoop
                   _LedONStartConfig
                    _LedONStatusBusy
                  _ModbusMasterSetup
                   _NutRunCycleStart
                  _SYSTEM_Initialize
                     _TMR3_StopTimer
                    _TMR3_WriteTimer
                     _TMR5_StopTimer
                    _TMR5_WriteTimer
                    _getEncoderState
 ---------------------------------------------------------------------------------
 (1) _getEncoderState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR5_WriteTimer                                      2     0      2     243
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _TMR5_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR3_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     682
                     _ADC_Initialize
                    _CCP1_Initialize
                    _CCP2_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR3_Initialize
                    _TMR5_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0     108
           _TMR5_SetInterruptHandler
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR5_SetInterruptHandler                             2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0     108
           _TMR3_SetInterruptHandler
                    _TMR3_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR3_SetInterruptHandler                             2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     108
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0     250
                                              2 BANK1      1     1      0
         _IOCCF4_SetInterruptHandler
         _IOCCF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF5_SetInterruptHandler                           2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCCF4_SetInterruptHandler                           2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     108
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CCP2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NutRunCycleStart                                     0     0      0     362
                   _NutRunCycleReset
                    _TMR3_StartTimer
                    _TMR3_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR3_WriteTimer                                      2     0      2     362
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR3_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _NutRunCycleReset                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ModbusMasterSetup                                    0     0      0     247
                  _EUSART_Initialize
                   _ModbusMasterInit
                   _postTransmission
                    _preTransmission
 ---------------------------------------------------------------------------------
 (2) _preTransmission                                      2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _postTransmission                                     2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ModbusMasterInit                                     2     2      0      31
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LedONStatusBusy                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EPC_StateMachineControlLoop                          4     4      0    1942
                                              2 BANK2      4     4      0
                       _EUSART_Write
                   _LedONStartConfig
              _valuetocharHighNibble
               _valuetocharLowNibble
 ---------------------------------------------------------------------------------
 (2) _valuetocharLowNibble                                 3     3      0     212
                                              3 BANK1      3     3      0
                     _valtoasciichar
 ---------------------------------------------------------------------------------
 (2) _valuetocharHighNibble                                4     4      0     212
                                              3 BANK1      4     4      0
                     _valtoasciichar
 ---------------------------------------------------------------------------------
 (3) _valtoasciichar                                       3     3      0     113
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LedONStartConfig                                     5     3      2    1487
                                              8 BANK1      3     1      2
                                              0 BANK2      2     2      0
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     395
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0    1599
                                             29 BANK0      1     1      0
                    _CCP1_CaptureISR
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR3_ISR
                           _TMR5_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR5_ISR                                             0     0      0       0
                   Absolute function *
       _TMR5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR5_DefaultInterruptHandler                         0     0      0       0
                    _Timer5_Overflow
 ---------------------------------------------------------------------------------
 (7) _Timer5_Overflow                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _TMR3_ISR                                             0     0      0       0
                   Absolute function *
       _TMR3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR3_DefaultInterruptHandler                         0     0      0       0
                    _Timer3_Overflow
 ---------------------------------------------------------------------------------
 (7) _Timer3_Overflow                                      4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
              _Timer0_tick10msecFunc
 ---------------------------------------------------------------------------------
 (7) _Timer0_tick10msecFunc                                4     4      0       0
                                              0 COMMON     4     4      0
               _LedON_Control_10msec
 ---------------------------------------------------------------------------------
 (8) _LedON_Control_10msec                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCCF4_ISR
                         _IOCCF5_ISR
 ---------------------------------------------------------------------------------
 (6) _IOCCF5_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCCF5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IOCCF4_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCCF4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT_ISR                                              0     0      0      22
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (6) _INT_CallBack                                         0     0      0      22
                   Absolute function *
            _EncINX_PulseRisingEvent
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _INT_DefaultInterruptHandler                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EncINX_PulseRisingEvent                              0     0      0      22
                     i1_EUSART_Write
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CCP1_CaptureISR                                      3     3      0    1577
                                             13 COMMON     1     1      0
                                             27 BANK0      2     2      0
                      _CCP1_CallBack
 ---------------------------------------------------------------------------------
 (6) _CCP1_CallBack                                        2     0      2    1530
                                             25 BANK0      2     0      2
                _EncA_PulseEdgeEvent
 ---------------------------------------------------------------------------------
 (7) _EncA_PulseEdgeEvent                                  2     0      2    1444
                                             23 BANK0      2     0      2
                _OnEncPulseEdgeEvent
 ---------------------------------------------------------------------------------
 (8) _OnEncPulseEdgeEvent                                 10     8      2    1358
                                             13 BANK0     10     8      2
                    _NutRunCycleStop
                            ___lldiv
                             ___lmul
                             _millis
                     i1_EUSART_Write
                 i1_NutRunCycleStart
                  i1_TMR3_StartTimer
                  i1_TMR3_WriteTimer
                  i1_getEncoderState
 ---------------------------------------------------------------------------------
 (9) i1_getEncoderState                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i1_NutRunCycleStart                                   0     0      0     166
                 i1_NutRunCycleReset
                  i1_TMR3_StartTimer
                  i1_TMR3_WriteTimer
 ---------------------------------------------------------------------------------
 (9) i1_TMR3_StartTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_NutRunCycleReset                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_EUSART_Write                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _millis                                               4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) ___lldiv                                             14     6      8     418
                                             12 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (9) _NutRunCycleStop                                      0     0      0     280
                   i1_TMR3_StopTimer
                  i1_TMR3_WriteTimer
                   i1_TMR5_StopTimer
                  i1_TMR5_WriteTimer
 ---------------------------------------------------------------------------------
 (10) i1_TMR5_WriteTimer                                   2     0      2     114
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) i1_TMR5_StopTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i1_TMR3_WriteTimer                                    2     0      2     166
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) i1_TMR3_StopTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPC_StateMachineControlLoop
     _EUSART_Write
     _LedONStartConfig
       ___lwdiv
       ___wmul
     _valuetocharHighNibble
       _valtoasciichar
     _valuetocharLowNibble
       _valtoasciichar
   _LedONStartConfig
     ___lwdiv
     ___wmul
   _LedONStatusBusy
   _ModbusMasterSetup
     _EUSART_Initialize
     _ModbusMasterInit
     _postTransmission
     _preTransmission
   _NutRunCycleStart
     _NutRunCycleReset
     _TMR3_StartTimer
     _TMR3_WriteTimer
   _SYSTEM_Initialize
     _ADC_Initialize
     _CCP1_Initialize
     _CCP2_Initialize
     _EUSART_Initialize
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCCF4_SetInterruptHandler
       _IOCCF5_SetInterruptHandler
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR3_Initialize
       _TMR3_SetInterruptHandler
       _TMR3_StartTimer
     _TMR5_Initialize
       _TMR5_SetInterruptHandler
       _TMR5_StartTimer
     _WDT_Initialize
   _TMR3_StopTimer
   _TMR3_WriteTimer
   _TMR5_StopTimer
   _TMR5_WriteTimer
   _getEncoderState

 _INTERRUPT_InterruptManager (ROOT)
   _CCP1_CaptureISR
     _CCP1_CallBack
       _EncA_PulseEdgeEvent
         _OnEncPulseEdgeEvent
           _NutRunCycleStop
             i1_TMR3_StopTimer
             i1_TMR3_WriteTimer
             i1_TMR5_StopTimer
             i1_TMR5_WriteTimer
           ___lldiv
             ___lmul (ARG)
           ___lmul
           _millis
           i1_EUSART_Write
           i1_NutRunCycleStart
             i1_NutRunCycleReset
             i1_TMR3_StartTimer
             i1_TMR3_WriteTimer
           i1_TMR3_StartTimer
           i1_TMR3_WriteTimer
           i1_getEncoderState
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _EncINX_PulseRisingEvent *
         i1_EUSART_Write
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
     _IOCCF4_ISR
       Absolute function(Fake) *
       _IOCCF4_DefaultInterruptHandler *
     _IOCCF5_ISR
       Absolute function(Fake) *
       _IOCCF5_DefaultInterruptHandler *
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _Timer0_tick10msecFunc *
         _LedON_Control_10msec
   _TMR3_ISR
     Absolute function(Fake) *
     _TMR3_DefaultInterruptHandler *
       _Timer3_Overflow
   _TMR5_ISR
     Absolute function(Fake) *
     _TMR5_DefaultInterruptHandler *
       _Timer5_Overflow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      A3       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1E      3F       6       78.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      B      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      6       6      10        7.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK3                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      A3      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Mar 28 21:03:37 2017

                          ??i1_EUSART_Write 0070                            __u16WriteAddress 00BE  
          __end_of_TMR5_SetInterruptHandler 0E0C                                           pc 0002  
    __end_of_IOCCF4_DefaultInterruptHandler 0DA7     __size_of_IOCCF4_DefaultInterruptHandler 0001  
            _IOCCF4_DefaultInterruptHandler 0DA6                                 __CFG_CP$OFF 0000  
                       ___wmul@multiplicand 00E1                 __size_ofi1_NutRunCycleReset 0016  
                         ??_TMR5_WriteTimer 00E1                 __size_ofi1_NutRunCycleStart 000E  
                   __end_of_CCP1_Initialize 0F10                    __size_of_Timer5_Overflow 0001  
                               __CFG_LVP$ON 0000                          __u16ResponseBuffer 20F0  
                                       l159 0E48                                         _GIE 005F  
                              __CFG_CPD$OFF 0000               LedONStartConfig@LedONNumBlink 00E8  
                 __size_of_LedONStartConfig 0070                                         wreg 0009  
                                      S5413 0750              preTransmission@preTransmission 00DF  
                                      l1132 043B                                        l1136 043E  
                                      l1139 0441                             _timer3ReloadVal 005B  
                                      l1285 0779                                        l5201 02E7  
                __size_ofi1_TMR5_WriteTimer 000F                                        l5161 07E7  
                                      l4603 0773                                        l5323 0546  
                                      l5261 041C                                        l5191 02C9  
                                      l5175 0F19                                        l5327 0555  
                                      l5319 0537                                        l4633 0671  
                                      l4625 0653                                        l4561 0621  
                                      l5329 055D                                        l4627 065F  
                                      l4571 062B                                        l4563 0623  
                                      l4555 061B                                        l5195 02D8  
                                      l4637 067A                                        l4581 0635  
                                      l4573 062D                                        l4565 0625  
                                      l4557 061D                                        l4583 0637  
                                      l4575 062F                                        l4567 0627  
                                      l4559 061F                                        l4591 0648  
                                      l4825 0444                                        l4585 0639  
                                      l4577 0631                                        l4569 0629  
                                      l4835 0489                                        l4827 0450  
                                      l4579 0633                                        l4589 063E  
                                      l4687 0FF7                                        _LATA 010C  
                                      _LATB 010D                             __end_of_INT_ISR 0DD2  
                                      _LATC 010E                                        u3105 066A  
                                      u3115 0672                                        u3035 077A  
                                      u3045 077F                                        u3150 05BF  
                                      u3215 0FC2                                        u3075 0656  
                                      u3095 0660                                        u3605 037F  
                                      u3615 039D                                        u3625 03BB  
                                      u3635 03D9                                        u3645 03F7  
                                      u3595 0361                                        _WPUA 020C  
                                      _WPUB 020D                                        _WPUC 020E  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                   __end_of_CCP2_Initialize 0E3C                                        _main 04FF  
                           _TMR0_StartTimer 0DBD                                        fsr0h 0005  
                                      indf0 0000                                        fsr0l 0004  
                                      btemp 007E            ??_IOCCF5_DefaultInterruptHandler 0070  
           ?_IOCCF5_DefaultInterruptHandler 0070                               __CFG_BOREN$ON 0000  
       __end_of_INT_DefaultInterruptHandler 0DA6                 _INT_DefaultInterruptHandler 0DA5  
             ??_EPC_StateMachineControlLoop 0122                          _MBreadNoOfPulseCnt 00EE  
                             __CFG_BORV$LOW 0000                                        start 004E  
                           _timer5ReloadVal 005D                     _EncEdgeMinTimeIntSumAvg 00A8  
                           _TMR3_Initialize 07A6             __end_of_INT_SetInterruptHandler 0DEE  
                             __CFG_CSWEN$ON 0000                               __CFG_MCLRE$ON 0000  
                          ?_CCP1_CaptureISR 0070                            ?_getEncoderState 0070  
                   __end_of_TMR0_Initialize 0F7C              ??_TMR0_DefaultInterruptHandler 0070  
                             ?_EUSART_Write 0070              __size_of_OSCILLATOR_Initialize 0008  
             __end_of_OSCILLATOR_Initialize 0E2A                            ??_valtoasciichar 00DF  
                       __size_of_IOCCF4_ISR 000D                         __size_of_IOCCF5_ISR 000D  
                                     _ADACT 009F                                       ?_main 0070  
                             __CFG_WDTE$OFF 0000                             __end_of___lldiv 0614  
                                     _T3CON 0413                                       _T5CON 041A  
                            __CFG_DEBUG$OFF 0000                             __end_of___lwdiv 067F  
                                     i1l430 0013                                       i1l159 0E13  
                                     i1l432 001D                                       i1l434 0029  
                                     i1l442 0049                                       i1l436 0035  
                                     i1l438 0041                                       i1l642 00D3  
                    _flagForFirstRevolution 0051                                       _OSCEN 091D  
                                     _TMR0H 0016                                       _TMR0L 0015  
                                     _TMR3H 0412                                       _TMR5H 0419  
                                     _TMR3L 0411                                       _TMR5L 0418  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E                      __size_of_CCP1_CallBack 0008  
         __size_of_TMR0_SetInterruptHandler 0006           __size_of_TMR3_SetInterruptHandler 0006  
                       ___lmul@multiplicand 0074                   ?_TMR0_SetInterruptHandler 00DF  
                 ?_TMR3_SetInterruptHandler 00DF                            __end_of_TMR0_ISR 0DD7  
                          __end_of_TMR3_ISR 0F54                            __end_of_TMR5_ISR 0F68  
                    ?_Timer0_tick10msecFunc 0070              ??_TMR3_DefaultInterruptHandler 0074  
                   __end_of_PIN_MANAGER_IOC 0E5C                              _WDT_Initialize 0DC9  
                                     pclath 000A                   __size_of_ModbusMasterInit 0010  
              __end_of_valuetocharLowNibble 0F2F                    __end_ofi1_TMR3_StopTimer 0DAB  
                         ?_postTransmission 00DF                         _OnEncPulseEdgeEvent 0093  
                                     status 0003                                       wtemp0 007E  
                           _LedONStatusBusy 0DB7                          ??_postTransmission 00E1  
                           _TMR5_Initialize 078C                             __initialization 0050  
                              __end_of_main 0561                              ??_EUSART_Write 00DF  
               ?_INTERRUPT_InterruptManager 0070              __size_of_valuetocharHighNibble 0016  
                  __end_ofi1_TMR5_StopTimer 0DAE               __end_of_valuetocharHighNibble 0FD3  
                      ?_OnEncPulseEdgeEvent 002D        __size_of_EPC_StateMachineControlLoop 0161  
                         ??_Timer3_Overflow 0070                                      ??_main 00EA  
                          ?_CCP1_Initialize 0070                    _TMR5_SetInterruptHandler 0E06  
                           _TMR3_StartTimer 0DBA                       _TMR3_InterruptHandler 00DB  
                    __end_of_WDT_Initialize 0DCD                                   ??_INT_ISR 0071  
                         ??_Timer5_Overflow 0070                     __end_of_TMR0_StartTimer 0DC0  
                                    _ADCON0 009D                                      _ADCON1 009E  
                                    _ADRESH 009C                                      _ADRESL 009B  
                                    _CCPR1H 0292                                      _CCPR2H 0296  
                                    _CCPR1L 0291                                      _CCPR2L 0295  
             valuetocharHighNibble@hexvalue 00E4                ??_IOCCF4_SetInterruptHandler 00E1  
                                    _ANSELA 018C                                      _ANSELB 018D  
                                    _ANSELC 018E                          __CFG_RSTOSC$HFINT1 0000  
                                    _T0CON0 0017                                      _T0CON1 0018  
                                    _T3GCON 0414                                      _T5GCON 041B  
                                    _RC1REG 0199                                      _RC1STA 019D  
                                    i1l1172 04E6                                      i1l1165 04E0  
                                    i1l1169 04E3                                      _ODCONA 028C  
                                    _ODCONB 028D                                      _ODCONC 028E  
                                    i1l3301 011B                                      i1l3223 06BC  
                                    i1l3303 0122                                      i1l3241 05D2  
                                    i1l3305 0122                                      i1l3321 0198  
                                    i1l3401 04F5                                      i1l3251 0600  
                                    i1l3243 05E0                                      i1l3227 06C6  
                                    i1l3315 018D                                      i1l3307 0122  
                                    i1l3323 01AB                                      i1l3403 04FA  
                                    i1l3341 0235                                      i1l3309 0133  
                                    i1l3255 060B                                      i1l3351 025E  
                                    i1l3327 01F4                                      i1l3273 0EEC  
                                    i1l3345 024A                                      i1l3329 01FC  
                                    i1l3179 0EDE                                      i1l3339 0231  
                                    i1l3363 0286                     __end_of_TMR3_Initialize 07C0  
                                    i1l3197 0ECF                                      i1l3349 024C  
                                    i1l3285 00DB                                      i1l3365 0295  
                                    i1l3461 0695                                      i1l4181 0E56  
                                    i1l3381 04A0                                      i1l3279 00BC  
                                    i1l3383 04AC                                      i1l3391 04D0  
                                    i1l3297 0105                                      i1l3473 06AC  
                                    i1l3385 04B8                                      i1l3393 04D7  
                                    i1l3475 06AF                                      i1l3469 06A1  
                                    i1l3389 04C4                                      i1l3743 0E8B  
                                    i1l3399 04E9                                      i1l3737 0E7E  
                                    _INLVLA 038C                                      _INLVLC 038E  
                                    u160_25 06C7                                      u161_25 06CE  
                                    u164_25 05D5                                      u180_25 0270  
                                    u172_25 00C5                                      u173_25 00D1  
                                    u166_25 05E1                                      u182_25 049D  
                                    u183_20 04A9                                      u167_25 05F5  
                                    u175_25 0114                                      u168_25 0601  
                                    u176_25 0162                                      u185_20 04B5  
                                    u177_25 01ED                                      u178_25 021B  
                                    u187_20 04C1                                      u189_25 04DD  
                                    _OSCFRQ 091F                                      _TX1REG 019A  
                                    _WDTCON 0097                                      _TX1STA 019E  
                          ?_CCP2_Initialize 0070                                  __u8MBSlave 004C  
                           _TMR3_WriteTimer 0FE9                                      _Led_ON 0048  
                             _CCP1_CallBack 0E1A                              __CFG_PWRTE$OFF 0000  
                                    ___lmul 06B4                                      ___wmul 0770  
                            __CFG_STVREN$ON 0000                                   ??___lldiv 007C  
                                 ??___lwdiv 00E3                    __size_of_preTransmission 0006  
                  ?_EncINX_PulseRisingEvent 0070                       ModbusMasterInit@slave 00E0  
                          ?_TMR0_Initialize 0070                                      _millis 0E3C  
                     ??_OnEncPulseEdgeEvent 002F                               ?_INT_CallBack 0070  
       __size_of_IOCCF4_SetInterruptHandler 0006                             __u16ReadAddress 00C2  
                           _TMR5_StartTimer 0DC0                            _LedONStartConfig 0422  
                           ?_WDT_Initialize 0070                       __end_of_TMR0_CallBack 0EC5  
          __size_of_INT_SetInterruptHandler 0006     INT_SetInterruptHandler@InterruptHandler 00DF  
IOCCF5_SetInterruptHandler@InterruptHandler 00DF  IOCCF4_SetInterruptHandler@InterruptHandler 00DF  
  TMR0_SetInterruptHandler@InterruptHandler 00DF    TMR3_SetInterruptHandler@InterruptHandler 00DF  
  TMR5_SetInterruptHandler@InterruptHandler 00DF                            ?_PIN_MANAGER_IOC 0070  
               __end_of_EncA_PulseEdgeEvent 0F40                     __end_of_LedONStatusBusy 0DBA  
                           _EncPulseOpState 00CE                                ??_IOCCF4_ISR 0070  
                              ??_IOCCF5_ISR 0070                     __end_of_TMR5_Initialize 07A6  
                         _SYSTEM_Initialize 072F                   __size_of_NutRunCycleReset 0016  
                   __end_of__initialization 008F                   __size_of_NutRunCycleStart 000F  
                            ?_CCP1_CallBack 0039                          ?_SYSTEM_Initialize 0070  
              __end_of_LedON_Control_10msec 04FF                             _TMR5_WriteTimer 07D9  
                            __pcstackCOMMON 0070                      __u8ResponseBufferIndex 004A  
                              __pidataBANK0 0DD7                                __pidataBANK1 0E0C  
                       ??_SYSTEM_Initialize 00E2                     __end_of_TMR3_StartTimer 0DBD  
                                 ?_TMR0_ISR 0070                                   ?_TMR3_ISR 0070  
                                 ?_TMR5_ISR 0070                              ??_INT_CallBack 0071  
                      _valuetocharLowNibble 0F1F                          __end_of_IOCCF4_ISR 0E81  
                        __end_of_IOCCF5_ISR 0E8E                 __size_of_EXT_INT_Initialize 000D  
                        _multipleTimecheck0 0054                          _multipleTimecheck1 0053  
                     _MBreadPulseTimeoutSec 00EC                      __u8TransmitBufferIndex 004B  
                          ?_TMR0_StartTimer 0070                   __end_of_SYSTEM_Initialize 0750  
                    _EncoderPositionAtIndex 00C6                     __end_of_TMR3_WriteTimer 1000  
                                __pbssBANK0 003E                                  __pbssBANK1 00A0  
                          _ModbusMasterInit 07F0                        __end_of_EUSART_Write 0E50  
                          ?_TMR3_Initialize 0070                                  _delayCount 00C4  
                               __u16ReadQty 00C0             __end_of_EncINX_PulseRisingEvent 06B4  
                  __size_of_NutRunCycleStop 0016                                  __pmaintext 04FF  
           OnEncPulseEdgeEvent@capturevalue 002D            __end_of_TMR0_SetInterruptHandler 0E00  
                                   ?___lmul 0070            __end_of_TMR3_SetInterruptHandler 0E06  
                                   ?___wmul 00DF                  __end_ofi1_NutRunCycleReset 0FBD  
                                ??_TMR0_ISR 0074                     __end_of_TMR5_StartTimer 0DC3  
                           __CFG_PPS1WAY$ON 0000                                  ??_TMR3_ISR 0074  
                __end_ofi1_NutRunCycleStart 0EA9                                  ??_TMR5_ISR 0070  
                                __pintentry 0004                                     _CCP1CAP 0294  
                                   _CCP2CAP 0298                                     _CCP1CON 0293  
                                   _CCP2CON 0297                              ___lmul@product 0078  
                                   ?_millis 0070                       ?_valuetocharLowNibble 0070  
    __end_of_IOCCF5_DefaultInterruptHandler 0DA8     __size_of_IOCCF5_DefaultInterruptHandler 0001  
            _IOCCF5_DefaultInterruptHandler 0DA7                     __size_of_ADC_Initialize 0009  
                   ??_Timer0_tick10msecFunc 0070                           ??_preTransmission 00E1  
                                   _SP1BRGH 019C                                     _SP1BRGL 019B  
                                   _INT_ISR 0DCD                                     _OSCCON1 0919  
                                   _OSCCON3 091B                                     _OSCTUNE 091E  
        __end_of_IOCCF4_SetInterruptHandler 0DF4                  _IOCCF4_SetInterruptHandler 0DEE  
                                   _PPSLOCK 0E0F                            ?_LedONStatusBusy 0070  
                   __end_of_TMR5_WriteTimer 07F0                             ??_CCP1_CallBack 007D  
                          ?_TMR5_Initialize 0070                           ?i1_TMR3_StopTimer 0070  
                       _Blick_tickPointMsec 00B4                     __size_of_TMR3_StopTimer 0003  
                        ??i1_TMR3_StopTimer 0070                             _Timer3_Overflow 06E3  
                ??_TMR5_SetInterruptHandler 00E1                             __size_of___lmul 002F  
                          ?_TMR3_StartTimer 0070                                     ___lldiv 05C1  
                           __size_of___wmul 001C                                     ___lwdiv 064A  
                           _Timer5_Overflow 0003                   __size_of_postTransmission 0006  
                         i1_getEncoderState 0EE3                             __size_of_millis 000A  
                                   __ptext1 0F10                                     __ptext2 07D9  
                                   __ptext3 0DC6                                     __ptext4 0DC3  
                                   __ptext5 072F                                     __ptext6 0DC9  
                                   __ptext7 078C                                     __ptext8 0DC0  
                                   __ptext9 0E06                           ?i1_TMR5_StopTimer 0070  
                  __size_of_CCP1_CaptureISR 0015                     __size_of_TMR5_StopTimer 0003  
                        ?i1_getEncoderState 0070                       _OSCILLATOR_Initialize 0E22  
                   __size_ofi1_EUSART_Write 0008                          ??i1_TMR5_StopTimer 0070  
                      _LedON_Control_10msec 0492                                   _T3CONbits 0413  
                  __size_of_getEncoderState 000F                    ??_PIN_MANAGER_Initialize 00E1  
                   _INT_SetInterruptHandler 0DE8                                   _T5CONbits 041A  
                                 _IOCCFbits 0399                                 _NutRunstate 004E  
                                 _IOCCNbits 0398                                   _IOCCPbits 0397  
                       ??i1_getEncoderState 0070                  __size_of_SYSTEM_Initialize 0021  
                                 _LED_Color 005A                                     clrloop0 0E69  
                      end_of_initialization 008F                            ?_TMR3_WriteTimer 00DF  
       __end_of_EPC_StateMachineControlLoop 0422                 _EPC_StateMachineControlLoop 02C1  
                          _NutRunCycleReset 0FD3                            _NutRunCycleStart 0EF2  
                         __postTransmission 00B8                        __end_of_INT_CallBack 0EB7  
                         _EUSART_Initialize 0E5C                             ___lldiv@divisor 0020  
                  __end_of_LedONStartConfig 0492                             ___lldiv@counter 002C  
                        ?_EUSART_Initialize 0070                   __end_ofi1_getEncoderState 0EF2  
                          ?_TMR5_StartTimer 0070                      ??_valuetocharLowNibble 00E2  
                         ??_NutRunCycleStop 0072            LedONStartConfig@LedONDurationSec 00E7  
                       ??_EUSART_Initialize 00DF                            ??_WDT_Initialize 00DF  
                  _TMR0_SetInterruptHandler 0DFA                                   _PORTCbits 000E  
                  _TMR3_SetInterruptHandler 0E00                       _TMR5_InterruptHandler 00DD  
                     ?_LedON_Control_10msec 0070                       _valuetocharHighNibble 0FBD  
                   _IOCCF4_InterruptHandler 00D7                       __size_of_EUSART_Write 000A  
          __size_of_EncINX_PulseRisingEvent 0035                    __size_of_CCP1_Initialize 000F  
                   __size_of_valtoasciichar 0036                            __CFG_FEXTOSC$OFF 0000  
              ??_IOCCF5_SetInterruptHandler 00E1                            ?_TMR5_WriteTimer 00DF  
                   __end_of_Timer3_Overflow 0709                                   _RXPPSbits 0E24  
                   TMR5_WriteTimer@timerVal 00DF                   __end_of_EUSART_Initialize 0E68  
                          __preTransmission 00BA                     __end_of_Timer5_Overflow 0004  
                    _EncEdgeTimeIntervalOld 00AC                 __end_of_OnEncPulseEdgeEvent 02C1  
                               _CCP1PPSbits 0E14                      _EncEdgeMinTimeInterval 0056  
                               _CCP2PPSbits 0E15                   i1TMR5_WriteTimer@timerVal 0070  
                  __size_of_CCP2_Initialize 0009                     __u8ResponseBufferLength 0049  
                            __end_of___lmul 06E3                              __end_of___wmul 078C  
                             _EncSpdredFact 00EA                    __end_of_ModbusMasterInit 0800  
                              _EUSART_Write 0E46                           __size_of_TMR0_ISR 0005  
                         __size_of_TMR3_ISR 0014                              _ADC_Initialize 0E2A  
                         __size_of_TMR5_ISR 0014                          __u16TransmitBuffer 2170  
                    ?_OSCILLATOR_Initialize 0070                              __end_of_millis 0E46  
                 ??_INT_SetInterruptHandler 00E1         __size_of_IOCCF5_SetInterruptHandler 0006  
                             _EncPulseError 00D2                         start_initialization 0050  
                                 _OldEncPos 00C8        __end_of_TMR5_DefaultInterruptHandler 0DB7  
     __size_of_TMR5_DefaultInterruptHandler 0003                _TMR5_DefaultInterruptHandler 0DB4  
                       _EncEdgeTimeInterval 003E                    __size_of_TMR0_Initialize 0014  
           __size_of_PIN_MANAGER_Initialize 0060                           ??_CCP1_CaptureISR 007D  
                         ??_getEncoderState 00DF                              _TMR3_StopTimer 0DC3  
              __size_of_EncA_PulseEdgeEvent 0011                    __size_of_PIN_MANAGER_IOC 000C  
              ?_INT_DefaultInterruptHandler 0070                             _MBread_EPC_Ctrl 00CC  
                          __CFG_LPBOREN$OFF 0000                 valuetocharHighNibble@hexval 00E5  
                                  ??___lmul 0078                             _preTransmission 0DE2  
                                  ??___wmul 00E3                  __size_ofi1_getEncoderState 000F  
                              _LED_msec_Cnt 00B6                                 _CCPTMRSbits 029F  
                    __size_of_TMR0_CallBack 000E                      __end_of_ADC_Initialize 0E33  
                               __pdataBANK0 0056                                 __pdataBANK1 00EA  
                          _postTransmission 0DDC                                    ??_millis 0074  
                __end_of_EXT_INT_Initialize 0E9B                      ??_LedON_Control_10msec 0070  
                            _TMR5_StopTimer 0DC6                      ?_valuetocharHighNibble 0070  
                     CCP1_CaptureISR@module 003B                              i1_EUSART_Write 0E12  
                               __pbssBIGRAM 20F0                           _ModbusMasterSetup 07C0  
                                 ___latbits 0001              __size_of_Timer0_tick10msecFunc 0026  
                                  ?_INT_ISR 0070                               __pcstackBANK0 0020  
                             __pcstackBANK1 00DF                               __pcstackBANK2 0120  
                        i1_NutRunCycleReset 0FA7               __end_of_Timer0_tick10msecFunc 072F  
                        i1_NutRunCycleStart 0E9B                 ?_IOCCF4_SetInterruptHandler 00DF  
                        ?_ModbusMasterSetup 0070                       __size_of_INT_CallBack 000E  
             ?_TMR5_DefaultInterruptHandler 0070                      __end_of_TMR3_StopTimer 0DC6  
                   _EncoderPositionOneCycle 0052                         ?i1_NutRunCycleReset 0070  
                          ?_Timer3_Overflow 0070                         ?i1_NutRunCycleStart 0070  
                __size_of_EUSART_Initialize 000C                         ??_ModbusMasterSetup 00E1  
                     _TMR0_InterruptHandler 00D9                           ??_CCP1_Initialize 00DF  
                                 __pnvBANK0 005B                                   __pnvBANK1 00D3  
                  __size_of_TMR0_StartTimer 0003                                   _delayFlag 004D  
                   _IOCCF5_InterruptHandler 00D5                            ___lwdiv@dividend 00E1  
                    _PIN_MANAGER_Initialize 0561                            ?_Timer5_Overflow 0070  
             ??_INT_DefaultInterruptHandler 0070                    __size_of_TMR3_Initialize 001A  
                       _preTransmission_App 0000                                    ?___lldiv 0020  
                                  ?___lwdiv 00DF                             ?_ADC_Initialize 0070  
                    __end_of_TMR5_StopTimer 0DC9                        ??i1_NutRunCycleReset 0070  
                      ??i1_NutRunCycleStart 0072                      __end_ofi1_EUSART_Write 0E1A  
                 __size_ofi1_TMR3_StopTimer 0003                    __end_of_NutRunCycleReset 0FE9  
              ??_INTERRUPT_InterruptManager 003D                    __end_of_NutRunCycleStart 0F01  
                                 __pswtext1 0750                   __end_of_ModbusMasterSetup 07D9  
                              _INT_CallBack 0EA9                                __u16WriteQty 0042  
                                  _BAUD1CON 019F                           ??_CCP2_Initialize 00DF  
                   _EncINX_PulseRisingEvent 067F          __end_of_IOCCF5_SetInterruptHandler 0DFA  
                _IOCCF5_SetInterruptHandler 0DF4                            ___lwdiv@quotient 00E5  
                            _valtoasciichar 0614                               _TMR0_CallBack 0EB7  
          postTransmission@postTransmission 00DF                        i1EUSART_Write@txData 0070  
                           ?_TMR3_StopTimer 0070            ??_IOCCF4_DefaultInterruptHandler 0070  
           ?_IOCCF4_DefaultInterruptHandler 0070                   __size_ofi1_TMR5_StopTimer 0003  
                         ??_TMR0_Initialize 00E1                              ___wmul@product 00E3  
                                  _LATBbits 010D                                    _LATCbits 010E  
                   __end_of_preTransmission 0DE8                       __end_of_CCP1_CallBack 0E22  
                                 clear_ram0 0E68                                    _PIE0bits 0090  
                            _EncEdgeGotFlag 0050                             _NutRunCycleStop 0F91  
                                  _PIE3bits 0093                                    _PIE4bits 0094  
                   valtoasciichar@hexvalue1 00E0                    __size_of_LedONStatusBusy 0003  
       __size_of_INTERRUPT_InterruptManager 004A                  ??_TMR0_SetInterruptHandler 00E1  
                                  _PIR0bits 0010                           _IdleTimeOnShutOff 00A4  
                                  _PIR1bits 0011                           ?_LedONStartConfig 00E7  
                                  _PIR3bits 0013                                    _PIR4bits 0014  
                ??_TMR3_SetInterruptHandler 00E1                    __size_of_TMR5_Initialize 001A  
                                  _TMR0_ISR 0DD2                          ??_LedONStartConfig 0120  
                                  _TMR3_ISR 0F40                                    _TMR5_ISR 0F54  
                         ??_PIN_MANAGER_IOC 0070                             ?_TMR5_StopTimer 0070  
                         i1_TMR3_StartTimer 0DAE                             ?i1_EUSART_Write 0070  
                             _TimertickMsec 00A0                                  _ADCON0bits 009D  
                         ___wmul@multiplier 00DF                          ?i1_TMR3_StartTimer 0070  
                  __size_of_TMR3_StartTimer 0003        __size_of_INT_DefaultInterruptHandler 0001  
                    __end_of_valtoasciichar 064A           __size_of_TMR5_SetInterruptHandler 0006  
                 ?_TMR5_SetInterruptHandler 00DF                            __size_of_INT_ISR 0005  
                            ?_TMR0_CallBack 0070                         ??i1_TMR3_StartTimer 0070  
                         ___lmul@multiplier 0070                           i1_TMR3_WriteTimer 0EC5  
            ??_TMR5_DefaultInterruptHandler 0070                          ?i1_TMR3_WriteTimer 0070  
                  __size_of_TMR3_WriteTimer 0017                  valuetocharLowNibble@hexval 00E4  
                 __end_ofi1_TMR3_StartTimer 0DB1                          _OldEncPulseOpState 00CA  
                       ??i1_TMR3_WriteTimer 0072                     ??_OSCILLATOR_Initialize 00DF  
              valuetocharLowNibble@hexvalue 00E3                        _postTransmission_App 0000  
                         ??_TMR0_StartTimer 00DF                            __size_of___lldiv 0053  
                          __size_of___lwdiv 0035                  CCP1_CallBack@capturedValue 0039  
                           _CCP1_CaptureISR 0F7C                           ?_ModbusMasterInit 0070  
             __size_of_valuetocharLowNibble 0010                           ??_TMR3_Initialize 00E1  
                __size_of_ModbusMasterSetup 0019                   ??_EncINX_PulseRisingEvent 0071  
                           _getEncoderState 0F10                          ??_ModbusMasterInit 00DF  
                       _EncA_PulseEdgeEvent 0F2F                    __size_of_TMR5_StartTimer 0003  
                                _T0CON0bits 0017                             ?_valtoasciichar 0070  
                           ___lwdiv@divisor 00DF                             ___lwdiv@counter 00E4  
                                  __ptext10 07A6                                    __ptext11 0E00  
                                  __ptext20 0DE8                                    __ptext12 0F68  
                                  __ptext21 0E33                                    __ptext13 0DBD  
                                  __ptext30 0DDC                                    __ptext22 0F01  
                                  __ptext14 0DFA                                    __ptext31 07F0  
                                  __ptext23 0E2A                                    __ptext15 0561  
                                  __ptext40 064A                                    __ptext32 0E5C  
                                  __ptext24 0EF2                                    __ptext16 0DF4  
                                  __ptext41 0E46                                    __ptext33 0DB7  
                                  __ptext25 0FE9                                    __ptext17 0DEE  
                                  __ptext50 0EB7                                    __ptext34 02C1  
                                  __ptext26 0DBA                                    __ptext18 0E22  
                                  __ptext51 0709                                    __ptext43 0F54  
                                  __ptext35 0F1F                                    __ptext27 0FD3  
                                  __ptext19 0E8E                                    __ptext60 0EA9  
                                  __ptext52 0492                                    __ptext44 0DB4  
                                  __ptext36 0FBD                                    __ptext28 07C0  
                                  __ptext61 0DA5                                    __ptext53 0002  
                                  __ptext45 0003                                    __ptext37 0614  
                                  __ptext29 0DE2                                    __ptext70 0FA7  
                                  __ptext62 067F                                    __ptext54 0E50  
                                  __ptext46 0F40                                    __ptext38 0422  
                                  __ptext71 0E12                                    __ptext63 0F7C  
                                  __ptext55 0E81                                    __ptext47 0DB1  
                                  __ptext39 0770                                    __ptext72 0E3C  
                                  __ptext64 0E1A                                    __ptext56 0DA7  
                                  __ptext48 06E3                                    __ptext73 06B4  
                                  __ptext65 0F2F                                    __ptext57 0E74  
                                  __ptext49 0DD2                                    __ptext74 05C1  
                                  __ptext66 0093                                    __ptext58 0DA6  
                                  __ptext75 0F91                                    __ptext67 0EE3  
                                  __ptext59 0DCD                                    __ptext76 0ED4  
                                  __ptext68 0E9B                                    __ptext77 0DAB  
                                  __ptext69 0DAE                                    __ptext78 0EC5  
                                  __ptext79 0DA8                        valtoasciichar@hexval 00E1  
                              _NutRunLength 0046                   __end_ofi1_TMR3_WriteTimer 0ED4  
                   __end_of_NutRunCycleStop 0FA7                                  _T3GCONbits 0414  
                                _IOCCF4_ISR 0E74                     TMR3_WriteTimer@timerVal 00DF  
                                _IOCCF5_ISR 0E81                    __end_of_postTransmission 0DE2  
                          _ShutdownDetected 004F                           i1_TMR5_WriteTimer 0ED4  
                             __size_of_main 0062                                  _T5GCONbits 041B  
                          ?_preTransmission 00DF                        ?_EncA_PulseEdgeEvent 0037  
      __end_of_TMR0_DefaultInterruptHandler 0003       __size_of_TMR0_DefaultInterruptHandler 0001  
              _TMR0_DefaultInterruptHandler 0002                          ?i1_TMR5_WriteTimer 0070  
                                  _rxBuffer 00D0                    __size_of_TMR5_WriteTimer 0017  
                                _RC1STAbits 019D                                    _txBuffer 00D1  
                                _RB5PPSbits 0E9D                   i1TMR3_WriteTimer@timerVal 0070  
                                  int$flags 007E                         ??i1_TMR5_WriteTimer 0072  
                   ??_valuetocharHighNibble 00E2          __end_of_INTERRUPT_InterruptManager 004E  
                _INTERRUPT_InterruptManager 0004            EncA_PulseEdgeEvent@capturedValue 0037  
                         ??_LedONStatusBusy 00DF                            i1_TMR3_StopTimer 0DA8  
      __end_of_TMR3_DefaultInterruptHandler 0DB4       __size_of_TMR3_DefaultInterruptHandler 0003  
              _TMR3_DefaultInterruptHandler 0DB1                __size_of_OnEncPulseEdgeEvent 022E  
               PIN_MANAGER_Initialize@state 00E1                           ??_TMR5_Initialize 00E1  
                  LedONStartConfig@LEDcolor 00E9                                  _INTCONbits 000B  
                           ??_TMR0_CallBack 0074                        _INT_InterruptHandler 00D3  
                           _CCP1_Initialize 0F01                     _u16TransmitBufferLength 00BC  
                        _EXT_INT_Initialize 0E8E                     __size_of_WDT_Initialize 0004  
                 __end_ofi1_TMR5_WriteTimer 0EE3                                  _INTPPSbits 0E10  
                         ??_TMR3_StartTimer 00DF                                    intlevel1 0000  
                          i1_TMR5_StopTimer 0DAB                         _LedON_Duration_msec 00B0  
                          ___lldiv@dividend 0024                     ?_PIN_MANAGER_Initialize 0070  
                     ??_EncA_PulseEdgeEvent 007D                           __CFG_CLKOUTEN$OFF 0000  
                       ?_EXT_INT_Initialize 0070                                 _PPSLOCKbits 0E0F  
                          ??_ADC_Initialize 00DF               ?_TMR0_DefaultInterruptHandler 0070  
                   __end_of_CCP1_CaptureISR 0F91                             _CCP2_Initialize 0E33  
                __size_ofi1_TMR3_StartTimer 0003                             _EncoderPosition 0044  
                   __end_of_getEncoderState 0F1F                           _EncPulseCntResult 0055  
                  ?_INT_SetInterruptHandler 00DF                           ??_TMR3_WriteTimer 00E1  
                         ?_NutRunCycleReset 0070                           ?_NutRunCycleStart 0070  
                      ??_EXT_INT_Initialize 00E1               ?_TMR3_DefaultInterruptHandler 0070  
                          ___lldiv@quotient 0028               __size_of_LedON_Control_10msec 006D  
                        ??_NutRunCycleReset 00DF                             _TMR0_Initialize 0F68  
                           _Blick_tickPoint 00B2                          ??_NutRunCycleStart 00E1  
                          ??_TMR3_StopTimer 00DF                 ?_IOCCF5_SetInterruptHandler 00DF  
                     _Timer0_tick10msecFunc 0709                  __size_ofi1_TMR3_WriteTimer 000F  
                          ?_NutRunCycleStop 0070                          EUSART_Write@txData 00DF  
                         ??_TMR5_StartTimer 00DF                                 ?_IOCCF4_ISR 0070  
                               ?_IOCCF5_ISR 0070              __end_of_PIN_MANAGER_Initialize 05C1  
              ?_EPC_StateMachineControlLoop 0070                             _PIN_MANAGER_IOC 0E50  
                          ??_TMR5_StopTimer 00DF                    __size_of_Timer3_Overflow 0026  
