

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Apr 10 11:24:05 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F18344
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	swtext1,local,class=CONST,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	intentry,global,class=CODE,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	swtext2,local,class=CONST,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2,group=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2,group=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	dabs	1,0x320,16
   105                           	dabs	1,0x2A0,80
   106                           	dabs	1,0x250,32
   107                           	dabs	1,0x220,48
   108                           	dabs	1,0x1A0,80
   109                           	dabs	1,0x2170,0,__u16TransmitBuffer
   110                           	dabs	1,0x20F0,0,__u16ResponseBuffer
   111                           	dabs	1,0x7E,2
   112  0000                     
   113                           ; Version 1.41
   114                           ; Generated 25/01/2017 GMT
   115                           ; 
   116                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   117                           ; All rights reserved.
   118                           ; 
   119                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   120                           ; 
   121                           ; Redistribution and use in source and binary forms, with or without modification, are
   122                           ; permitted provided that the following conditions are met:
   123                           ; 
   124                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   125                           ;        conditions and the following disclaimer.
   126                           ; 
   127                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   128                           ;        of conditions and the following disclaimer in the documentation and/or other
   129                           ;        materials provided with the distribution.
   130                           ; 
   131                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   132                           ;        software without specific prior written permission.
   133                           ; 
   134                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   135                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   136                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   137                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   138                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   139                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   140                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   141                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   142                           ; 
   143                           ; 
   144                           ; Code-generator required, PIC16F18344 Definitions
   145                           ; 
   146                           ; SFR Addresses
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0008                     	;# 
   156  0009                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000D                     	;# 
   161  000E                     	;# 
   162  0010                     	;# 
   163  0011                     	;# 
   164  0012                     	;# 
   165  0013                     	;# 
   166  0014                     	;# 
   167  0015                     	;# 
   168  0015                     	;# 
   169  0016                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  0090                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0093                     	;# 
   188  0094                     	;# 
   189  0097                     	;# 
   190  009B                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  0111                     	;# 
   200  0112                     	;# 
   201  0113                     	;# 
   202  0114                     	;# 
   203  0115                     	;# 
   204  0116                     	;# 
   205  0117                     	;# 
   206  0118                     	;# 
   207  0119                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0197                     	;# 
   212  0199                     	;# 
   213  0199                     	;# 
   214  0199                     	;# 
   215  019A                     	;# 
   216  019A                     	;# 
   217  019A                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019C                     	;# 
   224  019C                     	;# 
   225  019C                     	;# 
   226  019D                     	;# 
   227  019D                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019E                     	;# 
   231  019E                     	;# 
   232  019F                     	;# 
   233  019F                     	;# 
   234  019F                     	;# 
   235  019F                     	;# 
   236  019F                     	;# 
   237  020C                     	;# 
   238  020D                     	;# 
   239  020E                     	;# 
   240  0211                     	;# 
   241  0211                     	;# 
   242  0212                     	;# 
   243  0212                     	;# 
   244  0213                     	;# 
   245  0213                     	;# 
   246  0214                     	;# 
   247  0214                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  028C                     	;# 
   257  028D                     	;# 
   258  028E                     	;# 
   259  0291                     	;# 
   260  0291                     	;# 
   261  0292                     	;# 
   262  0293                     	;# 
   263  0294                     	;# 
   264  0295                     	;# 
   265  0295                     	;# 
   266  0296                     	;# 
   267  0297                     	;# 
   268  0298                     	;# 
   269  029F                     	;# 
   270  030C                     	;# 
   271  030D                     	;# 
   272  030E                     	;# 
   273  0311                     	;# 
   274  0311                     	;# 
   275  0312                     	;# 
   276  0313                     	;# 
   277  0314                     	;# 
   278  0315                     	;# 
   279  0315                     	;# 
   280  0316                     	;# 
   281  0317                     	;# 
   282  0318                     	;# 
   283  038C                     	;# 
   284  038D                     	;# 
   285  038E                     	;# 
   286  0391                     	;# 
   287  0392                     	;# 
   288  0393                     	;# 
   289  0394                     	;# 
   290  0395                     	;# 
   291  0396                     	;# 
   292  0397                     	;# 
   293  0398                     	;# 
   294  0399                     	;# 
   295  039A                     	;# 
   296  039C                     	;# 
   297  039D                     	;# 
   298  039E                     	;# 
   299  039F                     	;# 
   300  0411                     	;# 
   301  0411                     	;# 
   302  0412                     	;# 
   303  0413                     	;# 
   304  0414                     	;# 
   305  0415                     	;# 
   306  0416                     	;# 
   307  0417                     	;# 
   308  0418                     	;# 
   309  0418                     	;# 
   310  0419                     	;# 
   311  041A                     	;# 
   312  041B                     	;# 
   313  041C                     	;# 
   314  041D                     	;# 
   315  041E                     	;# 
   316  041F                     	;# 
   317  0498                     	;# 
   318  0498                     	;# 
   319  0499                     	;# 
   320  049A                     	;# 
   321  049B                     	;# 
   322  049B                     	;# 
   323  049C                     	;# 
   324  049D                     	;# 
   325  049E                     	;# 
   326  049F                     	;# 
   327  0617                     	;# 
   328  0618                     	;# 
   329  0619                     	;# 
   330  0619                     	;# 
   331  061A                     	;# 
   332  061B                     	;# 
   333  061C                     	;# 
   334  061C                     	;# 
   335  061F                     	;# 
   336  0691                     	;# 
   337  0692                     	;# 
   338  0693                     	;# 
   339  0694                     	;# 
   340  0695                     	;# 
   341  0696                     	;# 
   342  0697                     	;# 
   343  0698                     	;# 
   344  0699                     	;# 
   345  0711                     	;# 
   346  0712                     	;# 
   347  0713                     	;# 
   348  0714                     	;# 
   349  0715                     	;# 
   350  0716                     	;# 
   351  0717                     	;# 
   352  0718                     	;# 
   353  0719                     	;# 
   354  0891                     	;# 
   355  0891                     	;# 
   356  0891                     	;# 
   357  0891                     	;# 
   358  0891                     	;# 
   359  0891                     	;# 
   360  0892                     	;# 
   361  0892                     	;# 
   362  0892                     	;# 
   363  0893                     	;# 
   364  0893                     	;# 
   365  0893                     	;# 
   366  0893                     	;# 
   367  0893                     	;# 
   368  0893                     	;# 
   369  0894                     	;# 
   370  0894                     	;# 
   371  0894                     	;# 
   372  0895                     	;# 
   373  0895                     	;# 
   374  0895                     	;# 
   375  0896                     	;# 
   376  0896                     	;# 
   377  0896                     	;# 
   378  089B                     	;# 
   379  0911                     	;# 
   380  0912                     	;# 
   381  0913                     	;# 
   382  0914                     	;# 
   383  0915                     	;# 
   384  0916                     	;# 
   385  0918                     	;# 
   386  0919                     	;# 
   387  091A                     	;# 
   388  091B                     	;# 
   389  091C                     	;# 
   390  091D                     	;# 
   391  091E                     	;# 
   392  091F                     	;# 
   393  0E0F                     	;# 
   394  0E10                     	;# 
   395  0E11                     	;# 
   396  0E12                     	;# 
   397  0E13                     	;# 
   398  0E14                     	;# 
   399  0E15                     	;# 
   400  0E16                     	;# 
   401  0E17                     	;# 
   402  0E18                     	;# 
   403  0E19                     	;# 
   404  0E1A                     	;# 
   405  0E1B                     	;# 
   406  0E1C                     	;# 
   407  0E20                     	;# 
   408  0E21                     	;# 
   409  0E22                     	;# 
   410  0E24                     	;# 
   411  0E25                     	;# 
   412  0E28                     	;# 
   413  0E29                     	;# 
   414  0E2A                     	;# 
   415  0E2B                     	;# 
   416  0E2C                     	;# 
   417  0E2D                     	;# 
   418  0E2E                     	;# 
   419  0E2F                     	;# 
   420  0E90                     	;# 
   421  0E91                     	;# 
   422  0E92                     	;# 
   423  0E94                     	;# 
   424  0E95                     	;# 
   425  0E9C                     	;# 
   426  0E9D                     	;# 
   427  0E9E                     	;# 
   428  0E9F                     	;# 
   429  0EA0                     	;# 
   430  0EA1                     	;# 
   431  0EA2                     	;# 
   432  0EA3                     	;# 
   433  0EA4                     	;# 
   434  0EA5                     	;# 
   435  0EA6                     	;# 
   436  0EA7                     	;# 
   437  0F0F                     	;# 
   438  0F10                     	;# 
   439  0F11                     	;# 
   440  0F12                     	;# 
   441  0F13                     	;# 
   442  0F14                     	;# 
   443  0F15                     	;# 
   444  0F16                     	;# 
   445  0F17                     	;# 
   446  0F18                     	;# 
   447  0F19                     	;# 
   448  0F1A                     	;# 
   449  0F1B                     	;# 
   450  0F1C                     	;# 
   451  0F1D                     	;# 
   452  0F1E                     	;# 
   453  0F1F                     	;# 
   454  0F20                     	;# 
   455  0F21                     	;# 
   456  0F22                     	;# 
   457  0F23                     	;# 
   458  0F24                     	;# 
   459  0F25                     	;# 
   460  0F26                     	;# 
   461  0F27                     	;# 
   462  0F28                     	;# 
   463  0F29                     	;# 
   464  0F2A                     	;# 
   465  0F2B                     	;# 
   466  0F2C                     	;# 
   467  0F2D                     	;# 
   468  0F2E                     	;# 
   469  0F2F                     	;# 
   470  0F30                     	;# 
   471  0F31                     	;# 
   472  0F32                     	;# 
   473  0F33                     	;# 
   474  0F34                     	;# 
   475  0F35                     	;# 
   476  0F36                     	;# 
   477  0F37                     	;# 
   478  0FE4                     	;# 
   479  0FE5                     	;# 
   480  0FE6                     	;# 
   481  0FE7                     	;# 
   482  0FE8                     	;# 
   483  0FE9                     	;# 
   484  0FEA                     	;# 
   485  0FEB                     	;# 
   486  0FED                     	;# 
   487  0FEE                     	;# 
   488  0FEF                     	;# 
   489  0000                     	;# 
   490  0001                     	;# 
   491  0002                     	;# 
   492  0003                     	;# 
   493  0004                     	;# 
   494  0005                     	;# 
   495  0006                     	;# 
   496  0007                     	;# 
   497  0008                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000D                     	;# 
   503  000E                     	;# 
   504  0010                     	;# 
   505  0011                     	;# 
   506  0012                     	;# 
   507  0013                     	;# 
   508  0014                     	;# 
   509  0015                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  0019                     	;# 
   517  001A                     	;# 
   518  001B                     	;# 
   519  001C                     	;# 
   520  001D                     	;# 
   521  001E                     	;# 
   522  001F                     	;# 
   523  008C                     	;# 
   524  008D                     	;# 
   525  008E                     	;# 
   526  0090                     	;# 
   527  0091                     	;# 
   528  0092                     	;# 
   529  0093                     	;# 
   530  0094                     	;# 
   531  0097                     	;# 
   532  009B                     	;# 
   533  009B                     	;# 
   534  009C                     	;# 
   535  009D                     	;# 
   536  009E                     	;# 
   537  009F                     	;# 
   538  010C                     	;# 
   539  010D                     	;# 
   540  010E                     	;# 
   541  0111                     	;# 
   542  0112                     	;# 
   543  0113                     	;# 
   544  0114                     	;# 
   545  0115                     	;# 
   546  0116                     	;# 
   547  0117                     	;# 
   548  0118                     	;# 
   549  0119                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0197                     	;# 
   554  0199                     	;# 
   555  0199                     	;# 
   556  0199                     	;# 
   557  019A                     	;# 
   558  019A                     	;# 
   559  019A                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019C                     	;# 
   566  019C                     	;# 
   567  019C                     	;# 
   568  019D                     	;# 
   569  019D                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019E                     	;# 
   573  019E                     	;# 
   574  019F                     	;# 
   575  019F                     	;# 
   576  019F                     	;# 
   577  019F                     	;# 
   578  019F                     	;# 
   579  020C                     	;# 
   580  020D                     	;# 
   581  020E                     	;# 
   582  0211                     	;# 
   583  0211                     	;# 
   584  0212                     	;# 
   585  0212                     	;# 
   586  0213                     	;# 
   587  0213                     	;# 
   588  0214                     	;# 
   589  0214                     	;# 
   590  0215                     	;# 
   591  0215                     	;# 
   592  0215                     	;# 
   593  0215                     	;# 
   594  0216                     	;# 
   595  0216                     	;# 
   596  0217                     	;# 
   597  0217                     	;# 
   598  028C                     	;# 
   599  028D                     	;# 
   600  028E                     	;# 
   601  0291                     	;# 
   602  0291                     	;# 
   603  0292                     	;# 
   604  0293                     	;# 
   605  0294                     	;# 
   606  0295                     	;# 
   607  0295                     	;# 
   608  0296                     	;# 
   609  0297                     	;# 
   610  0298                     	;# 
   611  029F                     	;# 
   612  030C                     	;# 
   613  030D                     	;# 
   614  030E                     	;# 
   615  0311                     	;# 
   616  0311                     	;# 
   617  0312                     	;# 
   618  0313                     	;# 
   619  0314                     	;# 
   620  0315                     	;# 
   621  0315                     	;# 
   622  0316                     	;# 
   623  0317                     	;# 
   624  0318                     	;# 
   625  038C                     	;# 
   626  038D                     	;# 
   627  038E                     	;# 
   628  0391                     	;# 
   629  0392                     	;# 
   630  0393                     	;# 
   631  0394                     	;# 
   632  0395                     	;# 
   633  0396                     	;# 
   634  0397                     	;# 
   635  0398                     	;# 
   636  0399                     	;# 
   637  039A                     	;# 
   638  039C                     	;# 
   639  039D                     	;# 
   640  039E                     	;# 
   641  039F                     	;# 
   642  0411                     	;# 
   643  0411                     	;# 
   644  0412                     	;# 
   645  0413                     	;# 
   646  0414                     	;# 
   647  0415                     	;# 
   648  0416                     	;# 
   649  0417                     	;# 
   650  0418                     	;# 
   651  0418                     	;# 
   652  0419                     	;# 
   653  041A                     	;# 
   654  041B                     	;# 
   655  041C                     	;# 
   656  041D                     	;# 
   657  041E                     	;# 
   658  041F                     	;# 
   659  0498                     	;# 
   660  0498                     	;# 
   661  0499                     	;# 
   662  049A                     	;# 
   663  049B                     	;# 
   664  049B                     	;# 
   665  049C                     	;# 
   666  049D                     	;# 
   667  049E                     	;# 
   668  049F                     	;# 
   669  0617                     	;# 
   670  0618                     	;# 
   671  0619                     	;# 
   672  0619                     	;# 
   673  061A                     	;# 
   674  061B                     	;# 
   675  061C                     	;# 
   676  061C                     	;# 
   677  061F                     	;# 
   678  0691                     	;# 
   679  0692                     	;# 
   680  0693                     	;# 
   681  0694                     	;# 
   682  0695                     	;# 
   683  0696                     	;# 
   684  0697                     	;# 
   685  0698                     	;# 
   686  0699                     	;# 
   687  0711                     	;# 
   688  0712                     	;# 
   689  0713                     	;# 
   690  0714                     	;# 
   691  0715                     	;# 
   692  0716                     	;# 
   693  0717                     	;# 
   694  0718                     	;# 
   695  0719                     	;# 
   696  0891                     	;# 
   697  0891                     	;# 
   698  0891                     	;# 
   699  0891                     	;# 
   700  0891                     	;# 
   701  0891                     	;# 
   702  0892                     	;# 
   703  0892                     	;# 
   704  0892                     	;# 
   705  0893                     	;# 
   706  0893                     	;# 
   707  0893                     	;# 
   708  0893                     	;# 
   709  0893                     	;# 
   710  0893                     	;# 
   711  0894                     	;# 
   712  0894                     	;# 
   713  0894                     	;# 
   714  0895                     	;# 
   715  0895                     	;# 
   716  0895                     	;# 
   717  0896                     	;# 
   718  0896                     	;# 
   719  0896                     	;# 
   720  089B                     	;# 
   721  0911                     	;# 
   722  0912                     	;# 
   723  0913                     	;# 
   724  0914                     	;# 
   725  0915                     	;# 
   726  0916                     	;# 
   727  0918                     	;# 
   728  0919                     	;# 
   729  091A                     	;# 
   730  091B                     	;# 
   731  091C                     	;# 
   732  091D                     	;# 
   733  091E                     	;# 
   734  091F                     	;# 
   735  0E0F                     	;# 
   736  0E10                     	;# 
   737  0E11                     	;# 
   738  0E12                     	;# 
   739  0E13                     	;# 
   740  0E14                     	;# 
   741  0E15                     	;# 
   742  0E16                     	;# 
   743  0E17                     	;# 
   744  0E18                     	;# 
   745  0E19                     	;# 
   746  0E1A                     	;# 
   747  0E1B                     	;# 
   748  0E1C                     	;# 
   749  0E20                     	;# 
   750  0E21                     	;# 
   751  0E22                     	;# 
   752  0E24                     	;# 
   753  0E25                     	;# 
   754  0E28                     	;# 
   755  0E29                     	;# 
   756  0E2A                     	;# 
   757  0E2B                     	;# 
   758  0E2C                     	;# 
   759  0E2D                     	;# 
   760  0E2E                     	;# 
   761  0E2F                     	;# 
   762  0E90                     	;# 
   763  0E91                     	;# 
   764  0E92                     	;# 
   765  0E94                     	;# 
   766  0E95                     	;# 
   767  0E9C                     	;# 
   768  0E9D                     	;# 
   769  0E9E                     	;# 
   770  0E9F                     	;# 
   771  0EA0                     	;# 
   772  0EA1                     	;# 
   773  0EA2                     	;# 
   774  0EA3                     	;# 
   775  0EA4                     	;# 
   776  0EA5                     	;# 
   777  0EA6                     	;# 
   778  0EA7                     	;# 
   779  0F0F                     	;# 
   780  0F10                     	;# 
   781  0F11                     	;# 
   782  0F12                     	;# 
   783  0F13                     	;# 
   784  0F14                     	;# 
   785  0F15                     	;# 
   786  0F16                     	;# 
   787  0F17                     	;# 
   788  0F18                     	;# 
   789  0F19                     	;# 
   790  0F1A                     	;# 
   791  0F1B                     	;# 
   792  0F1C                     	;# 
   793  0F1D                     	;# 
   794  0F1E                     	;# 
   795  0F1F                     	;# 
   796  0F20                     	;# 
   797  0F21                     	;# 
   798  0F22                     	;# 
   799  0F23                     	;# 
   800  0F24                     	;# 
   801  0F25                     	;# 
   802  0F26                     	;# 
   803  0F27                     	;# 
   804  0F28                     	;# 
   805  0F29                     	;# 
   806  0F2A                     	;# 
   807  0F2B                     	;# 
   808  0F2C                     	;# 
   809  0F2D                     	;# 
   810  0F2E                     	;# 
   811  0F2F                     	;# 
   812  0F30                     	;# 
   813  0F31                     	;# 
   814  0F32                     	;# 
   815  0F33                     	;# 
   816  0F34                     	;# 
   817  0F35                     	;# 
   818  0F36                     	;# 
   819  0F37                     	;# 
   820  0FE4                     	;# 
   821  0FE5                     	;# 
   822  0FE6                     	;# 
   823  0FE7                     	;# 
   824  0FE8                     	;# 
   825  0FE9                     	;# 
   826  0FEA                     	;# 
   827  0FEB                     	;# 
   828  0FED                     	;# 
   829  0FEE                     	;# 
   830  0FEF                     	;# 
   831  0000                     	;# 
   832  0001                     	;# 
   833  0002                     	;# 
   834  0003                     	;# 
   835  0004                     	;# 
   836  0005                     	;# 
   837  0006                     	;# 
   838  0007                     	;# 
   839  0008                     	;# 
   840  0009                     	;# 
   841  000A                     	;# 
   842  000B                     	;# 
   843  000C                     	;# 
   844  000D                     	;# 
   845  000E                     	;# 
   846  0010                     	;# 
   847  0011                     	;# 
   848  0012                     	;# 
   849  0013                     	;# 
   850  0014                     	;# 
   851  0015                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  0019                     	;# 
   859  001A                     	;# 
   860  001B                     	;# 
   861  001C                     	;# 
   862  001D                     	;# 
   863  001E                     	;# 
   864  001F                     	;# 
   865  008C                     	;# 
   866  008D                     	;# 
   867  008E                     	;# 
   868  0090                     	;# 
   869  0091                     	;# 
   870  0092                     	;# 
   871  0093                     	;# 
   872  0094                     	;# 
   873  0097                     	;# 
   874  009B                     	;# 
   875  009B                     	;# 
   876  009C                     	;# 
   877  009D                     	;# 
   878  009E                     	;# 
   879  009F                     	;# 
   880  010C                     	;# 
   881  010D                     	;# 
   882  010E                     	;# 
   883  0111                     	;# 
   884  0112                     	;# 
   885  0113                     	;# 
   886  0114                     	;# 
   887  0115                     	;# 
   888  0116                     	;# 
   889  0117                     	;# 
   890  0118                     	;# 
   891  0119                     	;# 
   892  018C                     	;# 
   893  018D                     	;# 
   894  018E                     	;# 
   895  0197                     	;# 
   896  0199                     	;# 
   897  0199                     	;# 
   898  0199                     	;# 
   899  019A                     	;# 
   900  019A                     	;# 
   901  019A                     	;# 
   902  019B                     	;# 
   903  019B                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019B                     	;# 
   907  019C                     	;# 
   908  019C                     	;# 
   909  019C                     	;# 
   910  019D                     	;# 
   911  019D                     	;# 
   912  019D                     	;# 
   913  019E                     	;# 
   914  019E                     	;# 
   915  019E                     	;# 
   916  019F                     	;# 
   917  019F                     	;# 
   918  019F                     	;# 
   919  019F                     	;# 
   920  019F                     	;# 
   921  020C                     	;# 
   922  020D                     	;# 
   923  020E                     	;# 
   924  0211                     	;# 
   925  0211                     	;# 
   926  0212                     	;# 
   927  0212                     	;# 
   928  0213                     	;# 
   929  0213                     	;# 
   930  0214                     	;# 
   931  0214                     	;# 
   932  0215                     	;# 
   933  0215                     	;# 
   934  0215                     	;# 
   935  0215                     	;# 
   936  0216                     	;# 
   937  0216                     	;# 
   938  0217                     	;# 
   939  0217                     	;# 
   940  028C                     	;# 
   941  028D                     	;# 
   942  028E                     	;# 
   943  0291                     	;# 
   944  0291                     	;# 
   945  0292                     	;# 
   946  0293                     	;# 
   947  0294                     	;# 
   948  0295                     	;# 
   949  0295                     	;# 
   950  0296                     	;# 
   951  0297                     	;# 
   952  0298                     	;# 
   953  029F                     	;# 
   954  030C                     	;# 
   955  030D                     	;# 
   956  030E                     	;# 
   957  0311                     	;# 
   958  0311                     	;# 
   959  0312                     	;# 
   960  0313                     	;# 
   961  0314                     	;# 
   962  0315                     	;# 
   963  0315                     	;# 
   964  0316                     	;# 
   965  0317                     	;# 
   966  0318                     	;# 
   967  038C                     	;# 
   968  038D                     	;# 
   969  038E                     	;# 
   970  0391                     	;# 
   971  0392                     	;# 
   972  0393                     	;# 
   973  0394                     	;# 
   974  0395                     	;# 
   975  0396                     	;# 
   976  0397                     	;# 
   977  0398                     	;# 
   978  0399                     	;# 
   979  039A                     	;# 
   980  039C                     	;# 
   981  039D                     	;# 
   982  039E                     	;# 
   983  039F                     	;# 
   984  0411                     	;# 
   985  0411                     	;# 
   986  0412                     	;# 
   987  0413                     	;# 
   988  0414                     	;# 
   989  0415                     	;# 
   990  0416                     	;# 
   991  0417                     	;# 
   992  0418                     	;# 
   993  0418                     	;# 
   994  0419                     	;# 
   995  041A                     	;# 
   996  041B                     	;# 
   997  041C                     	;# 
   998  041D                     	;# 
   999  041E                     	;# 
  1000  041F                     	;# 
  1001  0498                     	;# 
  1002  0498                     	;# 
  1003  0499                     	;# 
  1004  049A                     	;# 
  1005  049B                     	;# 
  1006  049B                     	;# 
  1007  049C                     	;# 
  1008  049D                     	;# 
  1009  049E                     	;# 
  1010  049F                     	;# 
  1011  0617                     	;# 
  1012  0618                     	;# 
  1013  0619                     	;# 
  1014  0619                     	;# 
  1015  061A                     	;# 
  1016  061B                     	;# 
  1017  061C                     	;# 
  1018  061C                     	;# 
  1019  061F                     	;# 
  1020  0691                     	;# 
  1021  0692                     	;# 
  1022  0693                     	;# 
  1023  0694                     	;# 
  1024  0695                     	;# 
  1025  0696                     	;# 
  1026  0697                     	;# 
  1027  0698                     	;# 
  1028  0699                     	;# 
  1029  0711                     	;# 
  1030  0712                     	;# 
  1031  0713                     	;# 
  1032  0714                     	;# 
  1033  0715                     	;# 
  1034  0716                     	;# 
  1035  0717                     	;# 
  1036  0718                     	;# 
  1037  0719                     	;# 
  1038  0891                     	;# 
  1039  0891                     	;# 
  1040  0891                     	;# 
  1041  0891                     	;# 
  1042  0891                     	;# 
  1043  0891                     	;# 
  1044  0892                     	;# 
  1045  0892                     	;# 
  1046  0892                     	;# 
  1047  0893                     	;# 
  1048  0893                     	;# 
  1049  0893                     	;# 
  1050  0893                     	;# 
  1051  0893                     	;# 
  1052  0893                     	;# 
  1053  0894                     	;# 
  1054  0894                     	;# 
  1055  0894                     	;# 
  1056  0895                     	;# 
  1057  0895                     	;# 
  1058  0895                     	;# 
  1059  0896                     	;# 
  1060  0896                     	;# 
  1061  0896                     	;# 
  1062  089B                     	;# 
  1063  0911                     	;# 
  1064  0912                     	;# 
  1065  0913                     	;# 
  1066  0914                     	;# 
  1067  0915                     	;# 
  1068  0916                     	;# 
  1069  0918                     	;# 
  1070  0919                     	;# 
  1071  091A                     	;# 
  1072  091B                     	;# 
  1073  091C                     	;# 
  1074  091D                     	;# 
  1075  091E                     	;# 
  1076  091F                     	;# 
  1077  0E0F                     	;# 
  1078  0E10                     	;# 
  1079  0E11                     	;# 
  1080  0E12                     	;# 
  1081  0E13                     	;# 
  1082  0E14                     	;# 
  1083  0E15                     	;# 
  1084  0E16                     	;# 
  1085  0E17                     	;# 
  1086  0E18                     	;# 
  1087  0E19                     	;# 
  1088  0E1A                     	;# 
  1089  0E1B                     	;# 
  1090  0E1C                     	;# 
  1091  0E20                     	;# 
  1092  0E21                     	;# 
  1093  0E22                     	;# 
  1094  0E24                     	;# 
  1095  0E25                     	;# 
  1096  0E28                     	;# 
  1097  0E29                     	;# 
  1098  0E2A                     	;# 
  1099  0E2B                     	;# 
  1100  0E2C                     	;# 
  1101  0E2D                     	;# 
  1102  0E2E                     	;# 
  1103  0E2F                     	;# 
  1104  0E90                     	;# 
  1105  0E91                     	;# 
  1106  0E92                     	;# 
  1107  0E94                     	;# 
  1108  0E95                     	;# 
  1109  0E9C                     	;# 
  1110  0E9D                     	;# 
  1111  0E9E                     	;# 
  1112  0E9F                     	;# 
  1113  0EA0                     	;# 
  1114  0EA1                     	;# 
  1115  0EA2                     	;# 
  1116  0EA3                     	;# 
  1117  0EA4                     	;# 
  1118  0EA5                     	;# 
  1119  0EA6                     	;# 
  1120  0EA7                     	;# 
  1121  0F0F                     	;# 
  1122  0F10                     	;# 
  1123  0F11                     	;# 
  1124  0F12                     	;# 
  1125  0F13                     	;# 
  1126  0F14                     	;# 
  1127  0F15                     	;# 
  1128  0F16                     	;# 
  1129  0F17                     	;# 
  1130  0F18                     	;# 
  1131  0F19                     	;# 
  1132  0F1A                     	;# 
  1133  0F1B                     	;# 
  1134  0F1C                     	;# 
  1135  0F1D                     	;# 
  1136  0F1E                     	;# 
  1137  0F1F                     	;# 
  1138  0F20                     	;# 
  1139  0F21                     	;# 
  1140  0F22                     	;# 
  1141  0F23                     	;# 
  1142  0F24                     	;# 
  1143  0F25                     	;# 
  1144  0F26                     	;# 
  1145  0F27                     	;# 
  1146  0F28                     	;# 
  1147  0F29                     	;# 
  1148  0F2A                     	;# 
  1149  0F2B                     	;# 
  1150  0F2C                     	;# 
  1151  0F2D                     	;# 
  1152  0F2E                     	;# 
  1153  0F2F                     	;# 
  1154  0F30                     	;# 
  1155  0F31                     	;# 
  1156  0F32                     	;# 
  1157  0F33                     	;# 
  1158  0F34                     	;# 
  1159  0F35                     	;# 
  1160  0F36                     	;# 
  1161  0F37                     	;# 
  1162  0FE4                     	;# 
  1163  0FE5                     	;# 
  1164  0FE6                     	;# 
  1165  0FE7                     	;# 
  1166  0FE8                     	;# 
  1167  0FE9                     	;# 
  1168  0FEA                     	;# 
  1169  0FEB                     	;# 
  1170  0FED                     	;# 
  1171  0FEE                     	;# 
  1172  0FEF                     	;# 
  1173  0000                     	;# 
  1174  0001                     	;# 
  1175  0002                     	;# 
  1176  0003                     	;# 
  1177  0004                     	;# 
  1178  0005                     	;# 
  1179  0006                     	;# 
  1180  0007                     	;# 
  1181  0008                     	;# 
  1182  0009                     	;# 
  1183  000A                     	;# 
  1184  000B                     	;# 
  1185  000C                     	;# 
  1186  000D                     	;# 
  1187  000E                     	;# 
  1188  0010                     	;# 
  1189  0011                     	;# 
  1190  0012                     	;# 
  1191  0013                     	;# 
  1192  0014                     	;# 
  1193  0015                     	;# 
  1194  0015                     	;# 
  1195  0016                     	;# 
  1196  0016                     	;# 
  1197  0017                     	;# 
  1198  0018                     	;# 
  1199  0019                     	;# 
  1200  0019                     	;# 
  1201  001A                     	;# 
  1202  001B                     	;# 
  1203  001C                     	;# 
  1204  001D                     	;# 
  1205  001E                     	;# 
  1206  001F                     	;# 
  1207  008C                     	;# 
  1208  008D                     	;# 
  1209  008E                     	;# 
  1210  0090                     	;# 
  1211  0091                     	;# 
  1212  0092                     	;# 
  1213  0093                     	;# 
  1214  0094                     	;# 
  1215  0097                     	;# 
  1216  009B                     	;# 
  1217  009B                     	;# 
  1218  009C                     	;# 
  1219  009D                     	;# 
  1220  009E                     	;# 
  1221  009F                     	;# 
  1222  010C                     	;# 
  1223  010D                     	;# 
  1224  010E                     	;# 
  1225  0111                     	;# 
  1226  0112                     	;# 
  1227  0113                     	;# 
  1228  0114                     	;# 
  1229  0115                     	;# 
  1230  0116                     	;# 
  1231  0117                     	;# 
  1232  0118                     	;# 
  1233  0119                     	;# 
  1234  018C                     	;# 
  1235  018D                     	;# 
  1236  018E                     	;# 
  1237  0197                     	;# 
  1238  0199                     	;# 
  1239  0199                     	;# 
  1240  0199                     	;# 
  1241  019A                     	;# 
  1242  019A                     	;# 
  1243  019A                     	;# 
  1244  019B                     	;# 
  1245  019B                     	;# 
  1246  019B                     	;# 
  1247  019B                     	;# 
  1248  019B                     	;# 
  1249  019C                     	;# 
  1250  019C                     	;# 
  1251  019C                     	;# 
  1252  019D                     	;# 
  1253  019D                     	;# 
  1254  019D                     	;# 
  1255  019E                     	;# 
  1256  019E                     	;# 
  1257  019E                     	;# 
  1258  019F                     	;# 
  1259  019F                     	;# 
  1260  019F                     	;# 
  1261  019F                     	;# 
  1262  019F                     	;# 
  1263  020C                     	;# 
  1264  020D                     	;# 
  1265  020E                     	;# 
  1266  0211                     	;# 
  1267  0211                     	;# 
  1268  0212                     	;# 
  1269  0212                     	;# 
  1270  0213                     	;# 
  1271  0213                     	;# 
  1272  0214                     	;# 
  1273  0214                     	;# 
  1274  0215                     	;# 
  1275  0215                     	;# 
  1276  0215                     	;# 
  1277  0215                     	;# 
  1278  0216                     	;# 
  1279  0216                     	;# 
  1280  0217                     	;# 
  1281  0217                     	;# 
  1282  028C                     	;# 
  1283  028D                     	;# 
  1284  028E                     	;# 
  1285  0291                     	;# 
  1286  0291                     	;# 
  1287  0292                     	;# 
  1288  0293                     	;# 
  1289  0294                     	;# 
  1290  0295                     	;# 
  1291  0295                     	;# 
  1292  0296                     	;# 
  1293  0297                     	;# 
  1294  0298                     	;# 
  1295  029F                     	;# 
  1296  030C                     	;# 
  1297  030D                     	;# 
  1298  030E                     	;# 
  1299  0311                     	;# 
  1300  0311                     	;# 
  1301  0312                     	;# 
  1302  0313                     	;# 
  1303  0314                     	;# 
  1304  0315                     	;# 
  1305  0315                     	;# 
  1306  0316                     	;# 
  1307  0317                     	;# 
  1308  0318                     	;# 
  1309  038C                     	;# 
  1310  038D                     	;# 
  1311  038E                     	;# 
  1312  0391                     	;# 
  1313  0392                     	;# 
  1314  0393                     	;# 
  1315  0394                     	;# 
  1316  0395                     	;# 
  1317  0396                     	;# 
  1318  0397                     	;# 
  1319  0398                     	;# 
  1320  0399                     	;# 
  1321  039A                     	;# 
  1322  039C                     	;# 
  1323  039D                     	;# 
  1324  039E                     	;# 
  1325  039F                     	;# 
  1326  0411                     	;# 
  1327  0411                     	;# 
  1328  0412                     	;# 
  1329  0413                     	;# 
  1330  0414                     	;# 
  1331  0415                     	;# 
  1332  0416                     	;# 
  1333  0417                     	;# 
  1334  0418                     	;# 
  1335  0418                     	;# 
  1336  0419                     	;# 
  1337  041A                     	;# 
  1338  041B                     	;# 
  1339  041C                     	;# 
  1340  041D                     	;# 
  1341  041E                     	;# 
  1342  041F                     	;# 
  1343  0498                     	;# 
  1344  0498                     	;# 
  1345  0499                     	;# 
  1346  049A                     	;# 
  1347  049B                     	;# 
  1348  049B                     	;# 
  1349  049C                     	;# 
  1350  049D                     	;# 
  1351  049E                     	;# 
  1352  049F                     	;# 
  1353  0617                     	;# 
  1354  0618                     	;# 
  1355  0619                     	;# 
  1356  0619                     	;# 
  1357  061A                     	;# 
  1358  061B                     	;# 
  1359  061C                     	;# 
  1360  061C                     	;# 
  1361  061F                     	;# 
  1362  0691                     	;# 
  1363  0692                     	;# 
  1364  0693                     	;# 
  1365  0694                     	;# 
  1366  0695                     	;# 
  1367  0696                     	;# 
  1368  0697                     	;# 
  1369  0698                     	;# 
  1370  0699                     	;# 
  1371  0711                     	;# 
  1372  0712                     	;# 
  1373  0713                     	;# 
  1374  0714                     	;# 
  1375  0715                     	;# 
  1376  0716                     	;# 
  1377  0717                     	;# 
  1378  0718                     	;# 
  1379  0719                     	;# 
  1380  0891                     	;# 
  1381  0891                     	;# 
  1382  0891                     	;# 
  1383  0891                     	;# 
  1384  0891                     	;# 
  1385  0891                     	;# 
  1386  0892                     	;# 
  1387  0892                     	;# 
  1388  0892                     	;# 
  1389  0893                     	;# 
  1390  0893                     	;# 
  1391  0893                     	;# 
  1392  0893                     	;# 
  1393  0893                     	;# 
  1394  0893                     	;# 
  1395  0894                     	;# 
  1396  0894                     	;# 
  1397  0894                     	;# 
  1398  0895                     	;# 
  1399  0895                     	;# 
  1400  0895                     	;# 
  1401  0896                     	;# 
  1402  0896                     	;# 
  1403  0896                     	;# 
  1404  089B                     	;# 
  1405  0911                     	;# 
  1406  0912                     	;# 
  1407  0913                     	;# 
  1408  0914                     	;# 
  1409  0915                     	;# 
  1410  0916                     	;# 
  1411  0918                     	;# 
  1412  0919                     	;# 
  1413  091A                     	;# 
  1414  091B                     	;# 
  1415  091C                     	;# 
  1416  091D                     	;# 
  1417  091E                     	;# 
  1418  091F                     	;# 
  1419  0E0F                     	;# 
  1420  0E10                     	;# 
  1421  0E11                     	;# 
  1422  0E12                     	;# 
  1423  0E13                     	;# 
  1424  0E14                     	;# 
  1425  0E15                     	;# 
  1426  0E16                     	;# 
  1427  0E17                     	;# 
  1428  0E18                     	;# 
  1429  0E19                     	;# 
  1430  0E1A                     	;# 
  1431  0E1B                     	;# 
  1432  0E1C                     	;# 
  1433  0E20                     	;# 
  1434  0E21                     	;# 
  1435  0E22                     	;# 
  1436  0E24                     	;# 
  1437  0E25                     	;# 
  1438  0E28                     	;# 
  1439  0E29                     	;# 
  1440  0E2A                     	;# 
  1441  0E2B                     	;# 
  1442  0E2C                     	;# 
  1443  0E2D                     	;# 
  1444  0E2E                     	;# 
  1445  0E2F                     	;# 
  1446  0E90                     	;# 
  1447  0E91                     	;# 
  1448  0E92                     	;# 
  1449  0E94                     	;# 
  1450  0E95                     	;# 
  1451  0E9C                     	;# 
  1452  0E9D                     	;# 
  1453  0E9E                     	;# 
  1454  0E9F                     	;# 
  1455  0EA0                     	;# 
  1456  0EA1                     	;# 
  1457  0EA2                     	;# 
  1458  0EA3                     	;# 
  1459  0EA4                     	;# 
  1460  0EA5                     	;# 
  1461  0EA6                     	;# 
  1462  0EA7                     	;# 
  1463  0F0F                     	;# 
  1464  0F10                     	;# 
  1465  0F11                     	;# 
  1466  0F12                     	;# 
  1467  0F13                     	;# 
  1468  0F14                     	;# 
  1469  0F15                     	;# 
  1470  0F16                     	;# 
  1471  0F17                     	;# 
  1472  0F18                     	;# 
  1473  0F19                     	;# 
  1474  0F1A                     	;# 
  1475  0F1B                     	;# 
  1476  0F1C                     	;# 
  1477  0F1D                     	;# 
  1478  0F1E                     	;# 
  1479  0F1F                     	;# 
  1480  0F20                     	;# 
  1481  0F21                     	;# 
  1482  0F22                     	;# 
  1483  0F23                     	;# 
  1484  0F24                     	;# 
  1485  0F25                     	;# 
  1486  0F26                     	;# 
  1487  0F27                     	;# 
  1488  0F28                     	;# 
  1489  0F29                     	;# 
  1490  0F2A                     	;# 
  1491  0F2B                     	;# 
  1492  0F2C                     	;# 
  1493  0F2D                     	;# 
  1494  0F2E                     	;# 
  1495  0F2F                     	;# 
  1496  0F30                     	;# 
  1497  0F31                     	;# 
  1498  0F32                     	;# 
  1499  0F33                     	;# 
  1500  0F34                     	;# 
  1501  0F35                     	;# 
  1502  0F36                     	;# 
  1503  0F37                     	;# 
  1504  0FE4                     	;# 
  1505  0FE5                     	;# 
  1506  0FE6                     	;# 
  1507  0FE7                     	;# 
  1508  0FE8                     	;# 
  1509  0FE9                     	;# 
  1510  0FEA                     	;# 
  1511  0FEB                     	;# 
  1512  0FED                     	;# 
  1513  0FEE                     	;# 
  1514  0FEF                     	;# 
  1515  0000                     	;# 
  1516  0001                     	;# 
  1517  0002                     	;# 
  1518  0003                     	;# 
  1519  0004                     	;# 
  1520  0005                     	;# 
  1521  0006                     	;# 
  1522  0007                     	;# 
  1523  0008                     	;# 
  1524  0009                     	;# 
  1525  000A                     	;# 
  1526  000B                     	;# 
  1527  000C                     	;# 
  1528  000D                     	;# 
  1529  000E                     	;# 
  1530  0010                     	;# 
  1531  0011                     	;# 
  1532  0012                     	;# 
  1533  0013                     	;# 
  1534  0014                     	;# 
  1535  0015                     	;# 
  1536  0015                     	;# 
  1537  0016                     	;# 
  1538  0016                     	;# 
  1539  0017                     	;# 
  1540  0018                     	;# 
  1541  0019                     	;# 
  1542  0019                     	;# 
  1543  001A                     	;# 
  1544  001B                     	;# 
  1545  001C                     	;# 
  1546  001D                     	;# 
  1547  001E                     	;# 
  1548  001F                     	;# 
  1549  008C                     	;# 
  1550  008D                     	;# 
  1551  008E                     	;# 
  1552  0090                     	;# 
  1553  0091                     	;# 
  1554  0092                     	;# 
  1555  0093                     	;# 
  1556  0094                     	;# 
  1557  0097                     	;# 
  1558  009B                     	;# 
  1559  009B                     	;# 
  1560  009C                     	;# 
  1561  009D                     	;# 
  1562  009E                     	;# 
  1563  009F                     	;# 
  1564  010C                     	;# 
  1565  010D                     	;# 
  1566  010E                     	;# 
  1567  0111                     	;# 
  1568  0112                     	;# 
  1569  0113                     	;# 
  1570  0114                     	;# 
  1571  0115                     	;# 
  1572  0116                     	;# 
  1573  0117                     	;# 
  1574  0118                     	;# 
  1575  0119                     	;# 
  1576  018C                     	;# 
  1577  018D                     	;# 
  1578  018E                     	;# 
  1579  0197                     	;# 
  1580  0199                     	;# 
  1581  0199                     	;# 
  1582  0199                     	;# 
  1583  019A                     	;# 
  1584  019A                     	;# 
  1585  019A                     	;# 
  1586  019B                     	;# 
  1587  019B                     	;# 
  1588  019B                     	;# 
  1589  019B                     	;# 
  1590  019B                     	;# 
  1591  019C                     	;# 
  1592  019C                     	;# 
  1593  019C                     	;# 
  1594  019D                     	;# 
  1595  019D                     	;# 
  1596  019D                     	;# 
  1597  019E                     	;# 
  1598  019E                     	;# 
  1599  019E                     	;# 
  1600  019F                     	;# 
  1601  019F                     	;# 
  1602  019F                     	;# 
  1603  019F                     	;# 
  1604  019F                     	;# 
  1605  020C                     	;# 
  1606  020D                     	;# 
  1607  020E                     	;# 
  1608  0211                     	;# 
  1609  0211                     	;# 
  1610  0212                     	;# 
  1611  0212                     	;# 
  1612  0213                     	;# 
  1613  0213                     	;# 
  1614  0214                     	;# 
  1615  0214                     	;# 
  1616  0215                     	;# 
  1617  0215                     	;# 
  1618  0215                     	;# 
  1619  0215                     	;# 
  1620  0216                     	;# 
  1621  0216                     	;# 
  1622  0217                     	;# 
  1623  0217                     	;# 
  1624  028C                     	;# 
  1625  028D                     	;# 
  1626  028E                     	;# 
  1627  0291                     	;# 
  1628  0291                     	;# 
  1629  0292                     	;# 
  1630  0293                     	;# 
  1631  0294                     	;# 
  1632  0295                     	;# 
  1633  0295                     	;# 
  1634  0296                     	;# 
  1635  0297                     	;# 
  1636  0298                     	;# 
  1637  029F                     	;# 
  1638  030C                     	;# 
  1639  030D                     	;# 
  1640  030E                     	;# 
  1641  0311                     	;# 
  1642  0311                     	;# 
  1643  0312                     	;# 
  1644  0313                     	;# 
  1645  0314                     	;# 
  1646  0315                     	;# 
  1647  0315                     	;# 
  1648  0316                     	;# 
  1649  0317                     	;# 
  1650  0318                     	;# 
  1651  038C                     	;# 
  1652  038D                     	;# 
  1653  038E                     	;# 
  1654  0391                     	;# 
  1655  0392                     	;# 
  1656  0393                     	;# 
  1657  0394                     	;# 
  1658  0395                     	;# 
  1659  0396                     	;# 
  1660  0397                     	;# 
  1661  0398                     	;# 
  1662  0399                     	;# 
  1663  039A                     	;# 
  1664  039C                     	;# 
  1665  039D                     	;# 
  1666  039E                     	;# 
  1667  039F                     	;# 
  1668  0411                     	;# 
  1669  0411                     	;# 
  1670  0412                     	;# 
  1671  0413                     	;# 
  1672  0414                     	;# 
  1673  0415                     	;# 
  1674  0416                     	;# 
  1675  0417                     	;# 
  1676  0418                     	;# 
  1677  0418                     	;# 
  1678  0419                     	;# 
  1679  041A                     	;# 
  1680  041B                     	;# 
  1681  041C                     	;# 
  1682  041D                     	;# 
  1683  041E                     	;# 
  1684  041F                     	;# 
  1685  0498                     	;# 
  1686  0498                     	;# 
  1687  0499                     	;# 
  1688  049A                     	;# 
  1689  049B                     	;# 
  1690  049B                     	;# 
  1691  049C                     	;# 
  1692  049D                     	;# 
  1693  049E                     	;# 
  1694  049F                     	;# 
  1695  0617                     	;# 
  1696  0618                     	;# 
  1697  0619                     	;# 
  1698  0619                     	;# 
  1699  061A                     	;# 
  1700  061B                     	;# 
  1701  061C                     	;# 
  1702  061C                     	;# 
  1703  061F                     	;# 
  1704  0691                     	;# 
  1705  0692                     	;# 
  1706  0693                     	;# 
  1707  0694                     	;# 
  1708  0695                     	;# 
  1709  0696                     	;# 
  1710  0697                     	;# 
  1711  0698                     	;# 
  1712  0699                     	;# 
  1713  0711                     	;# 
  1714  0712                     	;# 
  1715  0713                     	;# 
  1716  0714                     	;# 
  1717  0715                     	;# 
  1718  0716                     	;# 
  1719  0717                     	;# 
  1720  0718                     	;# 
  1721  0719                     	;# 
  1722  0891                     	;# 
  1723  0891                     	;# 
  1724  0891                     	;# 
  1725  0891                     	;# 
  1726  0891                     	;# 
  1727  0891                     	;# 
  1728  0892                     	;# 
  1729  0892                     	;# 
  1730  0892                     	;# 
  1731  0893                     	;# 
  1732  0893                     	;# 
  1733  0893                     	;# 
  1734  0893                     	;# 
  1735  0893                     	;# 
  1736  0893                     	;# 
  1737  0894                     	;# 
  1738  0894                     	;# 
  1739  0894                     	;# 
  1740  0895                     	;# 
  1741  0895                     	;# 
  1742  0895                     	;# 
  1743  0896                     	;# 
  1744  0896                     	;# 
  1745  0896                     	;# 
  1746  089B                     	;# 
  1747  0911                     	;# 
  1748  0912                     	;# 
  1749  0913                     	;# 
  1750  0914                     	;# 
  1751  0915                     	;# 
  1752  0916                     	;# 
  1753  0918                     	;# 
  1754  0919                     	;# 
  1755  091A                     	;# 
  1756  091B                     	;# 
  1757  091C                     	;# 
  1758  091D                     	;# 
  1759  091E                     	;# 
  1760  091F                     	;# 
  1761  0E0F                     	;# 
  1762  0E10                     	;# 
  1763  0E11                     	;# 
  1764  0E12                     	;# 
  1765  0E13                     	;# 
  1766  0E14                     	;# 
  1767  0E15                     	;# 
  1768  0E16                     	;# 
  1769  0E17                     	;# 
  1770  0E18                     	;# 
  1771  0E19                     	;# 
  1772  0E1A                     	;# 
  1773  0E1B                     	;# 
  1774  0E1C                     	;# 
  1775  0E20                     	;# 
  1776  0E21                     	;# 
  1777  0E22                     	;# 
  1778  0E24                     	;# 
  1779  0E25                     	;# 
  1780  0E28                     	;# 
  1781  0E29                     	;# 
  1782  0E2A                     	;# 
  1783  0E2B                     	;# 
  1784  0E2C                     	;# 
  1785  0E2D                     	;# 
  1786  0E2E                     	;# 
  1787  0E2F                     	;# 
  1788  0E90                     	;# 
  1789  0E91                     	;# 
  1790  0E92                     	;# 
  1791  0E94                     	;# 
  1792  0E95                     	;# 
  1793  0E9C                     	;# 
  1794  0E9D                     	;# 
  1795  0E9E                     	;# 
  1796  0E9F                     	;# 
  1797  0EA0                     	;# 
  1798  0EA1                     	;# 
  1799  0EA2                     	;# 
  1800  0EA3                     	;# 
  1801  0EA4                     	;# 
  1802  0EA5                     	;# 
  1803  0EA6                     	;# 
  1804  0EA7                     	;# 
  1805  0F0F                     	;# 
  1806  0F10                     	;# 
  1807  0F11                     	;# 
  1808  0F12                     	;# 
  1809  0F13                     	;# 
  1810  0F14                     	;# 
  1811  0F15                     	;# 
  1812  0F16                     	;# 
  1813  0F17                     	;# 
  1814  0F18                     	;# 
  1815  0F19                     	;# 
  1816  0F1A                     	;# 
  1817  0F1B                     	;# 
  1818  0F1C                     	;# 
  1819  0F1D                     	;# 
  1820  0F1E                     	;# 
  1821  0F1F                     	;# 
  1822  0F20                     	;# 
  1823  0F21                     	;# 
  1824  0F22                     	;# 
  1825  0F23                     	;# 
  1826  0F24                     	;# 
  1827  0F25                     	;# 
  1828  0F26                     	;# 
  1829  0F27                     	;# 
  1830  0F28                     	;# 
  1831  0F29                     	;# 
  1832  0F2A                     	;# 
  1833  0F2B                     	;# 
  1834  0F2C                     	;# 
  1835  0F2D                     	;# 
  1836  0F2E                     	;# 
  1837  0F2F                     	;# 
  1838  0F30                     	;# 
  1839  0F31                     	;# 
  1840  0F32                     	;# 
  1841  0F33                     	;# 
  1842  0F34                     	;# 
  1843  0F35                     	;# 
  1844  0F36                     	;# 
  1845  0F37                     	;# 
  1846  0FE4                     	;# 
  1847  0FE5                     	;# 
  1848  0FE6                     	;# 
  1849  0FE7                     	;# 
  1850  0FE8                     	;# 
  1851  0FE9                     	;# 
  1852  0FEA                     	;# 
  1853  0FEB                     	;# 
  1854  0FED                     	;# 
  1855  0FEE                     	;# 
  1856  0FEF                     	;# 
  1857  0000                     	;# 
  1858  0001                     	;# 
  1859  0002                     	;# 
  1860  0003                     	;# 
  1861  0004                     	;# 
  1862  0005                     	;# 
  1863  0006                     	;# 
  1864  0007                     	;# 
  1865  0008                     	;# 
  1866  0009                     	;# 
  1867  000A                     	;# 
  1868  000B                     	;# 
  1869  000C                     	;# 
  1870  000D                     	;# 
  1871  000E                     	;# 
  1872  0010                     	;# 
  1873  0011                     	;# 
  1874  0012                     	;# 
  1875  0013                     	;# 
  1876  0014                     	;# 
  1877  0015                     	;# 
  1878  0015                     	;# 
  1879  0016                     	;# 
  1880  0016                     	;# 
  1881  0017                     	;# 
  1882  0018                     	;# 
  1883  0019                     	;# 
  1884  0019                     	;# 
  1885  001A                     	;# 
  1886  001B                     	;# 
  1887  001C                     	;# 
  1888  001D                     	;# 
  1889  001E                     	;# 
  1890  001F                     	;# 
  1891  008C                     	;# 
  1892  008D                     	;# 
  1893  008E                     	;# 
  1894  0090                     	;# 
  1895  0091                     	;# 
  1896  0092                     	;# 
  1897  0093                     	;# 
  1898  0094                     	;# 
  1899  0097                     	;# 
  1900  009B                     	;# 
  1901  009B                     	;# 
  1902  009C                     	;# 
  1903  009D                     	;# 
  1904  009E                     	;# 
  1905  009F                     	;# 
  1906  010C                     	;# 
  1907  010D                     	;# 
  1908  010E                     	;# 
  1909  0111                     	;# 
  1910  0112                     	;# 
  1911  0113                     	;# 
  1912  0114                     	;# 
  1913  0115                     	;# 
  1914  0116                     	;# 
  1915  0117                     	;# 
  1916  0118                     	;# 
  1917  0119                     	;# 
  1918  018C                     	;# 
  1919  018D                     	;# 
  1920  018E                     	;# 
  1921  0197                     	;# 
  1922  0199                     	;# 
  1923  0199                     	;# 
  1924  0199                     	;# 
  1925  019A                     	;# 
  1926  019A                     	;# 
  1927  019A                     	;# 
  1928  019B                     	;# 
  1929  019B                     	;# 
  1930  019B                     	;# 
  1931  019B                     	;# 
  1932  019B                     	;# 
  1933  019C                     	;# 
  1934  019C                     	;# 
  1935  019C                     	;# 
  1936  019D                     	;# 
  1937  019D                     	;# 
  1938  019D                     	;# 
  1939  019E                     	;# 
  1940  019E                     	;# 
  1941  019E                     	;# 
  1942  019F                     	;# 
  1943  019F                     	;# 
  1944  019F                     	;# 
  1945  019F                     	;# 
  1946  019F                     	;# 
  1947  020C                     	;# 
  1948  020D                     	;# 
  1949  020E                     	;# 
  1950  0211                     	;# 
  1951  0211                     	;# 
  1952  0212                     	;# 
  1953  0212                     	;# 
  1954  0213                     	;# 
  1955  0213                     	;# 
  1956  0214                     	;# 
  1957  0214                     	;# 
  1958  0215                     	;# 
  1959  0215                     	;# 
  1960  0215                     	;# 
  1961  0215                     	;# 
  1962  0216                     	;# 
  1963  0216                     	;# 
  1964  0217                     	;# 
  1965  0217                     	;# 
  1966  028C                     	;# 
  1967  028D                     	;# 
  1968  028E                     	;# 
  1969  0291                     	;# 
  1970  0291                     	;# 
  1971  0292                     	;# 
  1972  0293                     	;# 
  1973  0294                     	;# 
  1974  0295                     	;# 
  1975  0295                     	;# 
  1976  0296                     	;# 
  1977  0297                     	;# 
  1978  0298                     	;# 
  1979  029F                     	;# 
  1980  030C                     	;# 
  1981  030D                     	;# 
  1982  030E                     	;# 
  1983  0311                     	;# 
  1984  0311                     	;# 
  1985  0312                     	;# 
  1986  0313                     	;# 
  1987  0314                     	;# 
  1988  0315                     	;# 
  1989  0315                     	;# 
  1990  0316                     	;# 
  1991  0317                     	;# 
  1992  0318                     	;# 
  1993  038C                     	;# 
  1994  038D                     	;# 
  1995  038E                     	;# 
  1996  0391                     	;# 
  1997  0392                     	;# 
  1998  0393                     	;# 
  1999  0394                     	;# 
  2000  0395                     	;# 
  2001  0396                     	;# 
  2002  0397                     	;# 
  2003  0398                     	;# 
  2004  0399                     	;# 
  2005  039A                     	;# 
  2006  039C                     	;# 
  2007  039D                     	;# 
  2008  039E                     	;# 
  2009  039F                     	;# 
  2010  0411                     	;# 
  2011  0411                     	;# 
  2012  0412                     	;# 
  2013  0413                     	;# 
  2014  0414                     	;# 
  2015  0415                     	;# 
  2016  0416                     	;# 
  2017  0417                     	;# 
  2018  0418                     	;# 
  2019  0418                     	;# 
  2020  0419                     	;# 
  2021  041A                     	;# 
  2022  041B                     	;# 
  2023  041C                     	;# 
  2024  041D                     	;# 
  2025  041E                     	;# 
  2026  041F                     	;# 
  2027  0498                     	;# 
  2028  0498                     	;# 
  2029  0499                     	;# 
  2030  049A                     	;# 
  2031  049B                     	;# 
  2032  049B                     	;# 
  2033  049C                     	;# 
  2034  049D                     	;# 
  2035  049E                     	;# 
  2036  049F                     	;# 
  2037  0617                     	;# 
  2038  0618                     	;# 
  2039  0619                     	;# 
  2040  0619                     	;# 
  2041  061A                     	;# 
  2042  061B                     	;# 
  2043  061C                     	;# 
  2044  061C                     	;# 
  2045  061F                     	;# 
  2046  0691                     	;# 
  2047  0692                     	;# 
  2048  0693                     	;# 
  2049  0694                     	;# 
  2050  0695                     	;# 
  2051  0696                     	;# 
  2052  0697                     	;# 
  2053  0698                     	;# 
  2054  0699                     	;# 
  2055  0711                     	;# 
  2056  0712                     	;# 
  2057  0713                     	;# 
  2058  0714                     	;# 
  2059  0715                     	;# 
  2060  0716                     	;# 
  2061  0717                     	;# 
  2062  0718                     	;# 
  2063  0719                     	;# 
  2064  0891                     	;# 
  2065  0891                     	;# 
  2066  0891                     	;# 
  2067  0891                     	;# 
  2068  0891                     	;# 
  2069  0891                     	;# 
  2070  0892                     	;# 
  2071  0892                     	;# 
  2072  0892                     	;# 
  2073  0893                     	;# 
  2074  0893                     	;# 
  2075  0893                     	;# 
  2076  0893                     	;# 
  2077  0893                     	;# 
  2078  0893                     	;# 
  2079  0894                     	;# 
  2080  0894                     	;# 
  2081  0894                     	;# 
  2082  0895                     	;# 
  2083  0895                     	;# 
  2084  0895                     	;# 
  2085  0896                     	;# 
  2086  0896                     	;# 
  2087  0896                     	;# 
  2088  089B                     	;# 
  2089  0911                     	;# 
  2090  0912                     	;# 
  2091  0913                     	;# 
  2092  0914                     	;# 
  2093  0915                     	;# 
  2094  0916                     	;# 
  2095  0918                     	;# 
  2096  0919                     	;# 
  2097  091A                     	;# 
  2098  091B                     	;# 
  2099  091C                     	;# 
  2100  091D                     	;# 
  2101  091E                     	;# 
  2102  091F                     	;# 
  2103  0E0F                     	;# 
  2104  0E10                     	;# 
  2105  0E11                     	;# 
  2106  0E12                     	;# 
  2107  0E13                     	;# 
  2108  0E14                     	;# 
  2109  0E15                     	;# 
  2110  0E16                     	;# 
  2111  0E17                     	;# 
  2112  0E18                     	;# 
  2113  0E19                     	;# 
  2114  0E1A                     	;# 
  2115  0E1B                     	;# 
  2116  0E1C                     	;# 
  2117  0E20                     	;# 
  2118  0E21                     	;# 
  2119  0E22                     	;# 
  2120  0E24                     	;# 
  2121  0E25                     	;# 
  2122  0E28                     	;# 
  2123  0E29                     	;# 
  2124  0E2A                     	;# 
  2125  0E2B                     	;# 
  2126  0E2C                     	;# 
  2127  0E2D                     	;# 
  2128  0E2E                     	;# 
  2129  0E2F                     	;# 
  2130  0E90                     	;# 
  2131  0E91                     	;# 
  2132  0E92                     	;# 
  2133  0E94                     	;# 
  2134  0E95                     	;# 
  2135  0E9C                     	;# 
  2136  0E9D                     	;# 
  2137  0E9E                     	;# 
  2138  0E9F                     	;# 
  2139  0EA0                     	;# 
  2140  0EA1                     	;# 
  2141  0EA2                     	;# 
  2142  0EA3                     	;# 
  2143  0EA4                     	;# 
  2144  0EA5                     	;# 
  2145  0EA6                     	;# 
  2146  0EA7                     	;# 
  2147  0F0F                     	;# 
  2148  0F10                     	;# 
  2149  0F11                     	;# 
  2150  0F12                     	;# 
  2151  0F13                     	;# 
  2152  0F14                     	;# 
  2153  0F15                     	;# 
  2154  0F16                     	;# 
  2155  0F17                     	;# 
  2156  0F18                     	;# 
  2157  0F19                     	;# 
  2158  0F1A                     	;# 
  2159  0F1B                     	;# 
  2160  0F1C                     	;# 
  2161  0F1D                     	;# 
  2162  0F1E                     	;# 
  2163  0F1F                     	;# 
  2164  0F20                     	;# 
  2165  0F21                     	;# 
  2166  0F22                     	;# 
  2167  0F23                     	;# 
  2168  0F24                     	;# 
  2169  0F25                     	;# 
  2170  0F26                     	;# 
  2171  0F27                     	;# 
  2172  0F28                     	;# 
  2173  0F29                     	;# 
  2174  0F2A                     	;# 
  2175  0F2B                     	;# 
  2176  0F2C                     	;# 
  2177  0F2D                     	;# 
  2178  0F2E                     	;# 
  2179  0F2F                     	;# 
  2180  0F30                     	;# 
  2181  0F31                     	;# 
  2182  0F32                     	;# 
  2183  0F33                     	;# 
  2184  0F34                     	;# 
  2185  0F35                     	;# 
  2186  0F36                     	;# 
  2187  0F37                     	;# 
  2188  0FE4                     	;# 
  2189  0FE5                     	;# 
  2190  0FE6                     	;# 
  2191  0FE7                     	;# 
  2192  0FE8                     	;# 
  2193  0FE9                     	;# 
  2194  0FEA                     	;# 
  2195  0FEB                     	;# 
  2196  0FED                     	;# 
  2197  0FEE                     	;# 
  2198  0FEF                     	;# 
  2199  0000                     	;# 
  2200  0001                     	;# 
  2201  0002                     	;# 
  2202  0003                     	;# 
  2203  0004                     	;# 
  2204  0005                     	;# 
  2205  0006                     	;# 
  2206  0007                     	;# 
  2207  0008                     	;# 
  2208  0009                     	;# 
  2209  000A                     	;# 
  2210  000B                     	;# 
  2211  000C                     	;# 
  2212  000D                     	;# 
  2213  000E                     	;# 
  2214  0010                     	;# 
  2215  0011                     	;# 
  2216  0012                     	;# 
  2217  0013                     	;# 
  2218  0014                     	;# 
  2219  0015                     	;# 
  2220  0015                     	;# 
  2221  0016                     	;# 
  2222  0016                     	;# 
  2223  0017                     	;# 
  2224  0018                     	;# 
  2225  0019                     	;# 
  2226  0019                     	;# 
  2227  001A                     	;# 
  2228  001B                     	;# 
  2229  001C                     	;# 
  2230  001D                     	;# 
  2231  001E                     	;# 
  2232  001F                     	;# 
  2233  008C                     	;# 
  2234  008D                     	;# 
  2235  008E                     	;# 
  2236  0090                     	;# 
  2237  0091                     	;# 
  2238  0092                     	;# 
  2239  0093                     	;# 
  2240  0094                     	;# 
  2241  0097                     	;# 
  2242  009B                     	;# 
  2243  009B                     	;# 
  2244  009C                     	;# 
  2245  009D                     	;# 
  2246  009E                     	;# 
  2247  009F                     	;# 
  2248  010C                     	;# 
  2249  010D                     	;# 
  2250  010E                     	;# 
  2251  0111                     	;# 
  2252  0112                     	;# 
  2253  0113                     	;# 
  2254  0114                     	;# 
  2255  0115                     	;# 
  2256  0116                     	;# 
  2257  0117                     	;# 
  2258  0118                     	;# 
  2259  0119                     	;# 
  2260  018C                     	;# 
  2261  018D                     	;# 
  2262  018E                     	;# 
  2263  0197                     	;# 
  2264  0199                     	;# 
  2265  0199                     	;# 
  2266  0199                     	;# 
  2267  019A                     	;# 
  2268  019A                     	;# 
  2269  019A                     	;# 
  2270  019B                     	;# 
  2271  019B                     	;# 
  2272  019B                     	;# 
  2273  019B                     	;# 
  2274  019B                     	;# 
  2275  019C                     	;# 
  2276  019C                     	;# 
  2277  019C                     	;# 
  2278  019D                     	;# 
  2279  019D                     	;# 
  2280  019D                     	;# 
  2281  019E                     	;# 
  2282  019E                     	;# 
  2283  019E                     	;# 
  2284  019F                     	;# 
  2285  019F                     	;# 
  2286  019F                     	;# 
  2287  019F                     	;# 
  2288  019F                     	;# 
  2289  020C                     	;# 
  2290  020D                     	;# 
  2291  020E                     	;# 
  2292  0211                     	;# 
  2293  0211                     	;# 
  2294  0212                     	;# 
  2295  0212                     	;# 
  2296  0213                     	;# 
  2297  0213                     	;# 
  2298  0214                     	;# 
  2299  0214                     	;# 
  2300  0215                     	;# 
  2301  0215                     	;# 
  2302  0215                     	;# 
  2303  0215                     	;# 
  2304  0216                     	;# 
  2305  0216                     	;# 
  2306  0217                     	;# 
  2307  0217                     	;# 
  2308  028C                     	;# 
  2309  028D                     	;# 
  2310  028E                     	;# 
  2311  0291                     	;# 
  2312  0291                     	;# 
  2313  0292                     	;# 
  2314  0293                     	;# 
  2315  0294                     	;# 
  2316  0295                     	;# 
  2317  0295                     	;# 
  2318  0296                     	;# 
  2319  0297                     	;# 
  2320  0298                     	;# 
  2321  029F                     	;# 
  2322  030C                     	;# 
  2323  030D                     	;# 
  2324  030E                     	;# 
  2325  0311                     	;# 
  2326  0311                     	;# 
  2327  0312                     	;# 
  2328  0313                     	;# 
  2329  0314                     	;# 
  2330  0315                     	;# 
  2331  0315                     	;# 
  2332  0316                     	;# 
  2333  0317                     	;# 
  2334  0318                     	;# 
  2335  038C                     	;# 
  2336  038D                     	;# 
  2337  038E                     	;# 
  2338  0391                     	;# 
  2339  0392                     	;# 
  2340  0393                     	;# 
  2341  0394                     	;# 
  2342  0395                     	;# 
  2343  0396                     	;# 
  2344  0397                     	;# 
  2345  0398                     	;# 
  2346  0399                     	;# 
  2347  039A                     	;# 
  2348  039C                     	;# 
  2349  039D                     	;# 
  2350  039E                     	;# 
  2351  039F                     	;# 
  2352  0411                     	;# 
  2353  0411                     	;# 
  2354  0412                     	;# 
  2355  0413                     	;# 
  2356  0414                     	;# 
  2357  0415                     	;# 
  2358  0416                     	;# 
  2359  0417                     	;# 
  2360  0418                     	;# 
  2361  0418                     	;# 
  2362  0419                     	;# 
  2363  041A                     	;# 
  2364  041B                     	;# 
  2365  041C                     	;# 
  2366  041D                     	;# 
  2367  041E                     	;# 
  2368  041F                     	;# 
  2369  0498                     	;# 
  2370  0498                     	;# 
  2371  0499                     	;# 
  2372  049A                     	;# 
  2373  049B                     	;# 
  2374  049B                     	;# 
  2375  049C                     	;# 
  2376  049D                     	;# 
  2377  049E                     	;# 
  2378  049F                     	;# 
  2379  0617                     	;# 
  2380  0618                     	;# 
  2381  0619                     	;# 
  2382  0619                     	;# 
  2383  061A                     	;# 
  2384  061B                     	;# 
  2385  061C                     	;# 
  2386  061C                     	;# 
  2387  061F                     	;# 
  2388  0691                     	;# 
  2389  0692                     	;# 
  2390  0693                     	;# 
  2391  0694                     	;# 
  2392  0695                     	;# 
  2393  0696                     	;# 
  2394  0697                     	;# 
  2395  0698                     	;# 
  2396  0699                     	;# 
  2397  0711                     	;# 
  2398  0712                     	;# 
  2399  0713                     	;# 
  2400  0714                     	;# 
  2401  0715                     	;# 
  2402  0716                     	;# 
  2403  0717                     	;# 
  2404  0718                     	;# 
  2405  0719                     	;# 
  2406  0891                     	;# 
  2407  0891                     	;# 
  2408  0891                     	;# 
  2409  0891                     	;# 
  2410  0891                     	;# 
  2411  0891                     	;# 
  2412  0892                     	;# 
  2413  0892                     	;# 
  2414  0892                     	;# 
  2415  0893                     	;# 
  2416  0893                     	;# 
  2417  0893                     	;# 
  2418  0893                     	;# 
  2419  0893                     	;# 
  2420  0893                     	;# 
  2421  0894                     	;# 
  2422  0894                     	;# 
  2423  0894                     	;# 
  2424  0895                     	;# 
  2425  0895                     	;# 
  2426  0895                     	;# 
  2427  0896                     	;# 
  2428  0896                     	;# 
  2429  0896                     	;# 
  2430  089B                     	;# 
  2431  0911                     	;# 
  2432  0912                     	;# 
  2433  0913                     	;# 
  2434  0914                     	;# 
  2435  0915                     	;# 
  2436  0916                     	;# 
  2437  0918                     	;# 
  2438  0919                     	;# 
  2439  091A                     	;# 
  2440  091B                     	;# 
  2441  091C                     	;# 
  2442  091D                     	;# 
  2443  091E                     	;# 
  2444  091F                     	;# 
  2445  0E0F                     	;# 
  2446  0E10                     	;# 
  2447  0E11                     	;# 
  2448  0E12                     	;# 
  2449  0E13                     	;# 
  2450  0E14                     	;# 
  2451  0E15                     	;# 
  2452  0E16                     	;# 
  2453  0E17                     	;# 
  2454  0E18                     	;# 
  2455  0E19                     	;# 
  2456  0E1A                     	;# 
  2457  0E1B                     	;# 
  2458  0E1C                     	;# 
  2459  0E20                     	;# 
  2460  0E21                     	;# 
  2461  0E22                     	;# 
  2462  0E24                     	;# 
  2463  0E25                     	;# 
  2464  0E28                     	;# 
  2465  0E29                     	;# 
  2466  0E2A                     	;# 
  2467  0E2B                     	;# 
  2468  0E2C                     	;# 
  2469  0E2D                     	;# 
  2470  0E2E                     	;# 
  2471  0E2F                     	;# 
  2472  0E90                     	;# 
  2473  0E91                     	;# 
  2474  0E92                     	;# 
  2475  0E94                     	;# 
  2476  0E95                     	;# 
  2477  0E9C                     	;# 
  2478  0E9D                     	;# 
  2479  0E9E                     	;# 
  2480  0E9F                     	;# 
  2481  0EA0                     	;# 
  2482  0EA1                     	;# 
  2483  0EA2                     	;# 
  2484  0EA3                     	;# 
  2485  0EA4                     	;# 
  2486  0EA5                     	;# 
  2487  0EA6                     	;# 
  2488  0EA7                     	;# 
  2489  0F0F                     	;# 
  2490  0F10                     	;# 
  2491  0F11                     	;# 
  2492  0F12                     	;# 
  2493  0F13                     	;# 
  2494  0F14                     	;# 
  2495  0F15                     	;# 
  2496  0F16                     	;# 
  2497  0F17                     	;# 
  2498  0F18                     	;# 
  2499  0F19                     	;# 
  2500  0F1A                     	;# 
  2501  0F1B                     	;# 
  2502  0F1C                     	;# 
  2503  0F1D                     	;# 
  2504  0F1E                     	;# 
  2505  0F1F                     	;# 
  2506  0F20                     	;# 
  2507  0F21                     	;# 
  2508  0F22                     	;# 
  2509  0F23                     	;# 
  2510  0F24                     	;# 
  2511  0F25                     	;# 
  2512  0F26                     	;# 
  2513  0F27                     	;# 
  2514  0F28                     	;# 
  2515  0F29                     	;# 
  2516  0F2A                     	;# 
  2517  0F2B                     	;# 
  2518  0F2C                     	;# 
  2519  0F2D                     	;# 
  2520  0F2E                     	;# 
  2521  0F2F                     	;# 
  2522  0F30                     	;# 
  2523  0F31                     	;# 
  2524  0F32                     	;# 
  2525  0F33                     	;# 
  2526  0F34                     	;# 
  2527  0F35                     	;# 
  2528  0F36                     	;# 
  2529  0F37                     	;# 
  2530  0FE4                     	;# 
  2531  0FE5                     	;# 
  2532  0FE6                     	;# 
  2533  0FE7                     	;# 
  2534  0FE8                     	;# 
  2535  0FE9                     	;# 
  2536  0FEA                     	;# 
  2537  0FEB                     	;# 
  2538  0FED                     	;# 
  2539  0FEE                     	;# 
  2540  0FEF                     	;# 
  2541  0000                     	;# 
  2542  0001                     	;# 
  2543  0002                     	;# 
  2544  0003                     	;# 
  2545  0004                     	;# 
  2546  0005                     	;# 
  2547  0006                     	;# 
  2548  0007                     	;# 
  2549  0008                     	;# 
  2550  0009                     	;# 
  2551  000A                     	;# 
  2552  000B                     	;# 
  2553  000C                     	;# 
  2554  000D                     	;# 
  2555  000E                     	;# 
  2556  0010                     	;# 
  2557  0011                     	;# 
  2558  0012                     	;# 
  2559  0013                     	;# 
  2560  0014                     	;# 
  2561  0015                     	;# 
  2562  0015                     	;# 
  2563  0016                     	;# 
  2564  0016                     	;# 
  2565  0017                     	;# 
  2566  0018                     	;# 
  2567  0019                     	;# 
  2568  0019                     	;# 
  2569  001A                     	;# 
  2570  001B                     	;# 
  2571  001C                     	;# 
  2572  001D                     	;# 
  2573  001E                     	;# 
  2574  001F                     	;# 
  2575  008C                     	;# 
  2576  008D                     	;# 
  2577  008E                     	;# 
  2578  0090                     	;# 
  2579  0091                     	;# 
  2580  0092                     	;# 
  2581  0093                     	;# 
  2582  0094                     	;# 
  2583  0097                     	;# 
  2584  009B                     	;# 
  2585  009B                     	;# 
  2586  009C                     	;# 
  2587  009D                     	;# 
  2588  009E                     	;# 
  2589  009F                     	;# 
  2590  010C                     	;# 
  2591  010D                     	;# 
  2592  010E                     	;# 
  2593  0111                     	;# 
  2594  0112                     	;# 
  2595  0113                     	;# 
  2596  0114                     	;# 
  2597  0115                     	;# 
  2598  0116                     	;# 
  2599  0117                     	;# 
  2600  0118                     	;# 
  2601  0119                     	;# 
  2602  018C                     	;# 
  2603  018D                     	;# 
  2604  018E                     	;# 
  2605  0197                     	;# 
  2606  0199                     	;# 
  2607  0199                     	;# 
  2608  0199                     	;# 
  2609  019A                     	;# 
  2610  019A                     	;# 
  2611  019A                     	;# 
  2612  019B                     	;# 
  2613  019B                     	;# 
  2614  019B                     	;# 
  2615  019B                     	;# 
  2616  019B                     	;# 
  2617  019C                     	;# 
  2618  019C                     	;# 
  2619  019C                     	;# 
  2620  019D                     	;# 
  2621  019D                     	;# 
  2622  019D                     	;# 
  2623  019E                     	;# 
  2624  019E                     	;# 
  2625  019E                     	;# 
  2626  019F                     	;# 
  2627  019F                     	;# 
  2628  019F                     	;# 
  2629  019F                     	;# 
  2630  019F                     	;# 
  2631  020C                     	;# 
  2632  020D                     	;# 
  2633  020E                     	;# 
  2634  0211                     	;# 
  2635  0211                     	;# 
  2636  0212                     	;# 
  2637  0212                     	;# 
  2638  0213                     	;# 
  2639  0213                     	;# 
  2640  0214                     	;# 
  2641  0214                     	;# 
  2642  0215                     	;# 
  2643  0215                     	;# 
  2644  0215                     	;# 
  2645  0215                     	;# 
  2646  0216                     	;# 
  2647  0216                     	;# 
  2648  0217                     	;# 
  2649  0217                     	;# 
  2650  028C                     	;# 
  2651  028D                     	;# 
  2652  028E                     	;# 
  2653  0291                     	;# 
  2654  0291                     	;# 
  2655  0292                     	;# 
  2656  0293                     	;# 
  2657  0294                     	;# 
  2658  0295                     	;# 
  2659  0295                     	;# 
  2660  0296                     	;# 
  2661  0297                     	;# 
  2662  0298                     	;# 
  2663  029F                     	;# 
  2664  030C                     	;# 
  2665  030D                     	;# 
  2666  030E                     	;# 
  2667  0311                     	;# 
  2668  0311                     	;# 
  2669  0312                     	;# 
  2670  0313                     	;# 
  2671  0314                     	;# 
  2672  0315                     	;# 
  2673  0315                     	;# 
  2674  0316                     	;# 
  2675  0317                     	;# 
  2676  0318                     	;# 
  2677  038C                     	;# 
  2678  038D                     	;# 
  2679  038E                     	;# 
  2680  0391                     	;# 
  2681  0392                     	;# 
  2682  0393                     	;# 
  2683  0394                     	;# 
  2684  0395                     	;# 
  2685  0396                     	;# 
  2686  0397                     	;# 
  2687  0398                     	;# 
  2688  0399                     	;# 
  2689  039A                     	;# 
  2690  039C                     	;# 
  2691  039D                     	;# 
  2692  039E                     	;# 
  2693  039F                     	;# 
  2694  0411                     	;# 
  2695  0411                     	;# 
  2696  0412                     	;# 
  2697  0413                     	;# 
  2698  0414                     	;# 
  2699  0415                     	;# 
  2700  0416                     	;# 
  2701  0417                     	;# 
  2702  0418                     	;# 
  2703  0418                     	;# 
  2704  0419                     	;# 
  2705  041A                     	;# 
  2706  041B                     	;# 
  2707  041C                     	;# 
  2708  041D                     	;# 
  2709  041E                     	;# 
  2710  041F                     	;# 
  2711  0498                     	;# 
  2712  0498                     	;# 
  2713  0499                     	;# 
  2714  049A                     	;# 
  2715  049B                     	;# 
  2716  049B                     	;# 
  2717  049C                     	;# 
  2718  049D                     	;# 
  2719  049E                     	;# 
  2720  049F                     	;# 
  2721  0617                     	;# 
  2722  0618                     	;# 
  2723  0619                     	;# 
  2724  0619                     	;# 
  2725  061A                     	;# 
  2726  061B                     	;# 
  2727  061C                     	;# 
  2728  061C                     	;# 
  2729  061F                     	;# 
  2730  0691                     	;# 
  2731  0692                     	;# 
  2732  0693                     	;# 
  2733  0694                     	;# 
  2734  0695                     	;# 
  2735  0696                     	;# 
  2736  0697                     	;# 
  2737  0698                     	;# 
  2738  0699                     	;# 
  2739  0711                     	;# 
  2740  0712                     	;# 
  2741  0713                     	;# 
  2742  0714                     	;# 
  2743  0715                     	;# 
  2744  0716                     	;# 
  2745  0717                     	;# 
  2746  0718                     	;# 
  2747  0719                     	;# 
  2748  0891                     	;# 
  2749  0891                     	;# 
  2750  0891                     	;# 
  2751  0891                     	;# 
  2752  0891                     	;# 
  2753  0891                     	;# 
  2754  0892                     	;# 
  2755  0892                     	;# 
  2756  0892                     	;# 
  2757  0893                     	;# 
  2758  0893                     	;# 
  2759  0893                     	;# 
  2760  0893                     	;# 
  2761  0893                     	;# 
  2762  0893                     	;# 
  2763  0894                     	;# 
  2764  0894                     	;# 
  2765  0894                     	;# 
  2766  0895                     	;# 
  2767  0895                     	;# 
  2768  0895                     	;# 
  2769  0896                     	;# 
  2770  0896                     	;# 
  2771  0896                     	;# 
  2772  089B                     	;# 
  2773  0911                     	;# 
  2774  0912                     	;# 
  2775  0913                     	;# 
  2776  0914                     	;# 
  2777  0915                     	;# 
  2778  0916                     	;# 
  2779  0918                     	;# 
  2780  0919                     	;# 
  2781  091A                     	;# 
  2782  091B                     	;# 
  2783  091C                     	;# 
  2784  091D                     	;# 
  2785  091E                     	;# 
  2786  091F                     	;# 
  2787  0E0F                     	;# 
  2788  0E10                     	;# 
  2789  0E11                     	;# 
  2790  0E12                     	;# 
  2791  0E13                     	;# 
  2792  0E14                     	;# 
  2793  0E15                     	;# 
  2794  0E16                     	;# 
  2795  0E17                     	;# 
  2796  0E18                     	;# 
  2797  0E19                     	;# 
  2798  0E1A                     	;# 
  2799  0E1B                     	;# 
  2800  0E1C                     	;# 
  2801  0E20                     	;# 
  2802  0E21                     	;# 
  2803  0E22                     	;# 
  2804  0E24                     	;# 
  2805  0E25                     	;# 
  2806  0E28                     	;# 
  2807  0E29                     	;# 
  2808  0E2A                     	;# 
  2809  0E2B                     	;# 
  2810  0E2C                     	;# 
  2811  0E2D                     	;# 
  2812  0E2E                     	;# 
  2813  0E2F                     	;# 
  2814  0E90                     	;# 
  2815  0E91                     	;# 
  2816  0E92                     	;# 
  2817  0E94                     	;# 
  2818  0E95                     	;# 
  2819  0E9C                     	;# 
  2820  0E9D                     	;# 
  2821  0E9E                     	;# 
  2822  0E9F                     	;# 
  2823  0EA0                     	;# 
  2824  0EA1                     	;# 
  2825  0EA2                     	;# 
  2826  0EA3                     	;# 
  2827  0EA4                     	;# 
  2828  0EA5                     	;# 
  2829  0EA6                     	;# 
  2830  0EA7                     	;# 
  2831  0F0F                     	;# 
  2832  0F10                     	;# 
  2833  0F11                     	;# 
  2834  0F12                     	;# 
  2835  0F13                     	;# 
  2836  0F14                     	;# 
  2837  0F15                     	;# 
  2838  0F16                     	;# 
  2839  0F17                     	;# 
  2840  0F18                     	;# 
  2841  0F19                     	;# 
  2842  0F1A                     	;# 
  2843  0F1B                     	;# 
  2844  0F1C                     	;# 
  2845  0F1D                     	;# 
  2846  0F1E                     	;# 
  2847  0F1F                     	;# 
  2848  0F20                     	;# 
  2849  0F21                     	;# 
  2850  0F22                     	;# 
  2851  0F23                     	;# 
  2852  0F24                     	;# 
  2853  0F25                     	;# 
  2854  0F26                     	;# 
  2855  0F27                     	;# 
  2856  0F28                     	;# 
  2857  0F29                     	;# 
  2858  0F2A                     	;# 
  2859  0F2B                     	;# 
  2860  0F2C                     	;# 
  2861  0F2D                     	;# 
  2862  0F2E                     	;# 
  2863  0F2F                     	;# 
  2864  0F30                     	;# 
  2865  0F31                     	;# 
  2866  0F32                     	;# 
  2867  0F33                     	;# 
  2868  0F34                     	;# 
  2869  0F35                     	;# 
  2870  0F36                     	;# 
  2871  0F37                     	;# 
  2872  0FE4                     	;# 
  2873  0FE5                     	;# 
  2874  0FE6                     	;# 
  2875  0FE7                     	;# 
  2876  0FE8                     	;# 
  2877  0FE9                     	;# 
  2878  0FEA                     	;# 
  2879  0FEB                     	;# 
  2880  0FED                     	;# 
  2881  0FEE                     	;# 
  2882  0FEF                     	;# 
  2883  0000                     	;# 
  2884  0001                     	;# 
  2885  0002                     	;# 
  2886  0003                     	;# 
  2887  0004                     	;# 
  2888  0005                     	;# 
  2889  0006                     	;# 
  2890  0007                     	;# 
  2891  0008                     	;# 
  2892  0009                     	;# 
  2893  000A                     	;# 
  2894  000B                     	;# 
  2895  000C                     	;# 
  2896  000D                     	;# 
  2897  000E                     	;# 
  2898  0010                     	;# 
  2899  0011                     	;# 
  2900  0012                     	;# 
  2901  0013                     	;# 
  2902  0014                     	;# 
  2903  0015                     	;# 
  2904  0015                     	;# 
  2905  0016                     	;# 
  2906  0016                     	;# 
  2907  0017                     	;# 
  2908  0018                     	;# 
  2909  0019                     	;# 
  2910  0019                     	;# 
  2911  001A                     	;# 
  2912  001B                     	;# 
  2913  001C                     	;# 
  2914  001D                     	;# 
  2915  001E                     	;# 
  2916  001F                     	;# 
  2917  008C                     	;# 
  2918  008D                     	;# 
  2919  008E                     	;# 
  2920  0090                     	;# 
  2921  0091                     	;# 
  2922  0092                     	;# 
  2923  0093                     	;# 
  2924  0094                     	;# 
  2925  0097                     	;# 
  2926  009B                     	;# 
  2927  009B                     	;# 
  2928  009C                     	;# 
  2929  009D                     	;# 
  2930  009E                     	;# 
  2931  009F                     	;# 
  2932  010C                     	;# 
  2933  010D                     	;# 
  2934  010E                     	;# 
  2935  0111                     	;# 
  2936  0112                     	;# 
  2937  0113                     	;# 
  2938  0114                     	;# 
  2939  0115                     	;# 
  2940  0116                     	;# 
  2941  0117                     	;# 
  2942  0118                     	;# 
  2943  0119                     	;# 
  2944  018C                     	;# 
  2945  018D                     	;# 
  2946  018E                     	;# 
  2947  0197                     	;# 
  2948  0199                     	;# 
  2949  0199                     	;# 
  2950  0199                     	;# 
  2951  019A                     	;# 
  2952  019A                     	;# 
  2953  019A                     	;# 
  2954  019B                     	;# 
  2955  019B                     	;# 
  2956  019B                     	;# 
  2957  019B                     	;# 
  2958  019B                     	;# 
  2959  019C                     	;# 
  2960  019C                     	;# 
  2961  019C                     	;# 
  2962  019D                     	;# 
  2963  019D                     	;# 
  2964  019D                     	;# 
  2965  019E                     	;# 
  2966  019E                     	;# 
  2967  019E                     	;# 
  2968  019F                     	;# 
  2969  019F                     	;# 
  2970  019F                     	;# 
  2971  019F                     	;# 
  2972  019F                     	;# 
  2973  020C                     	;# 
  2974  020D                     	;# 
  2975  020E                     	;# 
  2976  0211                     	;# 
  2977  0211                     	;# 
  2978  0212                     	;# 
  2979  0212                     	;# 
  2980  0213                     	;# 
  2981  0213                     	;# 
  2982  0214                     	;# 
  2983  0214                     	;# 
  2984  0215                     	;# 
  2985  0215                     	;# 
  2986  0215                     	;# 
  2987  0215                     	;# 
  2988  0216                     	;# 
  2989  0216                     	;# 
  2990  0217                     	;# 
  2991  0217                     	;# 
  2992  028C                     	;# 
  2993  028D                     	;# 
  2994  028E                     	;# 
  2995  0291                     	;# 
  2996  0291                     	;# 
  2997  0292                     	;# 
  2998  0293                     	;# 
  2999  0294                     	;# 
  3000  0295                     	;# 
  3001  0295                     	;# 
  3002  0296                     	;# 
  3003  0297                     	;# 
  3004  0298                     	;# 
  3005  029F                     	;# 
  3006  030C                     	;# 
  3007  030D                     	;# 
  3008  030E                     	;# 
  3009  0311                     	;# 
  3010  0311                     	;# 
  3011  0312                     	;# 
  3012  0313                     	;# 
  3013  0314                     	;# 
  3014  0315                     	;# 
  3015  0315                     	;# 
  3016  0316                     	;# 
  3017  0317                     	;# 
  3018  0318                     	;# 
  3019  038C                     	;# 
  3020  038D                     	;# 
  3021  038E                     	;# 
  3022  0391                     	;# 
  3023  0392                     	;# 
  3024  0393                     	;# 
  3025  0394                     	;# 
  3026  0395                     	;# 
  3027  0396                     	;# 
  3028  0397                     	;# 
  3029  0398                     	;# 
  3030  0399                     	;# 
  3031  039A                     	;# 
  3032  039C                     	;# 
  3033  039D                     	;# 
  3034  039E                     	;# 
  3035  039F                     	;# 
  3036  0411                     	;# 
  3037  0411                     	;# 
  3038  0412                     	;# 
  3039  0413                     	;# 
  3040  0414                     	;# 
  3041  0415                     	;# 
  3042  0416                     	;# 
  3043  0417                     	;# 
  3044  0418                     	;# 
  3045  0418                     	;# 
  3046  0419                     	;# 
  3047  041A                     	;# 
  3048  041B                     	;# 
  3049  041C                     	;# 
  3050  041D                     	;# 
  3051  041E                     	;# 
  3052  041F                     	;# 
  3053  0498                     	;# 
  3054  0498                     	;# 
  3055  0499                     	;# 
  3056  049A                     	;# 
  3057  049B                     	;# 
  3058  049B                     	;# 
  3059  049C                     	;# 
  3060  049D                     	;# 
  3061  049E                     	;# 
  3062  049F                     	;# 
  3063  0617                     	;# 
  3064  0618                     	;# 
  3065  0619                     	;# 
  3066  0619                     	;# 
  3067  061A                     	;# 
  3068  061B                     	;# 
  3069  061C                     	;# 
  3070  061C                     	;# 
  3071  061F                     	;# 
  3072  0691                     	;# 
  3073  0692                     	;# 
  3074  0693                     	;# 
  3075  0694                     	;# 
  3076  0695                     	;# 
  3077  0696                     	;# 
  3078  0697                     	;# 
  3079  0698                     	;# 
  3080  0699                     	;# 
  3081  0711                     	;# 
  3082  0712                     	;# 
  3083  0713                     	;# 
  3084  0714                     	;# 
  3085  0715                     	;# 
  3086  0716                     	;# 
  3087  0717                     	;# 
  3088  0718                     	;# 
  3089  0719                     	;# 
  3090  0891                     	;# 
  3091  0891                     	;# 
  3092  0891                     	;# 
  3093  0891                     	;# 
  3094  0891                     	;# 
  3095  0891                     	;# 
  3096  0892                     	;# 
  3097  0892                     	;# 
  3098  0892                     	;# 
  3099  0893                     	;# 
  3100  0893                     	;# 
  3101  0893                     	;# 
  3102  0893                     	;# 
  3103  0893                     	;# 
  3104  0893                     	;# 
  3105  0894                     	;# 
  3106  0894                     	;# 
  3107  0894                     	;# 
  3108  0895                     	;# 
  3109  0895                     	;# 
  3110  0895                     	;# 
  3111  0896                     	;# 
  3112  0896                     	;# 
  3113  0896                     	;# 
  3114  089B                     	;# 
  3115  0911                     	;# 
  3116  0912                     	;# 
  3117  0913                     	;# 
  3118  0914                     	;# 
  3119  0915                     	;# 
  3120  0916                     	;# 
  3121  0918                     	;# 
  3122  0919                     	;# 
  3123  091A                     	;# 
  3124  091B                     	;# 
  3125  091C                     	;# 
  3126  091D                     	;# 
  3127  091E                     	;# 
  3128  091F                     	;# 
  3129  0E0F                     	;# 
  3130  0E10                     	;# 
  3131  0E11                     	;# 
  3132  0E12                     	;# 
  3133  0E13                     	;# 
  3134  0E14                     	;# 
  3135  0E15                     	;# 
  3136  0E16                     	;# 
  3137  0E17                     	;# 
  3138  0E18                     	;# 
  3139  0E19                     	;# 
  3140  0E1A                     	;# 
  3141  0E1B                     	;# 
  3142  0E1C                     	;# 
  3143  0E20                     	;# 
  3144  0E21                     	;# 
  3145  0E22                     	;# 
  3146  0E24                     	;# 
  3147  0E25                     	;# 
  3148  0E28                     	;# 
  3149  0E29                     	;# 
  3150  0E2A                     	;# 
  3151  0E2B                     	;# 
  3152  0E2C                     	;# 
  3153  0E2D                     	;# 
  3154  0E2E                     	;# 
  3155  0E2F                     	;# 
  3156  0E90                     	;# 
  3157  0E91                     	;# 
  3158  0E92                     	;# 
  3159  0E94                     	;# 
  3160  0E95                     	;# 
  3161  0E9C                     	;# 
  3162  0E9D                     	;# 
  3163  0E9E                     	;# 
  3164  0E9F                     	;# 
  3165  0EA0                     	;# 
  3166  0EA1                     	;# 
  3167  0EA2                     	;# 
  3168  0EA3                     	;# 
  3169  0EA4                     	;# 
  3170  0EA5                     	;# 
  3171  0EA6                     	;# 
  3172  0EA7                     	;# 
  3173  0F0F                     	;# 
  3174  0F10                     	;# 
  3175  0F11                     	;# 
  3176  0F12                     	;# 
  3177  0F13                     	;# 
  3178  0F14                     	;# 
  3179  0F15                     	;# 
  3180  0F16                     	;# 
  3181  0F17                     	;# 
  3182  0F18                     	;# 
  3183  0F19                     	;# 
  3184  0F1A                     	;# 
  3185  0F1B                     	;# 
  3186  0F1C                     	;# 
  3187  0F1D                     	;# 
  3188  0F1E                     	;# 
  3189  0F1F                     	;# 
  3190  0F20                     	;# 
  3191  0F21                     	;# 
  3192  0F22                     	;# 
  3193  0F23                     	;# 
  3194  0F24                     	;# 
  3195  0F25                     	;# 
  3196  0F26                     	;# 
  3197  0F27                     	;# 
  3198  0F28                     	;# 
  3199  0F29                     	;# 
  3200  0F2A                     	;# 
  3201  0F2B                     	;# 
  3202  0F2C                     	;# 
  3203  0F2D                     	;# 
  3204  0F2E                     	;# 
  3205  0F2F                     	;# 
  3206  0F30                     	;# 
  3207  0F31                     	;# 
  3208  0F32                     	;# 
  3209  0F33                     	;# 
  3210  0F34                     	;# 
  3211  0F35                     	;# 
  3212  0F36                     	;# 
  3213  0F37                     	;# 
  3214  0FE4                     	;# 
  3215  0FE5                     	;# 
  3216  0FE6                     	;# 
  3217  0FE7                     	;# 
  3218  0FE8                     	;# 
  3219  0FE9                     	;# 
  3220  0FEA                     	;# 
  3221  0FEB                     	;# 
  3222  0FED                     	;# 
  3223  0FEE                     	;# 
  3224  0FEF                     	;# 
  3225  0000                     	;# 
  3226  0001                     	;# 
  3227  0002                     	;# 
  3228  0003                     	;# 
  3229  0004                     	;# 
  3230  0005                     	;# 
  3231  0006                     	;# 
  3232  0007                     	;# 
  3233  0008                     	;# 
  3234  0009                     	;# 
  3235  000A                     	;# 
  3236  000B                     	;# 
  3237  000C                     	;# 
  3238  000D                     	;# 
  3239  000E                     	;# 
  3240  0010                     	;# 
  3241  0011                     	;# 
  3242  0012                     	;# 
  3243  0013                     	;# 
  3244  0014                     	;# 
  3245  0015                     	;# 
  3246  0015                     	;# 
  3247  0016                     	;# 
  3248  0016                     	;# 
  3249  0017                     	;# 
  3250  0018                     	;# 
  3251  0019                     	;# 
  3252  0019                     	;# 
  3253  001A                     	;# 
  3254  001B                     	;# 
  3255  001C                     	;# 
  3256  001D                     	;# 
  3257  001E                     	;# 
  3258  001F                     	;# 
  3259  008C                     	;# 
  3260  008D                     	;# 
  3261  008E                     	;# 
  3262  0090                     	;# 
  3263  0091                     	;# 
  3264  0092                     	;# 
  3265  0093                     	;# 
  3266  0094                     	;# 
  3267  0097                     	;# 
  3268  009B                     	;# 
  3269  009B                     	;# 
  3270  009C                     	;# 
  3271  009D                     	;# 
  3272  009E                     	;# 
  3273  009F                     	;# 
  3274  010C                     	;# 
  3275  010D                     	;# 
  3276  010E                     	;# 
  3277  0111                     	;# 
  3278  0112                     	;# 
  3279  0113                     	;# 
  3280  0114                     	;# 
  3281  0115                     	;# 
  3282  0116                     	;# 
  3283  0117                     	;# 
  3284  0118                     	;# 
  3285  0119                     	;# 
  3286  018C                     	;# 
  3287  018D                     	;# 
  3288  018E                     	;# 
  3289  0197                     	;# 
  3290  0199                     	;# 
  3291  0199                     	;# 
  3292  0199                     	;# 
  3293  019A                     	;# 
  3294  019A                     	;# 
  3295  019A                     	;# 
  3296  019B                     	;# 
  3297  019B                     	;# 
  3298  019B                     	;# 
  3299  019B                     	;# 
  3300  019B                     	;# 
  3301  019C                     	;# 
  3302  019C                     	;# 
  3303  019C                     	;# 
  3304  019D                     	;# 
  3305  019D                     	;# 
  3306  019D                     	;# 
  3307  019E                     	;# 
  3308  019E                     	;# 
  3309  019E                     	;# 
  3310  019F                     	;# 
  3311  019F                     	;# 
  3312  019F                     	;# 
  3313  019F                     	;# 
  3314  019F                     	;# 
  3315  020C                     	;# 
  3316  020D                     	;# 
  3317  020E                     	;# 
  3318  0211                     	;# 
  3319  0211                     	;# 
  3320  0212                     	;# 
  3321  0212                     	;# 
  3322  0213                     	;# 
  3323  0213                     	;# 
  3324  0214                     	;# 
  3325  0214                     	;# 
  3326  0215                     	;# 
  3327  0215                     	;# 
  3328  0215                     	;# 
  3329  0215                     	;# 
  3330  0216                     	;# 
  3331  0216                     	;# 
  3332  0217                     	;# 
  3333  0217                     	;# 
  3334  028C                     	;# 
  3335  028D                     	;# 
  3336  028E                     	;# 
  3337  0291                     	;# 
  3338  0291                     	;# 
  3339  0292                     	;# 
  3340  0293                     	;# 
  3341  0294                     	;# 
  3342  0295                     	;# 
  3343  0295                     	;# 
  3344  0296                     	;# 
  3345  0297                     	;# 
  3346  0298                     	;# 
  3347  029F                     	;# 
  3348  030C                     	;# 
  3349  030D                     	;# 
  3350  030E                     	;# 
  3351  0311                     	;# 
  3352  0311                     	;# 
  3353  0312                     	;# 
  3354  0313                     	;# 
  3355  0314                     	;# 
  3356  0315                     	;# 
  3357  0315                     	;# 
  3358  0316                     	;# 
  3359  0317                     	;# 
  3360  0318                     	;# 
  3361  038C                     	;# 
  3362  038D                     	;# 
  3363  038E                     	;# 
  3364  0391                     	;# 
  3365  0392                     	;# 
  3366  0393                     	;# 
  3367  0394                     	;# 
  3368  0395                     	;# 
  3369  0396                     	;# 
  3370  0397                     	;# 
  3371  0398                     	;# 
  3372  0399                     	;# 
  3373  039A                     	;# 
  3374  039C                     	;# 
  3375  039D                     	;# 
  3376  039E                     	;# 
  3377  039F                     	;# 
  3378  0411                     	;# 
  3379  0411                     	;# 
  3380  0412                     	;# 
  3381  0413                     	;# 
  3382  0414                     	;# 
  3383  0415                     	;# 
  3384  0416                     	;# 
  3385  0417                     	;# 
  3386  0418                     	;# 
  3387  0418                     	;# 
  3388  0419                     	;# 
  3389  041A                     	;# 
  3390  041B                     	;# 
  3391  041C                     	;# 
  3392  041D                     	;# 
  3393  041E                     	;# 
  3394  041F                     	;# 
  3395  0498                     	;# 
  3396  0498                     	;# 
  3397  0499                     	;# 
  3398  049A                     	;# 
  3399  049B                     	;# 
  3400  049B                     	;# 
  3401  049C                     	;# 
  3402  049D                     	;# 
  3403  049E                     	;# 
  3404  049F                     	;# 
  3405  0617                     	;# 
  3406  0618                     	;# 
  3407  0619                     	;# 
  3408  0619                     	;# 
  3409  061A                     	;# 
  3410  061B                     	;# 
  3411  061C                     	;# 
  3412  061C                     	;# 
  3413  061F                     	;# 
  3414  0691                     	;# 
  3415  0692                     	;# 
  3416  0693                     	;# 
  3417  0694                     	;# 
  3418  0695                     	;# 
  3419  0696                     	;# 
  3420  0697                     	;# 
  3421  0698                     	;# 
  3422  0699                     	;# 
  3423  0711                     	;# 
  3424  0712                     	;# 
  3425  0713                     	;# 
  3426  0714                     	;# 
  3427  0715                     	;# 
  3428  0716                     	;# 
  3429  0717                     	;# 
  3430  0718                     	;# 
  3431  0719                     	;# 
  3432  0891                     	;# 
  3433  0891                     	;# 
  3434  0891                     	;# 
  3435  0891                     	;# 
  3436  0891                     	;# 
  3437  0891                     	;# 
  3438  0892                     	;# 
  3439  0892                     	;# 
  3440  0892                     	;# 
  3441  0893                     	;# 
  3442  0893                     	;# 
  3443  0893                     	;# 
  3444  0893                     	;# 
  3445  0893                     	;# 
  3446  0893                     	;# 
  3447  0894                     	;# 
  3448  0894                     	;# 
  3449  0894                     	;# 
  3450  0895                     	;# 
  3451  0895                     	;# 
  3452  0895                     	;# 
  3453  0896                     	;# 
  3454  0896                     	;# 
  3455  0896                     	;# 
  3456  089B                     	;# 
  3457  0911                     	;# 
  3458  0912                     	;# 
  3459  0913                     	;# 
  3460  0914                     	;# 
  3461  0915                     	;# 
  3462  0916                     	;# 
  3463  0918                     	;# 
  3464  0919                     	;# 
  3465  091A                     	;# 
  3466  091B                     	;# 
  3467  091C                     	;# 
  3468  091D                     	;# 
  3469  091E                     	;# 
  3470  091F                     	;# 
  3471  0E0F                     	;# 
  3472  0E10                     	;# 
  3473  0E11                     	;# 
  3474  0E12                     	;# 
  3475  0E13                     	;# 
  3476  0E14                     	;# 
  3477  0E15                     	;# 
  3478  0E16                     	;# 
  3479  0E17                     	;# 
  3480  0E18                     	;# 
  3481  0E19                     	;# 
  3482  0E1A                     	;# 
  3483  0E1B                     	;# 
  3484  0E1C                     	;# 
  3485  0E20                     	;# 
  3486  0E21                     	;# 
  3487  0E22                     	;# 
  3488  0E24                     	;# 
  3489  0E25                     	;# 
  3490  0E28                     	;# 
  3491  0E29                     	;# 
  3492  0E2A                     	;# 
  3493  0E2B                     	;# 
  3494  0E2C                     	;# 
  3495  0E2D                     	;# 
  3496  0E2E                     	;# 
  3497  0E2F                     	;# 
  3498  0E90                     	;# 
  3499  0E91                     	;# 
  3500  0E92                     	;# 
  3501  0E94                     	;# 
  3502  0E95                     	;# 
  3503  0E9C                     	;# 
  3504  0E9D                     	;# 
  3505  0E9E                     	;# 
  3506  0E9F                     	;# 
  3507  0EA0                     	;# 
  3508  0EA1                     	;# 
  3509  0EA2                     	;# 
  3510  0EA3                     	;# 
  3511  0EA4                     	;# 
  3512  0EA5                     	;# 
  3513  0EA6                     	;# 
  3514  0EA7                     	;# 
  3515  0F0F                     	;# 
  3516  0F10                     	;# 
  3517  0F11                     	;# 
  3518  0F12                     	;# 
  3519  0F13                     	;# 
  3520  0F14                     	;# 
  3521  0F15                     	;# 
  3522  0F16                     	;# 
  3523  0F17                     	;# 
  3524  0F18                     	;# 
  3525  0F19                     	;# 
  3526  0F1A                     	;# 
  3527  0F1B                     	;# 
  3528  0F1C                     	;# 
  3529  0F1D                     	;# 
  3530  0F1E                     	;# 
  3531  0F1F                     	;# 
  3532  0F20                     	;# 
  3533  0F21                     	;# 
  3534  0F22                     	;# 
  3535  0F23                     	;# 
  3536  0F24                     	;# 
  3537  0F25                     	;# 
  3538  0F26                     	;# 
  3539  0F27                     	;# 
  3540  0F28                     	;# 
  3541  0F29                     	;# 
  3542  0F2A                     	;# 
  3543  0F2B                     	;# 
  3544  0F2C                     	;# 
  3545  0F2D                     	;# 
  3546  0F2E                     	;# 
  3547  0F2F                     	;# 
  3548  0F30                     	;# 
  3549  0F31                     	;# 
  3550  0F32                     	;# 
  3551  0F33                     	;# 
  3552  0F34                     	;# 
  3553  0F35                     	;# 
  3554  0F36                     	;# 
  3555  0F37                     	;# 
  3556  0FE4                     	;# 
  3557  0FE5                     	;# 
  3558  0FE6                     	;# 
  3559  0FE7                     	;# 
  3560  0FE8                     	;# 
  3561  0FE9                     	;# 
  3562  0FEA                     	;# 
  3563  0FEB                     	;# 
  3564  0FED                     	;# 
  3565  0FEE                     	;# 
  3566  0FEF                     	;# 
  3567  0000                     	;# 
  3568  0001                     	;# 
  3569  0002                     	;# 
  3570  0003                     	;# 
  3571  0004                     	;# 
  3572  0005                     	;# 
  3573  0006                     	;# 
  3574  0007                     	;# 
  3575  0008                     	;# 
  3576  0009                     	;# 
  3577  000A                     	;# 
  3578  000B                     	;# 
  3579  000C                     	;# 
  3580  000D                     	;# 
  3581  000E                     	;# 
  3582  0010                     	;# 
  3583  0011                     	;# 
  3584  0012                     	;# 
  3585  0013                     	;# 
  3586  0014                     	;# 
  3587  0015                     	;# 
  3588  0015                     	;# 
  3589  0016                     	;# 
  3590  0016                     	;# 
  3591  0017                     	;# 
  3592  0018                     	;# 
  3593  0019                     	;# 
  3594  0019                     	;# 
  3595  001A                     	;# 
  3596  001B                     	;# 
  3597  001C                     	;# 
  3598  001D                     	;# 
  3599  001E                     	;# 
  3600  001F                     	;# 
  3601  008C                     	;# 
  3602  008D                     	;# 
  3603  008E                     	;# 
  3604  0090                     	;# 
  3605  0091                     	;# 
  3606  0092                     	;# 
  3607  0093                     	;# 
  3608  0094                     	;# 
  3609  0097                     	;# 
  3610  009B                     	;# 
  3611  009B                     	;# 
  3612  009C                     	;# 
  3613  009D                     	;# 
  3614  009E                     	;# 
  3615  009F                     	;# 
  3616  010C                     	;# 
  3617  010D                     	;# 
  3618  010E                     	;# 
  3619  0111                     	;# 
  3620  0112                     	;# 
  3621  0113                     	;# 
  3622  0114                     	;# 
  3623  0115                     	;# 
  3624  0116                     	;# 
  3625  0117                     	;# 
  3626  0118                     	;# 
  3627  0119                     	;# 
  3628  018C                     	;# 
  3629  018D                     	;# 
  3630  018E                     	;# 
  3631  0197                     	;# 
  3632  0199                     	;# 
  3633  0199                     	;# 
  3634  0199                     	;# 
  3635  019A                     	;# 
  3636  019A                     	;# 
  3637  019A                     	;# 
  3638  019B                     	;# 
  3639  019B                     	;# 
  3640  019B                     	;# 
  3641  019B                     	;# 
  3642  019B                     	;# 
  3643  019C                     	;# 
  3644  019C                     	;# 
  3645  019C                     	;# 
  3646  019D                     	;# 
  3647  019D                     	;# 
  3648  019D                     	;# 
  3649  019E                     	;# 
  3650  019E                     	;# 
  3651  019E                     	;# 
  3652  019F                     	;# 
  3653  019F                     	;# 
  3654  019F                     	;# 
  3655  019F                     	;# 
  3656  019F                     	;# 
  3657  020C                     	;# 
  3658  020D                     	;# 
  3659  020E                     	;# 
  3660  0211                     	;# 
  3661  0211                     	;# 
  3662  0212                     	;# 
  3663  0212                     	;# 
  3664  0213                     	;# 
  3665  0213                     	;# 
  3666  0214                     	;# 
  3667  0214                     	;# 
  3668  0215                     	;# 
  3669  0215                     	;# 
  3670  0215                     	;# 
  3671  0215                     	;# 
  3672  0216                     	;# 
  3673  0216                     	;# 
  3674  0217                     	;# 
  3675  0217                     	;# 
  3676  028C                     	;# 
  3677  028D                     	;# 
  3678  028E                     	;# 
  3679  0291                     	;# 
  3680  0291                     	;# 
  3681  0292                     	;# 
  3682  0293                     	;# 
  3683  0294                     	;# 
  3684  0295                     	;# 
  3685  0295                     	;# 
  3686  0296                     	;# 
  3687  0297                     	;# 
  3688  0298                     	;# 
  3689  029F                     	;# 
  3690  030C                     	;# 
  3691  030D                     	;# 
  3692  030E                     	;# 
  3693  0311                     	;# 
  3694  0311                     	;# 
  3695  0312                     	;# 
  3696  0313                     	;# 
  3697  0314                     	;# 
  3698  0315                     	;# 
  3699  0315                     	;# 
  3700  0316                     	;# 
  3701  0317                     	;# 
  3702  0318                     	;# 
  3703  038C                     	;# 
  3704  038D                     	;# 
  3705  038E                     	;# 
  3706  0391                     	;# 
  3707  0392                     	;# 
  3708  0393                     	;# 
  3709  0394                     	;# 
  3710  0395                     	;# 
  3711  0396                     	;# 
  3712  0397                     	;# 
  3713  0398                     	;# 
  3714  0399                     	;# 
  3715  039A                     	;# 
  3716  039C                     	;# 
  3717  039D                     	;# 
  3718  039E                     	;# 
  3719  039F                     	;# 
  3720  0411                     	;# 
  3721  0411                     	;# 
  3722  0412                     	;# 
  3723  0413                     	;# 
  3724  0414                     	;# 
  3725  0415                     	;# 
  3726  0416                     	;# 
  3727  0417                     	;# 
  3728  0418                     	;# 
  3729  0418                     	;# 
  3730  0419                     	;# 
  3731  041A                     	;# 
  3732  041B                     	;# 
  3733  041C                     	;# 
  3734  041D                     	;# 
  3735  041E                     	;# 
  3736  041F                     	;# 
  3737  0498                     	;# 
  3738  0498                     	;# 
  3739  0499                     	;# 
  3740  049A                     	;# 
  3741  049B                     	;# 
  3742  049B                     	;# 
  3743  049C                     	;# 
  3744  049D                     	;# 
  3745  049E                     	;# 
  3746  049F                     	;# 
  3747  0617                     	;# 
  3748  0618                     	;# 
  3749  0619                     	;# 
  3750  0619                     	;# 
  3751  061A                     	;# 
  3752  061B                     	;# 
  3753  061C                     	;# 
  3754  061C                     	;# 
  3755  061F                     	;# 
  3756  0691                     	;# 
  3757  0692                     	;# 
  3758  0693                     	;# 
  3759  0694                     	;# 
  3760  0695                     	;# 
  3761  0696                     	;# 
  3762  0697                     	;# 
  3763  0698                     	;# 
  3764  0699                     	;# 
  3765  0711                     	;# 
  3766  0712                     	;# 
  3767  0713                     	;# 
  3768  0714                     	;# 
  3769  0715                     	;# 
  3770  0716                     	;# 
  3771  0717                     	;# 
  3772  0718                     	;# 
  3773  0719                     	;# 
  3774  0891                     	;# 
  3775  0891                     	;# 
  3776  0891                     	;# 
  3777  0891                     	;# 
  3778  0891                     	;# 
  3779  0891                     	;# 
  3780  0892                     	;# 
  3781  0892                     	;# 
  3782  0892                     	;# 
  3783  0893                     	;# 
  3784  0893                     	;# 
  3785  0893                     	;# 
  3786  0893                     	;# 
  3787  0893                     	;# 
  3788  0893                     	;# 
  3789  0894                     	;# 
  3790  0894                     	;# 
  3791  0894                     	;# 
  3792  0895                     	;# 
  3793  0895                     	;# 
  3794  0895                     	;# 
  3795  0896                     	;# 
  3796  0896                     	;# 
  3797  0896                     	;# 
  3798  089B                     	;# 
  3799  0911                     	;# 
  3800  0912                     	;# 
  3801  0913                     	;# 
  3802  0914                     	;# 
  3803  0915                     	;# 
  3804  0916                     	;# 
  3805  0918                     	;# 
  3806  0919                     	;# 
  3807  091A                     	;# 
  3808  091B                     	;# 
  3809  091C                     	;# 
  3810  091D                     	;# 
  3811  091E                     	;# 
  3812  091F                     	;# 
  3813  0E0F                     	;# 
  3814  0E10                     	;# 
  3815  0E11                     	;# 
  3816  0E12                     	;# 
  3817  0E13                     	;# 
  3818  0E14                     	;# 
  3819  0E15                     	;# 
  3820  0E16                     	;# 
  3821  0E17                     	;# 
  3822  0E18                     	;# 
  3823  0E19                     	;# 
  3824  0E1A                     	;# 
  3825  0E1B                     	;# 
  3826  0E1C                     	;# 
  3827  0E20                     	;# 
  3828  0E21                     	;# 
  3829  0E22                     	;# 
  3830  0E24                     	;# 
  3831  0E25                     	;# 
  3832  0E28                     	;# 
  3833  0E29                     	;# 
  3834  0E2A                     	;# 
  3835  0E2B                     	;# 
  3836  0E2C                     	;# 
  3837  0E2D                     	;# 
  3838  0E2E                     	;# 
  3839  0E2F                     	;# 
  3840  0E90                     	;# 
  3841  0E91                     	;# 
  3842  0E92                     	;# 
  3843  0E94                     	;# 
  3844  0E95                     	;# 
  3845  0E9C                     	;# 
  3846  0E9D                     	;# 
  3847  0E9E                     	;# 
  3848  0E9F                     	;# 
  3849  0EA0                     	;# 
  3850  0EA1                     	;# 
  3851  0EA2                     	;# 
  3852  0EA3                     	;# 
  3853  0EA4                     	;# 
  3854  0EA5                     	;# 
  3855  0EA6                     	;# 
  3856  0EA7                     	;# 
  3857  0F0F                     	;# 
  3858  0F10                     	;# 
  3859  0F11                     	;# 
  3860  0F12                     	;# 
  3861  0F13                     	;# 
  3862  0F14                     	;# 
  3863  0F15                     	;# 
  3864  0F16                     	;# 
  3865  0F17                     	;# 
  3866  0F18                     	;# 
  3867  0F19                     	;# 
  3868  0F1A                     	;# 
  3869  0F1B                     	;# 
  3870  0F1C                     	;# 
  3871  0F1D                     	;# 
  3872  0F1E                     	;# 
  3873  0F1F                     	;# 
  3874  0F20                     	;# 
  3875  0F21                     	;# 
  3876  0F22                     	;# 
  3877  0F23                     	;# 
  3878  0F24                     	;# 
  3879  0F25                     	;# 
  3880  0F26                     	;# 
  3881  0F27                     	;# 
  3882  0F28                     	;# 
  3883  0F29                     	;# 
  3884  0F2A                     	;# 
  3885  0F2B                     	;# 
  3886  0F2C                     	;# 
  3887  0F2D                     	;# 
  3888  0F2E                     	;# 
  3889  0F2F                     	;# 
  3890  0F30                     	;# 
  3891  0F31                     	;# 
  3892  0F32                     	;# 
  3893  0F33                     	;# 
  3894  0F34                     	;# 
  3895  0F35                     	;# 
  3896  0F36                     	;# 
  3897  0F37                     	;# 
  3898  0FE4                     	;# 
  3899  0FE5                     	;# 
  3900  0FE6                     	;# 
  3901  0FE7                     	;# 
  3902  0FE8                     	;# 
  3903  0FE9                     	;# 
  3904  0FEA                     	;# 
  3905  0FEB                     	;# 
  3906  0FED                     	;# 
  3907  0FEE                     	;# 
  3908  0FEF                     	;# 
  3909  0000                     	;# 
  3910  0001                     	;# 
  3911  0002                     	;# 
  3912  0003                     	;# 
  3913  0004                     	;# 
  3914  0005                     	;# 
  3915  0006                     	;# 
  3916  0007                     	;# 
  3917  0008                     	;# 
  3918  0009                     	;# 
  3919  000A                     	;# 
  3920  000B                     	;# 
  3921  000C                     	;# 
  3922  000D                     	;# 
  3923  000E                     	;# 
  3924  0010                     	;# 
  3925  0011                     	;# 
  3926  0012                     	;# 
  3927  0013                     	;# 
  3928  0014                     	;# 
  3929  0015                     	;# 
  3930  0015                     	;# 
  3931  0016                     	;# 
  3932  0016                     	;# 
  3933  0017                     	;# 
  3934  0018                     	;# 
  3935  0019                     	;# 
  3936  0019                     	;# 
  3937  001A                     	;# 
  3938  001B                     	;# 
  3939  001C                     	;# 
  3940  001D                     	;# 
  3941  001E                     	;# 
  3942  001F                     	;# 
  3943  008C                     	;# 
  3944  008D                     	;# 
  3945  008E                     	;# 
  3946  0090                     	;# 
  3947  0091                     	;# 
  3948  0092                     	;# 
  3949  0093                     	;# 
  3950  0094                     	;# 
  3951  0097                     	;# 
  3952  009B                     	;# 
  3953  009B                     	;# 
  3954  009C                     	;# 
  3955  009D                     	;# 
  3956  009E                     	;# 
  3957  009F                     	;# 
  3958  010C                     	;# 
  3959  010D                     	;# 
  3960  010E                     	;# 
  3961  0111                     	;# 
  3962  0112                     	;# 
  3963  0113                     	;# 
  3964  0114                     	;# 
  3965  0115                     	;# 
  3966  0116                     	;# 
  3967  0117                     	;# 
  3968  0118                     	;# 
  3969  0119                     	;# 
  3970  018C                     	;# 
  3971  018D                     	;# 
  3972  018E                     	;# 
  3973  0197                     	;# 
  3974  0199                     	;# 
  3975  0199                     	;# 
  3976  0199                     	;# 
  3977  019A                     	;# 
  3978  019A                     	;# 
  3979  019A                     	;# 
  3980  019B                     	;# 
  3981  019B                     	;# 
  3982  019B                     	;# 
  3983  019B                     	;# 
  3984  019B                     	;# 
  3985  019C                     	;# 
  3986  019C                     	;# 
  3987  019C                     	;# 
  3988  019D                     	;# 
  3989  019D                     	;# 
  3990  019D                     	;# 
  3991  019E                     	;# 
  3992  019E                     	;# 
  3993  019E                     	;# 
  3994  019F                     	;# 
  3995  019F                     	;# 
  3996  019F                     	;# 
  3997  019F                     	;# 
  3998  019F                     	;# 
  3999  020C                     	;# 
  4000  020D                     	;# 
  4001  020E                     	;# 
  4002  0211                     	;# 
  4003  0211                     	;# 
  4004  0212                     	;# 
  4005  0212                     	;# 
  4006  0213                     	;# 
  4007  0213                     	;# 
  4008  0214                     	;# 
  4009  0214                     	;# 
  4010  0215                     	;# 
  4011  0215                     	;# 
  4012  0215                     	;# 
  4013  0215                     	;# 
  4014  0216                     	;# 
  4015  0216                     	;# 
  4016  0217                     	;# 
  4017  0217                     	;# 
  4018  028C                     	;# 
  4019  028D                     	;# 
  4020  028E                     	;# 
  4021  0291                     	;# 
  4022  0291                     	;# 
  4023  0292                     	;# 
  4024  0293                     	;# 
  4025  0294                     	;# 
  4026  0295                     	;# 
  4027  0295                     	;# 
  4028  0296                     	;# 
  4029  0297                     	;# 
  4030  0298                     	;# 
  4031  029F                     	;# 
  4032  030C                     	;# 
  4033  030D                     	;# 
  4034  030E                     	;# 
  4035  0311                     	;# 
  4036  0311                     	;# 
  4037  0312                     	;# 
  4038  0313                     	;# 
  4039  0314                     	;# 
  4040  0315                     	;# 
  4041  0315                     	;# 
  4042  0316                     	;# 
  4043  0317                     	;# 
  4044  0318                     	;# 
  4045  038C                     	;# 
  4046  038D                     	;# 
  4047  038E                     	;# 
  4048  0391                     	;# 
  4049  0392                     	;# 
  4050  0393                     	;# 
  4051  0394                     	;# 
  4052  0395                     	;# 
  4053  0396                     	;# 
  4054  0397                     	;# 
  4055  0398                     	;# 
  4056  0399                     	;# 
  4057  039A                     	;# 
  4058  039C                     	;# 
  4059  039D                     	;# 
  4060  039E                     	;# 
  4061  039F                     	;# 
  4062  0411                     	;# 
  4063  0411                     	;# 
  4064  0412                     	;# 
  4065  0413                     	;# 
  4066  0414                     	;# 
  4067  0415                     	;# 
  4068  0416                     	;# 
  4069  0417                     	;# 
  4070  0418                     	;# 
  4071  0418                     	;# 
  4072  0419                     	;# 
  4073  041A                     	;# 
  4074  041B                     	;# 
  4075  041C                     	;# 
  4076  041D                     	;# 
  4077  041E                     	;# 
  4078  041F                     	;# 
  4079  0498                     	;# 
  4080  0498                     	;# 
  4081  0499                     	;# 
  4082  049A                     	;# 
  4083  049B                     	;# 
  4084  049B                     	;# 
  4085  049C                     	;# 
  4086  049D                     	;# 
  4087  049E                     	;# 
  4088  049F                     	;# 
  4089  0617                     	;# 
  4090  0618                     	;# 
  4091  0619                     	;# 
  4092  0619                     	;# 
  4093  061A                     	;# 
  4094  061B                     	;# 
  4095  061C                     	;# 
  4096  061C                     	;# 
  4097  061F                     	;# 
  4098  0691                     	;# 
  4099  0692                     	;# 
  4100  0693                     	;# 
  4101  0694                     	;# 
  4102  0695                     	;# 
  4103  0696                     	;# 
  4104  0697                     	;# 
  4105  0698                     	;# 
  4106  0699                     	;# 
  4107  0711                     	;# 
  4108  0712                     	;# 
  4109  0713                     	;# 
  4110  0714                     	;# 
  4111  0715                     	;# 
  4112  0716                     	;# 
  4113  0717                     	;# 
  4114  0718                     	;# 
  4115  0719                     	;# 
  4116  0891                     	;# 
  4117  0891                     	;# 
  4118  0891                     	;# 
  4119  0891                     	;# 
  4120  0891                     	;# 
  4121  0891                     	;# 
  4122  0892                     	;# 
  4123  0892                     	;# 
  4124  0892                     	;# 
  4125  0893                     	;# 
  4126  0893                     	;# 
  4127  0893                     	;# 
  4128  0893                     	;# 
  4129  0893                     	;# 
  4130  0893                     	;# 
  4131  0894                     	;# 
  4132  0894                     	;# 
  4133  0894                     	;# 
  4134  0895                     	;# 
  4135  0895                     	;# 
  4136  0895                     	;# 
  4137  0896                     	;# 
  4138  0896                     	;# 
  4139  0896                     	;# 
  4140  089B                     	;# 
  4141  0911                     	;# 
  4142  0912                     	;# 
  4143  0913                     	;# 
  4144  0914                     	;# 
  4145  0915                     	;# 
  4146  0916                     	;# 
  4147  0918                     	;# 
  4148  0919                     	;# 
  4149  091A                     	;# 
  4150  091B                     	;# 
  4151  091C                     	;# 
  4152  091D                     	;# 
  4153  091E                     	;# 
  4154  091F                     	;# 
  4155  0E0F                     	;# 
  4156  0E10                     	;# 
  4157  0E11                     	;# 
  4158  0E12                     	;# 
  4159  0E13                     	;# 
  4160  0E14                     	;# 
  4161  0E15                     	;# 
  4162  0E16                     	;# 
  4163  0E17                     	;# 
  4164  0E18                     	;# 
  4165  0E19                     	;# 
  4166  0E1A                     	;# 
  4167  0E1B                     	;# 
  4168  0E1C                     	;# 
  4169  0E20                     	;# 
  4170  0E21                     	;# 
  4171  0E22                     	;# 
  4172  0E24                     	;# 
  4173  0E25                     	;# 
  4174  0E28                     	;# 
  4175  0E29                     	;# 
  4176  0E2A                     	;# 
  4177  0E2B                     	;# 
  4178  0E2C                     	;# 
  4179  0E2D                     	;# 
  4180  0E2E                     	;# 
  4181  0E2F                     	;# 
  4182  0E90                     	;# 
  4183  0E91                     	;# 
  4184  0E92                     	;# 
  4185  0E94                     	;# 
  4186  0E95                     	;# 
  4187  0E9C                     	;# 
  4188  0E9D                     	;# 
  4189  0E9E                     	;# 
  4190  0E9F                     	;# 
  4191  0EA0                     	;# 
  4192  0EA1                     	;# 
  4193  0EA2                     	;# 
  4194  0EA3                     	;# 
  4195  0EA4                     	;# 
  4196  0EA5                     	;# 
  4197  0EA6                     	;# 
  4198  0EA7                     	;# 
  4199  0F0F                     	;# 
  4200  0F10                     	;# 
  4201  0F11                     	;# 
  4202  0F12                     	;# 
  4203  0F13                     	;# 
  4204  0F14                     	;# 
  4205  0F15                     	;# 
  4206  0F16                     	;# 
  4207  0F17                     	;# 
  4208  0F18                     	;# 
  4209  0F19                     	;# 
  4210  0F1A                     	;# 
  4211  0F1B                     	;# 
  4212  0F1C                     	;# 
  4213  0F1D                     	;# 
  4214  0F1E                     	;# 
  4215  0F1F                     	;# 
  4216  0F20                     	;# 
  4217  0F21                     	;# 
  4218  0F22                     	;# 
  4219  0F23                     	;# 
  4220  0F24                     	;# 
  4221  0F25                     	;# 
  4222  0F26                     	;# 
  4223  0F27                     	;# 
  4224  0F28                     	;# 
  4225  0F29                     	;# 
  4226  0F2A                     	;# 
  4227  0F2B                     	;# 
  4228  0F2C                     	;# 
  4229  0F2D                     	;# 
  4230  0F2E                     	;# 
  4231  0F2F                     	;# 
  4232  0F30                     	;# 
  4233  0F31                     	;# 
  4234  0F32                     	;# 
  4235  0F33                     	;# 
  4236  0F34                     	;# 
  4237  0F35                     	;# 
  4238  0F36                     	;# 
  4239  0F37                     	;# 
  4240  0FE4                     	;# 
  4241  0FE5                     	;# 
  4242  0FE6                     	;# 
  4243  0FE7                     	;# 
  4244  0FE8                     	;# 
  4245  0FE9                     	;# 
  4246  0FEA                     	;# 
  4247  0FEB                     	;# 
  4248  0FED                     	;# 
  4249  0FEE                     	;# 
  4250  0FEF                     	;# 
  4251  0000                     	;# 
  4252  0001                     	;# 
  4253  0002                     	;# 
  4254  0003                     	;# 
  4255  0004                     	;# 
  4256  0005                     	;# 
  4257  0006                     	;# 
  4258  0007                     	;# 
  4259  0008                     	;# 
  4260  0009                     	;# 
  4261  000A                     	;# 
  4262  000B                     	;# 
  4263  000C                     	;# 
  4264  000D                     	;# 
  4265  000E                     	;# 
  4266  0010                     	;# 
  4267  0011                     	;# 
  4268  0012                     	;# 
  4269  0013                     	;# 
  4270  0014                     	;# 
  4271  0015                     	;# 
  4272  0015                     	;# 
  4273  0016                     	;# 
  4274  0016                     	;# 
  4275  0017                     	;# 
  4276  0018                     	;# 
  4277  0019                     	;# 
  4278  0019                     	;# 
  4279  001A                     	;# 
  4280  001B                     	;# 
  4281  001C                     	;# 
  4282  001D                     	;# 
  4283  001E                     	;# 
  4284  001F                     	;# 
  4285  008C                     	;# 
  4286  008D                     	;# 
  4287  008E                     	;# 
  4288  0090                     	;# 
  4289  0091                     	;# 
  4290  0092                     	;# 
  4291  0093                     	;# 
  4292  0094                     	;# 
  4293  0097                     	;# 
  4294  009B                     	;# 
  4295  009B                     	;# 
  4296  009C                     	;# 
  4297  009D                     	;# 
  4298  009E                     	;# 
  4299  009F                     	;# 
  4300  010C                     	;# 
  4301  010D                     	;# 
  4302  010E                     	;# 
  4303  0111                     	;# 
  4304  0112                     	;# 
  4305  0113                     	;# 
  4306  0114                     	;# 
  4307  0115                     	;# 
  4308  0116                     	;# 
  4309  0117                     	;# 
  4310  0118                     	;# 
  4311  0119                     	;# 
  4312  018C                     	;# 
  4313  018D                     	;# 
  4314  018E                     	;# 
  4315  0197                     	;# 
  4316  0199                     	;# 
  4317  0199                     	;# 
  4318  0199                     	;# 
  4319  019A                     	;# 
  4320  019A                     	;# 
  4321  019A                     	;# 
  4322  019B                     	;# 
  4323  019B                     	;# 
  4324  019B                     	;# 
  4325  019B                     	;# 
  4326  019B                     	;# 
  4327  019C                     	;# 
  4328  019C                     	;# 
  4329  019C                     	;# 
  4330  019D                     	;# 
  4331  019D                     	;# 
  4332  019D                     	;# 
  4333  019E                     	;# 
  4334  019E                     	;# 
  4335  019E                     	;# 
  4336  019F                     	;# 
  4337  019F                     	;# 
  4338  019F                     	;# 
  4339  019F                     	;# 
  4340  019F                     	;# 
  4341  020C                     	;# 
  4342  020D                     	;# 
  4343  020E                     	;# 
  4344  0211                     	;# 
  4345  0211                     	;# 
  4346  0212                     	;# 
  4347  0212                     	;# 
  4348  0213                     	;# 
  4349  0213                     	;# 
  4350  0214                     	;# 
  4351  0214                     	;# 
  4352  0215                     	;# 
  4353  0215                     	;# 
  4354  0215                     	;# 
  4355  0215                     	;# 
  4356  0216                     	;# 
  4357  0216                     	;# 
  4358  0217                     	;# 
  4359  0217                     	;# 
  4360  028C                     	;# 
  4361  028D                     	;# 
  4362  028E                     	;# 
  4363  0291                     	;# 
  4364  0291                     	;# 
  4365  0292                     	;# 
  4366  0293                     	;# 
  4367  0294                     	;# 
  4368  0295                     	;# 
  4369  0295                     	;# 
  4370  0296                     	;# 
  4371  0297                     	;# 
  4372  0298                     	;# 
  4373  029F                     	;# 
  4374  030C                     	;# 
  4375  030D                     	;# 
  4376  030E                     	;# 
  4377  0311                     	;# 
  4378  0311                     	;# 
  4379  0312                     	;# 
  4380  0313                     	;# 
  4381  0314                     	;# 
  4382  0315                     	;# 
  4383  0315                     	;# 
  4384  0316                     	;# 
  4385  0317                     	;# 
  4386  0318                     	;# 
  4387  038C                     	;# 
  4388  038D                     	;# 
  4389  038E                     	;# 
  4390  0391                     	;# 
  4391  0392                     	;# 
  4392  0393                     	;# 
  4393  0394                     	;# 
  4394  0395                     	;# 
  4395  0396                     	;# 
  4396  0397                     	;# 
  4397  0398                     	;# 
  4398  0399                     	;# 
  4399  039A                     	;# 
  4400  039C                     	;# 
  4401  039D                     	;# 
  4402  039E                     	;# 
  4403  039F                     	;# 
  4404  0411                     	;# 
  4405  0411                     	;# 
  4406  0412                     	;# 
  4407  0413                     	;# 
  4408  0414                     	;# 
  4409  0415                     	;# 
  4410  0416                     	;# 
  4411  0417                     	;# 
  4412  0418                     	;# 
  4413  0418                     	;# 
  4414  0419                     	;# 
  4415  041A                     	;# 
  4416  041B                     	;# 
  4417  041C                     	;# 
  4418  041D                     	;# 
  4419  041E                     	;# 
  4420  041F                     	;# 
  4421  0498                     	;# 
  4422  0498                     	;# 
  4423  0499                     	;# 
  4424  049A                     	;# 
  4425  049B                     	;# 
  4426  049B                     	;# 
  4427  049C                     	;# 
  4428  049D                     	;# 
  4429  049E                     	;# 
  4430  049F                     	;# 
  4431  0617                     	;# 
  4432  0618                     	;# 
  4433  0619                     	;# 
  4434  0619                     	;# 
  4435  061A                     	;# 
  4436  061B                     	;# 
  4437  061C                     	;# 
  4438  061C                     	;# 
  4439  061F                     	;# 
  4440  0691                     	;# 
  4441  0692                     	;# 
  4442  0693                     	;# 
  4443  0694                     	;# 
  4444  0695                     	;# 
  4445  0696                     	;# 
  4446  0697                     	;# 
  4447  0698                     	;# 
  4448  0699                     	;# 
  4449  0711                     	;# 
  4450  0712                     	;# 
  4451  0713                     	;# 
  4452  0714                     	;# 
  4453  0715                     	;# 
  4454  0716                     	;# 
  4455  0717                     	;# 
  4456  0718                     	;# 
  4457  0719                     	;# 
  4458  0891                     	;# 
  4459  0891                     	;# 
  4460  0891                     	;# 
  4461  0891                     	;# 
  4462  0891                     	;# 
  4463  0891                     	;# 
  4464  0892                     	;# 
  4465  0892                     	;# 
  4466  0892                     	;# 
  4467  0893                     	;# 
  4468  0893                     	;# 
  4469  0893                     	;# 
  4470  0893                     	;# 
  4471  0893                     	;# 
  4472  0893                     	;# 
  4473  0894                     	;# 
  4474  0894                     	;# 
  4475  0894                     	;# 
  4476  0895                     	;# 
  4477  0895                     	;# 
  4478  0895                     	;# 
  4479  0896                     	;# 
  4480  0896                     	;# 
  4481  0896                     	;# 
  4482  089B                     	;# 
  4483  0911                     	;# 
  4484  0912                     	;# 
  4485  0913                     	;# 
  4486  0914                     	;# 
  4487  0915                     	;# 
  4488  0916                     	;# 
  4489  0918                     	;# 
  4490  0919                     	;# 
  4491  091A                     	;# 
  4492  091B                     	;# 
  4493  091C                     	;# 
  4494  091D                     	;# 
  4495  091E                     	;# 
  4496  091F                     	;# 
  4497  0E0F                     	;# 
  4498  0E10                     	;# 
  4499  0E11                     	;# 
  4500  0E12                     	;# 
  4501  0E13                     	;# 
  4502  0E14                     	;# 
  4503  0E15                     	;# 
  4504  0E16                     	;# 
  4505  0E17                     	;# 
  4506  0E18                     	;# 
  4507  0E19                     	;# 
  4508  0E1A                     	;# 
  4509  0E1B                     	;# 
  4510  0E1C                     	;# 
  4511  0E20                     	;# 
  4512  0E21                     	;# 
  4513  0E22                     	;# 
  4514  0E24                     	;# 
  4515  0E25                     	;# 
  4516  0E28                     	;# 
  4517  0E29                     	;# 
  4518  0E2A                     	;# 
  4519  0E2B                     	;# 
  4520  0E2C                     	;# 
  4521  0E2D                     	;# 
  4522  0E2E                     	;# 
  4523  0E2F                     	;# 
  4524  0E90                     	;# 
  4525  0E91                     	;# 
  4526  0E92                     	;# 
  4527  0E94                     	;# 
  4528  0E95                     	;# 
  4529  0E9C                     	;# 
  4530  0E9D                     	;# 
  4531  0E9E                     	;# 
  4532  0E9F                     	;# 
  4533  0EA0                     	;# 
  4534  0EA1                     	;# 
  4535  0EA2                     	;# 
  4536  0EA3                     	;# 
  4537  0EA4                     	;# 
  4538  0EA5                     	;# 
  4539  0EA6                     	;# 
  4540  0EA7                     	;# 
  4541  0F0F                     	;# 
  4542  0F10                     	;# 
  4543  0F11                     	;# 
  4544  0F12                     	;# 
  4545  0F13                     	;# 
  4546  0F14                     	;# 
  4547  0F15                     	;# 
  4548  0F16                     	;# 
  4549  0F17                     	;# 
  4550  0F18                     	;# 
  4551  0F19                     	;# 
  4552  0F1A                     	;# 
  4553  0F1B                     	;# 
  4554  0F1C                     	;# 
  4555  0F1D                     	;# 
  4556  0F1E                     	;# 
  4557  0F1F                     	;# 
  4558  0F20                     	;# 
  4559  0F21                     	;# 
  4560  0F22                     	;# 
  4561  0F23                     	;# 
  4562  0F24                     	;# 
  4563  0F25                     	;# 
  4564  0F26                     	;# 
  4565  0F27                     	;# 
  4566  0F28                     	;# 
  4567  0F29                     	;# 
  4568  0F2A                     	;# 
  4569  0F2B                     	;# 
  4570  0F2C                     	;# 
  4571  0F2D                     	;# 
  4572  0F2E                     	;# 
  4573  0F2F                     	;# 
  4574  0F30                     	;# 
  4575  0F31                     	;# 
  4576  0F32                     	;# 
  4577  0F33                     	;# 
  4578  0F34                     	;# 
  4579  0F35                     	;# 
  4580  0F36                     	;# 
  4581  0F37                     	;# 
  4582  0FE4                     	;# 
  4583  0FE5                     	;# 
  4584  0FE6                     	;# 
  4585  0FE7                     	;# 
  4586  0FE8                     	;# 
  4587  0FE9                     	;# 
  4588  0FEA                     	;# 
  4589  0FEB                     	;# 
  4590  0FED                     	;# 
  4591  0FEE                     	;# 
  4592  0FEF                     	;# 
  4593  0000                     	;# 
  4594  0001                     	;# 
  4595  0002                     	;# 
  4596  0003                     	;# 
  4597  0004                     	;# 
  4598  0005                     	;# 
  4599  0006                     	;# 
  4600  0007                     	;# 
  4601  0008                     	;# 
  4602  0009                     	;# 
  4603  000A                     	;# 
  4604  000B                     	;# 
  4605  000C                     	;# 
  4606  000D                     	;# 
  4607  000E                     	;# 
  4608  0010                     	;# 
  4609  0011                     	;# 
  4610  0012                     	;# 
  4611  0013                     	;# 
  4612  0014                     	;# 
  4613  0015                     	;# 
  4614  0015                     	;# 
  4615  0016                     	;# 
  4616  0016                     	;# 
  4617  0017                     	;# 
  4618  0018                     	;# 
  4619  0019                     	;# 
  4620  0019                     	;# 
  4621  001A                     	;# 
  4622  001B                     	;# 
  4623  001C                     	;# 
  4624  001D                     	;# 
  4625  001E                     	;# 
  4626  001F                     	;# 
  4627  008C                     	;# 
  4628  008D                     	;# 
  4629  008E                     	;# 
  4630  0090                     	;# 
  4631  0091                     	;# 
  4632  0092                     	;# 
  4633  0093                     	;# 
  4634  0094                     	;# 
  4635  0097                     	;# 
  4636  009B                     	;# 
  4637  009B                     	;# 
  4638  009C                     	;# 
  4639  009D                     	;# 
  4640  009E                     	;# 
  4641  009F                     	;# 
  4642  010C                     	;# 
  4643  010D                     	;# 
  4644  010E                     	;# 
  4645  0111                     	;# 
  4646  0112                     	;# 
  4647  0113                     	;# 
  4648  0114                     	;# 
  4649  0115                     	;# 
  4650  0116                     	;# 
  4651  0117                     	;# 
  4652  0118                     	;# 
  4653  0119                     	;# 
  4654  018C                     	;# 
  4655  018D                     	;# 
  4656  018E                     	;# 
  4657  0197                     	;# 
  4658  0199                     	;# 
  4659  0199                     	;# 
  4660  0199                     	;# 
  4661  019A                     	;# 
  4662  019A                     	;# 
  4663  019A                     	;# 
  4664  019B                     	;# 
  4665  019B                     	;# 
  4666  019B                     	;# 
  4667  019B                     	;# 
  4668  019B                     	;# 
  4669  019C                     	;# 
  4670  019C                     	;# 
  4671  019C                     	;# 
  4672  019D                     	;# 
  4673  019D                     	;# 
  4674  019D                     	;# 
  4675  019E                     	;# 
  4676  019E                     	;# 
  4677  019E                     	;# 
  4678  019F                     	;# 
  4679  019F                     	;# 
  4680  019F                     	;# 
  4681  019F                     	;# 
  4682  019F                     	;# 
  4683  020C                     	;# 
  4684  020D                     	;# 
  4685  020E                     	;# 
  4686  0211                     	;# 
  4687  0211                     	;# 
  4688  0212                     	;# 
  4689  0212                     	;# 
  4690  0213                     	;# 
  4691  0213                     	;# 
  4692  0214                     	;# 
  4693  0214                     	;# 
  4694  0215                     	;# 
  4695  0215                     	;# 
  4696  0215                     	;# 
  4697  0215                     	;# 
  4698  0216                     	;# 
  4699  0216                     	;# 
  4700  0217                     	;# 
  4701  0217                     	;# 
  4702  028C                     	;# 
  4703  028D                     	;# 
  4704  028E                     	;# 
  4705  0291                     	;# 
  4706  0291                     	;# 
  4707  0292                     	;# 
  4708  0293                     	;# 
  4709  0294                     	;# 
  4710  0295                     	;# 
  4711  0295                     	;# 
  4712  0296                     	;# 
  4713  0297                     	;# 
  4714  0298                     	;# 
  4715  029F                     	;# 
  4716  030C                     	;# 
  4717  030D                     	;# 
  4718  030E                     	;# 
  4719  0311                     	;# 
  4720  0311                     	;# 
  4721  0312                     	;# 
  4722  0313                     	;# 
  4723  0314                     	;# 
  4724  0315                     	;# 
  4725  0315                     	;# 
  4726  0316                     	;# 
  4727  0317                     	;# 
  4728  0318                     	;# 
  4729  038C                     	;# 
  4730  038D                     	;# 
  4731  038E                     	;# 
  4732  0391                     	;# 
  4733  0392                     	;# 
  4734  0393                     	;# 
  4735  0394                     	;# 
  4736  0395                     	;# 
  4737  0396                     	;# 
  4738  0397                     	;# 
  4739  0398                     	;# 
  4740  0399                     	;# 
  4741  039A                     	;# 
  4742  039C                     	;# 
  4743  039D                     	;# 
  4744  039E                     	;# 
  4745  039F                     	;# 
  4746  0411                     	;# 
  4747  0411                     	;# 
  4748  0412                     	;# 
  4749  0413                     	;# 
  4750  0414                     	;# 
  4751  0415                     	;# 
  4752  0416                     	;# 
  4753  0417                     	;# 
  4754  0418                     	;# 
  4755  0418                     	;# 
  4756  0419                     	;# 
  4757  041A                     	;# 
  4758  041B                     	;# 
  4759  041C                     	;# 
  4760  041D                     	;# 
  4761  041E                     	;# 
  4762  041F                     	;# 
  4763  0498                     	;# 
  4764  0498                     	;# 
  4765  0499                     	;# 
  4766  049A                     	;# 
  4767  049B                     	;# 
  4768  049B                     	;# 
  4769  049C                     	;# 
  4770  049D                     	;# 
  4771  049E                     	;# 
  4772  049F                     	;# 
  4773  0617                     	;# 
  4774  0618                     	;# 
  4775  0619                     	;# 
  4776  0619                     	;# 
  4777  061A                     	;# 
  4778  061B                     	;# 
  4779  061C                     	;# 
  4780  061C                     	;# 
  4781  061F                     	;# 
  4782  0691                     	;# 
  4783  0692                     	;# 
  4784  0693                     	;# 
  4785  0694                     	;# 
  4786  0695                     	;# 
  4787  0696                     	;# 
  4788  0697                     	;# 
  4789  0698                     	;# 
  4790  0699                     	;# 
  4791  0711                     	;# 
  4792  0712                     	;# 
  4793  0713                     	;# 
  4794  0714                     	;# 
  4795  0715                     	;# 
  4796  0716                     	;# 
  4797  0717                     	;# 
  4798  0718                     	;# 
  4799  0719                     	;# 
  4800  0891                     	;# 
  4801  0891                     	;# 
  4802  0891                     	;# 
  4803  0891                     	;# 
  4804  0891                     	;# 
  4805  0891                     	;# 
  4806  0892                     	;# 
  4807  0892                     	;# 
  4808  0892                     	;# 
  4809  0893                     	;# 
  4810  0893                     	;# 
  4811  0893                     	;# 
  4812  0893                     	;# 
  4813  0893                     	;# 
  4814  0893                     	;# 
  4815  0894                     	;# 
  4816  0894                     	;# 
  4817  0894                     	;# 
  4818  0895                     	;# 
  4819  0895                     	;# 
  4820  0895                     	;# 
  4821  0896                     	;# 
  4822  0896                     	;# 
  4823  0896                     	;# 
  4824  089B                     	;# 
  4825  0911                     	;# 
  4826  0912                     	;# 
  4827  0913                     	;# 
  4828  0914                     	;# 
  4829  0915                     	;# 
  4830  0916                     	;# 
  4831  0918                     	;# 
  4832  0919                     	;# 
  4833  091A                     	;# 
  4834  091B                     	;# 
  4835  091C                     	;# 
  4836  091D                     	;# 
  4837  091E                     	;# 
  4838  091F                     	;# 
  4839  0E0F                     	;# 
  4840  0E10                     	;# 
  4841  0E11                     	;# 
  4842  0E12                     	;# 
  4843  0E13                     	;# 
  4844  0E14                     	;# 
  4845  0E15                     	;# 
  4846  0E16                     	;# 
  4847  0E17                     	;# 
  4848  0E18                     	;# 
  4849  0E19                     	;# 
  4850  0E1A                     	;# 
  4851  0E1B                     	;# 
  4852  0E1C                     	;# 
  4853  0E20                     	;# 
  4854  0E21                     	;# 
  4855  0E22                     	;# 
  4856  0E24                     	;# 
  4857  0E25                     	;# 
  4858  0E28                     	;# 
  4859  0E29                     	;# 
  4860  0E2A                     	;# 
  4861  0E2B                     	;# 
  4862  0E2C                     	;# 
  4863  0E2D                     	;# 
  4864  0E2E                     	;# 
  4865  0E2F                     	;# 
  4866  0E90                     	;# 
  4867  0E91                     	;# 
  4868  0E92                     	;# 
  4869  0E94                     	;# 
  4870  0E95                     	;# 
  4871  0E9C                     	;# 
  4872  0E9D                     	;# 
  4873  0E9E                     	;# 
  4874  0E9F                     	;# 
  4875  0EA0                     	;# 
  4876  0EA1                     	;# 
  4877  0EA2                     	;# 
  4878  0EA3                     	;# 
  4879  0EA4                     	;# 
  4880  0EA5                     	;# 
  4881  0EA6                     	;# 
  4882  0EA7                     	;# 
  4883  0F0F                     	;# 
  4884  0F10                     	;# 
  4885  0F11                     	;# 
  4886  0F12                     	;# 
  4887  0F13                     	;# 
  4888  0F14                     	;# 
  4889  0F15                     	;# 
  4890  0F16                     	;# 
  4891  0F17                     	;# 
  4892  0F18                     	;# 
  4893  0F19                     	;# 
  4894  0F1A                     	;# 
  4895  0F1B                     	;# 
  4896  0F1C                     	;# 
  4897  0F1D                     	;# 
  4898  0F1E                     	;# 
  4899  0F1F                     	;# 
  4900  0F20                     	;# 
  4901  0F21                     	;# 
  4902  0F22                     	;# 
  4903  0F23                     	;# 
  4904  0F24                     	;# 
  4905  0F25                     	;# 
  4906  0F26                     	;# 
  4907  0F27                     	;# 
  4908  0F28                     	;# 
  4909  0F29                     	;# 
  4910  0F2A                     	;# 
  4911  0F2B                     	;# 
  4912  0F2C                     	;# 
  4913  0F2D                     	;# 
  4914  0F2E                     	;# 
  4915  0F2F                     	;# 
  4916  0F30                     	;# 
  4917  0F31                     	;# 
  4918  0F32                     	;# 
  4919  0F33                     	;# 
  4920  0F34                     	;# 
  4921  0F35                     	;# 
  4922  0F36                     	;# 
  4923  0F37                     	;# 
  4924  0FE4                     	;# 
  4925  0FE5                     	;# 
  4926  0FE6                     	;# 
  4927  0FE7                     	;# 
  4928  0FE8                     	;# 
  4929  0FE9                     	;# 
  4930  0FEA                     	;# 
  4931  0FEB                     	;# 
  4932  0FED                     	;# 
  4933  0FEE                     	;# 
  4934  0FEF                     	;# 
  4935  0000                     	;# 
  4936  0001                     	;# 
  4937  0002                     	;# 
  4938  0003                     	;# 
  4939  0004                     	;# 
  4940  0005                     	;# 
  4941  0006                     	;# 
  4942  0007                     	;# 
  4943  0008                     	;# 
  4944  0009                     	;# 
  4945  000A                     	;# 
  4946  000B                     	;# 
  4947  000C                     	;# 
  4948  000D                     	;# 
  4949  000E                     	;# 
  4950  0010                     	;# 
  4951  0011                     	;# 
  4952  0012                     	;# 
  4953  0013                     	;# 
  4954  0014                     	;# 
  4955  0015                     	;# 
  4956  0015                     	;# 
  4957  0016                     	;# 
  4958  0016                     	;# 
  4959  0017                     	;# 
  4960  0018                     	;# 
  4961  0019                     	;# 
  4962  0019                     	;# 
  4963  001A                     	;# 
  4964  001B                     	;# 
  4965  001C                     	;# 
  4966  001D                     	;# 
  4967  001E                     	;# 
  4968  001F                     	;# 
  4969  008C                     	;# 
  4970  008D                     	;# 
  4971  008E                     	;# 
  4972  0090                     	;# 
  4973  0091                     	;# 
  4974  0092                     	;# 
  4975  0093                     	;# 
  4976  0094                     	;# 
  4977  0097                     	;# 
  4978  009B                     	;# 
  4979  009B                     	;# 
  4980  009C                     	;# 
  4981  009D                     	;# 
  4982  009E                     	;# 
  4983  009F                     	;# 
  4984  010C                     	;# 
  4985  010D                     	;# 
  4986  010E                     	;# 
  4987  0111                     	;# 
  4988  0112                     	;# 
  4989  0113                     	;# 
  4990  0114                     	;# 
  4991  0115                     	;# 
  4992  0116                     	;# 
  4993  0117                     	;# 
  4994  0118                     	;# 
  4995  0119                     	;# 
  4996  018C                     	;# 
  4997  018D                     	;# 
  4998  018E                     	;# 
  4999  0197                     	;# 
  5000  0199                     	;# 
  5001  0199                     	;# 
  5002  0199                     	;# 
  5003  019A                     	;# 
  5004  019A                     	;# 
  5005  019A                     	;# 
  5006  019B                     	;# 
  5007  019B                     	;# 
  5008  019B                     	;# 
  5009  019B                     	;# 
  5010  019B                     	;# 
  5011  019C                     	;# 
  5012  019C                     	;# 
  5013  019C                     	;# 
  5014  019D                     	;# 
  5015  019D                     	;# 
  5016  019D                     	;# 
  5017  019E                     	;# 
  5018  019E                     	;# 
  5019  019E                     	;# 
  5020  019F                     	;# 
  5021  019F                     	;# 
  5022  019F                     	;# 
  5023  019F                     	;# 
  5024  019F                     	;# 
  5025  020C                     	;# 
  5026  020D                     	;# 
  5027  020E                     	;# 
  5028  0211                     	;# 
  5029  0211                     	;# 
  5030  0212                     	;# 
  5031  0212                     	;# 
  5032  0213                     	;# 
  5033  0213                     	;# 
  5034  0214                     	;# 
  5035  0214                     	;# 
  5036  0215                     	;# 
  5037  0215                     	;# 
  5038  0215                     	;# 
  5039  0215                     	;# 
  5040  0216                     	;# 
  5041  0216                     	;# 
  5042  0217                     	;# 
  5043  0217                     	;# 
  5044  028C                     	;# 
  5045  028D                     	;# 
  5046  028E                     	;# 
  5047  0291                     	;# 
  5048  0291                     	;# 
  5049  0292                     	;# 
  5050  0293                     	;# 
  5051  0294                     	;# 
  5052  0295                     	;# 
  5053  0295                     	;# 
  5054  0296                     	;# 
  5055  0297                     	;# 
  5056  0298                     	;# 
  5057  029F                     	;# 
  5058  030C                     	;# 
  5059  030D                     	;# 
  5060  030E                     	;# 
  5061  0311                     	;# 
  5062  0311                     	;# 
  5063  0312                     	;# 
  5064  0313                     	;# 
  5065  0314                     	;# 
  5066  0315                     	;# 
  5067  0315                     	;# 
  5068  0316                     	;# 
  5069  0317                     	;# 
  5070  0318                     	;# 
  5071  038C                     	;# 
  5072  038D                     	;# 
  5073  038E                     	;# 
  5074  0391                     	;# 
  5075  0392                     	;# 
  5076  0393                     	;# 
  5077  0394                     	;# 
  5078  0395                     	;# 
  5079  0396                     	;# 
  5080  0397                     	;# 
  5081  0398                     	;# 
  5082  0399                     	;# 
  5083  039A                     	;# 
  5084  039C                     	;# 
  5085  039D                     	;# 
  5086  039E                     	;# 
  5087  039F                     	;# 
  5088  0411                     	;# 
  5089  0411                     	;# 
  5090  0412                     	;# 
  5091  0413                     	;# 
  5092  0414                     	;# 
  5093  0415                     	;# 
  5094  0416                     	;# 
  5095  0417                     	;# 
  5096  0418                     	;# 
  5097  0418                     	;# 
  5098  0419                     	;# 
  5099  041A                     	;# 
  5100  041B                     	;# 
  5101  041C                     	;# 
  5102  041D                     	;# 
  5103  041E                     	;# 
  5104  041F                     	;# 
  5105  0498                     	;# 
  5106  0498                     	;# 
  5107  0499                     	;# 
  5108  049A                     	;# 
  5109  049B                     	;# 
  5110  049B                     	;# 
  5111  049C                     	;# 
  5112  049D                     	;# 
  5113  049E                     	;# 
  5114  049F                     	;# 
  5115  0617                     	;# 
  5116  0618                     	;# 
  5117  0619                     	;# 
  5118  0619                     	;# 
  5119  061A                     	;# 
  5120  061B                     	;# 
  5121  061C                     	;# 
  5122  061C                     	;# 
  5123  061F                     	;# 
  5124  0691                     	;# 
  5125  0692                     	;# 
  5126  0693                     	;# 
  5127  0694                     	;# 
  5128  0695                     	;# 
  5129  0696                     	;# 
  5130  0697                     	;# 
  5131  0698                     	;# 
  5132  0699                     	;# 
  5133  0711                     	;# 
  5134  0712                     	;# 
  5135  0713                     	;# 
  5136  0714                     	;# 
  5137  0715                     	;# 
  5138  0716                     	;# 
  5139  0717                     	;# 
  5140  0718                     	;# 
  5141  0719                     	;# 
  5142  0891                     	;# 
  5143  0891                     	;# 
  5144  0891                     	;# 
  5145  0891                     	;# 
  5146  0891                     	;# 
  5147  0891                     	;# 
  5148  0892                     	;# 
  5149  0892                     	;# 
  5150  0892                     	;# 
  5151  0893                     	;# 
  5152  0893                     	;# 
  5153  0893                     	;# 
  5154  0893                     	;# 
  5155  0893                     	;# 
  5156  0893                     	;# 
  5157  0894                     	;# 
  5158  0894                     	;# 
  5159  0894                     	;# 
  5160  0895                     	;# 
  5161  0895                     	;# 
  5162  0895                     	;# 
  5163  0896                     	;# 
  5164  0896                     	;# 
  5165  0896                     	;# 
  5166  089B                     	;# 
  5167  0911                     	;# 
  5168  0912                     	;# 
  5169  0913                     	;# 
  5170  0914                     	;# 
  5171  0915                     	;# 
  5172  0916                     	;# 
  5173  0918                     	;# 
  5174  0919                     	;# 
  5175  091A                     	;# 
  5176  091B                     	;# 
  5177  091C                     	;# 
  5178  091D                     	;# 
  5179  091E                     	;# 
  5180  091F                     	;# 
  5181  0E0F                     	;# 
  5182  0E10                     	;# 
  5183  0E11                     	;# 
  5184  0E12                     	;# 
  5185  0E13                     	;# 
  5186  0E14                     	;# 
  5187  0E15                     	;# 
  5188  0E16                     	;# 
  5189  0E17                     	;# 
  5190  0E18                     	;# 
  5191  0E19                     	;# 
  5192  0E1A                     	;# 
  5193  0E1B                     	;# 
  5194  0E1C                     	;# 
  5195  0E20                     	;# 
  5196  0E21                     	;# 
  5197  0E22                     	;# 
  5198  0E24                     	;# 
  5199  0E25                     	;# 
  5200  0E28                     	;# 
  5201  0E29                     	;# 
  5202  0E2A                     	;# 
  5203  0E2B                     	;# 
  5204  0E2C                     	;# 
  5205  0E2D                     	;# 
  5206  0E2E                     	;# 
  5207  0E2F                     	;# 
  5208  0E90                     	;# 
  5209  0E91                     	;# 
  5210  0E92                     	;# 
  5211  0E94                     	;# 
  5212  0E95                     	;# 
  5213  0E9C                     	;# 
  5214  0E9D                     	;# 
  5215  0E9E                     	;# 
  5216  0E9F                     	;# 
  5217  0EA0                     	;# 
  5218  0EA1                     	;# 
  5219  0EA2                     	;# 
  5220  0EA3                     	;# 
  5221  0EA4                     	;# 
  5222  0EA5                     	;# 
  5223  0EA6                     	;# 
  5224  0EA7                     	;# 
  5225  0F0F                     	;# 
  5226  0F10                     	;# 
  5227  0F11                     	;# 
  5228  0F12                     	;# 
  5229  0F13                     	;# 
  5230  0F14                     	;# 
  5231  0F15                     	;# 
  5232  0F16                     	;# 
  5233  0F17                     	;# 
  5234  0F18                     	;# 
  5235  0F19                     	;# 
  5236  0F1A                     	;# 
  5237  0F1B                     	;# 
  5238  0F1C                     	;# 
  5239  0F1D                     	;# 
  5240  0F1E                     	;# 
  5241  0F1F                     	;# 
  5242  0F20                     	;# 
  5243  0F21                     	;# 
  5244  0F22                     	;# 
  5245  0F23                     	;# 
  5246  0F24                     	;# 
  5247  0F25                     	;# 
  5248  0F26                     	;# 
  5249  0F27                     	;# 
  5250  0F28                     	;# 
  5251  0F29                     	;# 
  5252  0F2A                     	;# 
  5253  0F2B                     	;# 
  5254  0F2C                     	;# 
  5255  0F2D                     	;# 
  5256  0F2E                     	;# 
  5257  0F2F                     	;# 
  5258  0F30                     	;# 
  5259  0F31                     	;# 
  5260  0F32                     	;# 
  5261  0F33                     	;# 
  5262  0F34                     	;# 
  5263  0F35                     	;# 
  5264  0F36                     	;# 
  5265  0F37                     	;# 
  5266  0FE4                     	;# 
  5267  0FE5                     	;# 
  5268  0FE6                     	;# 
  5269  0FE7                     	;# 
  5270  0FE8                     	;# 
  5271  0FE9                     	;# 
  5272  0FEA                     	;# 
  5273  0FEB                     	;# 
  5274  0FED                     	;# 
  5275  0FEE                     	;# 
  5276  0FEF                     	;__u16ResponseBuffer
  5277                           
  5278 ;; Function _preTransmission_App is unused but had its address taken
  5279  0000                     
  5280 ;; Function _postTransmission_App is unused but had its address taken
  5281  0000                     
  5282                           	psect	idataBANK0
  5283  0D30                     __pidataBANK0:	
  5284                           
  5285                           ;initializer for _EncEdgeMinTimeInterval
  5286  0D30  34FF               	retlw	255
  5287  0D31  34FF               	retlw	255
  5288  0D32  34FF               	retlw	255
  5289  0D33  34EF               	retlw	239
  5290                           
  5291                           ;initializer for _LED_Color
  5292  0D34  3401               	retlw	1
  5293                           
  5294                           	psect	idataBANK1
  5295  0D7D                     __pidataBANK1:	
  5296                           
  5297                           ;initializer for _EncSpdredFact
  5298  0D7D  341E               	retlw	30
  5299  0D7E  3400               	retlw	0
  5300  0D7F  3400               	retlw	0
  5301  0D80  3400               	retlw	0
  5302                           
  5303                           ;initializer for _MBreadPulseTimeoutSec
  5304  0D81  3404               	retlw	4
  5305  0D82  3400               	retlw	0
  5306                           
  5307                           ;initializer for _MBreadNoOfPulseCnt
  5308  0D83  3430               	retlw	48
  5309  0D84  3400               	retlw	0
  5310                           
  5311                           	psect	nvBANK0
  5312  005B                     __pnvBANK0:	
  5313  005B                     _timer3ReloadVal:	
  5314  005B                     	ds	2
  5315  005D                     _timer5ReloadVal:	
  5316  005D                     	ds	2
  5317                           
  5318                           	psect	nvBANK1
  5319  00D3                     __pnvBANK1:	
  5320  00D3                     _INT_InterruptHandler:	
  5321  00D3                     	ds	2
  5322  00D5                     _IOCCF5_InterruptHandler:	
  5323  00D5                     	ds	2
  5324  00D7                     _IOCCF4_InterruptHandler:	
  5325  00D7                     	ds	2
  5326  00D9                     _TMR0_InterruptHandler:	
  5327  00D9                     	ds	2
  5328  00DB                     _TMR3_InterruptHandler:	
  5329  00DB                     	ds	2
  5330  00DD                     _TMR5_InterruptHandler:	
  5331  00DD                     	ds	2
  5332  000E                     _PORTCbits	set	14
  5333  000B                     _INTCONbits	set	11
  5334  0017                     _T0CON0bits	set	23
  5335  0010                     _PIR0bits	set	16
  5336  0015                     _TMR0L	set	21
  5337  0016                     _TMR0H	set	22
  5338  0018                     _T0CON1	set	24
  5339  0017                     _T0CON0	set	23
  5340  0011                     _PIR1bits	set	17
  5341  0013                     _PIR3bits	set	19
  5342  0014                     _PIR4bits	set	20
  5343  005F                     _GIE	set	95
  5344  0097                     _WDTCON	set	151
  5345  009D                     _ADCON0bits	set	157
  5346  009C                     _ADRESH	set	156
  5347  009B                     _ADRESL	set	155
  5348  009F                     _ADACT	set	159
  5349  009E                     _ADCON1	set	158
  5350  009D                     _ADCON0	set	157
  5351  008E                     _TRISC	set	142
  5352  008D                     _TRISB	set	141
  5353  008C                     _TRISA	set	140
  5354  0090                     _PIE0bits	set	144
  5355  0093                     _PIE3bits	set	147
  5356  0094                     _PIE4bits	set	148
  5357  010E                     _LATCbits	set	270
  5358  010D                     _LATBbits	set	269
  5359  010E                     _LATC	set	270
  5360  010D                     _LATB	set	269
  5361  010C                     _LATA	set	268
  5362  018C                     _ANSELA	set	396
  5363  018D                     _ANSELB	set	397
  5364  018E                     _ANSELC	set	398
  5365  019A                     _TX1REG	set	410
  5366  0199                     _RC1REG	set	409
  5367  019D                     _RC1STAbits	set	413
  5368  019C                     _SP1BRGH	set	412
  5369  019B                     _SP1BRGL	set	411
  5370  019E                     _TX1STA	set	414
  5371  019D                     _RC1STA	set	413
  5372  019F                     _BAUD1CON	set	415
  5373  020E                     _WPUC	set	526
  5374  020C                     _WPUA	set	524
  5375  020D                     _WPUB	set	525
  5376  0295                     _CCPR2L	set	661
  5377  0296                     _CCPR2H	set	662
  5378  0298                     _CCP2CAP	set	664
  5379  0297                     _CCP2CON	set	663
  5380  029F                     _CCPTMRSbits	set	671
  5381  0291                     _CCPR1L	set	657
  5382  0292                     _CCPR1H	set	658
  5383  0294                     _CCP1CAP	set	660
  5384  0293                     _CCP1CON	set	659
  5385  028E                     _ODCONC	set	654
  5386  028D                     _ODCONB	set	653
  5387  028C                     _ODCONA	set	652
  5388  038C                     _INLVLA	set	908
  5389  038E                     _INLVLC	set	910
  5390  0397                     _IOCCPbits	set	919
  5391  0398                     _IOCCNbits	set	920
  5392  0399                     _IOCCFbits	set	921
  5393  0414                     _T3GCONbits	set	1044
  5394  0413                     _T3CONbits	set	1043
  5395  0411                     _TMR3L	set	1041
  5396  0412                     _TMR3H	set	1042
  5397  0414                     _T3GCON	set	1044
  5398  0413                     _T3CON	set	1043
  5399  041B                     _T5GCONbits	set	1051
  5400  041A                     _T5CONbits	set	1050
  5401  0418                     _TMR5L	set	1048
  5402  0419                     _TMR5H	set	1049
  5403  041B                     _T5GCON	set	1051
  5404  041A                     _T5CON	set	1050
  5405  091E                     _OSCTUNE	set	2334
  5406  091F                     _OSCFRQ	set	2335
  5407  091D                     _OSCEN	set	2333
  5408  091B                     _OSCCON3	set	2331
  5409  0919                     _OSCCON1	set	2329
  5410  0E14                     _CCP1PPSbits	set	3604
  5411  0E10                     _INTPPSbits	set	3600
  5412  0E24                     _RXPPSbits	set	3620
  5413  0E15                     _CCP2PPSbits	set	3605
  5414  0E0F                     _PPSLOCKbits	set	3599
  5415  0E0F                     _PPSLOCK	set	3599
  5416  0E9D                     _RB5PPSbits	set	3741
  5417                           
  5418                           ; #config settings
  5419  0000                     
  5420                           	psect	cinit
  5421  0050                     start_initialization:	
  5422  0050                     __initialization:		;BIGRAM
  5423                           
  5424                           ; Initialize objects allocated to BANK0
  5425  0050  3030               	movlw	low __pidataBANK0
  5426  0051  0084               	movwf	4
  5427  0052  308D               	movlw	(high __pidataBANK0)| (0+128)
  5428  0053  0085               	movwf	5
  5429  0054  3056               	movlw	low __pdataBANK0
  5430  0055  0086               	movwf	6
  5431  0056  3000               	movlw	high __pdataBANK0
  5432  0057  0087               	movwf	7
  5433  0058  3000               	movlw	0
  5434  0059  00FF               	movwf	btemp+1
  5435  005A  3005               	movlw	5
  5436  005B  318D  25E5  3180   	fcall	init_ram
  5437                           
  5438                           ; Initialize objects allocated to BANK1
  5439  005E  307D               	movlw	low __pidataBANK1
  5440  005F  0084               	movwf	4
  5441  0060  308D               	movlw	(high __pidataBANK1)| (0+128)
  5442  0061  0085               	movwf	5
  5443  0062  30E8               	movlw	low __pdataBANK1
  5444  0063  0086               	movwf	6
  5445  0064  3000               	movlw	high __pdataBANK1
  5446  0065  0087               	movwf	7
  5447  0066  3000               	movlw	0
  5448  0067  00FF               	movwf	btemp+1
  5449  0068  3008               	movlw	8
  5450  0069  318D  25E5  3180   	fcall	init_ram
  5451                           
  5452                           ; Clear objects allocated to BIGRAM
  5453  006C  30F0               	movlw	low (0+8432)
  5454  006D  0084               	movwf	4
  5455  006E  3020               	movlw	high (0+8432)
  5456  006F  0085               	movwf	5
  5457  0070  3000               	movlw	0
  5458  0071  00FE               	movwf	btemp
  5459  0072  3001               	movlw	1
  5460  0073  00FF               	movwf	btemp+1
  5461  0074  318D  25D9  3180   	fcall	clear_ram0
  5462                           
  5463                           ; Clear objects allocated to BANK0
  5464  0077  303E               	movlw	low __pbssBANK0
  5465  0078  0084               	movwf	4
  5466  0079  3000               	movlw	high __pbssBANK0
  5467  007A  0085               	movwf	5
  5468  007B  3018               	movlw	24
  5469  007C  00FE               	movwf	btemp
  5470  007D  3000               	movlw	0
  5471  007E  00FF               	movwf	btemp+1
  5472  007F  318D  25D9  3180   	fcall	clear_ram0
  5473                           
  5474                           ; Clear objects allocated to BANK1
  5475  0082  30A0               	movlw	low __pbssBANK1
  5476  0083  0084               	movwf	4
  5477  0084  3000               	movlw	high __pbssBANK1
  5478  0085  0085               	movwf	5
  5479  0086  3033               	movlw	51
  5480  0087  00FE               	movwf	btemp
  5481  0088  3000               	movlw	0
  5482  0089  00FF               	movwf	btemp+1
  5483  008A  318D  25D9         	fcall	clear_ram0
  5484  008C                     end_of_initialization:	
  5485                           ;End of C runtime variable initialization code
  5486                           
  5487  008C                     __end_of__initialization:	
  5488  008C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5489  008D  0020               	movlb	0
  5490  008E  3184  2CC4         	ljmp	_main	;jump to C main() function
  5491                           
  5492                           	psect	bssBANK0
  5493  003E                     __pbssBANK0:	
  5494  003E                     _EncEdgeTimeInterval:	
  5495  003E                     	ds	4
  5496  0042                     __u16WriteQty:	
  5497  0042                     	ds	2
  5498  0044                     _EncoderPosition:	
  5499  0044                     	ds	2
  5500  0046                     _NutRunLength:	
  5501  0046                     	ds	2
  5502  0048                     _EncPulseOpState:	
  5503  0048                     	ds	2
  5504  004A                     _Led_ON:	
  5505  004A                     	ds	1
  5506  004B                     __u8TransmitBufferIndex:	
  5507  004B                     	ds	1
  5508  004C                     __u8MBSlave:	
  5509  004C                     	ds	1
  5510  004D                     _delayFlag:	
  5511  004D                     	ds	1
  5512  004E                     _NutRunstate:	
  5513  004E                     	ds	1
  5514  004F                     _ShutdownDetected:	
  5515  004F                     	ds	1
  5516  0050                     _EncEdgeGotFlag:	
  5517  0050                     	ds	1
  5518  0051                     _flagForFirstRevolution:	
  5519  0051                     	ds	1
  5520  0052                     _EncoderPositionOneCycle:	
  5521  0052                     	ds	1
  5522  0053                     _multipleTimecheck1:	
  5523  0053                     	ds	1
  5524  0054                     _multipleTimecheck0:	
  5525  0054                     	ds	1
  5526  0055                     _EncPulseCntResult:	
  5527  0055                     	ds	1
  5528                           
  5529                           	psect	dataBANK0
  5530  0056                     __pdataBANK0:	
  5531  0056                     _EncEdgeMinTimeInterval:	
  5532  0056                     	ds	4
  5533  005A                     _LED_Color:	
  5534  005A                     	ds	1
  5535                           
  5536                           	psect	bssBANK1
  5537  00A0                     __pbssBANK1:	
  5538  00A0                     _TimertickMsec:	
  5539  00A0                     	ds	4
  5540  00A4                     _IdleTimeOnShutOff:	
  5541  00A4                     	ds	4
  5542  00A8                     _EncEdgeMinTimeIntSumAvg:	
  5543  00A8                     	ds	4
  5544  00AC                     _EncEdgeTimeIntervalOld:	
  5545  00AC                     	ds	4
  5546  00B0                     _LedON_Duration_msec:	
  5547  00B0                     	ds	2
  5548  00B2                     _Blick_tickPoint:	
  5549  00B2                     	ds	2
  5550  00B4                     _Blick_tickPointMsec:	
  5551  00B4                     	ds	2
  5552  00B6                     _LED_msec_Cnt:	
  5553  00B6                     	ds	2
  5554  00B8                     __postTransmission:	
  5555  00B8                     	ds	2
  5556  00BA                     __preTransmission:	
  5557  00BA                     	ds	2
  5558  00BC                     _u16TransmitBufferLength:	
  5559  00BC                     	ds	2
  5560  00BE                     __u16WriteAddress:	
  5561  00BE                     	ds	2
  5562  00C0                     __u16ReadQty:	
  5563  00C0                     	ds	2
  5564  00C2                     __u16ReadAddress:	
  5565  00C2                     	ds	2
  5566  00C4                     _delayCount:	
  5567  00C4                     	ds	2
  5568  00C6                     _EncoderPositionAtIndex:	
  5569  00C6                     	ds	2
  5570  00C8                     _OldEncPos:	
  5571  00C8                     	ds	2
  5572  00CA                     _OldEncPulseOpState:	
  5573  00CA                     	ds	2
  5574  00CC                     _MBread_EPC_Ctrl:	
  5575  00CC                     	ds	2
  5576  00CE                     __u8ResponseBufferLength:	
  5577  00CE                     	ds	1
  5578  00CF                     __u8ResponseBufferIndex:	
  5579  00CF                     	ds	1
  5580  00D0                     _rxBuffer:	
  5581  00D0                     	ds	1
  5582  00D1                     _txBuffer:	
  5583  00D1                     	ds	1
  5584  00D2                     _EncPulseError:	
  5585  00D2                     	ds	1
  5586                           
  5587                           	psect	dataBANK1
  5588  00E8                     __pdataBANK1:	
  5589  00E8                     _EncSpdredFact:	
  5590  00E8                     	ds	4
  5591  00EC                     _MBreadPulseTimeoutSec:	
  5592  00EC                     	ds	2
  5593  00EE                     _MBreadNoOfPulseCnt:	
  5594  00EE                     	ds	2
  5595                           
  5596                           	psect	inittext
  5597  0DE5                     init_ram:	
  5598  0DE5  00FE               	movwf	126
  5599  0DE6                     initloop:	
  5600  0DE6  0012               	moviw fsr0++
  5601  0DE7  001E               	movwi fsr1++
  5602  0DE8  3001               	movlw	1
  5603  0DE9  02FE               	subwf	126,f
  5604  0DEA  3000               	movlw	0
  5605  0DEB  3BFF               	subwfb	127,f
  5606  0DEC  087F               	movf	127,w
  5607  0DED  047E               	iorwf	126,w
  5608  0DEE  1903               	btfsc	3,2
  5609  0DEF  3400               	retlw	0
  5610  0DF0  2DE6               	goto	initloop
  5611                           
  5612                           	psect	clrtext
  5613  0DD9                     clear_ram0:	
  5614                           ;	Called with FSR0 containing the base address, and
  5615                           ;	btemp/btemp+1 has the size to clear
  5616                           
  5617  0DD9  0064               	clrwdt	;clear the watchdog before getting into this loop
  5618  0DDA                     clrloop0:	
  5619  0DDA  0180               	clrf	0	;clear RAM location pointed to by FSR
  5620  0DDB  3101               	addfsr 0,1
  5621  0DDC  3001               	movlw	1
  5622  0DDD  02FE               	subwf	126,f
  5623  0DDE  3000               	movlw	0
  5624  0DDF  3BFF               	subwfb	127,f
  5625  0DE0  087F               	movf	127,w
  5626  0DE1  047E               	iorwf	126,w
  5627  0DE2  1903               	btfsc	3,2
  5628  0DE3  3400               	retlw	0	;all done for this memory range, return
  5629  0DE4  2DDA               	goto	clrloop0	;have we reached the end yet?
  5630                           
  5631                           	psect	cstackBANK2
  5632  0120                     __pcstackBANK2:	
  5633  0120                     ?_LedONStartConfig:	
  5634  0120                     LedONStartConfig@LedONDurationSec:	
  5635                           ; 1 bytes @ 0x0
  5636                           
  5637                           
  5638                           ; 1 bytes @ 0x0
  5639  0120                     	ds	1
  5640  0121                     LedONStartConfig@LedONNumBlink:	
  5641                           
  5642                           ; 1 bytes @ 0x1
  5643  0121                     	ds	1
  5644  0122                     ??_LedONStartConfig:	
  5645                           
  5646                           ; 1 bytes @ 0x2
  5647  0122                     	ds	2
  5648  0124                     ??_EPC_StateMachineControlLoop:	
  5649                           
  5650                           ; 1 bytes @ 0x4
  5651  0124                     	ds	4
  5652                           
  5653                           	psect	cstackBANK1
  5654  00DF                     __pcstackBANK1:	
  5655  00DF                     ?_TMR5_SetInterruptHandler:	
  5656  00DF                     ??_TMR5_StartTimer:	
  5657                           ; 1 bytes @ 0x0
  5658                           
  5659  00DF                     ?_TMR3_SetInterruptHandler:	
  5660                           ; 1 bytes @ 0x0
  5661                           
  5662  00DF                     ??_TMR3_StartTimer:	
  5663                           ; 1 bytes @ 0x0
  5664                           
  5665  00DF                     ?_TMR0_SetInterruptHandler:	
  5666                           ; 1 bytes @ 0x0
  5667                           
  5668  00DF                     ??_TMR0_StartTimer:	
  5669                           ; 1 bytes @ 0x0
  5670                           
  5671  00DF                     ?_IOCCF4_SetInterruptHandler:	
  5672                           ; 1 bytes @ 0x0
  5673                           
  5674  00DF                     ?_IOCCF5_SetInterruptHandler:	
  5675                           ; 1 bytes @ 0x0
  5676                           
  5677  00DF                     ??_OSCILLATOR_Initialize:	
  5678                           ; 1 bytes @ 0x0
  5679                           
  5680  00DF                     ??_WDT_Initialize:	
  5681                           ; 1 bytes @ 0x0
  5682                           
  5683  00DF                     ??_getEncoderState:	
  5684                           ; 1 bytes @ 0x0
  5685                           
  5686  00DF                     ??_LedONStatusBusy:	
  5687                           ; 1 bytes @ 0x0
  5688                           
  5689  00DF                     ??_NutRunCycleReset:	
  5690                           ; 1 bytes @ 0x0
  5691                           
  5692  00DF                     ??_valtoasciichar:	
  5693                           ; 1 bytes @ 0x0
  5694                           
  5695  00DF                     ??_TMR5_StopTimer:	
  5696                           ; 1 bytes @ 0x0
  5697                           
  5698  00DF                     ?_TMR5_WriteTimer:	
  5699                           ; 1 bytes @ 0x0
  5700                           
  5701  00DF                     ??_TMR3_StopTimer:	
  5702                           ; 1 bytes @ 0x0
  5703                           
  5704  00DF                     ?_TMR3_WriteTimer:	
  5705                           ; 1 bytes @ 0x0
  5706                           
  5707  00DF                     ??_EUSART_Initialize:	
  5708                           ; 1 bytes @ 0x0
  5709                           
  5710  00DF                     ??_EUSART_Write:	
  5711                           ; 1 bytes @ 0x0
  5712                           
  5713  00DF                     ??_CCP1_Initialize:	
  5714                           ; 1 bytes @ 0x0
  5715                           
  5716  00DF                     ??_CCP2_Initialize:	
  5717                           ; 1 bytes @ 0x0
  5718                           
  5719  00DF                     ??_ADC_Initialize:	
  5720                           ; 1 bytes @ 0x0
  5721                           
  5722  00DF                     ?_INT_SetInterruptHandler:	
  5723                           ; 1 bytes @ 0x0
  5724                           
  5725  00DF                     ??_ModbusMasterInit:	
  5726                           ; 1 bytes @ 0x0
  5727                           
  5728  00DF                     ?_preTransmission:	
  5729                           ; 1 bytes @ 0x0
  5730                           
  5731  00DF                     ?_postTransmission:	
  5732                           ; 1 bytes @ 0x0
  5733                           
  5734  00DF                     ?___wmul:	
  5735                           ; 1 bytes @ 0x0
  5736                           
  5737  00DF                     ?___lwdiv:	
  5738                           ; 2 bytes @ 0x0
  5739                           
  5740  00DF                     EUSART_Write@txData:	
  5741                           ; 2 bytes @ 0x0
  5742                           
  5743  00DF                     TMR5_WriteTimer@timerVal:	
  5744                           ; 1 bytes @ 0x0
  5745                           
  5746  00DF                     TMR5_SetInterruptHandler@InterruptHandler:	
  5747                           ; 2 bytes @ 0x0
  5748                           
  5749  00DF                     TMR3_WriteTimer@timerVal:	
  5750                           ; 2 bytes @ 0x0
  5751                           
  5752  00DF                     TMR3_SetInterruptHandler@InterruptHandler:	
  5753                           ; 2 bytes @ 0x0
  5754                           
  5755  00DF                     TMR0_SetInterruptHandler@InterruptHandler:	
  5756                           ; 2 bytes @ 0x0
  5757                           
  5758  00DF                     IOCCF4_SetInterruptHandler@InterruptHandler:	
  5759                           ; 2 bytes @ 0x0
  5760                           
  5761  00DF                     IOCCF5_SetInterruptHandler@InterruptHandler:	
  5762                           ; 2 bytes @ 0x0
  5763                           
  5764  00DF                     INT_SetInterruptHandler@InterruptHandler:	
  5765                           ; 2 bytes @ 0x0
  5766                           
  5767  00DF                     preTransmission@preTransmission:	
  5768                           ; 2 bytes @ 0x0
  5769                           
  5770  00DF                     postTransmission@postTransmission:	
  5771                           ; 2 bytes @ 0x0
  5772                           
  5773  00DF                     ___wmul@multiplier:	
  5774                           ; 2 bytes @ 0x0
  5775                           
  5776  00DF                     ___lwdiv@divisor:	
  5777                           ; 2 bytes @ 0x0
  5778                           
  5779                           
  5780                           ; 2 bytes @ 0x0
  5781  00DF                     	ds	1
  5782  00E0                     valtoasciichar@hexvalue1:	
  5783  00E0                     ModbusMasterInit@slave:	
  5784                           ; 1 bytes @ 0x1
  5785                           
  5786                           
  5787                           ; 1 bytes @ 0x1
  5788  00E0                     	ds	1
  5789  00E1                     ??_TMR5_SetInterruptHandler:	
  5790  00E1                     ??_TMR3_SetInterruptHandler:	
  5791                           ; 1 bytes @ 0x2
  5792                           
  5793  00E1                     ??_TMR0_SetInterruptHandler:	
  5794                           ; 1 bytes @ 0x2
  5795                           
  5796  00E1                     ??_IOCCF4_SetInterruptHandler:	
  5797                           ; 1 bytes @ 0x2
  5798                           
  5799  00E1                     ??_IOCCF5_SetInterruptHandler:	
  5800                           ; 1 bytes @ 0x2
  5801                           
  5802  00E1                     ??_EXT_INT_Initialize:	
  5803                           ; 1 bytes @ 0x2
  5804                           
  5805  00E1                     ??_ModbusMasterSetup:	
  5806                           ; 1 bytes @ 0x2
  5807                           
  5808  00E1                     ??_NutRunCycleStart:	
  5809                           ; 1 bytes @ 0x2
  5810                           
  5811  00E1                     ??_TMR5_Initialize:	
  5812                           ; 1 bytes @ 0x2
  5813                           
  5814  00E1                     ??_TMR5_WriteTimer:	
  5815                           ; 1 bytes @ 0x2
  5816                           
  5817  00E1                     ??_TMR3_Initialize:	
  5818                           ; 1 bytes @ 0x2
  5819                           
  5820  00E1                     ??_TMR3_WriteTimer:	
  5821                           ; 1 bytes @ 0x2
  5822                           
  5823  00E1                     ??_TMR0_Initialize:	
  5824                           ; 1 bytes @ 0x2
  5825                           
  5826  00E1                     ??_PIN_MANAGER_Initialize:	
  5827                           ; 1 bytes @ 0x2
  5828                           
  5829  00E1                     ??_INT_SetInterruptHandler:	
  5830                           ; 1 bytes @ 0x2
  5831                           
  5832  00E1                     ??_preTransmission:	
  5833                           ; 1 bytes @ 0x2
  5834                           
  5835  00E1                     ??_postTransmission:	
  5836                           ; 1 bytes @ 0x2
  5837                           
  5838  00E1                     PIN_MANAGER_Initialize@state:	
  5839                           ; 1 bytes @ 0x2
  5840                           
  5841  00E1                     valtoasciichar@hexval:	
  5842                           ; 1 bytes @ 0x2
  5843                           
  5844  00E1                     ___wmul@multiplicand:	
  5845                           ; 1 bytes @ 0x2
  5846                           
  5847  00E1                     ___lwdiv@dividend:	
  5848                           ; 2 bytes @ 0x2
  5849                           
  5850                           
  5851                           ; 2 bytes @ 0x2
  5852  00E1                     	ds	1
  5853  00E2                     ??_valuetocharHighNibble:	
  5854  00E2                     ??_valuetocharLowNibble:	
  5855                           ; 1 bytes @ 0x3
  5856                           
  5857  00E2                     ??_SYSTEM_Initialize:	
  5858                           ; 1 bytes @ 0x3
  5859                           
  5860                           
  5861                           ; 1 bytes @ 0x3
  5862  00E2                     	ds	1
  5863  00E3                     ??___wmul:	
  5864  00E3                     ??___lwdiv:	
  5865                           ; 1 bytes @ 0x4
  5866                           
  5867  00E3                     valuetocharLowNibble@hexvalue:	
  5868                           ; 1 bytes @ 0x4
  5869                           
  5870  00E3                     ___wmul@product:	
  5871                           ; 1 bytes @ 0x4
  5872                           
  5873                           
  5874                           ; 2 bytes @ 0x4
  5875  00E3                     	ds	1
  5876  00E4                     valuetocharHighNibble@hexvalue:	
  5877  00E4                     valuetocharLowNibble@hexval:	
  5878                           ; 1 bytes @ 0x5
  5879                           
  5880  00E4                     ___lwdiv@counter:	
  5881                           ; 1 bytes @ 0x5
  5882                           
  5883                           
  5884                           ; 1 bytes @ 0x5
  5885  00E4                     	ds	1
  5886  00E5                     valuetocharHighNibble@hexval:	
  5887  00E5                     ___lwdiv@quotient:	
  5888                           ; 1 bytes @ 0x6
  5889                           
  5890                           
  5891                           ; 2 bytes @ 0x6
  5892  00E5                     	ds	2
  5893  00E7                     LedONStartConfig@LEDcolor:	
  5894                           
  5895                           ; 1 bytes @ 0x8
  5896  00E7                     	ds	1
  5897  00E8                     ??_main:	
  5898                           
  5899                           	psect	cstackCOMMON
  5900  0070                     __pcstackCOMMON:	
  5901                           ; 1 bytes @ 0x9
  5902                           
  5903  0070                     ?_TMR5_DefaultInterruptHandler:	
  5904  0070                     ??_TMR5_DefaultInterruptHandler:	
  5905                           ; 1 bytes @ 0x0
  5906                           
  5907  0070                     ?_TMR5_StartTimer:	
  5908                           ; 1 bytes @ 0x0
  5909                           
  5910  0070                     ?_Timer5_Overflow:	
  5911                           ; 1 bytes @ 0x0
  5912                           
  5913  0070                     ??_Timer5_Overflow:	
  5914                           ; 1 bytes @ 0x0
  5915                           
  5916  0070                     ?_TMR3_DefaultInterruptHandler:	
  5917                           ; 1 bytes @ 0x0
  5918                           
  5919  0070                     ?_TMR3_StartTimer:	
  5920                           ; 1 bytes @ 0x0
  5921                           
  5922  0070                     ?_Timer3_Overflow:	
  5923                           ; 1 bytes @ 0x0
  5924                           
  5925  0070                     ??_Timer3_Overflow:	
  5926                           ; 1 bytes @ 0x0
  5927                           
  5928  0070                     ?_TMR0_DefaultInterruptHandler:	
  5929                           ; 1 bytes @ 0x0
  5930                           
  5931  0070                     ??_TMR0_DefaultInterruptHandler:	
  5932                           ; 1 bytes @ 0x0
  5933                           
  5934  0070                     ?_TMR0_StartTimer:	
  5935                           ; 1 bytes @ 0x0
  5936                           
  5937  0070                     ?_TMR0_CallBack:	
  5938                           ; 1 bytes @ 0x0
  5939                           
  5940  0070                     ?_Timer0_tick10msecFunc:	
  5941                           ; 1 bytes @ 0x0
  5942                           
  5943  0070                     ??_Timer0_tick10msecFunc:	
  5944                           ; 1 bytes @ 0x0
  5945                           
  5946  0070                     ?_IOCCF4_DefaultInterruptHandler:	
  5947                           ; 1 bytes @ 0x0
  5948                           
  5949  0070                     ??_IOCCF4_DefaultInterruptHandler:	
  5950                           ; 1 bytes @ 0x0
  5951                           
  5952  0070                     ?_IOCCF5_DefaultInterruptHandler:	
  5953                           ; 1 bytes @ 0x0
  5954                           
  5955  0070                     ??_IOCCF5_DefaultInterruptHandler:	
  5956                           ; 1 bytes @ 0x0
  5957                           
  5958  0070                     ?_IOCCF4_ISR:	
  5959                           ; 1 bytes @ 0x0
  5960                           
  5961  0070                     ??_IOCCF4_ISR:	
  5962                           ; 1 bytes @ 0x0
  5963                           
  5964  0070                     ?_IOCCF5_ISR:	
  5965                           ; 1 bytes @ 0x0
  5966                           
  5967  0070                     ??_IOCCF5_ISR:	
  5968                           ; 1 bytes @ 0x0
  5969                           
  5970  0070                     ?_INT_ISR:	
  5971                           ; 1 bytes @ 0x0
  5972                           
  5973  0070                     ?_OSCILLATOR_Initialize:	
  5974                           ; 1 bytes @ 0x0
  5975                           
  5976  0070                     ?_WDT_Initialize:	
  5977                           ; 1 bytes @ 0x0
  5978                           
  5979  0070                     ?_EXT_INT_Initialize:	
  5980                           ; 1 bytes @ 0x0
  5981                           
  5982  0070                     ?_INT_CallBack:	
  5983                           ; 1 bytes @ 0x0
  5984                           
  5985  0070                     ?_EncINX_PulseRisingEvent:	
  5986                           ; 1 bytes @ 0x0
  5987                           
  5988  0070                     ?_ModbusMasterSetup:	
  5989                           ; 1 bytes @ 0x0
  5990                           
  5991  0070                     ?_getEncoderState:	
  5992                           ; 1 bytes @ 0x0
  5993                           
  5994  0070                     ?_NutRunCycleStart:	
  5995                           ; 1 bytes @ 0x0
  5996                           
  5997  0070                     ?_LedONStatusBusy:	
  5998                           ; 1 bytes @ 0x0
  5999                           
  6000  0070                     ?_EPC_StateMachineControlLoop:	
  6001                           ; 1 bytes @ 0x0
  6002                           
  6003  0070                     ?_NutRunCycleReset:	
  6004                           ; 1 bytes @ 0x0
  6005                           
  6006  0070                     ?_valuetocharHighNibble:	
  6007                           ; 1 bytes @ 0x0
  6008                           
  6009  0070                     ?_valuetocharLowNibble:	
  6010                           ; 1 bytes @ 0x0
  6011                           
  6012  0070                     ?_NutRunCycleStop:	
  6013                           ; 1 bytes @ 0x0
  6014                           
  6015  0070                     ?_LedON_Control_10msec:	
  6016                           ; 1 bytes @ 0x0
  6017                           
  6018  0070                     ??_LedON_Control_10msec:	
  6019                           ; 1 bytes @ 0x0
  6020                           
  6021  0070                     ?_valtoasciichar:	
  6022                           ; 1 bytes @ 0x0
  6023                           
  6024  0070                     ?_TMR5_Initialize:	
  6025                           ; 1 bytes @ 0x0
  6026                           
  6027  0070                     ?_TMR5_StopTimer:	
  6028                           ; 1 bytes @ 0x0
  6029                           
  6030  0070                     ?_TMR5_ISR:	
  6031                           ; 1 bytes @ 0x0
  6032                           
  6033  0070                     ??_TMR5_ISR:	
  6034                           ; 1 bytes @ 0x0
  6035                           
  6036  0070                     ?_TMR3_Initialize:	
  6037                           ; 1 bytes @ 0x0
  6038                           
  6039  0070                     ?_TMR3_StopTimer:	
  6040                           ; 1 bytes @ 0x0
  6041                           
  6042  0070                     ?_TMR3_ISR:	
  6043                           ; 1 bytes @ 0x0
  6044                           
  6045  0070                     ?_EUSART_Initialize:	
  6046                           ; 1 bytes @ 0x0
  6047                           
  6048  0070                     ?_EUSART_Write:	
  6049                           ; 1 bytes @ 0x0
  6050                           
  6051  0070                     ?_TMR0_Initialize:	
  6052                           ; 1 bytes @ 0x0
  6053                           
  6054  0070                     ?_TMR0_ISR:	
  6055                           ; 1 bytes @ 0x0
  6056                           
  6057  0070                     ?_PIN_MANAGER_Initialize:	
  6058                           ; 1 bytes @ 0x0
  6059                           
  6060  0070                     ?_PIN_MANAGER_IOC:	
  6061                           ; 1 bytes @ 0x0
  6062                           
  6063  0070                     ??_PIN_MANAGER_IOC:	
  6064                           ; 1 bytes @ 0x0
  6065                           
  6066  0070                     ?_CCP1_Initialize:	
  6067                           ; 1 bytes @ 0x0
  6068                           
  6069  0070                     ?_CCP1_CaptureISR:	
  6070                           ; 1 bytes @ 0x0
  6071                           
  6072  0070                     ?_CCP2_Initialize:	
  6073                           ; 1 bytes @ 0x0
  6074                           
  6075  0070                     ?_ADC_Initialize:	
  6076                           ; 1 bytes @ 0x0
  6077                           
  6078  0070                     ?_INTERRUPT_InterruptManager:	
  6079                           ; 1 bytes @ 0x0
  6080                           
  6081  0070                     ?_SYSTEM_Initialize:	
  6082                           ; 1 bytes @ 0x0
  6083                           
  6084  0070                     ?_INT_DefaultInterruptHandler:	
  6085                           ; 1 bytes @ 0x0
  6086                           
  6087  0070                     ??_INT_DefaultInterruptHandler:	
  6088                           ; 1 bytes @ 0x0
  6089                           
  6090  0070                     ?_main:	
  6091                           ; 1 bytes @ 0x0
  6092                           
  6093  0070                     ?_ModbusMasterInit:	
  6094                           ; 1 bytes @ 0x0
  6095                           
  6096  0070                     ?i1_TMR5_StopTimer:	
  6097                           ; 1 bytes @ 0x0
  6098                           
  6099  0070                     ??i1_TMR5_StopTimer:	
  6100                           ; 1 bytes @ 0x0
  6101                           
  6102  0070                     ?i1_TMR5_WriteTimer:	
  6103                           ; 1 bytes @ 0x0
  6104                           
  6105  0070                     ?i1_TMR3_StartTimer:	
  6106                           ; 1 bytes @ 0x0
  6107                           
  6108  0070                     ??i1_TMR3_StartTimer:	
  6109                           ; 1 bytes @ 0x0
  6110                           
  6111  0070                     ?i1_TMR3_StopTimer:	
  6112                           ; 1 bytes @ 0x0
  6113                           
  6114  0070                     ??i1_TMR3_StopTimer:	
  6115                           ; 1 bytes @ 0x0
  6116                           
  6117  0070                     ?i1_TMR3_WriteTimer:	
  6118                           ; 1 bytes @ 0x0
  6119                           
  6120  0070                     ?i1_EUSART_Write:	
  6121                           ; 1 bytes @ 0x0
  6122                           
  6123  0070                     ??i1_EUSART_Write:	
  6124                           ; 1 bytes @ 0x0
  6125                           
  6126  0070                     ?i1_NutRunCycleReset:	
  6127                           ; 1 bytes @ 0x0
  6128                           
  6129  0070                     ??i1_NutRunCycleReset:	
  6130                           ; 1 bytes @ 0x0
  6131                           
  6132  0070                     ?i1_NutRunCycleStart:	
  6133                           ; 1 bytes @ 0x0
  6134                           
  6135  0070                     ?i1_getEncoderState:	
  6136                           ; 1 bytes @ 0x0
  6137                           
  6138  0070                     ??i1_getEncoderState:	
  6139                           ; 1 bytes @ 0x0
  6140                           
  6141  0070                     ?i1_valuetocharHighNibble:	
  6142                           ; 1 bytes @ 0x0
  6143                           
  6144  0070                     ?i1_valuetocharLowNibble:	
  6145                           ; 1 bytes @ 0x0
  6146                           
  6147  0070                     ?i1_valtoasciichar:	
  6148                           ; 1 bytes @ 0x0
  6149                           
  6150  0070                     ??i1_valtoasciichar:	
  6151                           ; 1 bytes @ 0x0
  6152                           
  6153  0070                     ?_millis:	
  6154                           ; 1 bytes @ 0x0
  6155                           
  6156  0070                     ?___lmul:	
  6157                           ; 4 bytes @ 0x0
  6158                           
  6159  0070                     i1EUSART_Write@txData:	
  6160                           ; 4 bytes @ 0x0
  6161                           
  6162  0070                     i1TMR5_WriteTimer@timerVal:	
  6163                           ; 1 bytes @ 0x0
  6164                           
  6165  0070                     i1TMR3_WriteTimer@timerVal:	
  6166                           ; 2 bytes @ 0x0
  6167                           
  6168  0070                     ___lmul@multiplier:	
  6169                           ; 2 bytes @ 0x0
  6170                           
  6171                           
  6172                           ; 4 bytes @ 0x0
  6173  0070                     	ds	1
  6174  0071                     i1valtoasciichar@hexvalue1:	
  6175                           
  6176                           ; 1 bytes @ 0x1
  6177  0071                     	ds	1
  6178  0072                     ??_NutRunCycleStop:	
  6179  0072                     ??i1_TMR5_WriteTimer:	
  6180                           ; 1 bytes @ 0x2
  6181                           
  6182  0072                     ??i1_TMR3_WriteTimer:	
  6183                           ; 1 bytes @ 0x2
  6184                           
  6185  0072                     ??i1_NutRunCycleStart:	
  6186                           ; 1 bytes @ 0x2
  6187                           
  6188  0072                     i1valtoasciichar@hexval:	
  6189                           ; 1 bytes @ 0x2
  6190                           
  6191                           
  6192                           ; 1 bytes @ 0x2
  6193  0072                     	ds	1
  6194  0073                     ??i1_valuetocharHighNibble:	
  6195  0073                     ??i1_valuetocharLowNibble:	
  6196                           ; 1 bytes @ 0x3
  6197                           
  6198                           
  6199                           ; 1 bytes @ 0x3
  6200  0073                     	ds	1
  6201  0074                     ??_TMR3_DefaultInterruptHandler:	
  6202  0074                     ??_TMR0_CallBack:	
  6203                           ; 1 bytes @ 0x4
  6204                           
  6205  0074                     ??_millis:	
  6206                           ; 1 bytes @ 0x4
  6207                           
  6208  0074                     ??_TMR3_ISR:	
  6209                           ; 1 bytes @ 0x4
  6210                           
  6211  0074                     ??_TMR0_ISR:	
  6212                           ; 1 bytes @ 0x4
  6213                           
  6214  0074                     i1valuetocharLowNibble@hexvalue:	
  6215                           ; 1 bytes @ 0x4
  6216                           
  6217  0074                     ___lmul@multiplicand:	
  6218                           ; 1 bytes @ 0x4
  6219                           
  6220                           
  6221                           ; 4 bytes @ 0x4
  6222  0074                     	ds	1
  6223  0075                     i1valuetocharHighNibble@hexvalue:	
  6224  0075                     i1valuetocharLowNibble@hexval:	
  6225                           ; 1 bytes @ 0x5
  6226                           
  6227                           
  6228                           ; 1 bytes @ 0x5
  6229  0075                     	ds	1
  6230  0076                     i1valuetocharHighNibble@hexval:	
  6231                           
  6232                           ; 1 bytes @ 0x6
  6233  0076                     	ds	1
  6234  0077                     ??_EncINX_PulseRisingEvent:	
  6235                           
  6236                           ; 1 bytes @ 0x7
  6237  0077                     	ds	1
  6238  0078                     ??_INT_ISR:	
  6239  0078                     ??_INT_CallBack:	
  6240                           ; 1 bytes @ 0x8
  6241                           
  6242  0078                     ??___lmul:	
  6243                           ; 1 bytes @ 0x8
  6244                           
  6245  0078                     ___lmul@product:	
  6246                           ; 1 bytes @ 0x8
  6247                           
  6248                           
  6249                           ; 4 bytes @ 0x8
  6250  0078                     	ds	4
  6251  007C                     ??___lldiv:	
  6252                           
  6253                           ; 1 bytes @ 0xC
  6254  007C                     	ds	1
  6255  007D                     ??_CCP1_CallBack:	
  6256  007D                     ??_EncA_PulseEdgeEvent:	
  6257                           ; 1 bytes @ 0xD
  6258                           
  6259  007D                     ??_CCP1_CaptureISR:	
  6260                           ; 1 bytes @ 0xD
  6261                           
  6262                           
  6263                           ; 1 bytes @ 0xD
  6264  007D                     	ds	1
  6265                           
  6266                           	psect	cstackBANK0
  6267  0020                     __pcstackBANK0:	
  6268  0020                     ?___lldiv:	
  6269  0020                     ___lldiv@divisor:	
  6270                           ; 4 bytes @ 0x0
  6271                           
  6272                           
  6273                           ; 4 bytes @ 0x0
  6274  0020                     	ds	4
  6275  0024                     ___lldiv@dividend:	
  6276                           
  6277                           ; 4 bytes @ 0x4
  6278  0024                     	ds	4
  6279  0028                     ___lldiv@quotient:	
  6280                           
  6281                           ; 4 bytes @ 0x8
  6282  0028                     	ds	4
  6283  002C                     ___lldiv@counter:	
  6284                           
  6285                           ; 1 bytes @ 0xC
  6286  002C                     	ds	1
  6287  002D                     ?_OnEncPulseEdgeEvent:	
  6288  002D                     OnEncPulseEdgeEvent@capturevalue:	
  6289                           ; 1 bytes @ 0xD
  6290                           
  6291                           
  6292                           ; 2 bytes @ 0xD
  6293  002D                     	ds	2
  6294  002F                     ??_OnEncPulseEdgeEvent:	
  6295                           
  6296                           ; 1 bytes @ 0xF
  6297  002F                     	ds	8
  6298  0037                     ?_EncA_PulseEdgeEvent:	
  6299  0037                     EncA_PulseEdgeEvent@capturedValue:	
  6300                           ; 1 bytes @ 0x17
  6301                           
  6302                           
  6303                           ; 2 bytes @ 0x17
  6304  0037                     	ds	2
  6305  0039                     ?_CCP1_CallBack:	
  6306  0039                     CCP1_CallBack@capturedValue:	
  6307                           ; 1 bytes @ 0x19
  6308                           
  6309                           
  6310                           ; 2 bytes @ 0x19
  6311  0039                     	ds	2
  6312  003B                     CCP1_CaptureISR@module:	
  6313                           
  6314                           ; 2 bytes @ 0x1B
  6315  003B                     	ds	2
  6316  003D                     ??_INTERRUPT_InterruptManager:	
  6317                           
  6318                           ; 1 bytes @ 0x1D
  6319  003D                     	ds	1
  6320                           
  6321                           	psect	maintext
  6322  04C4                     __pmaintext:	
  6323 ;;
  6324 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6325 ;;
  6326 ;; *************** function _main *****************
  6327 ;; Defined at:
  6328 ;;		line 108 in file "main.c"
  6329 ;; Parameters:    Size  Location     Type
  6330 ;;		None
  6331 ;; Auto vars:     Size  Location     Type
  6332 ;;		None
  6333 ;; Return value:  Size  Location     Type
  6334 ;;                  1    wreg      void 
  6335 ;; Registers used:
  6336 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6337 ;; Tracked objects:
  6338 ;;		On entry : B1F/0
  6339 ;;		On exit  : 0/0
  6340 ;;		Unchanged: 0/0
  6341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6342 ;;      Params:         0       0       0       0       0       0       0       0
  6343 ;;      Locals:         0       0       0       0       0       0       0       0
  6344 ;;      Temps:          0       0       0       0       0       0       0       0
  6345 ;;      Totals:         0       0       0       0       0       0       0       0
  6346 ;;Total ram usage:        0 bytes
  6347 ;; Hardware stack levels required when called:   10
  6348 ;; This function calls:
  6349 ;;		_EPC_StateMachineControlLoop
  6350 ;;		_EUSART_Write
  6351 ;;		_LedONStartConfig
  6352 ;;		_LedONStatusBusy
  6353 ;;		_ModbusMasterSetup
  6354 ;;		_NutRunCycleStart
  6355 ;;		_SYSTEM_Initialize
  6356 ;;		_TMR3_StopTimer
  6357 ;;		_TMR3_WriteTimer
  6358 ;;		_TMR5_StopTimer
  6359 ;;		_TMR5_WriteTimer
  6360 ;;		_getEncoderState
  6361 ;; This function is called by:
  6362 ;;		Startup code after reset
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           
  6367                           ;psect for function _main
  6368  04C4                     _main:	
  6369                           
  6370                           ;main.c: 111: SYSTEM_Initialize();
  6371                           
  6372                           ;incstack = 0
  6373                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6374  04C4  3187  27AE  3184   	fcall	_SYSTEM_Initialize
  6375                           
  6376                           ;main.c: 118: TMR3_WriteTimer(0);
  6377  04C7  3000               	movlw	0
  6378  04C8  0021               	movlb	1	; select bank1
  6379  04C9  00DF               	movwf	TMR3_WriteTimer@timerVal^(0+128)
  6380  04CA  00E0               	movwf	(TMR3_WriteTimer@timerVal+1)^(0+128)
  6381  04CB  318F  2769  3184   	fcall	_TMR3_WriteTimer
  6382                           
  6383                           ;main.c: 119: TMR3_StopTimer();
  6384  04CE  318D  251C  3184   	fcall	_TMR3_StopTimer
  6385                           
  6386                           ;main.c: 120: TMR5_WriteTimer(0);
  6387  04D1  3000               	movlw	0
  6388  04D2  0021               	movlb	1	; select bank1
  6389  04D3  00DF               	movwf	TMR5_WriteTimer@timerVal^(0+128)
  6390  04D4  00E0               	movwf	(TMR5_WriteTimer@timerVal+1)^(0+128)
  6391  04D5  318F  2780  3184   	fcall	_TMR5_WriteTimer
  6392                           
  6393                           ;main.c: 121: TMR5_StopTimer();
  6394  04D8  318D  251F  3184   	fcall	_TMR5_StopTimer
  6395                           
  6396                           ;main.c: 123: ModbusMasterSetup();
  6397  04DB  318F  2797  3184   	fcall	_ModbusMasterSetup
  6398                           
  6399                           ;main.c: 124: EncPulseOpState=0;
  6400  04DE  0020               	movlb	0	; select bank0
  6401  04DF  01C8               	clrf	_EncPulseOpState
  6402  04E0  01C9               	clrf	_EncPulseOpState+1
  6403                           
  6404                           ;main.c: 126: INLVLC = 0xFF;
  6405  04E1  30FF               	movlw	255
  6406  04E2  0027               	movlb	7	; select bank7
  6407  04E3  008E               	movwf	14	;volatile
  6408                           
  6409                           ;main.c: 127: INLVLA = 0xFF;
  6410  04E4  30FF               	movlw	255
  6411  04E5  008C               	movwf	12	;volatile
  6412                           
  6413                           ;main.c: 129: getEncoderState();
  6414  04E6  318D  25B6  3184   	fcall	_getEncoderState
  6415                           
  6416                           ;main.c: 130: OldEncPulseOpState=EncPulseOpState;
  6417  04E9  0020               	movlb	0	; select bank0
  6418  04EA  0849               	movf	_EncPulseOpState+1,w
  6419  04EB  0021               	movlb	1	; select bank1
  6420  04EC  00CB               	movwf	(_OldEncPulseOpState+1)^(0+128)
  6421  04ED  0020               	movlb	0	; select bank0
  6422  04EE  0848               	movf	_EncPulseOpState,w
  6423  04EF  0021               	movlb	1	; select bank1
  6424  04F0  00CA               	movwf	_OldEncPulseOpState^(0+128)
  6425                           
  6426                           ;main.c: 131: NutRunCycleStart();
  6427  04F1  318E  266E  3184   	fcall	_NutRunCycleStart
  6428                           
  6429                           ;main.c: 141: (INTCONbits.GIE = 1);
  6430  04F4  178B               	bsf	11,7	;volatile
  6431                           
  6432                           ;main.c: 144: (INTCONbits.PEIE = 1);
  6433  04F5  170B               	bsf	11,6	;volatile
  6434                           
  6435                           ;main.c: 146: LedONStartConfig(0, 1, 1);
  6436  04F6  0022               	movlb	2	; select bank2
  6437  04F7  01A0               	clrf	LedONStartConfig@LedONDurationSec^(0+256)
  6438  04F8  0AA0               	incf	LedONStartConfig@LedONDurationSec^(0+256),f
  6439  04F9  01A1               	clrf	LedONStartConfig@LedONNumBlink^(0+256)
  6440  04FA  0AA1               	incf	LedONStartConfig@LedONNumBlink^(0+256),f
  6441  04FB  3000               	movlw	0
  6442  04FC  3184  2453  3184   	fcall	_LedONStartConfig
  6443  04FF                     l5571:	
  6444                           ;main.c: 147: while(LedONStatusBusy());
  6445                           
  6446  04FF  318D  2510  3184   	fcall	_LedONStatusBusy
  6447  0502  3A00               	xorlw	0
  6448  0503  1D03               	skipz
  6449  0504  2CFF               	goto	l5571
  6450                           
  6451                           ;main.c: 148: LedONStartConfig(1, 1, 1);
  6452  0505  0022               	movlb	2	; select bank2
  6453  0506  01A0               	clrf	LedONStartConfig@LedONDurationSec^(0+256)
  6454  0507  0AA0               	incf	LedONStartConfig@LedONDurationSec^(0+256),f
  6455  0508  01A1               	clrf	LedONStartConfig@LedONNumBlink^(0+256)
  6456  0509  0AA1               	incf	LedONStartConfig@LedONNumBlink^(0+256),f
  6457  050A  3001               	movlw	1
  6458  050B  3184  2453  3184   	fcall	_LedONStartConfig
  6459  050E                     l5575:	
  6460                           ;main.c: 149: while(LedONStatusBusy());
  6461                           
  6462  050E  318D  2510  3184   	fcall	_LedONStatusBusy
  6463  0511  3A00               	xorlw	0
  6464  0512  1D03               	skipz
  6465  0513  2D0E               	goto	l5575
  6466                           
  6467                           ;main.c: 150: LedONStartConfig(2, 1, 1);
  6468  0514  0022               	movlb	2	; select bank2
  6469  0515  01A0               	clrf	LedONStartConfig@LedONDurationSec^(0+256)
  6470  0516  0AA0               	incf	LedONStartConfig@LedONDurationSec^(0+256),f
  6471  0517  01A1               	clrf	LedONStartConfig@LedONNumBlink^(0+256)
  6472  0518  0AA1               	incf	LedONStartConfig@LedONNumBlink^(0+256),f
  6473  0519  3002               	movlw	2
  6474  051A  3184  2453  3184   	fcall	_LedONStartConfig
  6475  051D                     l5579:	
  6476                           ;main.c: 151: while(LedONStatusBusy());
  6477                           
  6478  051D  318D  2510  3184   	fcall	_LedONStatusBusy
  6479  0520  3A00               	xorlw	0
  6480  0521  1D03               	skipz
  6481  0522  2D1D               	goto	l5579
  6482                           
  6483                           ;main.c: 153: do { LATBbits.LATB6 = 1; } while(0);
  6484  0523  0022               	movlb	2	; select bank2
  6485  0524  170D               	bsf	13,6	;volatile
  6486                           
  6487                           ;main.c: 156: EUSART_Write('>');
  6488  0525  303E               	movlw	62
  6489  0526  318D  25A1  3184   	fcall	_EUSART_Write
  6490                           
  6491                           ;main.c: 157: EUSART_Write('>');
  6492  0529  303E               	movlw	62
  6493  052A  318D  25A1  3184   	fcall	_EUSART_Write
  6494  052D                     l5583:	
  6495                           ;main.c: 159: while (1)
  6496                           
  6497                           
  6498                           ;main.c: 160: {
  6499                           ;main.c: 172: EPC_StateMachineControlLoop();
  6500  052D  3182  22FA  3184   	fcall	_EPC_StateMachineControlLoop
  6501  0530  2D2D               	goto	l5583
  6502  0531                     __end_of_main:	
  6503                           
  6504                           	psect	text1
  6505  0DB6                     __ptext1:	
  6506 ;; *************** function _getEncoderState *****************
  6507 ;; Defined at:
  6508 ;;		line 544 in file "main.c"
  6509 ;; Parameters:    Size  Location     Type
  6510 ;;		None
  6511 ;; Auto vars:     Size  Location     Type
  6512 ;;		None
  6513 ;; Return value:  Size  Location     Type
  6514 ;;                  1    wreg      void 
  6515 ;; Registers used:
  6516 ;;		wreg, status,2
  6517 ;; Tracked objects:
  6518 ;;		On entry : 0/0
  6519 ;;		On exit  : 0/0
  6520 ;;		Unchanged: 0/0
  6521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6522 ;;      Params:         0       0       0       0       0       0       0       0
  6523 ;;      Locals:         0       0       0       0       0       0       0       0
  6524 ;;      Temps:          0       0       0       0       0       0       0       0
  6525 ;;      Totals:         0       0       0       0       0       0       0       0
  6526 ;;Total ram usage:        0 bytes
  6527 ;; Hardware stack levels used:    1
  6528 ;; Hardware stack levels required when called:    7
  6529 ;; This function calls:
  6530 ;;		Nothing
  6531 ;; This function is called by:
  6532 ;;		_main
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           
  6537                           ;psect for function _getEncoderState
  6538  0DB6                     _getEncoderState:	
  6539                           
  6540                           ;main.c: 546: if(PORTCbits.RC5)
  6541                           
  6542                           ;incstack = 0
  6543                           ; Regs used in _getEncoderState: [wreg+status,2]
  6544  0DB6  0020               	movlb	0	; select bank0
  6545  0DB7  1E8E               	btfss	14,5	;volatile
  6546  0DB8  2DBE               	goto	l5423
  6547                           
  6548                           ;main.c: 547: {
  6549                           ;main.c: 549: EncPulseOpState= 1;
  6550  0DB9  3001               	movlw	1
  6551  0DBA  00C8               	movwf	_EncPulseOpState
  6552  0DBB  3000               	movlw	0
  6553  0DBC  00C9               	movwf	_EncPulseOpState+1
  6554                           
  6555                           ;main.c: 552: }
  6556  0DBD  0008               	return
  6557  0DBE                     l5423:	
  6558                           
  6559                           ;main.c: 553: else
  6560                           ;main.c: 554: {
  6561                           ;main.c: 556: EncPulseOpState= 0;
  6562  0DBE  01C8               	clrf	_EncPulseOpState
  6563  0DBF  01C9               	clrf	_EncPulseOpState+1
  6564  0DC0  0008               	return
  6565  0DC1                     __end_of_getEncoderState:	
  6566                           
  6567                           	psect	text2
  6568  0F80                     __ptext2:	
  6569 ;; *************** function _TMR5_WriteTimer *****************
  6570 ;; Defined at:
  6571 ;;		line 117 in file "mcc_generated_files/tmr5.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;  timerVal        2    0[BANK1 ] unsigned int 
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;		None
  6576 ;; Return value:  Size  Location     Type
  6577 ;;                  1    wreg      void 
  6578 ;; Registers used:
  6579 ;;		wreg, status,2
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6585 ;;      Params:         0       0       2       0       0       0       0       0
  6586 ;;      Locals:         0       0       0       0       0       0       0       0
  6587 ;;      Temps:          0       0       0       0       0       0       0       0
  6588 ;;      Totals:         0       0       2       0       0       0       0       0
  6589 ;;Total ram usage:        2 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    7
  6592 ;; This function calls:
  6593 ;;		Nothing
  6594 ;; This function is called by:
  6595 ;;		_main
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           
  6600                           ;psect for function _TMR5_WriteTimer
  6601  0F80                     _TMR5_WriteTimer:	
  6602                           
  6603                           ;tmr5.c: 119: if (T5CONbits.T5SYNC == 1)
  6604                           
  6605                           ;incstack = 0
  6606                           ; Regs used in _TMR5_WriteTimer: [wreg+status,2]
  6607  0F80  0028               	movlb	8	; select bank8
  6608  0F81  1D1A               	btfss	26,2	;volatile
  6609  0F82  2F8E               	goto	l5409
  6610                           
  6611                           ;tmr5.c: 120: {
  6612                           ;tmr5.c: 122: T5CONbits.TMR5ON = 0;
  6613  0F83  101A               	bcf	26,0	;volatile
  6614                           
  6615                           ;tmr5.c: 125: TMR5H = (timerVal >> 8);
  6616  0F84  0021               	movlb	1	; select bank1
  6617  0F85  0860               	movf	(TMR5_WriteTimer@timerVal+1)^(0+128),w
  6618  0F86  0028               	movlb	8	; select bank8
  6619  0F87  0099               	movwf	25	;volatile
  6620                           
  6621                           ;tmr5.c: 126: TMR5L = timerVal;
  6622  0F88  0021               	movlb	1	; select bank1
  6623  0F89  085F               	movf	TMR5_WriteTimer@timerVal^(0+128),w
  6624  0F8A  0028               	movlb	8	; select bank8
  6625  0F8B  0098               	movwf	24	;volatile
  6626                           
  6627                           ;tmr5.c: 129: T5CONbits.TMR5ON =1;
  6628  0F8C  141A               	bsf	26,0	;volatile
  6629                           
  6630                           ;tmr5.c: 130: }
  6631  0F8D  0008               	return
  6632  0F8E                     l5409:	
  6633                           
  6634                           ;tmr5.c: 131: else
  6635                           ;tmr5.c: 132: {
  6636                           ;tmr5.c: 134: TMR5H = (timerVal >> 8);
  6637  0F8E  0021               	movlb	1	; select bank1
  6638  0F8F  0860               	movf	(TMR5_WriteTimer@timerVal+1)^(0+128),w
  6639  0F90  0028               	movlb	8	; select bank8
  6640  0F91  0099               	movwf	25	;volatile
  6641                           
  6642                           ;tmr5.c: 135: TMR5L = timerVal;
  6643  0F92  0021               	movlb	1	; select bank1
  6644  0F93  085F               	movf	TMR5_WriteTimer@timerVal^(0+128),w
  6645  0F94  0028               	movlb	8	; select bank8
  6646  0F95  0098               	movwf	24	;volatile
  6647  0F96  0008               	return
  6648  0F97                     __end_of_TMR5_WriteTimer:	
  6649                           
  6650                           	psect	text3
  6651  0D1F                     __ptext3:	
  6652 ;; *************** function _TMR5_StopTimer *****************
  6653 ;; Defined at:
  6654 ;;		line 102 in file "mcc_generated_files/tmr5.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;		None
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;		None
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  1    wreg      void 
  6661 ;; Registers used:
  6662 ;;		None
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6668 ;;      Params:         0       0       0       0       0       0       0       0
  6669 ;;      Locals:         0       0       0       0       0       0       0       0
  6670 ;;      Temps:          0       0       0       0       0       0       0       0
  6671 ;;      Totals:         0       0       0       0       0       0       0       0
  6672 ;;Total ram usage:        0 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    7
  6675 ;; This function calls:
  6676 ;;		Nothing
  6677 ;; This function is called by:
  6678 ;;		_main
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           
  6683                           ;psect for function _TMR5_StopTimer
  6684  0D1F                     _TMR5_StopTimer:	
  6685                           
  6686                           ;tmr5.c: 105: T5CONbits.TMR5ON = 0;
  6687                           
  6688                           ;incstack = 0
  6689                           ; Regs used in _TMR5_StopTimer: []
  6690  0D1F  0028               	movlb	8	; select bank8
  6691  0D20  101A               	bcf	26,0	;volatile
  6692  0D21  0008               	return
  6693  0D22                     __end_of_TMR5_StopTimer:	
  6694                           
  6695                           	psect	text4
  6696  0D1C                     __ptext4:	
  6697 ;; *************** function _TMR3_StopTimer *****************
  6698 ;; Defined at:
  6699 ;;		line 102 in file "mcc_generated_files/tmr3.c"
  6700 ;; Parameters:    Size  Location     Type
  6701 ;;		None
  6702 ;; Auto vars:     Size  Location     Type
  6703 ;;		None
  6704 ;; Return value:  Size  Location     Type
  6705 ;;                  1    wreg      void 
  6706 ;; Registers used:
  6707 ;;		None
  6708 ;; Tracked objects:
  6709 ;;		On entry : 0/0
  6710 ;;		On exit  : 0/0
  6711 ;;		Unchanged: 0/0
  6712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6713 ;;      Params:         0       0       0       0       0       0       0       0
  6714 ;;      Locals:         0       0       0       0       0       0       0       0
  6715 ;;      Temps:          0       0       0       0       0       0       0       0
  6716 ;;      Totals:         0       0       0       0       0       0       0       0
  6717 ;;Total ram usage:        0 bytes
  6718 ;; Hardware stack levels used:    1
  6719 ;; Hardware stack levels required when called:    7
  6720 ;; This function calls:
  6721 ;;		Nothing
  6722 ;; This function is called by:
  6723 ;;		_main
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           
  6728                           ;psect for function _TMR3_StopTimer
  6729  0D1C                     _TMR3_StopTimer:	
  6730                           
  6731                           ;tmr3.c: 105: T3CONbits.TMR3ON = 0;
  6732                           
  6733                           ;incstack = 0
  6734                           ; Regs used in _TMR3_StopTimer: []
  6735  0D1C  0028               	movlb	8	; select bank8
  6736  0D1D  1013               	bcf	19,0	;volatile
  6737  0D1E  0008               	return
  6738  0D1F                     __end_of_TMR3_StopTimer:	
  6739                           
  6740                           	psect	text5
  6741  07AE                     __ptext5:	
  6742 ;; *************** function _SYSTEM_Initialize *****************
  6743 ;; Defined at:
  6744 ;;		line 76 in file "mcc_generated_files/mcc.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;		None
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;		None
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  1    wreg      void 
  6751 ;; Registers used:
  6752 ;;		wreg, status,2, status,0, pclath, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6758 ;;      Params:         0       0       0       0       0       0       0       0
  6759 ;;      Locals:         0       0       0       0       0       0       0       0
  6760 ;;      Temps:          0       0       0       0       0       0       0       0
  6761 ;;      Totals:         0       0       0       0       0       0       0       0
  6762 ;;Total ram usage:        0 bytes
  6763 ;; Hardware stack levels used:    1
  6764 ;; Hardware stack levels required when called:    9
  6765 ;; This function calls:
  6766 ;;		_ADC_Initialize
  6767 ;;		_CCP1_Initialize
  6768 ;;		_CCP2_Initialize
  6769 ;;		_EUSART_Initialize
  6770 ;;		_EXT_INT_Initialize
  6771 ;;		_OSCILLATOR_Initialize
  6772 ;;		_PIN_MANAGER_Initialize
  6773 ;;		_TMR0_Initialize
  6774 ;;		_TMR3_Initialize
  6775 ;;		_TMR5_Initialize
  6776 ;;		_WDT_Initialize
  6777 ;; This function is called by:
  6778 ;;		_main
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           
  6783                           ;psect for function _SYSTEM_Initialize
  6784  07AE                     _SYSTEM_Initialize:	
  6785                           
  6786                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  6787                           
  6788                           ;incstack = 0
  6789                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6790  07AE  3185  259E  3187   	fcall	_PIN_MANAGER_Initialize
  6791                           
  6792                           ;mcc.c: 80: OSCILLATOR_Initialize();
  6793  07B1  318D  2575  3187   	fcall	_OSCILLATOR_Initialize
  6794                           
  6795                           ;mcc.c: 81: WDT_Initialize();
  6796  07B4  318D  2522  3187   	fcall	_WDT_Initialize
  6797                           
  6798                           ;mcc.c: 82: CCP2_Initialize();
  6799  07B7  318D  258E  3187   	fcall	_CCP2_Initialize
  6800                           
  6801                           ;mcc.c: 83: ADC_Initialize();
  6802  07BA  318D  2585  3187   	fcall	_ADC_Initialize
  6803                           
  6804                           ;mcc.c: 84: TMR3_Initialize();
  6805  07BD  318F  27B0  3187   	fcall	_TMR3_Initialize
  6806                           
  6807                           ;mcc.c: 85: CCP1_Initialize();
  6808  07C0  318E  267D  3187   	fcall	_CCP1_Initialize
  6809                           
  6810                           ;mcc.c: 86: TMR5_Initialize();
  6811  07C3  318F  27CA  3187   	fcall	_TMR5_Initialize
  6812                           
  6813                           ;mcc.c: 87: EXT_INT_Initialize();
  6814  07C6  318E  260B  3187   	fcall	_EXT_INT_Initialize
  6815                           
  6816                           ;mcc.c: 88: TMR0_Initialize();
  6817  07C9  318E  26E8  3187   	fcall	_TMR0_Initialize
  6818                           
  6819                           ;mcc.c: 89: EUSART_Initialize();
  6820  07CC  318D  25CD         	fcall	_EUSART_Initialize
  6821  07CE  0008               	return
  6822  07CF                     __end_of_SYSTEM_Initialize:	
  6823                           
  6824                           	psect	text6
  6825  0D22                     __ptext6:	
  6826 ;; *************** function _WDT_Initialize *****************
  6827 ;; Defined at:
  6828 ;;		line 108 in file "mcc_generated_files/mcc.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;		None
  6831 ;; Auto vars:     Size  Location     Type
  6832 ;;		None
  6833 ;; Return value:  Size  Location     Type
  6834 ;;                  1    wreg      void 
  6835 ;; Registers used:
  6836 ;;		wreg
  6837 ;; Tracked objects:
  6838 ;;		On entry : 0/0
  6839 ;;		On exit  : 0/0
  6840 ;;		Unchanged: 0/0
  6841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6842 ;;      Params:         0       0       0       0       0       0       0       0
  6843 ;;      Locals:         0       0       0       0       0       0       0       0
  6844 ;;      Temps:          0       0       0       0       0       0       0       0
  6845 ;;      Totals:         0       0       0       0       0       0       0       0
  6846 ;;Total ram usage:        0 bytes
  6847 ;; Hardware stack levels used:    1
  6848 ;; Hardware stack levels required when called:    7
  6849 ;; This function calls:
  6850 ;;		Nothing
  6851 ;; This function is called by:
  6852 ;;		_SYSTEM_Initialize
  6853 ;; This function uses a non-reentrant model
  6854 ;;
  6855                           
  6856                           
  6857                           ;psect for function _WDT_Initialize
  6858  0D22                     _WDT_Initialize:	
  6859                           
  6860                           ;mcc.c: 111: WDTCON = 0x16;
  6861                           
  6862                           ;incstack = 0
  6863                           ; Regs used in _WDT_Initialize: [wreg]
  6864  0D22  3016               	movlw	22
  6865  0D23  0021               	movlb	1	; select bank1
  6866  0D24  0097               	movwf	23	;volatile
  6867  0D25  0008               	return
  6868  0D26                     __end_of_WDT_Initialize:	
  6869                           
  6870                           	psect	text7
  6871  0FCA                     __ptext7:	
  6872 ;; *************** function _TMR5_Initialize *****************
  6873 ;; Defined at:
  6874 ;;		line 64 in file "mcc_generated_files/tmr5.c"
  6875 ;; Parameters:    Size  Location     Type
  6876 ;;		None
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;		None
  6879 ;; Return value:  Size  Location     Type
  6880 ;;                  1    wreg      void 
  6881 ;; Registers used:
  6882 ;;		wreg, status,2, status,0, pclath, cstack
  6883 ;; Tracked objects:
  6884 ;;		On entry : 0/0
  6885 ;;		On exit  : 0/0
  6886 ;;		Unchanged: 0/0
  6887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6888 ;;      Params:         0       0       0       0       0       0       0       0
  6889 ;;      Locals:         0       0       0       0       0       0       0       0
  6890 ;;      Temps:          0       0       0       0       0       0       0       0
  6891 ;;      Totals:         0       0       0       0       0       0       0       0
  6892 ;;Total ram usage:        0 bytes
  6893 ;; Hardware stack levels used:    1
  6894 ;; Hardware stack levels required when called:    8
  6895 ;; This function calls:
  6896 ;;		_TMR5_SetInterruptHandler
  6897 ;;		_TMR5_StartTimer
  6898 ;; This function is called by:
  6899 ;;		_SYSTEM_Initialize
  6900 ;; This function uses a non-reentrant model
  6901 ;;
  6902                           
  6903                           
  6904                           ;psect for function _TMR5_Initialize
  6905  0FCA                     _TMR5_Initialize:	
  6906                           
  6907                           ;tmr5.c: 69: T5CON = 0x30;
  6908                           
  6909                           ;incstack = 0
  6910                           ; Regs used in _TMR5_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6911  0FCA  3030               	movlw	48
  6912  0FCB  0028               	movlb	8	; select bank8
  6913  0FCC  009A               	movwf	26	;volatile
  6914                           
  6915                           ;tmr5.c: 72: T5GCON = 0x00;
  6916  0FCD  019B               	clrf	27	;volatile
  6917                           
  6918                           ;tmr5.c: 75: TMR5H = 0x00;
  6919  0FCE  0199               	clrf	25	;volatile
  6920                           
  6921                           ;tmr5.c: 78: TMR5L = 0x00;
  6922  0FCF  0198               	clrf	24	;volatile
  6923                           
  6924                           ;tmr5.c: 81: timer5ReloadVal=(TMR5H << 8) | TMR5L;
  6925  0FD0  0819               	movf	25,w	;volatile
  6926  0FD1  0020               	movlb	0	; select bank0
  6927  0FD2  00DE               	movwf	_timer5ReloadVal+1	;volatile
  6928  0FD3  0028               	movlb	8	; select bank8
  6929  0FD4  0818               	movf	24,w	;volatile
  6930  0FD5  0020               	movlb	0	; select bank0
  6931  0FD6  00DD               	movwf	_timer5ReloadVal	;volatile
  6932                           
  6933                           ;tmr5.c: 84: PIR4bits.TMR5IF = 0;
  6934  0FD7  1214               	bcf	20,4	;volatile
  6935                           
  6936                           ;tmr5.c: 87: PIE4bits.TMR5IE = 1;
  6937  0FD8  0021               	movlb	1	; select bank1
  6938  0FD9  1614               	bsf	20,4	;volatile
  6939                           
  6940                           ;tmr5.c: 90: TMR5_SetInterruptHandler(TMR5_DefaultInterruptHandler);
  6941  0FDA  300D               	movlw	low _TMR5_DefaultInterruptHandler
  6942  0FDB  00DF               	movwf	TMR5_SetInterruptHandler@InterruptHandler^(0+128)
  6943  0FDC  300D               	movlw	high _TMR5_DefaultInterruptHandler
  6944  0FDD  00E0               	movwf	(TMR5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  6945  0FDE  318D  255F  318F   	fcall	_TMR5_SetInterruptHandler
  6946                           
  6947                           ;tmr5.c: 93: TMR5_StartTimer();
  6948  0FE1  318D  2519         	fcall	_TMR5_StartTimer
  6949  0FE3  0008               	return
  6950  0FE4                     __end_of_TMR5_Initialize:	
  6951                           
  6952                           	psect	text8
  6953  0D19                     __ptext8:	
  6954 ;; *************** function _TMR5_StartTimer *****************
  6955 ;; Defined at:
  6956 ;;		line 96 in file "mcc_generated_files/tmr5.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;		None
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;		None
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  1    wreg      void 
  6963 ;; Registers used:
  6964 ;;		None
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6970 ;;      Params:         0       0       0       0       0       0       0       0
  6971 ;;      Locals:         0       0       0       0       0       0       0       0
  6972 ;;      Temps:          0       0       0       0       0       0       0       0
  6973 ;;      Totals:         0       0       0       0       0       0       0       0
  6974 ;;Total ram usage:        0 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:    7
  6977 ;; This function calls:
  6978 ;;		Nothing
  6979 ;; This function is called by:
  6980 ;;		_TMR5_Initialize
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           
  6985                           ;psect for function _TMR5_StartTimer
  6986  0D19                     _TMR5_StartTimer:	
  6987                           
  6988                           ;tmr5.c: 99: T5CONbits.TMR5ON = 1;
  6989                           
  6990                           ;incstack = 0
  6991                           ; Regs used in _TMR5_StartTimer: []
  6992  0D19  0028               	movlb	8	; select bank8
  6993  0D1A  141A               	bsf	26,0	;volatile
  6994  0D1B  0008               	return
  6995  0D1C                     __end_of_TMR5_StartTimer:	
  6996                           
  6997                           	psect	text9
  6998  0D5F                     __ptext9:	
  6999 ;; *************** function _TMR5_SetInterruptHandler *****************
  7000 ;; Defined at:
  7001 ;;		line 172 in file "mcc_generated_files/tmr5.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  7004 ;;		 -> TMR5_DefaultInterruptHandler(1), 
  7005 ;; Auto vars:     Size  Location     Type
  7006 ;;		None
  7007 ;; Return value:  Size  Location     Type
  7008 ;;                  1    wreg      void 
  7009 ;; Registers used:
  7010 ;;		wreg
  7011 ;; Tracked objects:
  7012 ;;		On entry : 0/0
  7013 ;;		On exit  : 0/0
  7014 ;;		Unchanged: 0/0
  7015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7016 ;;      Params:         0       0       2       0       0       0       0       0
  7017 ;;      Locals:         0       0       0       0       0       0       0       0
  7018 ;;      Temps:          0       0       0       0       0       0       0       0
  7019 ;;      Totals:         0       0       2       0       0       0       0       0
  7020 ;;Total ram usage:        2 bytes
  7021 ;; Hardware stack levels used:    1
  7022 ;; Hardware stack levels required when called:    7
  7023 ;; This function calls:
  7024 ;;		Nothing
  7025 ;; This function is called by:
  7026 ;;		_TMR5_Initialize
  7027 ;; This function uses a non-reentrant model
  7028 ;;
  7029                           
  7030                           
  7031                           ;psect for function _TMR5_SetInterruptHandler
  7032  0D5F                     _TMR5_SetInterruptHandler:	
  7033                           
  7034                           ;tmr5.c: 173: TMR5_InterruptHandler = InterruptHandler;
  7035                           
  7036                           ;incstack = 0
  7037                           ; Regs used in _TMR5_SetInterruptHandler: [wreg]
  7038  0D5F  0021               	movlb	1	; select bank1
  7039  0D60  0860               	movf	(TMR5_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7040  0D61  00DE               	movwf	(_TMR5_InterruptHandler+1)^(0+128)
  7041  0D62  085F               	movf	TMR5_SetInterruptHandler@InterruptHandler^(0+128),w
  7042  0D63  00DD               	movwf	_TMR5_InterruptHandler^(0+128)
  7043  0D64  0008               	return
  7044  0D65                     __end_of_TMR5_SetInterruptHandler:	
  7045                           
  7046                           	psect	text10
  7047  0FB0                     __ptext10:	
  7048 ;; *************** function _TMR3_Initialize *****************
  7049 ;; Defined at:
  7050 ;;		line 64 in file "mcc_generated_files/tmr3.c"
  7051 ;; Parameters:    Size  Location     Type
  7052 ;;		None
  7053 ;; Auto vars:     Size  Location     Type
  7054 ;;		None
  7055 ;; Return value:  Size  Location     Type
  7056 ;;                  1    wreg      void 
  7057 ;; Registers used:
  7058 ;;		wreg, status,2, status,0, pclath, cstack
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7064 ;;      Params:         0       0       0       0       0       0       0       0
  7065 ;;      Locals:         0       0       0       0       0       0       0       0
  7066 ;;      Temps:          0       0       0       0       0       0       0       0
  7067 ;;      Totals:         0       0       0       0       0       0       0       0
  7068 ;;Total ram usage:        0 bytes
  7069 ;; Hardware stack levels used:    1
  7070 ;; Hardware stack levels required when called:    8
  7071 ;; This function calls:
  7072 ;;		_TMR3_SetInterruptHandler
  7073 ;;		_TMR3_StartTimer
  7074 ;; This function is called by:
  7075 ;;		_SYSTEM_Initialize
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           
  7080                           ;psect for function _TMR3_Initialize
  7081  0FB0                     _TMR3_Initialize:	
  7082                           
  7083                           ;tmr3.c: 69: T3CON = 0x30;
  7084                           
  7085                           ;incstack = 0
  7086                           ; Regs used in _TMR3_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7087  0FB0  3030               	movlw	48
  7088  0FB1  0028               	movlb	8	; select bank8
  7089  0FB2  0093               	movwf	19	;volatile
  7090                           
  7091                           ;tmr3.c: 72: T3GCON = 0x00;
  7092  0FB3  0194               	clrf	20	;volatile
  7093                           
  7094                           ;tmr3.c: 75: TMR3H = 0x00;
  7095  0FB4  0192               	clrf	18	;volatile
  7096                           
  7097                           ;tmr3.c: 78: TMR3L = 0x00;
  7098  0FB5  0191               	clrf	17	;volatile
  7099                           
  7100                           ;tmr3.c: 81: timer3ReloadVal=(TMR3H << 8) | TMR3L;
  7101  0FB6  0812               	movf	18,w	;volatile
  7102  0FB7  0020               	movlb	0	; select bank0
  7103  0FB8  00DC               	movwf	_timer3ReloadVal+1	;volatile
  7104  0FB9  0028               	movlb	8	; select bank8
  7105  0FBA  0811               	movf	17,w	;volatile
  7106  0FBB  0020               	movlb	0	; select bank0
  7107  0FBC  00DB               	movwf	_timer3ReloadVal	;volatile
  7108                           
  7109                           ;tmr3.c: 84: PIR3bits.TMR3IF = 0;
  7110  0FBD  1213               	bcf	19,4	;volatile
  7111                           
  7112                           ;tmr3.c: 87: PIE3bits.TMR3IE = 1;
  7113  0FBE  0021               	movlb	1	; select bank1
  7114  0FBF  1613               	bsf	19,4	;volatile
  7115                           
  7116                           ;tmr3.c: 90: TMR3_SetInterruptHandler(TMR3_DefaultInterruptHandler);
  7117  0FC0  300A               	movlw	low _TMR3_DefaultInterruptHandler
  7118  0FC1  00DF               	movwf	TMR3_SetInterruptHandler@InterruptHandler^(0+128)
  7119  0FC2  300D               	movlw	high _TMR3_DefaultInterruptHandler
  7120  0FC3  00E0               	movwf	(TMR3_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7121  0FC4  318D  2559  318F   	fcall	_TMR3_SetInterruptHandler
  7122                           
  7123                           ;tmr3.c: 93: TMR3_StartTimer();
  7124  0FC7  318D  2513         	fcall	_TMR3_StartTimer
  7125  0FC9  0008               	return
  7126  0FCA                     __end_of_TMR3_Initialize:	
  7127                           
  7128                           	psect	text11
  7129  0D59                     __ptext11:	
  7130 ;; *************** function _TMR3_SetInterruptHandler *****************
  7131 ;; Defined at:
  7132 ;;		line 172 in file "mcc_generated_files/tmr3.c"
  7133 ;; Parameters:    Size  Location     Type
  7134 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  7135 ;;		 -> TMR3_DefaultInterruptHandler(1), 
  7136 ;; Auto vars:     Size  Location     Type
  7137 ;;		None
  7138 ;; Return value:  Size  Location     Type
  7139 ;;                  1    wreg      void 
  7140 ;; Registers used:
  7141 ;;		wreg
  7142 ;; Tracked objects:
  7143 ;;		On entry : 0/0
  7144 ;;		On exit  : 0/0
  7145 ;;		Unchanged: 0/0
  7146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7147 ;;      Params:         0       0       2       0       0       0       0       0
  7148 ;;      Locals:         0       0       0       0       0       0       0       0
  7149 ;;      Temps:          0       0       0       0       0       0       0       0
  7150 ;;      Totals:         0       0       2       0       0       0       0       0
  7151 ;;Total ram usage:        2 bytes
  7152 ;; Hardware stack levels used:    1
  7153 ;; Hardware stack levels required when called:    7
  7154 ;; This function calls:
  7155 ;;		Nothing
  7156 ;; This function is called by:
  7157 ;;		_TMR3_Initialize
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161                           
  7162                           ;psect for function _TMR3_SetInterruptHandler
  7163  0D59                     _TMR3_SetInterruptHandler:	
  7164                           
  7165                           ;tmr3.c: 173: TMR3_InterruptHandler = InterruptHandler;
  7166                           
  7167                           ;incstack = 0
  7168                           ; Regs used in _TMR3_SetInterruptHandler: [wreg]
  7169  0D59  0021               	movlb	1	; select bank1
  7170  0D5A  0860               	movf	(TMR3_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7171  0D5B  00DC               	movwf	(_TMR3_InterruptHandler+1)^(0+128)
  7172  0D5C  085F               	movf	TMR3_SetInterruptHandler@InterruptHandler^(0+128),w
  7173  0D5D  00DB               	movwf	_TMR3_InterruptHandler^(0+128)
  7174  0D5E  0008               	return
  7175  0D5F                     __end_of_TMR3_SetInterruptHandler:	
  7176                           
  7177                           	psect	text12
  7178  0EE8                     __ptext12:	
  7179 ;; *************** function _TMR0_Initialize *****************
  7180 ;; Defined at:
  7181 ;;		line 60 in file "mcc_generated_files/tmr0.c"
  7182 ;; Parameters:    Size  Location     Type
  7183 ;;		None
  7184 ;; Auto vars:     Size  Location     Type
  7185 ;;		None
  7186 ;; Return value:  Size  Location     Type
  7187 ;;                  1    wreg      void 
  7188 ;; Registers used:
  7189 ;;		wreg, status,2, status,0, pclath, cstack
  7190 ;; Tracked objects:
  7191 ;;		On entry : 0/0
  7192 ;;		On exit  : 0/0
  7193 ;;		Unchanged: 0/0
  7194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7195 ;;      Params:         0       0       0       0       0       0       0       0
  7196 ;;      Locals:         0       0       0       0       0       0       0       0
  7197 ;;      Temps:          0       0       0       0       0       0       0       0
  7198 ;;      Totals:         0       0       0       0       0       0       0       0
  7199 ;;Total ram usage:        0 bytes
  7200 ;; Hardware stack levels used:    1
  7201 ;; Hardware stack levels required when called:    8
  7202 ;; This function calls:
  7203 ;;		_TMR0_SetInterruptHandler
  7204 ;;		_TMR0_StartTimer
  7205 ;; This function is called by:
  7206 ;;		_SYSTEM_Initialize
  7207 ;; This function uses a non-reentrant model
  7208 ;;
  7209                           
  7210                           
  7211                           ;psect for function _TMR0_Initialize
  7212  0EE8                     _TMR0_Initialize:	
  7213                           
  7214                           ;tmr0.c: 65: T0CON0 = 0x00;
  7215                           
  7216                           ;incstack = 0
  7217                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7218  0EE8  0020               	movlb	0	; select bank0
  7219  0EE9  0197               	clrf	23	;volatile
  7220                           
  7221                           ;tmr0.c: 68: T0CON1 = 0x49;
  7222  0EEA  3049               	movlw	73
  7223  0EEB  0098               	movwf	24	;volatile
  7224                           
  7225                           ;tmr0.c: 71: TMR0H = 0x9B;
  7226  0EEC  309B               	movlw	155
  7227  0EED  0096               	movwf	22	;volatile
  7228                           
  7229                           ;tmr0.c: 74: TMR0L = 0x00;
  7230  0EEE  0195               	clrf	21	;volatile
  7231                           
  7232                           ;tmr0.c: 77: PIR0bits.TMR0IF = 0;
  7233  0EEF  1290               	bcf	16,5	;volatile
  7234                           
  7235                           ;tmr0.c: 80: PIE0bits.TMR0IE = 1;
  7236  0EF0  0021               	movlb	1	; select bank1
  7237  0EF1  1690               	bsf	16,5	;volatile
  7238                           
  7239                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7240  0EF2  3002               	movlw	low _TMR0_DefaultInterruptHandler
  7241  0EF3  00DF               	movwf	TMR0_SetInterruptHandler@InterruptHandler^(0+128)
  7242  0EF4  3000               	movlw	high _TMR0_DefaultInterruptHandler
  7243  0EF5  00E0               	movwf	(TMR0_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7244  0EF6  318D  2553  318E   	fcall	_TMR0_SetInterruptHandler
  7245                           
  7246                           ;tmr0.c: 86: TMR0_StartTimer();
  7247  0EF9  318D  2516         	fcall	_TMR0_StartTimer
  7248  0EFB  0008               	return
  7249  0EFC                     __end_of_TMR0_Initialize:	
  7250                           
  7251                           	psect	text13
  7252  0D16                     __ptext13:	
  7253 ;; *************** function _TMR0_StartTimer *****************
  7254 ;; Defined at:
  7255 ;;		line 89 in file "mcc_generated_files/tmr0.c"
  7256 ;; Parameters:    Size  Location     Type
  7257 ;;		None
  7258 ;; Auto vars:     Size  Location     Type
  7259 ;;		None
  7260 ;; Return value:  Size  Location     Type
  7261 ;;                  1    wreg      void 
  7262 ;; Registers used:
  7263 ;;		None
  7264 ;; Tracked objects:
  7265 ;;		On entry : 0/0
  7266 ;;		On exit  : 0/0
  7267 ;;		Unchanged: 0/0
  7268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7269 ;;      Params:         0       0       0       0       0       0       0       0
  7270 ;;      Locals:         0       0       0       0       0       0       0       0
  7271 ;;      Temps:          0       0       0       0       0       0       0       0
  7272 ;;      Totals:         0       0       0       0       0       0       0       0
  7273 ;;Total ram usage:        0 bytes
  7274 ;; Hardware stack levels used:    1
  7275 ;; Hardware stack levels required when called:    7
  7276 ;; This function calls:
  7277 ;;		Nothing
  7278 ;; This function is called by:
  7279 ;;		_TMR0_Initialize
  7280 ;; This function uses a non-reentrant model
  7281 ;;
  7282                           
  7283                           
  7284                           ;psect for function _TMR0_StartTimer
  7285  0D16                     _TMR0_StartTimer:	
  7286                           
  7287                           ;tmr0.c: 92: T0CON0bits.T0EN = 1;
  7288                           
  7289                           ;incstack = 0
  7290                           ; Regs used in _TMR0_StartTimer: []
  7291  0D16  0020               	movlb	0	; select bank0
  7292  0D17  1797               	bsf	23,7	;volatile
  7293  0D18  0008               	return
  7294  0D19                     __end_of_TMR0_StartTimer:	
  7295                           
  7296                           	psect	text14
  7297  0D53                     __ptext14:	
  7298 ;; *************** function _TMR0_SetInterruptHandler *****************
  7299 ;; Defined at:
  7300 ;;		line 145 in file "mcc_generated_files/tmr0.c"
  7301 ;; Parameters:    Size  Location     Type
  7302 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  7303 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7304 ;; Auto vars:     Size  Location     Type
  7305 ;;		None
  7306 ;; Return value:  Size  Location     Type
  7307 ;;                  1    wreg      void 
  7308 ;; Registers used:
  7309 ;;		wreg
  7310 ;; Tracked objects:
  7311 ;;		On entry : 0/0
  7312 ;;		On exit  : 0/0
  7313 ;;		Unchanged: 0/0
  7314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7315 ;;      Params:         0       0       2       0       0       0       0       0
  7316 ;;      Locals:         0       0       0       0       0       0       0       0
  7317 ;;      Temps:          0       0       0       0       0       0       0       0
  7318 ;;      Totals:         0       0       2       0       0       0       0       0
  7319 ;;Total ram usage:        2 bytes
  7320 ;; Hardware stack levels used:    1
  7321 ;; Hardware stack levels required when called:    7
  7322 ;; This function calls:
  7323 ;;		Nothing
  7324 ;; This function is called by:
  7325 ;;		_TMR0_Initialize
  7326 ;; This function uses a non-reentrant model
  7327 ;;
  7328                           
  7329                           
  7330                           ;psect for function _TMR0_SetInterruptHandler
  7331  0D53                     _TMR0_SetInterruptHandler:	
  7332                           
  7333                           ;tmr0.c: 146: TMR0_InterruptHandler = InterruptHandler;
  7334                           
  7335                           ;incstack = 0
  7336                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  7337  0D53  0021               	movlb	1	; select bank1
  7338  0D54  0860               	movf	(TMR0_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7339  0D55  00DA               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  7340  0D56  085F               	movf	TMR0_SetInterruptHandler@InterruptHandler^(0+128),w
  7341  0D57  00D9               	movwf	_TMR0_InterruptHandler^(0+128)
  7342  0D58  0008               	return
  7343  0D59                     __end_of_TMR0_SetInterruptHandler:	
  7344                           
  7345                           	psect	text15
  7346  059E                     __ptext15:	
  7347 ;; *************** function _PIN_MANAGER_Initialize *****************
  7348 ;; Defined at:
  7349 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;		None
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  state           1    2[BANK1 ] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      void 
  7356 ;; Registers used:
  7357 ;;		wreg, status,2, status,0, pclath, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7363 ;;      Params:         0       0       0       0       0       0       0       0
  7364 ;;      Locals:         0       0       1       0       0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0
  7366 ;;      Totals:         0       0       1       0       0       0       0       0
  7367 ;;Total ram usage:        1 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    8
  7370 ;; This function calls:
  7371 ;;		_IOCCF4_SetInterruptHandler
  7372 ;;		_IOCCF5_SetInterruptHandler
  7373 ;; This function is called by:
  7374 ;;		_SYSTEM_Initialize
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           
  7379                           ;psect for function _PIN_MANAGER_Initialize
  7380  059E                     _PIN_MANAGER_Initialize:	
  7381                           
  7382                           ;pin_manager.c: 59: LATA = 0x00;
  7383                           
  7384                           ;incstack = 0
  7385                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7386  059E  0022               	movlb	2	; select bank2
  7387  059F  018C               	clrf	12	;volatile
  7388                           
  7389                           ;pin_manager.c: 60: LATB = 0x00;
  7390  05A0  018D               	clrf	13	;volatile
  7391                           
  7392                           ;pin_manager.c: 61: LATC = 0x00;
  7393  05A1  018E               	clrf	14	;volatile
  7394                           
  7395                           ;pin_manager.c: 66: TRISA = 0x37;
  7396  05A2  3037               	movlw	55
  7397  05A3  0021               	movlb	1	; select bank1
  7398  05A4  008C               	movwf	12	;volatile
  7399                           
  7400                           ;pin_manager.c: 67: TRISB = 0x90;
  7401  05A5  3090               	movlw	144
  7402  05A6  008D               	movwf	13	;volatile
  7403                           
  7404                           ;pin_manager.c: 68: TRISC = 0x30;
  7405  05A7  3030               	movlw	48
  7406  05A8  008E               	movwf	14	;volatile
  7407                           
  7408                           ;pin_manager.c: 73: ANSELC = 0x80;
  7409  05A9  3080               	movlw	128
  7410  05AA  0023               	movlb	3	; select bank3
  7411  05AB  008E               	movwf	14	;volatile
  7412                           
  7413                           ;pin_manager.c: 74: ANSELB = 0x00;
  7414  05AC  018D               	clrf	13	;volatile
  7415                           
  7416                           ;pin_manager.c: 75: ANSELA = 0x17;
  7417  05AD  3017               	movlw	23
  7418  05AE  008C               	movwf	12	;volatile
  7419                           
  7420                           ;pin_manager.c: 80: WPUB = 0x80;
  7421  05AF  3080               	movlw	128
  7422  05B0  0024               	movlb	4	; select bank4
  7423  05B1  008D               	movwf	13	;volatile
  7424                           
  7425                           ;pin_manager.c: 81: WPUA = 0x00;
  7426  05B2  018C               	clrf	12	;volatile
  7427                           
  7428                           ;pin_manager.c: 82: WPUC = 0x00;
  7429  05B3  018E               	clrf	14	;volatile
  7430                           
  7431                           ;pin_manager.c: 87: ODCONA = 0x00;
  7432  05B4  0025               	movlb	5	; select bank5
  7433  05B5  018C               	clrf	12	;volatile
  7434                           
  7435                           ;pin_manager.c: 88: ODCONB = 0x00;
  7436  05B6  018D               	clrf	13	;volatile
  7437                           
  7438                           ;pin_manager.c: 89: ODCONC = 0x00;
  7439  05B7  018E               	clrf	14	;volatile
  7440                           
  7441                           ;pin_manager.c: 96: IOCCFbits.IOCCF4 = 0;
  7442  05B8  0027               	movlb	7	; select bank7
  7443  05B9  1219               	bcf	25,4	;volatile
  7444                           
  7445                           ;pin_manager.c: 97: IOCCFbits.IOCCF5 = 0;
  7446  05BA  1299               	bcf	25,5	;volatile
  7447                           
  7448                           ;pin_manager.c: 99: IOCCNbits.IOCCN4 = 1;
  7449  05BB  1618               	bsf	24,4	;volatile
  7450                           
  7451                           ;pin_manager.c: 100: IOCCNbits.IOCCN5 = 1;
  7452  05BC  1698               	bsf	24,5	;volatile
  7453                           
  7454                           ;pin_manager.c: 102: IOCCPbits.IOCCP4 = 1;
  7455  05BD  1617               	bsf	23,4	;volatile
  7456                           
  7457                           ;pin_manager.c: 103: IOCCPbits.IOCCP5 = 1;
  7458  05BE  1697               	bsf	23,5	;volatile
  7459                           
  7460                           ;pin_manager.c: 106: IOCCF4_SetInterruptHandler(IOCCF4_DefaultInterruptHandler);
  7461  05BF  30FF               	movlw	low _IOCCF4_DefaultInterruptHandler
  7462  05C0  0021               	movlb	1	; select bank1
  7463  05C1  00DF               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler^(0+128)
  7464  05C2  300C               	movlw	high _IOCCF4_DefaultInterruptHandler
  7465  05C3  00E0               	movwf	(IOCCF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7466  05C4  318D  2547  3185   	fcall	_IOCCF4_SetInterruptHandler
  7467                           
  7468                           ;pin_manager.c: 107: IOCCF5_SetInterruptHandler(IOCCF5_DefaultInterruptHandler);
  7469  05C7  3000               	movlw	low _IOCCF5_DefaultInterruptHandler
  7470  05C8  0021               	movlb	1	; select bank1
  7471  05C9  00DF               	movwf	IOCCF5_SetInterruptHandler@InterruptHandler^(0+128)
  7472  05CA  300D               	movlw	high _IOCCF5_DefaultInterruptHandler
  7473  05CB  00E0               	movwf	(IOCCF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7474  05CC  318D  254D  3185   	fcall	_IOCCF5_SetInterruptHandler
  7475                           
  7476                           ;pin_manager.c: 110: PIE0bits.IOCIE = 1;
  7477  05CF  0021               	movlb	1	; select bank1
  7478  05D0  1610               	bsf	16,4	;volatile
  7479                           
  7480                           ;pin_manager.c: 113: bool state = GIE;
  7481  05D1  3000               	movlw	0
  7482  05D2  1B8B               	btfsc	11,7	;volatile
  7483  05D3  3001               	movlw	1
  7484  05D4  00E1               	movwf	PIN_MANAGER_Initialize@state^(0+128)
  7485                           
  7486                           ;pin_manager.c: 114: GIE = 0;
  7487  05D5  138B               	bcf	11,7	;volatile
  7488                           
  7489                           ;pin_manager.c: 115: PPSLOCK = 0x55;
  7490  05D6  3055               	movlw	85
  7491  05D7  003C               	movlb	28	; select bank28
  7492  05D8  008F               	movwf	15	;volatile
  7493                           
  7494                           ;pin_manager.c: 116: PPSLOCK = 0xAA;
  7495  05D9  30AA               	movlw	170
  7496  05DA  008F               	movwf	15	;volatile
  7497                           
  7498                           ;pin_manager.c: 117: PPSLOCKbits.PPSLOCKED = 0x00;
  7499  05DB  100F               	bcf	15,0	;volatile
  7500                           
  7501                           ;pin_manager.c: 119: CCP2PPSbits.CCP2PPS = 0x14;
  7502  05DC  0815               	movf	21,w	;volatile
  7503  05DD  39E0               	andlw	-32
  7504  05DE  3814               	iorlw	20
  7505  05DF  0095               	movwf	21	;volatile
  7506                           
  7507                           ;pin_manager.c: 120: RXPPSbits.RXPPS = 0x0C;
  7508  05E0  0824               	movf	36,w	;volatile
  7509  05E1  39E0               	andlw	-32
  7510  05E2  380C               	iorlw	12
  7511  05E3  00A4               	movwf	36	;volatile
  7512                           
  7513                           ;pin_manager.c: 121: INTPPSbits.INTPPS = 0x05;
  7514  05E4  0810               	movf	16,w	;volatile
  7515  05E5  39E0               	andlw	-32
  7516  05E6  3805               	iorlw	5
  7517  05E7  0090               	movwf	16	;volatile
  7518                           
  7519                           ;pin_manager.c: 122: CCP1PPSbits.CCP1PPS = 0x15;
  7520  05E8  0814               	movf	20,w	;volatile
  7521  05E9  39E0               	andlw	-32
  7522  05EA  3815               	iorlw	21
  7523  05EB  0094               	movwf	20	;volatile
  7524                           
  7525                           ;pin_manager.c: 123: RB5PPSbits.RB5PPS = 0x14;
  7526  05EC  003D               	movlb	29	; select bank29
  7527  05ED  081D               	movf	29,w	;volatile
  7528  05EE  39E0               	andlw	-32
  7529  05EF  3814               	iorlw	20
  7530  05F0  009D               	movwf	29	;volatile
  7531                           
  7532                           ;pin_manager.c: 125: PPSLOCK = 0x55;
  7533  05F1  3055               	movlw	85
  7534  05F2  003C               	movlb	28	; select bank28
  7535  05F3  008F               	movwf	15	;volatile
  7536                           
  7537                           ;pin_manager.c: 126: PPSLOCK = 0xAA;
  7538  05F4  30AA               	movlw	170
  7539  05F5  008F               	movwf	15	;volatile
  7540                           
  7541                           ;pin_manager.c: 127: PPSLOCKbits.PPSLOCKED = 0x01;
  7542  05F6  140F               	bsf	15,0	;volatile
  7543                           
  7544                           ;pin_manager.c: 129: GIE = state;
  7545  05F7  0021               	movlb	1	; select bank1
  7546  05F8  1C61               	btfss	PIN_MANAGER_Initialize@state^(0+128),0
  7547  05F9  2DFC               	goto	u3250
  7548  05FA  178B               	bsf	11,7	;volatile
  7549  05FB  0008               	return
  7550  05FC                     u3250:	
  7551  05FC  138B               	bcf	11,7	;volatile
  7552  05FD  0008               	return
  7553  05FE                     __end_of_PIN_MANAGER_Initialize:	
  7554                           
  7555                           	psect	text16
  7556  0D4D                     __ptext16:	
  7557 ;; *************** function _IOCCF5_SetInterruptHandler *****************
  7558 ;; Defined at:
  7559 ;;		line 197 in file "mcc_generated_files/pin_manager.c"
  7560 ;; Parameters:    Size  Location     Type
  7561 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  7562 ;;		 -> IOCCF5_DefaultInterruptHandler(1), 
  7563 ;; Auto vars:     Size  Location     Type
  7564 ;;		None
  7565 ;; Return value:  Size  Location     Type
  7566 ;;                  1    wreg      void 
  7567 ;; Registers used:
  7568 ;;		wreg
  7569 ;; Tracked objects:
  7570 ;;		On entry : 0/0
  7571 ;;		On exit  : 0/0
  7572 ;;		Unchanged: 0/0
  7573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7574 ;;      Params:         0       0       2       0       0       0       0       0
  7575 ;;      Locals:         0       0       0       0       0       0       0       0
  7576 ;;      Temps:          0       0       0       0       0       0       0       0
  7577 ;;      Totals:         0       0       2       0       0       0       0       0
  7578 ;;Total ram usage:        2 bytes
  7579 ;; Hardware stack levels used:    1
  7580 ;; Hardware stack levels required when called:    7
  7581 ;; This function calls:
  7582 ;;		Nothing
  7583 ;; This function is called by:
  7584 ;;		_PIN_MANAGER_Initialize
  7585 ;; This function uses a non-reentrant model
  7586 ;;
  7587                           
  7588                           
  7589                           ;psect for function _IOCCF5_SetInterruptHandler
  7590  0D4D                     _IOCCF5_SetInterruptHandler:	
  7591                           
  7592                           ;pin_manager.c: 198: IOCCF5_InterruptHandler = InterruptHandler;
  7593                           
  7594                           ;incstack = 0
  7595                           ; Regs used in _IOCCF5_SetInterruptHandler: [wreg]
  7596  0D4D  0021               	movlb	1	; select bank1
  7597  0D4E  0860               	movf	(IOCCF5_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7598  0D4F  00D6               	movwf	(_IOCCF5_InterruptHandler+1)^(0+128)
  7599  0D50  085F               	movf	IOCCF5_SetInterruptHandler@InterruptHandler^(0+128),w
  7600  0D51  00D5               	movwf	_IOCCF5_InterruptHandler^(0+128)
  7601  0D52  0008               	return
  7602  0D53                     __end_of_IOCCF5_SetInterruptHandler:	
  7603                           
  7604                           	psect	text17
  7605  0D47                     __ptext17:	
  7606 ;; *************** function _IOCCF4_SetInterruptHandler *****************
  7607 ;; Defined at:
  7608 ;;		line 167 in file "mcc_generated_files/pin_manager.c"
  7609 ;; Parameters:    Size  Location     Type
  7610 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  7611 ;;		 -> IOCCF4_DefaultInterruptHandler(1), 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;		None
  7614 ;; Return value:  Size  Location     Type
  7615 ;;                  1    wreg      void 
  7616 ;; Registers used:
  7617 ;;		wreg
  7618 ;; Tracked objects:
  7619 ;;		On entry : 0/0
  7620 ;;		On exit  : 0/0
  7621 ;;		Unchanged: 0/0
  7622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7623 ;;      Params:         0       0       2       0       0       0       0       0
  7624 ;;      Locals:         0       0       0       0       0       0       0       0
  7625 ;;      Temps:          0       0       0       0       0       0       0       0
  7626 ;;      Totals:         0       0       2       0       0       0       0       0
  7627 ;;Total ram usage:        2 bytes
  7628 ;; Hardware stack levels used:    1
  7629 ;; Hardware stack levels required when called:    7
  7630 ;; This function calls:
  7631 ;;		Nothing
  7632 ;; This function is called by:
  7633 ;;		_PIN_MANAGER_Initialize
  7634 ;; This function uses a non-reentrant model
  7635 ;;
  7636                           
  7637                           
  7638                           ;psect for function _IOCCF4_SetInterruptHandler
  7639  0D47                     _IOCCF4_SetInterruptHandler:	
  7640                           
  7641                           ;pin_manager.c: 168: IOCCF4_InterruptHandler = InterruptHandler;
  7642                           
  7643                           ;incstack = 0
  7644                           ; Regs used in _IOCCF4_SetInterruptHandler: [wreg]
  7645  0D47  0021               	movlb	1	; select bank1
  7646  0D48  0860               	movf	(IOCCF4_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7647  0D49  00D8               	movwf	(_IOCCF4_InterruptHandler+1)^(0+128)
  7648  0D4A  085F               	movf	IOCCF4_SetInterruptHandler@InterruptHandler^(0+128),w
  7649  0D4B  00D7               	movwf	_IOCCF4_InterruptHandler^(0+128)
  7650  0D4C  0008               	return
  7651  0D4D                     __end_of_IOCCF4_SetInterruptHandler:	
  7652                           
  7653                           	psect	text18
  7654  0D75                     __ptext18:	
  7655 ;; *************** function _OSCILLATOR_Initialize *****************
  7656 ;; Defined at:
  7657 ;;		line 92 in file "mcc_generated_files/mcc.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;		None
  7660 ;; Auto vars:     Size  Location     Type
  7661 ;;		None
  7662 ;; Return value:  Size  Location     Type
  7663 ;;                  1    wreg      void 
  7664 ;; Registers used:
  7665 ;;		wreg, status,2
  7666 ;; Tracked objects:
  7667 ;;		On entry : 0/0
  7668 ;;		On exit  : 0/0
  7669 ;;		Unchanged: 0/0
  7670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7671 ;;      Params:         0       0       0       0       0       0       0       0
  7672 ;;      Locals:         0       0       0       0       0       0       0       0
  7673 ;;      Temps:          0       0       0       0       0       0       0       0
  7674 ;;      Totals:         0       0       0       0       0       0       0       0
  7675 ;;Total ram usage:        0 bytes
  7676 ;; Hardware stack levels used:    1
  7677 ;; Hardware stack levels required when called:    7
  7678 ;; This function calls:
  7679 ;;		Nothing
  7680 ;; This function is called by:
  7681 ;;		_SYSTEM_Initialize
  7682 ;; This function uses a non-reentrant model
  7683 ;;
  7684                           
  7685                           
  7686                           ;psect for function _OSCILLATOR_Initialize
  7687  0D75                     _OSCILLATOR_Initialize:	
  7688                           
  7689                           ;mcc.c: 95: OSCCON1 = 0x00;
  7690                           
  7691                           ;incstack = 0
  7692                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7693  0D75  0032               	movlb	18	; select bank18
  7694  0D76  0199               	clrf	25	;volatile
  7695                           
  7696                           ;mcc.c: 97: OSCCON3 = 0x00;
  7697  0D77  019B               	clrf	27	;volatile
  7698                           
  7699                           ;mcc.c: 99: OSCEN = 0x00;
  7700  0D78  019D               	clrf	29	;volatile
  7701                           
  7702                           ;mcc.c: 101: OSCFRQ = 0x07;
  7703  0D79  3007               	movlw	7
  7704  0D7A  009F               	movwf	31	;volatile
  7705                           
  7706                           ;mcc.c: 103: OSCTUNE = 0x00;
  7707  0D7B  019E               	clrf	30	;volatile
  7708  0D7C  0008               	return
  7709  0D7D                     __end_of_OSCILLATOR_Initialize:	
  7710                           
  7711                           	psect	text19
  7712  0E0B                     __ptext19:	
  7713 ;; *************** function _EXT_INT_Initialize *****************
  7714 ;; Defined at:
  7715 ;;		line 93 in file "mcc_generated_files/ext_int.c"
  7716 ;; Parameters:    Size  Location     Type
  7717 ;;		None
  7718 ;; Auto vars:     Size  Location     Type
  7719 ;;		None
  7720 ;; Return value:  Size  Location     Type
  7721 ;;                  1    wreg      void 
  7722 ;; Registers used:
  7723 ;;		wreg, status,2, status,0, pclath, cstack
  7724 ;; Tracked objects:
  7725 ;;		On entry : 0/0
  7726 ;;		On exit  : 0/0
  7727 ;;		Unchanged: 0/0
  7728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7729 ;;      Params:         0       0       0       0       0       0       0       0
  7730 ;;      Locals:         0       0       0       0       0       0       0       0
  7731 ;;      Temps:          0       0       0       0       0       0       0       0
  7732 ;;      Totals:         0       0       0       0       0       0       0       0
  7733 ;;Total ram usage:        0 bytes
  7734 ;; Hardware stack levels used:    1
  7735 ;; Hardware stack levels required when called:    8
  7736 ;; This function calls:
  7737 ;;		_INT_SetInterruptHandler
  7738 ;; This function is called by:
  7739 ;;		_SYSTEM_Initialize
  7740 ;; This function uses a non-reentrant model
  7741 ;;
  7742                           
  7743                           
  7744                           ;psect for function _EXT_INT_Initialize
  7745  0E0B                     _EXT_INT_Initialize:	
  7746                           
  7747                           ;ext_int.c: 102: (PIR0bits.INTF = 0);
  7748                           
  7749                           ;incstack = 0
  7750                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7751  0E0B  0020               	movlb	0	; select bank0
  7752  0E0C  1010               	bcf	16,0	;volatile
  7753                           
  7754                           ;ext_int.c: 103: (INTCONbits.INTEDG = 1);
  7755  0E0D  140B               	bsf	11,0	;volatile
  7756                           
  7757                           ;ext_int.c: 105: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  7758  0E0E  30FE               	movlw	low _INT_DefaultInterruptHandler
  7759  0E0F  0021               	movlb	1	; select bank1
  7760  0E10  00DF               	movwf	INT_SetInterruptHandler@InterruptHandler^(0+128)
  7761  0E11  300C               	movlw	high _INT_DefaultInterruptHandler
  7762  0E12  00E0               	movwf	(INT_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7763  0E13  318D  2541         	fcall	_INT_SetInterruptHandler
  7764                           
  7765                           ;ext_int.c: 106: (PIE0bits.INTE = 1);
  7766  0E15  0021               	movlb	1	; select bank1
  7767  0E16  1410               	bsf	16,0	;volatile
  7768  0E17  0008               	return
  7769  0E18                     __end_of_EXT_INT_Initialize:	
  7770                           
  7771                           	psect	text20
  7772  0D41                     __ptext20:	
  7773 ;; *************** function _INT_SetInterruptHandler *****************
  7774 ;; Defined at:
  7775 ;;		line 73 in file "mcc_generated_files/ext_int.c"
  7776 ;; Parameters:    Size  Location     Type
  7777 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  7778 ;;		 -> INT_DefaultInterruptHandler(1), 
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;		None
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  1    wreg      void 
  7783 ;; Registers used:
  7784 ;;		wreg
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7790 ;;      Params:         0       0       2       0       0       0       0       0
  7791 ;;      Locals:         0       0       0       0       0       0       0       0
  7792 ;;      Temps:          0       0       0       0       0       0       0       0
  7793 ;;      Totals:         0       0       2       0       0       0       0       0
  7794 ;;Total ram usage:        2 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:    7
  7797 ;; This function calls:
  7798 ;;		Nothing
  7799 ;; This function is called by:
  7800 ;;		_EXT_INT_Initialize
  7801 ;; This function uses a non-reentrant model
  7802 ;;
  7803                           
  7804                           
  7805                           ;psect for function _INT_SetInterruptHandler
  7806  0D41                     _INT_SetInterruptHandler:	
  7807                           
  7808                           ;ext_int.c: 74: INT_InterruptHandler = InterruptHandler;
  7809                           
  7810                           ;incstack = 0
  7811                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  7812  0D41  0021               	movlb	1	; select bank1
  7813  0D42  0860               	movf	(INT_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7814  0D43  00D4               	movwf	(_INT_InterruptHandler+1)^(0+128)
  7815  0D44  085F               	movf	INT_SetInterruptHandler@InterruptHandler^(0+128),w
  7816  0D45  00D3               	movwf	_INT_InterruptHandler^(0+128)
  7817  0D46  0008               	return
  7818  0D47                     __end_of_INT_SetInterruptHandler:	
  7819                           
  7820                           	psect	text21
  7821  0D8E                     __ptext21:	
  7822 ;; *************** function _CCP2_Initialize *****************
  7823 ;; Defined at:
  7824 ;;		line 57 in file "mcc_generated_files/ccp2.c"
  7825 ;; Parameters:    Size  Location     Type
  7826 ;;		None
  7827 ;; Auto vars:     Size  Location     Type
  7828 ;;		None
  7829 ;; Return value:  Size  Location     Type
  7830 ;;                  1    wreg      void 
  7831 ;; Registers used:
  7832 ;;		wreg, status,2, status,0
  7833 ;; Tracked objects:
  7834 ;;		On entry : 0/0
  7835 ;;		On exit  : 0/0
  7836 ;;		Unchanged: 0/0
  7837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7838 ;;      Params:         0       0       0       0       0       0       0       0
  7839 ;;      Locals:         0       0       0       0       0       0       0       0
  7840 ;;      Temps:          0       0       0       0       0       0       0       0
  7841 ;;      Totals:         0       0       0       0       0       0       0       0
  7842 ;;Total ram usage:        0 bytes
  7843 ;; Hardware stack levels used:    1
  7844 ;; Hardware stack levels required when called:    7
  7845 ;; This function calls:
  7846 ;;		Nothing
  7847 ;; This function is called by:
  7848 ;;		_SYSTEM_Initialize
  7849 ;; This function uses a non-reentrant model
  7850 ;;
  7851                           
  7852                           
  7853                           ;psect for function _CCP2_Initialize
  7854  0D8E                     _CCP2_Initialize:	
  7855                           
  7856                           ;ccp2.c: 62: CCP2CON = 0x03;
  7857                           
  7858                           ;incstack = 0
  7859                           ; Regs used in _CCP2_Initialize: [wreg+status,2+status,0]
  7860  0D8E  3003               	movlw	3
  7861  0D8F  0025               	movlb	5	; select bank5
  7862  0D90  0097               	movwf	23	;volatile
  7863                           
  7864                           ;ccp2.c: 65: CCP2CAP = 0x00;
  7865  0D91  0198               	clrf	24	;volatile
  7866                           
  7867                           ;ccp2.c: 68: CCPR2H = 0x00;
  7868  0D92  0196               	clrf	22	;volatile
  7869                           
  7870                           ;ccp2.c: 71: CCPR2L = 0x00;
  7871  0D93  0195               	clrf	21	;volatile
  7872                           
  7873                           ;ccp2.c: 74: CCPTMRSbits.C2TSEL = 0x3;
  7874  0D94  300C               	movlw	12
  7875  0D95  049F               	iorwf	31,f	;volatile
  7876  0D96  0008               	return
  7877  0D97                     __end_of_CCP2_Initialize:	
  7878                           
  7879                           	psect	text22
  7880  0E7D                     __ptext22:	
  7881 ;; *************** function _CCP1_Initialize *****************
  7882 ;; Defined at:
  7883 ;;		line 58 in file "mcc_generated_files/ccp1.c"
  7884 ;; Parameters:    Size  Location     Type
  7885 ;;		None
  7886 ;; Auto vars:     Size  Location     Type
  7887 ;;		None
  7888 ;; Return value:  Size  Location     Type
  7889 ;;                  1    wreg      void 
  7890 ;; Registers used:
  7891 ;;		wreg, status,2, status,0
  7892 ;; Tracked objects:
  7893 ;;		On entry : 0/0
  7894 ;;		On exit  : 0/0
  7895 ;;		Unchanged: 0/0
  7896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7897 ;;      Params:         0       0       0       0       0       0       0       0
  7898 ;;      Locals:         0       0       0       0       0       0       0       0
  7899 ;;      Temps:          0       0       0       0       0       0       0       0
  7900 ;;      Totals:         0       0       0       0       0       0       0       0
  7901 ;;Total ram usage:        0 bytes
  7902 ;; Hardware stack levels used:    1
  7903 ;; Hardware stack levels required when called:    7
  7904 ;; This function calls:
  7905 ;;		Nothing
  7906 ;; This function is called by:
  7907 ;;		_SYSTEM_Initialize
  7908 ;; This function uses a non-reentrant model
  7909 ;;
  7910                           
  7911                           
  7912                           ;psect for function _CCP1_Initialize
  7913  0E7D                     _CCP1_Initialize:	
  7914                           
  7915                           ;ccp1.c: 63: CCP1CON = 0x83;
  7916                           
  7917                           ;incstack = 0
  7918                           ; Regs used in _CCP1_Initialize: [wreg+status,2+status,0]
  7919  0E7D  3083               	movlw	131
  7920  0E7E  0025               	movlb	5	; select bank5
  7921  0E7F  0093               	movwf	19	;volatile
  7922                           
  7923                           ;ccp1.c: 66: CCP1CAP = 0x00;
  7924  0E80  0194               	clrf	20	;volatile
  7925                           
  7926                           ;ccp1.c: 69: CCPR1H = 0x00;
  7927  0E81  0192               	clrf	18	;volatile
  7928                           
  7929                           ;ccp1.c: 72: CCPR1L = 0x00;
  7930  0E82  0191               	clrf	17	;volatile
  7931                           
  7932                           ;ccp1.c: 75: CCPTMRSbits.C1TSEL = 0x2;
  7933  0E83  081F               	movf	31,w	;volatile
  7934  0E84  39FC               	andlw	-4
  7935  0E85  3802               	iorlw	2
  7936  0E86  009F               	movwf	31	;volatile
  7937                           
  7938                           ;ccp1.c: 78: PIR4bits.CCP1IF = 0;
  7939  0E87  0020               	movlb	0	; select bank0
  7940  0E88  1014               	bcf	20,0	;volatile
  7941                           
  7942                           ;ccp1.c: 81: PIE4bits.CCP1IE = 1;
  7943  0E89  0021               	movlb	1	; select bank1
  7944  0E8A  1414               	bsf	20,0	;volatile
  7945  0E8B  0008               	return
  7946  0E8C                     __end_of_CCP1_Initialize:	
  7947                           
  7948                           	psect	text23
  7949  0D85                     __ptext23:	
  7950 ;; *************** function _ADC_Initialize *****************
  7951 ;; Defined at:
  7952 ;;		line 64 in file "mcc_generated_files/adc.c"
  7953 ;; Parameters:    Size  Location     Type
  7954 ;;		None
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;		None
  7957 ;; Return value:  Size  Location     Type
  7958 ;;                  1    wreg      void 
  7959 ;; Registers used:
  7960 ;;		wreg, status,2
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7966 ;;      Params:         0       0       0       0       0       0       0       0
  7967 ;;      Locals:         0       0       0       0       0       0       0       0
  7968 ;;      Temps:          0       0       0       0       0       0       0       0
  7969 ;;      Totals:         0       0       0       0       0       0       0       0
  7970 ;;Total ram usage:        0 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:    7
  7973 ;; This function calls:
  7974 ;;		Nothing
  7975 ;; This function is called by:
  7976 ;;		_SYSTEM_Initialize
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           
  7981                           ;psect for function _ADC_Initialize
  7982  0D85                     _ADC_Initialize:	
  7983                           
  7984                           ;adc.c: 69: ADCON0 = 0x01;
  7985                           
  7986                           ;incstack = 0
  7987                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  7988  0D85  3001               	movlw	1
  7989  0D86  0021               	movlb	1	; select bank1
  7990  0D87  009D               	movwf	29	;volatile
  7991                           
  7992                           ;adc.c: 72: ADCON1 = 0xE0;
  7993  0D88  30E0               	movlw	224
  7994  0D89  009E               	movwf	30	;volatile
  7995                           
  7996                           ;adc.c: 75: ADACT = 0x00;
  7997  0D8A  019F               	clrf	31	;volatile
  7998                           
  7999                           ;adc.c: 78: ADRESL = 0x00;
  8000  0D8B  019B               	clrf	27	;volatile
  8001                           
  8002                           ;adc.c: 81: ADRESH = 0x00;
  8003  0D8C  019C               	clrf	28	;volatile
  8004  0D8D  0008               	return
  8005  0D8E                     __end_of_ADC_Initialize:	
  8006                           
  8007                           	psect	text24
  8008  0E6E                     __ptext24:	
  8009 ;; *************** function _NutRunCycleStart *****************
  8010 ;; Defined at:
  8011 ;;		line 521 in file "main.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;		None
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;		None
  8016 ;; Return value:  Size  Location     Type
  8017 ;;                  1    wreg      void 
  8018 ;; Registers used:
  8019 ;;		wreg, status,2, status,0, pclath, cstack
  8020 ;; Tracked objects:
  8021 ;;		On entry : 0/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8025 ;;      Params:         0       0       0       0       0       0       0       0
  8026 ;;      Locals:         0       0       0       0       0       0       0       0
  8027 ;;      Temps:          0       0       0       0       0       0       0       0
  8028 ;;      Totals:         0       0       0       0       0       0       0       0
  8029 ;;Total ram usage:        0 bytes
  8030 ;; Hardware stack levels used:    1
  8031 ;; Hardware stack levels required when called:    8
  8032 ;; This function calls:
  8033 ;;		_NutRunCycleReset
  8034 ;;		_TMR3_StartTimer
  8035 ;;		_TMR3_WriteTimer
  8036 ;; This function is called by:
  8037 ;;		_main
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           
  8042                           ;psect for function _NutRunCycleStart
  8043  0E6E                     _NutRunCycleStart:	
  8044                           
  8045                           ;main.c: 523: NutRunCycleReset();
  8046                           
  8047                           ;incstack = 0
  8048                           ; Regs used in _NutRunCycleStart: [wreg+status,2+status,0+pclath+cstack]
  8049  0E6E  318F  273D  318E   	fcall	_NutRunCycleReset
  8050                           
  8051                           ;main.c: 525: TMR3_WriteTimer(0);
  8052  0E71  3000               	movlw	0
  8053  0E72  0021               	movlb	1	; select bank1
  8054  0E73  00DF               	movwf	TMR3_WriteTimer@timerVal^(0+128)
  8055  0E74  00E0               	movwf	(TMR3_WriteTimer@timerVal+1)^(0+128)
  8056  0E75  318F  2769  318E   	fcall	_TMR3_WriteTimer
  8057                           
  8058                           ;main.c: 526: TMR3_StartTimer();
  8059  0E78  318D  2513         	fcall	_TMR3_StartTimer
  8060                           
  8061                           ;main.c: 527: PIE3bits.TMR3IE = 1;
  8062  0E7A  0021               	movlb	1	; select bank1
  8063  0E7B  1613               	bsf	19,4	;volatile
  8064  0E7C  0008               	return
  8065  0E7D                     __end_of_NutRunCycleStart:	
  8066                           
  8067                           	psect	text25
  8068  0F69                     __ptext25:	
  8069 ;; *************** function _TMR3_WriteTimer *****************
  8070 ;; Defined at:
  8071 ;;		line 117 in file "mcc_generated_files/tmr3.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;  timerVal        2    0[BANK1 ] unsigned int 
  8074 ;; Auto vars:     Size  Location     Type
  8075 ;;		None
  8076 ;; Return value:  Size  Location     Type
  8077 ;;                  1    wreg      void 
  8078 ;; Registers used:
  8079 ;;		wreg, status,2
  8080 ;; Tracked objects:
  8081 ;;		On entry : 0/0
  8082 ;;		On exit  : 0/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8085 ;;      Params:         0       0       2       0       0       0       0       0
  8086 ;;      Locals:         0       0       0       0       0       0       0       0
  8087 ;;      Temps:          0       0       0       0       0       0       0       0
  8088 ;;      Totals:         0       0       2       0       0       0       0       0
  8089 ;;Total ram usage:        2 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; Hardware stack levels required when called:    7
  8092 ;; This function calls:
  8093 ;;		Nothing
  8094 ;; This function is called by:
  8095 ;;		_main
  8096 ;;		_NutRunCycleStart
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           
  8101                           ;psect for function _TMR3_WriteTimer
  8102  0F69                     _TMR3_WriteTimer:	
  8103                           
  8104                           ;tmr3.c: 119: if (T3CONbits.T3SYNC == 1)
  8105                           
  8106                           ;incstack = 0
  8107                           ; Regs used in _TMR3_WriteTimer: [wreg+status,2]
  8108  0F69  0028               	movlb	8	; select bank8
  8109  0F6A  1D13               	btfss	19,2	;volatile
  8110  0F6B  2F77               	goto	l4935
  8111                           
  8112                           ;tmr3.c: 120: {
  8113                           ;tmr3.c: 122: T3CONbits.TMR3ON = 0;
  8114  0F6C  1013               	bcf	19,0	;volatile
  8115                           
  8116                           ;tmr3.c: 125: TMR3H = (timerVal >> 8);
  8117  0F6D  0021               	movlb	1	; select bank1
  8118  0F6E  0860               	movf	(TMR3_WriteTimer@timerVal+1)^(0+128),w
  8119  0F6F  0028               	movlb	8	; select bank8
  8120  0F70  0092               	movwf	18	;volatile
  8121                           
  8122                           ;tmr3.c: 126: TMR3L = timerVal;
  8123  0F71  0021               	movlb	1	; select bank1
  8124  0F72  085F               	movf	TMR3_WriteTimer@timerVal^(0+128),w
  8125  0F73  0028               	movlb	8	; select bank8
  8126  0F74  0091               	movwf	17	;volatile
  8127                           
  8128                           ;tmr3.c: 129: T3CONbits.TMR3ON =1;
  8129  0F75  1413               	bsf	19,0	;volatile
  8130                           
  8131                           ;tmr3.c: 130: }
  8132  0F76  0008               	return
  8133  0F77                     l4935:	
  8134                           
  8135                           ;tmr3.c: 131: else
  8136                           ;tmr3.c: 132: {
  8137                           ;tmr3.c: 134: TMR3H = (timerVal >> 8);
  8138  0F77  0021               	movlb	1	; select bank1
  8139  0F78  0860               	movf	(TMR3_WriteTimer@timerVal+1)^(0+128),w
  8140  0F79  0028               	movlb	8	; select bank8
  8141  0F7A  0092               	movwf	18	;volatile
  8142                           
  8143                           ;tmr3.c: 135: TMR3L = timerVal;
  8144  0F7B  0021               	movlb	1	; select bank1
  8145  0F7C  085F               	movf	TMR3_WriteTimer@timerVal^(0+128),w
  8146  0F7D  0028               	movlb	8	; select bank8
  8147  0F7E  0091               	movwf	17	;volatile
  8148  0F7F  0008               	return
  8149  0F80                     __end_of_TMR3_WriteTimer:	
  8150                           
  8151                           	psect	text26
  8152  0D13                     __ptext26:	
  8153 ;; *************** function _TMR3_StartTimer *****************
  8154 ;; Defined at:
  8155 ;;		line 96 in file "mcc_generated_files/tmr3.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;		None
  8158 ;; Auto vars:     Size  Location     Type
  8159 ;;		None
  8160 ;; Return value:  Size  Location     Type
  8161 ;;                  1    wreg      void 
  8162 ;; Registers used:
  8163 ;;		None
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8169 ;;      Params:         0       0       0       0       0       0       0       0
  8170 ;;      Locals:         0       0       0       0       0       0       0       0
  8171 ;;      Temps:          0       0       0       0       0       0       0       0
  8172 ;;      Totals:         0       0       0       0       0       0       0       0
  8173 ;;Total ram usage:        0 bytes
  8174 ;; Hardware stack levels used:    1
  8175 ;; Hardware stack levels required when called:    7
  8176 ;; This function calls:
  8177 ;;		Nothing
  8178 ;; This function is called by:
  8179 ;;		_TMR3_Initialize
  8180 ;;		_NutRunCycleStart
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           
  8185                           ;psect for function _TMR3_StartTimer
  8186  0D13                     _TMR3_StartTimer:	
  8187                           
  8188                           ;tmr3.c: 99: T3CONbits.TMR3ON = 1;
  8189                           
  8190                           ;incstack = 0
  8191                           ; Regs used in _TMR3_StartTimer: []
  8192  0D13  0028               	movlb	8	; select bank8
  8193  0D14  1413               	bsf	19,0	;volatile
  8194  0D15  0008               	return
  8195  0D16                     __end_of_TMR3_StartTimer:	
  8196                           
  8197                           	psect	text27
  8198  0F97                     __ptext27:	
  8199 ;; *************** function _ModbusMasterSetup *****************
  8200 ;; Defined at:
  8201 ;;		line 43 in file "ModbusManager.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;		None
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;		None
  8206 ;; Return value:  Size  Location     Type
  8207 ;;                  1    wreg      void 
  8208 ;; Registers used:
  8209 ;;		wreg, status,2, status,0, pclath, cstack
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8215 ;;      Params:         0       0       0       0       0       0       0       0
  8216 ;;      Locals:         0       0       0       0       0       0       0       0
  8217 ;;      Temps:          0       0       0       0       0       0       0       0
  8218 ;;      Totals:         0       0       0       0       0       0       0       0
  8219 ;;Total ram usage:        0 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    8
  8222 ;; This function calls:
  8223 ;;		_EUSART_Initialize
  8224 ;;		_ModbusMasterInit
  8225 ;;		_postTransmission
  8226 ;;		_preTransmission
  8227 ;; This function is called by:
  8228 ;;		_main
  8229 ;; This function uses a non-reentrant model
  8230 ;;
  8231                           
  8232                           
  8233                           ;psect for function _ModbusMasterSetup
  8234  0F97                     _ModbusMasterSetup:	
  8235                           
  8236                           ;incstack = 0
  8237                           ; Regs used in _ModbusMasterSetup: [wreg+status,2+status,0+pclath+cstack]
  8238                           ;ModbusManager.c: 45: do { LATBbits.LATB6 = 0; } while(0);
  8239  0F97  0022               	movlb	2	; select bank2
  8240  0F98  130D               	bcf	13,6	;volatile
  8241                           
  8242                           ;ModbusManager.c: 46: EUSART_Initialize();
  8243  0F99  318D  25CD  318F   	fcall	_EUSART_Initialize
  8244                           
  8245                           ;ModbusManager.c: 48: ModbusMasterInit(5);
  8246  0F9C  3005               	movlw	5
  8247  0F9D  318E  269C  318F   	fcall	_ModbusMasterInit
  8248                           
  8249                           ;ModbusManager.c: 50: preTransmission(preTransmission_App);
  8250  0FA0  3000               	movlw	0
  8251  0FA1  0021               	movlb	1	; select bank1
  8252  0FA2  00DF               	movwf	preTransmission@preTransmission^(0+128)
  8253  0FA3  3000               	movlw	0
  8254  0FA4  00E0               	movwf	(preTransmission@preTransmission^(0+128)+1)
  8255  0FA5  318D  253B  318F   	fcall	_preTransmission
  8256                           
  8257                           ;ModbusManager.c: 51: postTransmission(postTransmission_App);
  8258  0FA8  3000               	movlw	0
  8259  0FA9  0021               	movlb	1	; select bank1
  8260  0FAA  00DF               	movwf	postTransmission@postTransmission^(0+128)
  8261  0FAB  3000               	movlw	0
  8262  0FAC  00E0               	movwf	(postTransmission@postTransmission^(0+128)+1)
  8263  0FAD  318D  2535         	fcall	_postTransmission
  8264  0FAF  0008               	return
  8265  0FB0                     __end_of_ModbusMasterSetup:	
  8266                           
  8267                           	psect	text28
  8268  0D3B                     __ptext28:	
  8269 ;; *************** function _preTransmission *****************
  8270 ;; Defined at:
  8271 ;;		line 134 in file "ModbusMaster.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;  preTransmiss    2    0[BANK1 ] PTR FTN()void 
  8274 ;;		 -> preTransmission_App(1), 
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;		None
  8277 ;; Return value:  Size  Location     Type
  8278 ;;                  1    wreg      void 
  8279 ;; Registers used:
  8280 ;;		wreg
  8281 ;; Tracked objects:
  8282 ;;		On entry : 0/0
  8283 ;;		On exit  : 0/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8286 ;;      Params:         0       0       2       0       0       0       0       0
  8287 ;;      Locals:         0       0       0       0       0       0       0       0
  8288 ;;      Temps:          0       0       0       0       0       0       0       0
  8289 ;;      Totals:         0       0       2       0       0       0       0       0
  8290 ;;Total ram usage:        2 bytes
  8291 ;; Hardware stack levels used:    1
  8292 ;; Hardware stack levels required when called:    7
  8293 ;; This function calls:
  8294 ;;		Nothing
  8295 ;; This function is called by:
  8296 ;;		_ModbusMasterSetup
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           
  8301                           ;psect for function _preTransmission
  8302  0D3B                     _preTransmission:	
  8303                           
  8304                           ;ModbusMaster.c: 136: _preTransmission = preTransmission;
  8305                           
  8306                           ;incstack = 0
  8307                           ; Regs used in _preTransmission: [wreg]
  8308  0D3B  0021               	movlb	1	; select bank1
  8309  0D3C  0860               	movf	(preTransmission@preTransmission+1)^(0+128),w
  8310  0D3D  00BB               	movwf	(__preTransmission+1)^(0+128)
  8311  0D3E  085F               	movf	preTransmission@preTransmission^(0+128),w
  8312  0D3F  00BA               	movwf	__preTransmission^(0+128)
  8313  0D40  0008               	return
  8314  0D41                     __end_of_preTransmission:	
  8315                           
  8316                           	psect	text29
  8317  0D35                     __ptext29:	
  8318 ;; *************** function _postTransmission *****************
  8319 ;; Defined at:
  8320 ;;		line 152 in file "ModbusMaster.c"
  8321 ;; Parameters:    Size  Location     Type
  8322 ;;  postTransmis    2    0[BANK1 ] PTR FTN()void 
  8323 ;;		 -> postTransmission_App(1), 
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;		None
  8326 ;; Return value:  Size  Location     Type
  8327 ;;                  1    wreg      void 
  8328 ;; Registers used:
  8329 ;;		wreg
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8335 ;;      Params:         0       0       2       0       0       0       0       0
  8336 ;;      Locals:         0       0       0       0       0       0       0       0
  8337 ;;      Temps:          0       0       0       0       0       0       0       0
  8338 ;;      Totals:         0       0       2       0       0       0       0       0
  8339 ;;Total ram usage:        2 bytes
  8340 ;; Hardware stack levels used:    1
  8341 ;; Hardware stack levels required when called:    7
  8342 ;; This function calls:
  8343 ;;		Nothing
  8344 ;; This function is called by:
  8345 ;;		_ModbusMasterSetup
  8346 ;; This function uses a non-reentrant model
  8347 ;;
  8348                           
  8349                           
  8350                           ;psect for function _postTransmission
  8351  0D35                     _postTransmission:	
  8352                           
  8353                           ;ModbusMaster.c: 154: _postTransmission = postTransmission;
  8354                           
  8355                           ;incstack = 0
  8356                           ; Regs used in _postTransmission: [wreg]
  8357  0D35  0021               	movlb	1	; select bank1
  8358  0D36  0860               	movf	(postTransmission@postTransmission+1)^(0+128),w
  8359  0D37  00B9               	movwf	(__postTransmission+1)^(0+128)
  8360  0D38  085F               	movf	postTransmission@postTransmission^(0+128),w
  8361  0D39  00B8               	movwf	__postTransmission^(0+128)
  8362  0D3A  0008               	return
  8363  0D3B                     __end_of_postTransmission:	
  8364                           
  8365                           	psect	text30
  8366  0E9C                     __ptext30:	
  8367 ;; *************** function _ModbusMasterInit *****************
  8368 ;; Defined at:
  8369 ;;		line 19 in file "ModbusMaster.c"
  8370 ;; Parameters:    Size  Location     Type
  8371 ;;  slave           1    wreg     unsigned char 
  8372 ;; Auto vars:     Size  Location     Type
  8373 ;;  slave           1    1[BANK1 ] unsigned char 
  8374 ;; Return value:  Size  Location     Type
  8375 ;;                  1    wreg      void 
  8376 ;; Registers used:
  8377 ;;		wreg, status,2
  8378 ;; Tracked objects:
  8379 ;;		On entry : 0/0
  8380 ;;		On exit  : 0/0
  8381 ;;		Unchanged: 0/0
  8382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8383 ;;      Params:         0       0       0       0       0       0       0       0
  8384 ;;      Locals:         0       0       1       0       0       0       0       0
  8385 ;;      Temps:          0       0       1       0       0       0       0       0
  8386 ;;      Totals:         0       0       2       0       0       0       0       0
  8387 ;;Total ram usage:        2 bytes
  8388 ;; Hardware stack levels used:    1
  8389 ;; Hardware stack levels required when called:    7
  8390 ;; This function calls:
  8391 ;;		Nothing
  8392 ;; This function is called by:
  8393 ;;		_ModbusMasterSetup
  8394 ;; This function uses a non-reentrant model
  8395 ;;
  8396                           
  8397                           
  8398                           ;psect for function _ModbusMasterInit
  8399  0E9C                     _ModbusMasterInit:	
  8400                           
  8401                           ;incstack = 0
  8402                           ; Regs used in _ModbusMasterInit: [wreg+status,2]
  8403                           ;ModbusMasterInit@slave stored from wreg
  8404  0E9C  0021               	movlb	1	; select bank1
  8405  0E9D  00E0               	movwf	ModbusMasterInit@slave^(0+128)
  8406                           
  8407                           ;ModbusMaster.c: 22: _preTransmission = 0;
  8408  0E9E  01BA               	clrf	__preTransmission^(0+128)
  8409  0E9F  01BB               	clrf	(__preTransmission+1)^(0+128)
  8410                           
  8411                           ;ModbusMaster.c: 23: _postTransmission = 0;
  8412  0EA0  01B8               	clrf	__postTransmission^(0+128)
  8413  0EA1  01B9               	clrf	(__postTransmission+1)^(0+128)
  8414                           
  8415                           ;ModbusMaster.c: 24: _u8MBSlave = slave;
  8416  0EA2  0860               	movf	ModbusMasterInit@slave^(0+128),w
  8417  0EA3  00DF               	movwf	??_ModbusMasterInit^(0+128)
  8418  0EA4  085F               	movf	??_ModbusMasterInit^(0+128),w
  8419  0EA5  0020               	movlb	0	; select bank0
  8420  0EA6  00CC               	movwf	__u8MBSlave
  8421                           
  8422                           ;ModbusMaster.c: 25: _u8TransmitBufferIndex = 0;
  8423  0EA7  01CB               	clrf	__u8TransmitBufferIndex
  8424                           
  8425                           ;ModbusMaster.c: 26: u16TransmitBufferLength = 0;
  8426  0EA8  0021               	movlb	1	; select bank1
  8427  0EA9  01BC               	clrf	_u16TransmitBufferLength^(0+128)
  8428  0EAA  01BD               	clrf	(_u16TransmitBufferLength+1)^(0+128)
  8429  0EAB  0008               	return
  8430  0EAC                     __end_of_ModbusMasterInit:	
  8431                           
  8432                           	psect	text31
  8433  0DCD                     __ptext31:	
  8434 ;; *************** function _EUSART_Initialize *****************
  8435 ;; Defined at:
  8436 ;;		line 55 in file "mcc_generated_files/eusart.c"
  8437 ;; Parameters:    Size  Location     Type
  8438 ;;		None
  8439 ;; Auto vars:     Size  Location     Type
  8440 ;;		None
  8441 ;; Return value:  Size  Location     Type
  8442 ;;                  1    wreg      void 
  8443 ;; Registers used:
  8444 ;;		wreg
  8445 ;; Tracked objects:
  8446 ;;		On entry : 0/0
  8447 ;;		On exit  : 0/0
  8448 ;;		Unchanged: 0/0
  8449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8450 ;;      Params:         0       0       0       0       0       0       0       0
  8451 ;;      Locals:         0       0       0       0       0       0       0       0
  8452 ;;      Temps:          0       0       0       0       0       0       0       0
  8453 ;;      Totals:         0       0       0       0       0       0       0       0
  8454 ;;Total ram usage:        0 bytes
  8455 ;; Hardware stack levels used:    1
  8456 ;; Hardware stack levels required when called:    7
  8457 ;; This function calls:
  8458 ;;		Nothing
  8459 ;; This function is called by:
  8460 ;;		_SYSTEM_Initialize
  8461 ;;		_ModbusMasterSetup
  8462 ;; This function uses a non-reentrant model
  8463 ;;
  8464                           
  8465                           
  8466                           ;psect for function _EUSART_Initialize
  8467  0DCD                     _EUSART_Initialize:	
  8468                           
  8469                           ;eusart.c: 60: BAUD1CON = 0x18;
  8470                           
  8471                           ;incstack = 0
  8472                           ; Regs used in _EUSART_Initialize: [wreg]
  8473  0DCD  3018               	movlw	24
  8474  0DCE  0023               	movlb	3	; select bank3
  8475  0DCF  009F               	movwf	31	;volatile
  8476                           
  8477                           ;eusart.c: 63: RC1STA = 0x90;
  8478  0DD0  3090               	movlw	144
  8479  0DD1  009D               	movwf	29	;volatile
  8480                           
  8481                           ;eusart.c: 66: TX1STA = 0x24;
  8482  0DD2  3024               	movlw	36
  8483  0DD3  009E               	movwf	30	;volatile
  8484                           
  8485                           ;eusart.c: 69: SP1BRGL = 0x40;
  8486  0DD4  3040               	movlw	64
  8487  0DD5  009B               	movwf	27	;volatile
  8488                           
  8489                           ;eusart.c: 72: SP1BRGH = 0x03;
  8490  0DD6  3003               	movlw	3
  8491  0DD7  009C               	movwf	28	;volatile
  8492  0DD8  0008               	return
  8493  0DD9                     __end_of_EUSART_Initialize:	
  8494                           
  8495                           	psect	text32
  8496  0D10                     __ptext32:	
  8497 ;; *************** function _LedONStatusBusy *****************
  8498 ;; Defined at:
  8499 ;;		line 12 in file "LED_Ctrl.c"
  8500 ;; Parameters:    Size  Location     Type
  8501 ;;		None
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;		None
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  1    wreg      unsigned char 
  8506 ;; Registers used:
  8507 ;;		wreg
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8513 ;;      Params:         0       0       0       0       0       0       0       0
  8514 ;;      Locals:         0       0       0       0       0       0       0       0
  8515 ;;      Temps:          0       0       0       0       0       0       0       0
  8516 ;;      Totals:         0       0       0       0       0       0       0       0
  8517 ;;Total ram usage:        0 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:    7
  8520 ;; This function calls:
  8521 ;;		Nothing
  8522 ;; This function is called by:
  8523 ;;		_main
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           
  8528                           ;psect for function _LedONStatusBusy
  8529  0D10                     _LedONStatusBusy:	
  8530                           
  8531                           ;LED_Ctrl.c: 14: return Led_ON;
  8532                           
  8533                           ;incstack = 0
  8534                           ; Regs used in _LedONStatusBusy: [wreg]
  8535  0D10  0020               	movlb	0	; select bank0
  8536  0D11  084A               	movf	_Led_ON,w
  8537  0D12  0008               	return
  8538  0D13                     __end_of_LedONStatusBusy:	
  8539                           
  8540                           	psect	text33
  8541  02FA                     __ptext33:	
  8542 ;; *************** function _EPC_StateMachineControlLoop *****************
  8543 ;; Defined at:
  8544 ;;		line 176 in file "main.c"
  8545 ;; Parameters:    Size  Location     Type
  8546 ;;		None
  8547 ;; Auto vars:     Size  Location     Type
  8548 ;;		None
  8549 ;; Return value:  Size  Location     Type
  8550 ;;                  1    wreg      void 
  8551 ;; Registers used:
  8552 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8553 ;; Tracked objects:
  8554 ;;		On entry : 0/0
  8555 ;;		On exit  : 0/0
  8556 ;;		Unchanged: 0/0
  8557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8558 ;;      Params:         0       0       0       0       0       0       0       0
  8559 ;;      Locals:         0       0       0       0       0       0       0       0
  8560 ;;      Temps:          0       0       0       4       0       0       0       0
  8561 ;;      Totals:         0       0       0       4       0       0       0       0
  8562 ;;Total ram usage:        4 bytes
  8563 ;; Hardware stack levels used:    1
  8564 ;; Hardware stack levels required when called:    9
  8565 ;; This function calls:
  8566 ;;		_EUSART_Write
  8567 ;;		_LedONStartConfig
  8568 ;;		_NutRunCycleReset
  8569 ;;		_valuetocharHighNibble
  8570 ;;		_valuetocharLowNibble
  8571 ;; This function is called by:
  8572 ;;		_main
  8573 ;; This function uses a non-reentrant model
  8574 ;;
  8575                           
  8576                           
  8577                           ;psect for function _EPC_StateMachineControlLoop
  8578  02FA                     _EPC_StateMachineControlLoop:	
  8579                           
  8580                           ;main.c: 179: if((NutRunstate == 1) || (NutRunstate == 2))
  8581                           
  8582                           ;incstack = 0
  8583                           ; Regs used in _EPC_StateMachineControlLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack
      +                          ]
  8584  02FA  0020               	movlb	0	; select bank0
  8585  02FB  034E               	decf	_NutRunstate,w
  8586  02FC  1903               	btfsc	3,2
  8587  02FD  2B02               	goto	l5439
  8588  02FE  3002               	movlw	2
  8589  02FF  064E               	xorwf	_NutRunstate,w
  8590  0300  1D03               	btfss	3,2
  8591  0301  2B1A               	goto	l5451
  8592  0302                     l5439:	
  8593                           
  8594                           ;main.c: 180: {
  8595                           ;main.c: 182: if((EncEdgeGotFlag == 0) && (EncEdgeTimeInterval > 2000000))
  8596  0302  0850               	movf	_EncEdgeGotFlag,w
  8597  0303  1D03               	btfss	3,2
  8598  0304  2B1A               	goto	l5451
  8599  0305  0841               	movf	_EncEdgeTimeInterval+3,w
  8600  0306  1D03               	btfss	3,2
  8601  0307  2B10               	goto	l5443
  8602  0308  3081               	movlw	129
  8603  0309  023E               	subwf	_EncEdgeTimeInterval,w
  8604  030A  3084               	movlw	132
  8605  030B  3B3F               	subwfb	_EncEdgeTimeInterval+1,w
  8606  030C  301E               	movlw	30
  8607  030D  3B40               	subwfb	_EncEdgeTimeInterval+2,w
  8608  030E  1C03               	btfss	3,0
  8609  030F  2B1A               	goto	l5451
  8610  0310                     l5443:	
  8611                           
  8612                           ;main.c: 183: {
  8613                           ;main.c: 184: NutRunstate= 0;
  8614  0310  01CE               	clrf	_NutRunstate
  8615                           
  8616                           ;main.c: 185: NutRunCycleReset();
  8617  0311  318F  273D  3182   	fcall	_NutRunCycleReset
  8618                           
  8619                           ;main.c: 186: EUSART_Write('1');
  8620  0314  3031               	movlw	49
  8621  0315  318D  25A1  3182   	fcall	_EUSART_Write
  8622                           
  8623                           ;main.c: 187: do { LATCbits.LATC1 = 0; } while(0);
  8624  0318  0022               	movlb	2	; select bank2
  8625  0319  108E               	bcf	14,1	;volatile
  8626  031A                     l5451:	
  8627                           
  8628                           ;main.c: 189: }
  8629                           ;main.c: 190: }
  8630                           ;main.c: 192: if(ShutdownDetected == 1)
  8631  031A  0020               	movlb	0	; select bank0
  8632  031B  034F               	decf	_ShutdownDetected,w
  8633  031C  1D03               	btfss	3,2
  8634  031D  2C4D               	goto	l5513
  8635                           
  8636                           ;main.c: 193: {
  8637                           ;main.c: 195: ShutdownDetected=0;
  8638  031E  01CF               	clrf	_ShutdownDetected
  8639                           
  8640                           ;main.c: 196: do { LATCbits.LATC1 = 0; } while(0);
  8641  031F  0022               	movlb	2	; select bank2
  8642  0320  108E               	bcf	14,1	;volatile
  8643                           
  8644                           ;main.c: 197: LedONStartConfig(0, 2, 15);
  8645  0321  3002               	movlw	2
  8646  0322  00A4               	movwf	??_EPC_StateMachineControlLoop^(0+256)
  8647  0323  0824               	movf	??_EPC_StateMachineControlLoop^(0+256),w
  8648  0324  00A0               	movwf	LedONStartConfig@LedONDurationSec^(0+256)
  8649  0325  300F               	movlw	15
  8650  0326  00A5               	movwf	(??_EPC_StateMachineControlLoop+1)^(0+256)
  8651  0327  0825               	movf	(??_EPC_StateMachineControlLoop+1)^(0+256),w
  8652  0328  00A1               	movwf	LedONStartConfig@LedONNumBlink^(0+256)
  8653  0329  3000               	movlw	0
  8654  032A  3184  2453  3182   	fcall	_LedONStartConfig
  8655                           
  8656                           ;main.c: 198: EUSART_Write('\r');
  8657  032D  300D               	movlw	13
  8658  032E  318D  25A1  3182   	fcall	_EUSART_Write
  8659                           
  8660                           ;main.c: 199: EUSART_Write('\n');
  8661  0331  300A               	movlw	10
  8662  0332  318D  25A1  3182   	fcall	_EUSART_Write
  8663                           
  8664                           ;main.c: 200: EUSART_Write('N');
  8665  0335  304E               	movlw	78
  8666  0336  318D  25A1  3182   	fcall	_EUSART_Write
  8667                           
  8668                           ;main.c: 201: EUSART_Write('u');
  8669  0339  3075               	movlw	117
  8670  033A  318D  25A1  3182   	fcall	_EUSART_Write
  8671                           
  8672                           ;main.c: 202: EUSART_Write('t');
  8673  033D  3074               	movlw	116
  8674  033E  318D  25A1  3182   	fcall	_EUSART_Write
  8675                           
  8676                           ;main.c: 203: EUSART_Write(' ');
  8677  0341  3020               	movlw	32
  8678  0342  318D  25A1  3182   	fcall	_EUSART_Write
  8679                           
  8680                           ;main.c: 204: EUSART_Write('R');
  8681  0345  3052               	movlw	82
  8682  0346  318D  25A1  3182   	fcall	_EUSART_Write
  8683                           
  8684                           ;main.c: 205: EUSART_Write('u');
  8685  0349  3075               	movlw	117
  8686  034A  318D  25A1  3182   	fcall	_EUSART_Write
  8687                           
  8688                           ;main.c: 206: EUSART_Write('N');
  8689  034D  304E               	movlw	78
  8690  034E  318D  25A1  3182   	fcall	_EUSART_Write
  8691                           
  8692                           ;main.c: 207: EUSART_Write('=');
  8693  0351  303D               	movlw	61
  8694  0352  318D  25A1  3182   	fcall	_EUSART_Write
  8695                           
  8696                           ;main.c: 208: EUSART_Write('0');
  8697  0355  3030               	movlw	48
  8698  0356  318D  25A1  3182   	fcall	_EUSART_Write
  8699                           
  8700                           ;main.c: 209: EUSART_Write('x');
  8701  0359  3078               	movlw	120
  8702  035A  318D  25A1  3182   	fcall	_EUSART_Write
  8703                           
  8704                           ;main.c: 210: EUSART_Write(valuetocharHighNibble((unsigned char)((unsigned int)(NutRunLe
      +                          ngth>>8) & 0x00FF)));
  8705  035D  0020               	movlb	0	; select bank0
  8706  035E  0847               	movf	_NutRunLength+1,w
  8707  035F  318F  2753  3182   	fcall	_valuetocharHighNibble
  8708  0362  318D  25A1  3182   	fcall	_EUSART_Write
  8709                           
  8710                           ;main.c: 211: EUSART_Write(valuetocharLowNibble((unsigned char)((unsigned int)(NutRunLen
      +                          gth>>8) & 0x00FF)));
  8711  0365  0020               	movlb	0	; select bank0
  8712  0366  0847               	movf	_NutRunLength+1,w
  8713  0367  318E  268C  3182   	fcall	_valuetocharLowNibble
  8714  036A  318D  25A1  3182   	fcall	_EUSART_Write
  8715                           
  8716                           ;main.c: 212: EUSART_Write(valuetocharHighNibble((unsigned char)((unsigned int)(NutRunLe
      +                          ngth) & 0x00FF)));
  8717  036D  0020               	movlb	0	; select bank0
  8718  036E  0846               	movf	_NutRunLength,w
  8719  036F  318F  2753  3182   	fcall	_valuetocharHighNibble
  8720  0372  318D  25A1  3182   	fcall	_EUSART_Write
  8721                           
  8722                           ;main.c: 213: EUSART_Write(valuetocharLowNibble((unsigned char)((unsigned int)(NutRunLen
      +                          gth) & 0x00FF)));
  8723  0375  0020               	movlb	0	; select bank0
  8724  0376  0846               	movf	_NutRunLength,w
  8725  0377  318E  268C  3182   	fcall	_valuetocharLowNibble
  8726  037A  318D  25A1  3182   	fcall	_EUSART_Write
  8727                           
  8728                           ;main.c: 214: EUSART_Write(',');
  8729  037D  302C               	movlw	44
  8730  037E  318D  25A1  3182   	fcall	_EUSART_Write
  8731                           
  8732                           ;main.c: 215: EUSART_Write(valuetocharHighNibble((unsigned char)((unsigned long)(EncEdge
      +                          MinTimeInterval>>24) & 0x000000FF)));
  8733  0381  0020               	movlb	0	; select bank0
  8734  0382  0856               	movf	_EncEdgeMinTimeInterval,w
  8735  0383  0022               	movlb	2	; select bank2
  8736  0384  00A4               	movwf	??_EPC_StateMachineControlLoop^(0+256)
  8737  0385  0020               	movlb	0	; select bank0
  8738  0386  0857               	movf	_EncEdgeMinTimeInterval+1,w
  8739  0387  0022               	movlb	2	; select bank2
  8740  0388  00A5               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+1)
  8741  0389  0020               	movlb	0	; select bank0
  8742  038A  0858               	movf	_EncEdgeMinTimeInterval+2,w
  8743  038B  0022               	movlb	2	; select bank2
  8744  038C  00A6               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+2)
  8745  038D  0020               	movlb	0	; select bank0
  8746  038E  0859               	movf	_EncEdgeMinTimeInterval+3,w
  8747  038F  0022               	movlb	2	; select bank2
  8748  0390  00A7               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+3)
  8749  0391  3018               	movlw	24
  8750  0392                     u3695:	
  8751  0392  36A7               	lsrf	(??_EPC_StateMachineControlLoop^(0+256)+3),f
  8752  0393  0CA6               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+2),f
  8753  0394  0CA5               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+1),f
  8754  0395  0CA4               	rrf	??_EPC_StateMachineControlLoop^(0+256),f
  8755  0396  0B89               	decfsz	9,f
  8756  0397  2B92               	goto	u3695
  8757  0398  0824               	movf	??_EPC_StateMachineControlLoop^(0+256),w
  8758  0399  318F  2753  3182   	fcall	_valuetocharHighNibble
  8759  039C  318D  25A1  3182   	fcall	_EUSART_Write
  8760                           
  8761                           ;main.c: 216: EUSART_Write(valuetocharLowNibble((unsigned char)((unsigned long)(EncEdgeM
      +                          inTimeInterval>>24) & 0x000000FF)));
  8762  039F  0020               	movlb	0	; select bank0
  8763  03A0  0856               	movf	_EncEdgeMinTimeInterval,w
  8764  03A1  0022               	movlb	2	; select bank2
  8765  03A2  00A4               	movwf	??_EPC_StateMachineControlLoop^(0+256)
  8766  03A3  0020               	movlb	0	; select bank0
  8767  03A4  0857               	movf	_EncEdgeMinTimeInterval+1,w
  8768  03A5  0022               	movlb	2	; select bank2
  8769  03A6  00A5               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+1)
  8770  03A7  0020               	movlb	0	; select bank0
  8771  03A8  0858               	movf	_EncEdgeMinTimeInterval+2,w
  8772  03A9  0022               	movlb	2	; select bank2
  8773  03AA  00A6               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+2)
  8774  03AB  0020               	movlb	0	; select bank0
  8775  03AC  0859               	movf	_EncEdgeMinTimeInterval+3,w
  8776  03AD  0022               	movlb	2	; select bank2
  8777  03AE  00A7               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+3)
  8778  03AF  3018               	movlw	24
  8779  03B0                     u3705:	
  8780  03B0  36A7               	lsrf	(??_EPC_StateMachineControlLoop^(0+256)+3),f
  8781  03B1  0CA6               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+2),f
  8782  03B2  0CA5               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+1),f
  8783  03B3  0CA4               	rrf	??_EPC_StateMachineControlLoop^(0+256),f
  8784  03B4  0B89               	decfsz	9,f
  8785  03B5  2BB0               	goto	u3705
  8786  03B6  0824               	movf	??_EPC_StateMachineControlLoop^(0+256),w
  8787  03B7  318E  268C  3182   	fcall	_valuetocharLowNibble
  8788  03BA  318D  25A1  3182   	fcall	_EUSART_Write
  8789                           
  8790                           ;main.c: 217: EUSART_Write(valuetocharHighNibble((unsigned char)((unsigned long)(EncEdge
      +                          MinTimeInterval>>16) & 0x000000FF)));
  8791  03BD  0020               	movlb	0	; select bank0
  8792  03BE  0856               	movf	_EncEdgeMinTimeInterval,w
  8793  03BF  0022               	movlb	2	; select bank2
  8794  03C0  00A4               	movwf	??_EPC_StateMachineControlLoop^(0+256)
  8795  03C1  0020               	movlb	0	; select bank0
  8796  03C2  0857               	movf	_EncEdgeMinTimeInterval+1,w
  8797  03C3  0022               	movlb	2	; select bank2
  8798  03C4  00A5               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+1)
  8799  03C5  0020               	movlb	0	; select bank0
  8800  03C6  0858               	movf	_EncEdgeMinTimeInterval+2,w
  8801  03C7  0022               	movlb	2	; select bank2
  8802  03C8  00A6               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+2)
  8803  03C9  0020               	movlb	0	; select bank0
  8804  03CA  0859               	movf	_EncEdgeMinTimeInterval+3,w
  8805  03CB  0022               	movlb	2	; select bank2
  8806  03CC  00A7               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+3)
  8807  03CD  3010               	movlw	16
  8808  03CE                     u3715:	
  8809  03CE  36A7               	lsrf	(??_EPC_StateMachineControlLoop^(0+256)+3),f
  8810  03CF  0CA6               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+2),f
  8811  03D0  0CA5               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+1),f
  8812  03D1  0CA4               	rrf	??_EPC_StateMachineControlLoop^(0+256),f
  8813  03D2  0B89               	decfsz	9,f
  8814  03D3  2BCE               	goto	u3715
  8815  03D4  0824               	movf	??_EPC_StateMachineControlLoop^(0+256),w
  8816  03D5  318F  2753  3182   	fcall	_valuetocharHighNibble
  8817  03D8  318D  25A1  3182   	fcall	_EUSART_Write
  8818                           
  8819                           ;main.c: 218: EUSART_Write(valuetocharLowNibble((unsigned char)((unsigned long)(EncEdgeM
      +                          inTimeInterval>>16) & 0x000000FF)));
  8820  03DB  0020               	movlb	0	; select bank0
  8821  03DC  0856               	movf	_EncEdgeMinTimeInterval,w
  8822  03DD  0022               	movlb	2	; select bank2
  8823  03DE  00A4               	movwf	??_EPC_StateMachineControlLoop^(0+256)
  8824  03DF  0020               	movlb	0	; select bank0
  8825  03E0  0857               	movf	_EncEdgeMinTimeInterval+1,w
  8826  03E1  0022               	movlb	2	; select bank2
  8827  03E2  00A5               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+1)
  8828  03E3  0020               	movlb	0	; select bank0
  8829  03E4  0858               	movf	_EncEdgeMinTimeInterval+2,w
  8830  03E5  0022               	movlb	2	; select bank2
  8831  03E6  00A6               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+2)
  8832  03E7  0020               	movlb	0	; select bank0
  8833  03E8  0859               	movf	_EncEdgeMinTimeInterval+3,w
  8834  03E9  0022               	movlb	2	; select bank2
  8835  03EA  00A7               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+3)
  8836  03EB  3010               	movlw	16
  8837  03EC                     u3725:	
  8838  03EC  36A7               	lsrf	(??_EPC_StateMachineControlLoop^(0+256)+3),f
  8839  03ED  0CA6               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+2),f
  8840  03EE  0CA5               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+1),f
  8841  03EF  0CA4               	rrf	??_EPC_StateMachineControlLoop^(0+256),f
  8842  03F0  0B89               	decfsz	9,f
  8843  03F1  2BEC               	goto	u3725
  8844  03F2  0824               	movf	??_EPC_StateMachineControlLoop^(0+256),w
  8845  03F3  318E  268C  3182   	fcall	_valuetocharLowNibble
  8846  03F6  318D  25A1  3182   	fcall	_EUSART_Write
  8847                           
  8848                           ;main.c: 219: EUSART_Write(valuetocharHighNibble((unsigned char)((unsigned int)(EncEdgeM
      +                          inTimeInterval>>8) & 0x00FF)));
  8849  03F9  0020               	movlb	0	; select bank0
  8850  03FA  0856               	movf	_EncEdgeMinTimeInterval,w
  8851  03FB  0022               	movlb	2	; select bank2
  8852  03FC  00A4               	movwf	??_EPC_StateMachineControlLoop^(0+256)
  8853  03FD  0020               	movlb	0	; select bank0
  8854  03FE  0857               	movf	_EncEdgeMinTimeInterval+1,w
  8855  03FF  0022               	movlb	2	; select bank2
  8856  0400  00A5               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+1)
  8857  0401  0020               	movlb	0	; select bank0
  8858  0402  0858               	movf	_EncEdgeMinTimeInterval+2,w
  8859  0403  0022               	movlb	2	; select bank2
  8860  0404  00A6               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+2)
  8861  0405  0020               	movlb	0	; select bank0
  8862  0406  0859               	movf	_EncEdgeMinTimeInterval+3,w
  8863  0407  0022               	movlb	2	; select bank2
  8864  0408  00A7               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+3)
  8865  0409  3008               	movlw	8
  8866  040A                     u3735:	
  8867  040A  36A7               	lsrf	(??_EPC_StateMachineControlLoop^(0+256)+3),f
  8868  040B  0CA6               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+2),f
  8869  040C  0CA5               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+1),f
  8870  040D  0CA4               	rrf	??_EPC_StateMachineControlLoop^(0+256),f
  8871  040E  0B89               	decfsz	9,f
  8872  040F  2C0A               	goto	u3735
  8873  0410  0824               	movf	??_EPC_StateMachineControlLoop^(0+256),w
  8874  0411  318F  2753  3182   	fcall	_valuetocharHighNibble
  8875  0414  318D  25A1  3182   	fcall	_EUSART_Write
  8876                           
  8877                           ;main.c: 220: EUSART_Write(valuetocharLowNibble((unsigned char)((unsigned int)(EncEdgeMi
      +                          nTimeInterval>>8) & 0x00FF)));
  8878  0417  0020               	movlb	0	; select bank0
  8879  0418  0856               	movf	_EncEdgeMinTimeInterval,w
  8880  0419  0022               	movlb	2	; select bank2
  8881  041A  00A4               	movwf	??_EPC_StateMachineControlLoop^(0+256)
  8882  041B  0020               	movlb	0	; select bank0
  8883  041C  0857               	movf	_EncEdgeMinTimeInterval+1,w
  8884  041D  0022               	movlb	2	; select bank2
  8885  041E  00A5               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+1)
  8886  041F  0020               	movlb	0	; select bank0
  8887  0420  0858               	movf	_EncEdgeMinTimeInterval+2,w
  8888  0421  0022               	movlb	2	; select bank2
  8889  0422  00A6               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+2)
  8890  0423  0020               	movlb	0	; select bank0
  8891  0424  0859               	movf	_EncEdgeMinTimeInterval+3,w
  8892  0425  0022               	movlb	2	; select bank2
  8893  0426  00A7               	movwf	(??_EPC_StateMachineControlLoop^(0+256)+3)
  8894  0427  3008               	movlw	8
  8895  0428                     u3745:	
  8896  0428  36A7               	lsrf	(??_EPC_StateMachineControlLoop^(0+256)+3),f
  8897  0429  0CA6               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+2),f
  8898  042A  0CA5               	rrf	(??_EPC_StateMachineControlLoop^(0+256)+1),f
  8899  042B  0CA4               	rrf	??_EPC_StateMachineControlLoop^(0+256),f
  8900  042C  0B89               	decfsz	9,f
  8901  042D  2C28               	goto	u3745
  8902  042E  0824               	movf	??_EPC_StateMachineControlLoop^(0+256),w
  8903  042F  318E  268C  3182   	fcall	_valuetocharLowNibble
  8904  0432  318D  25A1  3182   	fcall	_EUSART_Write
  8905                           
  8906                           ;main.c: 221: EUSART_Write(valuetocharHighNibble((unsigned char)((unsigned int)(EncEdgeM
      +                          inTimeInterval) & 0x00FF)));
  8907  0435  0020               	movlb	0	; select bank0
  8908  0436  0856               	movf	_EncEdgeMinTimeInterval,w
  8909  0437  318F  2753  3182   	fcall	_valuetocharHighNibble
  8910  043A  318D  25A1  3182   	fcall	_EUSART_Write
  8911                           
  8912                           ;main.c: 222: EUSART_Write(valuetocharLowNibble((unsigned char)((unsigned int)(EncEdgeMi
      +                          nTimeInterval) & 0x00FF)));
  8913  043D  0020               	movlb	0	; select bank0
  8914  043E  0856               	movf	_EncEdgeMinTimeInterval,w
  8915  043F  318E  268C  3182   	fcall	_valuetocharLowNibble
  8916  0442  318D  25A1  3182   	fcall	_EUSART_Write
  8917                           
  8918                           ;main.c: 224: EUSART_Write('\r');
  8919  0445  300D               	movlw	13
  8920  0446  318D  25A1  3182   	fcall	_EUSART_Write
  8921                           
  8922                           ;main.c: 225: EUSART_Write('\n');
  8923  0449  300A               	movlw	10
  8924  044A  318D  25A1  3182   	fcall	_EUSART_Write
  8925  044D                     l5513:	
  8926                           
  8927                           ;main.c: 228: }
  8928                           ;main.c: 230: if(EncEdgeGotFlag==1)
  8929  044D  0020               	movlb	0	; select bank0
  8930  044E  0350               	decf	_EncEdgeGotFlag,w
  8931  044F  1D03               	btfss	3,2
  8932  0450  0008               	return
  8933                           
  8934                           ;main.c: 231: {
  8935                           ;main.c: 232: EncEdgeGotFlag=0;
  8936  0451  01D0               	clrf	_EncEdgeGotFlag
  8937  0452  0008               	return
  8938  0453                     __end_of_EPC_StateMachineControlLoop:	
  8939                           
  8940                           	psect	text34
  8941  0E8C                     __ptext34:	
  8942 ;; *************** function _valuetocharLowNibble *****************
  8943 ;; Defined at:
  8944 ;;		line 686 in file "main.c"
  8945 ;; Parameters:    Size  Location     Type
  8946 ;;  hexvalue        1    wreg     unsigned char 
  8947 ;; Auto vars:     Size  Location     Type
  8948 ;;  hexvalue        1    4[BANK1 ] unsigned char 
  8949 ;;  hexval          1    5[BANK1 ] unsigned char 
  8950 ;; Return value:  Size  Location     Type
  8951 ;;                  1    wreg      unsigned char 
  8952 ;; Registers used:
  8953 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8959 ;;      Params:         0       0       0       0       0       0       0       0
  8960 ;;      Locals:         0       0       2       0       0       0       0       0
  8961 ;;      Temps:          0       0       1       0       0       0       0       0
  8962 ;;      Totals:         0       0       3       0       0       0       0       0
  8963 ;;Total ram usage:        3 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    8
  8966 ;; This function calls:
  8967 ;;		_valtoasciichar
  8968 ;; This function is called by:
  8969 ;;		_EPC_StateMachineControlLoop
  8970 ;; This function uses a non-reentrant model
  8971 ;;
  8972                           
  8973                           
  8974                           ;psect for function _valuetocharLowNibble
  8975  0E8C                     _valuetocharLowNibble:	
  8976                           
  8977                           ;incstack = 0
  8978                           ; Regs used in _valuetocharLowNibble: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8979                           ;valuetocharLowNibble@hexvalue stored from wreg
  8980  0E8C  0021               	movlb	1	; select bank1
  8981  0E8D  00E3               	movwf	valuetocharLowNibble@hexvalue^(0+128)
  8982                           
  8983                           ;main.c: 688: unsigned char hexval;
  8984                           ;main.c: 689: hexval=(unsigned char)((unsigned char)(hexvalue) & 0x0F);
  8985  0E8E  0863               	movf	valuetocharLowNibble@hexvalue^(0+128),w
  8986  0E8F  390F               	andlw	15
  8987  0E90  00E2               	movwf	??_valuetocharLowNibble^(0+128)
  8988  0E91  0862               	movf	??_valuetocharLowNibble^(0+128),w
  8989  0E92  00E4               	movwf	valuetocharLowNibble@hexval^(0+128)
  8990                           
  8991                           ;main.c: 690: hexval= valtoasciichar(hexval);
  8992  0E93  0864               	movf	valuetocharLowNibble@hexval^(0+128),w
  8993  0E94  3186  2693         	fcall	_valtoasciichar
  8994  0E96  0021               	movlb	1	; select bank1
  8995  0E97  00E2               	movwf	??_valuetocharLowNibble^(0+128)
  8996  0E98  0862               	movf	??_valuetocharLowNibble^(0+128),w
  8997  0E99  00E4               	movwf	valuetocharLowNibble@hexval^(0+128)
  8998                           
  8999                           ;main.c: 691: return hexval;
  9000  0E9A  0864               	movf	valuetocharLowNibble@hexval^(0+128),w
  9001  0E9B  0008               	return
  9002  0E9C                     __end_of_valuetocharLowNibble:	
  9003                           
  9004                           	psect	text35
  9005  0F53                     __ptext35:	
  9006 ;; *************** function _valuetocharHighNibble *****************
  9007 ;; Defined at:
  9008 ;;		line 677 in file "main.c"
  9009 ;; Parameters:    Size  Location     Type
  9010 ;;  hexvalue        1    wreg     unsigned char 
  9011 ;; Auto vars:     Size  Location     Type
  9012 ;;  hexvalue        1    5[BANK1 ] unsigned char 
  9013 ;;  hexval          1    6[BANK1 ] unsigned char 
  9014 ;; Return value:  Size  Location     Type
  9015 ;;                  1    wreg      unsigned char 
  9016 ;; Registers used:
  9017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9018 ;; Tracked objects:
  9019 ;;		On entry : 0/0
  9020 ;;		On exit  : 0/0
  9021 ;;		Unchanged: 0/0
  9022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9023 ;;      Params:         0       0       0       0       0       0       0       0
  9024 ;;      Locals:         0       0       2       0       0       0       0       0
  9025 ;;      Temps:          0       0       2       0       0       0       0       0
  9026 ;;      Totals:         0       0       4       0       0       0       0       0
  9027 ;;Total ram usage:        4 bytes
  9028 ;; Hardware stack levels used:    1
  9029 ;; Hardware stack levels required when called:    8
  9030 ;; This function calls:
  9031 ;;		_valtoasciichar
  9032 ;; This function is called by:
  9033 ;;		_EPC_StateMachineControlLoop
  9034 ;; This function uses a non-reentrant model
  9035 ;;
  9036                           
  9037                           
  9038                           ;psect for function _valuetocharHighNibble
  9039  0F53                     _valuetocharHighNibble:	
  9040                           
  9041                           ;incstack = 0
  9042                           ; Regs used in _valuetocharHighNibble: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9043                           ;valuetocharHighNibble@hexvalue stored from wreg
  9044  0F53  0021               	movlb	1	; select bank1
  9045  0F54  00E4               	movwf	valuetocharHighNibble@hexvalue^(0+128)
  9046                           
  9047                           ;main.c: 679: unsigned char hexval;
  9048                           ;main.c: 680: hexval=(unsigned char)((unsigned char)(hexvalue>>4) & 0x0F);
  9049  0F55  0864               	movf	valuetocharHighNibble@hexvalue^(0+128),w
  9050  0F56  00E2               	movwf	??_valuetocharHighNibble^(0+128)
  9051  0F57  3004               	movlw	4
  9052  0F58                     u3315:	
  9053  0F58  36E2               	lsrf	??_valuetocharHighNibble^(0+128),f
  9054  0F59  0B89               	decfsz	9,f
  9055  0F5A  2F58               	goto	u3315
  9056  0F5B  0862               	movf	??_valuetocharHighNibble^(0+128),w
  9057  0F5C  390F               	andlw	15
  9058  0F5D  00E3               	movwf	(??_valuetocharHighNibble+1)^(0+128)
  9059  0F5E  0863               	movf	(??_valuetocharHighNibble+1)^(0+128),w
  9060  0F5F  00E5               	movwf	valuetocharHighNibble@hexval^(0+128)
  9061                           
  9062                           ;main.c: 681: hexval= valtoasciichar(hexval);
  9063  0F60  0865               	movf	valuetocharHighNibble@hexval^(0+128),w
  9064  0F61  3186  2693         	fcall	_valtoasciichar
  9065  0F63  0021               	movlb	1	; select bank1
  9066  0F64  00E2               	movwf	??_valuetocharHighNibble^(0+128)
  9067  0F65  0862               	movf	??_valuetocharHighNibble^(0+128),w
  9068  0F66  00E5               	movwf	valuetocharHighNibble@hexval^(0+128)
  9069                           
  9070                           ;main.c: 682: return hexval;
  9071  0F67  0865               	movf	valuetocharHighNibble@hexval^(0+128),w
  9072  0F68  0008               	return
  9073  0F69                     __end_of_valuetocharHighNibble:	
  9074                           
  9075                           	psect	text36
  9076  0693                     __ptext36:	
  9077 ;; *************** function _valtoasciichar *****************
  9078 ;; Defined at:
  9079 ;;		line 695 in file "main.c"
  9080 ;; Parameters:    Size  Location     Type
  9081 ;;  hexvalue1       1    wreg     unsigned char 
  9082 ;; Auto vars:     Size  Location     Type
  9083 ;;  hexvalue1       1    1[BANK1 ] unsigned char 
  9084 ;;  hexval          1    2[BANK1 ] unsigned char 
  9085 ;; Return value:  Size  Location     Type
  9086 ;;                  1    wreg      unsigned char 
  9087 ;; Registers used:
  9088 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9089 ;; Tracked objects:
  9090 ;;		On entry : 0/0
  9091 ;;		On exit  : 0/0
  9092 ;;		Unchanged: 0/0
  9093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9094 ;;      Params:         0       0       0       0       0       0       0       0
  9095 ;;      Locals:         0       0       2       0       0       0       0       0
  9096 ;;      Temps:          0       0       1       0       0       0       0       0
  9097 ;;      Totals:         0       0       3       0       0       0       0       0
  9098 ;;Total ram usage:        3 bytes
  9099 ;; Hardware stack levels used:    1
  9100 ;; Hardware stack levels required when called:    7
  9101 ;; This function calls:
  9102 ;;		Nothing
  9103 ;; This function is called by:
  9104 ;;		_valuetocharHighNibble
  9105 ;;		_valuetocharLowNibble
  9106 ;; This function uses a non-reentrant model
  9107 ;;
  9108                           
  9109                           
  9110                           ;psect for function _valtoasciichar
  9111  0693                     _valtoasciichar:	
  9112                           
  9113                           ;incstack = 0
  9114                           ; Regs used in _valtoasciichar: [wreg-fsr0h+status,2+status,0]
  9115                           ;valtoasciichar@hexvalue1 stored from wreg
  9116  0693  0021               	movlb	1	; select bank1
  9117  0694  00E0               	movwf	valtoasciichar@hexvalue1^(0+128)
  9118                           
  9119                           ;main.c: 697: unsigned char hexval='0';
  9120  0695  3030               	movlw	48
  9121  0696  00DF               	movwf	??_valtoasciichar^(0+128)
  9122  0697  085F               	movf	??_valtoasciichar^(0+128),w
  9123  0698  00E1               	movwf	valtoasciichar@hexval^(0+128)
  9124                           
  9125                           ;main.c: 698: switch((unsigned char)hexvalue1)
  9126  0699  2EBD               	goto	l4839
  9127  069A                     l4805:	
  9128                           ;main.c: 699: {
  9129                           ;main.c: 700: case 0x00: hexval= '0'; break;
  9130                           
  9131  069A  3030               	movlw	48
  9132  069B  2EB9               	goto	L15
  9133  069C                     l4807:	
  9134                           ;main.c: 701: case 0x01: hexval= '1'; break;
  9135                           
  9136  069C  3031               	movlw	49
  9137  069D  2EB9               	goto	L15
  9138  069E                     l4809:	
  9139                           ;main.c: 702: case 0x02: hexval= '2'; break;
  9140                           
  9141  069E  3032               	movlw	50
  9142  069F  2EB9               	goto	L15
  9143  06A0                     l4811:	
  9144                           ;main.c: 703: case 0x03: hexval= '3'; break;
  9145                           
  9146  06A0  3033               	movlw	51
  9147  06A1  2EB9               	goto	L15
  9148  06A2                     l4813:	
  9149                           ;main.c: 704: case 0x04: hexval= '4'; break;
  9150                           
  9151  06A2  3034               	movlw	52
  9152  06A3  2EB9               	goto	L15
  9153  06A4                     l4815:	
  9154                           ;main.c: 705: case 0x05: hexval= '5'; break;
  9155                           
  9156  06A4  3035               	movlw	53
  9157  06A5  2EB9               	goto	L15
  9158  06A6                     l4817:	
  9159                           ;main.c: 706: case 0x06: hexval= '6'; break;
  9160                           
  9161  06A6  3036               	movlw	54
  9162  06A7  2EB9               	goto	L15
  9163  06A8                     l4819:	
  9164                           ;main.c: 707: case 0x07: hexval= '7'; break;
  9165                           
  9166  06A8  3037               	movlw	55
  9167  06A9  2EB9               	goto	L15
  9168  06AA                     l4821:	
  9169                           ;main.c: 708: case 0x08: hexval= '8'; break;
  9170                           
  9171  06AA  3038               	movlw	56
  9172  06AB  2EB9               	goto	L15
  9173  06AC                     l4823:	
  9174                           ;main.c: 709: case 0x09: hexval= '9'; break;
  9175                           
  9176  06AC  3039               	movlw	57
  9177  06AD  2EB9               	goto	L15
  9178  06AE                     l4825:	
  9179                           ;main.c: 710: case 0x0A: hexval= 'A'; break;
  9180                           
  9181  06AE  3041               	movlw	65
  9182  06AF  2EB9               	goto	L15
  9183  06B0                     l4827:	
  9184                           ;main.c: 711: case 0x0B: hexval= 'B'; break;
  9185                           
  9186  06B0  3042               	movlw	66
  9187  06B1  2EB9               	goto	L15
  9188  06B2                     l4829:	
  9189                           ;main.c: 712: case 0x0C: hexval= 'C'; break;
  9190                           
  9191  06B2  3043               	movlw	67
  9192  06B3  2EB9               	goto	L15
  9193  06B4                     l4831:	
  9194                           ;main.c: 713: case 0x0D: hexval= 'D'; break;
  9195                           
  9196  06B4  3044               	movlw	68
  9197  06B5  2EB9               	goto	L15
  9198  06B6                     l4833:	
  9199                           ;main.c: 714: case 0x0E: hexval= 'E'; break;
  9200                           
  9201  06B6  3045               	movlw	69
  9202  06B7  2EB9               	goto	L15
  9203  06B8                     l4835:	
  9204                           ;main.c: 715: case 0x0F: hexval= 'F'; break;
  9205                           
  9206  06B8  3046               	movlw	70
  9207  06B9                     L15:	
  9208  06B9  00DF               	movwf	??_valtoasciichar^(0+128)
  9209  06BA  085F               	movf	??_valtoasciichar^(0+128),w
  9210  06BB  00E1               	movwf	valtoasciichar@hexval^(0+128)
  9211                           
  9212                           ;main.c: 717: }
  9213                           
  9214                           ;main.c: 716: default : break;
  9215  06BC  2EC7               	goto	l4841
  9216  06BD                     l4839:	
  9217  06BD  0860               	movf	valtoasciichar@hexvalue1^(0+128),w
  9218                           
  9219                           ; Switch size 1, requested type "space"
  9220                           ; Number of cases is 16, Range of values is 0 to 15
  9221                           ; switch strategies available:
  9222                           ; Name         Instructions Cycles
  9223                           ; direct_byte           38     6 (fixed)
  9224                           ; simple_byte           49    25 (average)
  9225                           ; jumptable            260     6 (fixed)
  9226                           ;	Chosen strategy is direct_byte
  9227  06BE  0084               	movwf	4
  9228  06BF  3010               	movlw	16
  9229  06C0  0204               	subwf	4,w
  9230  06C1  1803               	skipnc
  9231  06C2  2EC7               	goto	l4841
  9232  06C3  3187               	movlp	high S5687
  9233  06C4  3504               	lslf	4,w
  9234  06C5  3ECF               	addlw	low S5687
  9235  06C6  0082               	movwf	2
  9236  06C7                     l4841:	
  9237                           
  9238                           ;main.c: 718: return hexval;
  9239  06C7  0861               	movf	valtoasciichar@hexval^(0+128),w
  9240  06C8  0008               	return
  9241  06C9                     __end_of_valtoasciichar:	
  9242                           
  9243                           	psect	swtext1
  9244  07CF                     __pswtext1:	
  9245  07CF                     S5687:	
  9246  07CF  3186  2E9A         	ljmp	l4805
  9247  07D1  3186  2E9C         	ljmp	l4807
  9248  07D3  3186  2E9E         	ljmp	l4809
  9249  07D5  3186  2EA0         	ljmp	l4811
  9250  07D7  3186  2EA2         	ljmp	l4813
  9251  07D9  3186  2EA4         	ljmp	l4815
  9252  07DB  3186  2EA6         	ljmp	l4817
  9253  07DD  3186  2EA8         	ljmp	l4819
  9254  07DF  3186  2EAA         	ljmp	l4821
  9255  07E1  3186  2EAC         	ljmp	l4823
  9256  07E3  3186  2EAE         	ljmp	l4825
  9257  07E5  3186  2EB0         	ljmp	l4827
  9258  07E7  3186  2EB2         	ljmp	l4829
  9259  07E9  3186  2EB4         	ljmp	l4831
  9260  07EB  3186  2EB6         	ljmp	l4833
  9261  07ED  3186  2EB8         	ljmp	l4835
  9262                           
  9263                           	psect	text37
  9264  0F3D                     __ptext37:	
  9265 ;; *************** function _NutRunCycleReset *****************
  9266 ;; Defined at:
  9267 ;;		line 509 in file "main.c"
  9268 ;; Parameters:    Size  Location     Type
  9269 ;;		None
  9270 ;; Auto vars:     Size  Location     Type
  9271 ;;		None
  9272 ;; Return value:  Size  Location     Type
  9273 ;;                  1    wreg      void 
  9274 ;; Registers used:
  9275 ;;		wreg, status,2
  9276 ;; Tracked objects:
  9277 ;;		On entry : 0/0
  9278 ;;		On exit  : 0/0
  9279 ;;		Unchanged: 0/0
  9280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9281 ;;      Params:         0       0       0       0       0       0       0       0
  9282 ;;      Locals:         0       0       0       0       0       0       0       0
  9283 ;;      Temps:          0       0       0       0       0       0       0       0
  9284 ;;      Totals:         0       0       0       0       0       0       0       0
  9285 ;;Total ram usage:        0 bytes
  9286 ;; Hardware stack levels used:    1
  9287 ;; Hardware stack levels required when called:    7
  9288 ;; This function calls:
  9289 ;;		Nothing
  9290 ;; This function is called by:
  9291 ;;		_EPC_StateMachineControlLoop
  9292 ;;		_NutRunCycleStart
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           
  9297                           ;psect for function _NutRunCycleReset
  9298  0F3D                     _NutRunCycleReset:	
  9299                           
  9300                           ;main.c: 511: EncEdgeMinTimeInterval= 0xEFFFFFFF;
  9301                           
  9302                           ;incstack = 0
  9303                           ; Regs used in _NutRunCycleReset: [wreg+status,2]
  9304  0F3D  30EF               	movlw	239
  9305  0F3E  0020               	movlb	0	; select bank0
  9306  0F3F  00D9               	movwf	_EncEdgeMinTimeInterval+3
  9307  0F40  30FF               	movlw	255
  9308  0F41  00D8               	movwf	_EncEdgeMinTimeInterval+2
  9309  0F42  30FF               	movlw	255
  9310  0F43  00D7               	movwf	_EncEdgeMinTimeInterval+1
  9311  0F44  30FF               	movlw	255
  9312  0F45  00D6               	movwf	_EncEdgeMinTimeInterval
  9313                           
  9314                           ;main.c: 512: EncEdgeTimeInterval= 0x00000000;
  9315  0F46  3000               	movlw	0
  9316  0F47  00C1               	movwf	_EncEdgeTimeInterval+3
  9317  0F48  3000               	movlw	0
  9318  0F49  00C0               	movwf	_EncEdgeTimeInterval+2
  9319  0F4A  3000               	movlw	0
  9320  0F4B  00BF               	movwf	_EncEdgeTimeInterval+1
  9321  0F4C  3000               	movlw	0
  9322  0F4D  00BE               	movwf	_EncEdgeTimeInterval
  9323                           
  9324                           ;main.c: 514: EncoderPosition= 0;
  9325  0F4E  01C4               	clrf	_EncoderPosition
  9326  0F4F  01C5               	clrf	_EncoderPosition+1
  9327                           
  9328                           ;main.c: 517: NutRunLength = 0;
  9329  0F50  01C6               	clrf	_NutRunLength
  9330  0F51  01C7               	clrf	_NutRunLength+1
  9331  0F52  0008               	return
  9332  0F53                     __end_of_NutRunCycleReset:	
  9333                           
  9334                           	psect	text38
  9335  0453                     __ptext38:	
  9336 ;; *************** function _LedONStartConfig *****************
  9337 ;; Defined at:
  9338 ;;		line 18 in file "LED_Ctrl.c"
  9339 ;; Parameters:    Size  Location     Type
  9340 ;;  LEDcolor        1    wreg     unsigned char 
  9341 ;;  LedONDuratio    1    0[BANK2 ] unsigned char 
  9342 ;;  LedONNumBlin    1    1[BANK2 ] unsigned char 
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  LEDcolor        1    8[BANK1 ] unsigned char 
  9345 ;; Return value:  Size  Location     Type
  9346 ;;                  1    wreg      unsigned char 
  9347 ;; Registers used:
  9348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9354 ;;      Params:         0       0       0       2       0       0       0       0
  9355 ;;      Locals:         0       0       1       0       0       0       0       0
  9356 ;;      Temps:          0       0       0       2       0       0       0       0
  9357 ;;      Totals:         0       0       1       4       0       0       0       0
  9358 ;;Total ram usage:        5 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    8
  9361 ;; This function calls:
  9362 ;;		___lwdiv
  9363 ;;		___wmul
  9364 ;; This function is called by:
  9365 ;;		_main
  9366 ;;		_EPC_StateMachineControlLoop
  9367 ;; This function uses a non-reentrant model
  9368 ;;
  9369                           
  9370                           
  9371                           ;psect for function _LedONStartConfig
  9372  0453                     _LedONStartConfig:	
  9373                           
  9374                           ;incstack = 0
  9375                           ; Regs used in _LedONStartConfig: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9376                           ;LedONStartConfig@LEDcolor stored from wreg
  9377  0453  0021               	movlb	1	; select bank1
  9378  0454  00E7               	movwf	LedONStartConfig@LEDcolor^(0+128)
  9379                           
  9380                           ;LED_Ctrl.c: 20: if(Led_ON!=1 && (LedONDurationSec!=0)&& (LedONDurationSec <= 60))
  9381  0455  0020               	movlb	0	; select bank0
  9382  0456  034A               	decf	_Led_ON,w
  9383  0457  1903               	btfsc	3,2
  9384  0458  0008               	return
  9385  0459  0022               	movlb	2	; select bank2
  9386  045A  0820               	movf	LedONStartConfig@LedONDurationSec^(0+256),w
  9387  045B  1903               	btfsc	3,2
  9388  045C  0008               	return
  9389  045D  303D               	movlw	61
  9390  045E  0220               	subwf	LedONStartConfig@LedONDurationSec^(0+256),w
  9391  045F  1803               	skipnc
  9392  0460  0008               	return
  9393                           
  9394                           ;LED_Ctrl.c: 21: {
  9395                           ;LED_Ctrl.c: 22: Led_ON=1;
  9396  0461  0020               	movlb	0	; select bank0
  9397  0462  01CA               	clrf	_Led_ON
  9398  0463  0ACA               	incf	_Led_ON,f
  9399                           
  9400                           ;LED_Ctrl.c: 23: LED_Color=LEDcolor;
  9401  0464  0021               	movlb	1	; select bank1
  9402  0465  0867               	movf	LedONStartConfig@LEDcolor^(0+128),w
  9403  0466  0022               	movlb	2	; select bank2
  9404  0467  00A2               	movwf	??_LedONStartConfig^(0+256)
  9405  0468  0822               	movf	??_LedONStartConfig^(0+256),w
  9406  0469  0020               	movlb	0	; select bank0
  9407  046A  00DA               	movwf	_LED_Color
  9408                           
  9409                           ;LED_Ctrl.c: 25: switch(LED_Color)
  9410  046B  2C75               	goto	l5073
  9411  046C                     l1172:	
  9412                           ;LED_Ctrl.c: 26: {
  9413                           ;LED_Ctrl.c: 27: case 0 : do { LATCbits.LATC0 = 1; } while(0);
  9414                           
  9415  046C  0022               	movlb	2	; select bank2
  9416  046D  140E               	bsf	14,0	;volatile
  9417                           
  9418                           ;LED_Ctrl.c: 28: break;
  9419  046E  2C81               	goto	l5075
  9420  046F                     l1176:	
  9421                           ;LED_Ctrl.c: 29: case 1 : do { LATCbits.LATC1 = 1; } while(0);
  9422                           
  9423  046F  0022               	movlb	2	; select bank2
  9424  0470  148E               	bsf	14,1	;volatile
  9425                           
  9426                           ;LED_Ctrl.c: 30: break;
  9427  0471  2C81               	goto	l5075
  9428  0472                     l1179:	
  9429                           ;LED_Ctrl.c: 31: case 2 : do { LATCbits.LATC2 = 1; } while(0);
  9430                           
  9431  0472  0022               	movlb	2	; select bank2
  9432  0473  150E               	bsf	14,2	;volatile
  9433                           
  9434                           ;LED_Ctrl.c: 34: }
  9435                           
  9436                           ;LED_Ctrl.c: 33: default : break;
  9437                           
  9438                           ;LED_Ctrl.c: 32: break;
  9439  0474  2C81               	goto	l5075
  9440  0475                     l5073:	
  9441  0475  0020               	movlb	0	; select bank0
  9442  0476  085A               	movf	_LED_Color,w
  9443                           
  9444                           ; Switch size 1, requested type "space"
  9445                           ; Number of cases is 3, Range of values is 0 to 2
  9446                           ; switch strategies available:
  9447                           ; Name         Instructions Cycles
  9448                           ; simple_byte           10     6 (average)
  9449                           ; direct_byte           12     6 (fixed)
  9450                           ; jumptable            260     6 (fixed)
  9451                           ;	Chosen strategy is simple_byte
  9452  0477  3A00               	xorlw	0	; case 0
  9453  0478  1903               	skipnz
  9454  0479  2C6C               	goto	l1172
  9455  047A  3A01               	xorlw	1	; case 1
  9456  047B  1903               	skipnz
  9457  047C  2C6F               	goto	l1176
  9458  047D  3A03               	xorlw	3	; case 2
  9459  047E  1903               	skipnz
  9460  047F  2C72               	goto	l1179
  9461  0480  2C81               	goto	l5075
  9462  0481                     l5075:	
  9463                           
  9464                           ;LED_Ctrl.c: 36: LED_msec_Cnt=0;
  9465  0481  0021               	movlb	1	; select bank1
  9466  0482  01B6               	clrf	_LED_msec_Cnt^(0+128)
  9467  0483  01B7               	clrf	(_LED_msec_Cnt+1)^(0+128)
  9468                           
  9469                           ;LED_Ctrl.c: 37: LedON_Duration_msec=((unsigned int)LedONDurationSec)*1000;
  9470  0484  0022               	movlb	2	; select bank2
  9471  0485  0820               	movf	LedONStartConfig@LedONDurationSec^(0+256),w
  9472  0486  00A2               	movwf	??_LedONStartConfig^(0+256)
  9473  0487  01A3               	clrf	(??_LedONStartConfig^(0+256)+1)
  9474  0488  0822               	movf	??_LedONStartConfig^(0+256),w
  9475  0489  0021               	movlb	1	; select bank1
  9476  048A  00DF               	movwf	___wmul@multiplier^(0+128)
  9477  048B  0022               	movlb	2	; select bank2
  9478  048C  0823               	movf	(??_LedONStartConfig+1)^(0+256),w
  9479  048D  0021               	movlb	1	; select bank1
  9480  048E  00E0               	movwf	(___wmul@multiplier+1)^(0+128)
  9481  048F  30E8               	movlw	232
  9482  0490  00E1               	movwf	___wmul@multiplicand^(0+128)
  9483  0491  3003               	movlw	3
  9484  0492  00E2               	movwf	(___wmul@multiplicand^(0+128)+1)
  9485  0493  318F  27E4  3184   	fcall	___wmul
  9486  0496  0021               	movlb	1	; select bank1
  9487  0497  0860               	movf	(?___wmul+1)^(0+128),w
  9488  0498  00B1               	movwf	(_LedON_Duration_msec+1)^(0+128)
  9489  0499  085F               	movf	?___wmul^(0+128),w
  9490  049A  00B0               	movwf	_LedON_Duration_msec^(0+128)
  9491                           
  9492                           ;LED_Ctrl.c: 38: if(LedONNumBlink > 1)
  9493  049B  3002               	movlw	2
  9494  049C  0022               	movlb	2	; select bank2
  9495  049D  0221               	subwf	LedONStartConfig@LedONNumBlink^(0+256),w
  9496  049E  1C03               	skipc
  9497  049F  2CBA               	goto	l5083
  9498                           
  9499                           ;LED_Ctrl.c: 39: Blick_tickPointMsec=(LedON_Duration_msec/(((LedONNumBlink-1)*2)+1));
  9500  04A0  0821               	movf	LedONStartConfig@LedONNumBlink^(0+256),w
  9501  04A1  00A2               	movwf	??_LedONStartConfig^(0+256)
  9502  04A2  01A3               	clrf	(??_LedONStartConfig^(0+256)+1)
  9503  04A3  35A2               	lslf	??_LedONStartConfig^(0+256),f
  9504  04A4  0DA3               	rlf	(??_LedONStartConfig^(0+256)+1),f
  9505  04A5  0822               	movf	??_LedONStartConfig^(0+256),w
  9506  04A6  3EFF               	addlw	255
  9507  04A7  0021               	movlb	1	; select bank1
  9508  04A8  00DF               	movwf	___lwdiv@divisor^(0+128)
  9509  04A9  30FF               	movlw	255
  9510  04AA  0022               	movlb	2	; select bank2
  9511  04AB  3D23               	addwfc	(??_LedONStartConfig+1)^(0+256),w
  9512  04AC  0021               	movlb	1	; select bank1
  9513  04AD  00E0               	movwf	(___lwdiv@divisor+1)^(0+128)
  9514  04AE  0831               	movf	(_LedON_Duration_msec+1)^(0+128),w
  9515  04AF  00E2               	movwf	(___lwdiv@dividend+1)^(0+128)
  9516  04B0  0830               	movf	_LedON_Duration_msec^(0+128),w
  9517  04B1  00E1               	movwf	___lwdiv@dividend^(0+128)
  9518  04B2  3186  26C9  3184   	fcall	___lwdiv
  9519  04B5  0021               	movlb	1	; select bank1
  9520  04B6  0860               	movf	(?___lwdiv+1)^(0+128),w
  9521  04B7  00B5               	movwf	(_Blick_tickPointMsec+1)^(0+128)
  9522  04B8  085F               	movf	?___lwdiv^(0+128),w
  9523  04B9  2CBE               	goto	L16
  9524  04BA                     l5083:	
  9525                           
  9526                           ;LED_Ctrl.c: 40: else
  9527                           ;LED_Ctrl.c: 41: Blick_tickPointMsec=LedON_Duration_msec;
  9528  04BA  0021               	movlb	1	; select bank1
  9529  04BB  0831               	movf	(_LedON_Duration_msec+1)^(0+128),w
  9530  04BC  00B5               	movwf	(_Blick_tickPointMsec+1)^(0+128)
  9531  04BD  0830               	movf	_LedON_Duration_msec^(0+128),w
  9532  04BE                     L16:	
  9533  04BE  00B4               	movwf	_Blick_tickPointMsec^(0+128)
  9534                           
  9535                           ;LED_Ctrl.c: 43: Blick_tickPoint=Blick_tickPointMsec;
  9536  04BF  0835               	movf	(_Blick_tickPointMsec+1)^(0+128),w
  9537  04C0  00B3               	movwf	(_Blick_tickPoint+1)^(0+128)
  9538  04C1  0834               	movf	_Blick_tickPointMsec^(0+128),w
  9539  04C2  00B2               	movwf	_Blick_tickPoint^(0+128)
  9540                           
  9541                           ;LED_Ctrl.c: 46: else
  9542                           ;LED_Ctrl.c: 47: {
  9543                           ;LED_Ctrl.c: 48: return 0;
  9544                           ;	Return value of _LedONStartConfig is never used
  9545                           
  9546                           ;LED_Ctrl.c: 45: }
  9547                           
  9548                           ;LED_Ctrl.c: 44: return 1;
  9549                           ;	Return value of _LedONStartConfig is never used
  9550  04C3  0008               	return
  9551  04C4                     __end_of_LedONStartConfig:	
  9552                           
  9553                           	psect	text39
  9554  0FE4                     __ptext39:	
  9555 ;; *************** function ___wmul *****************
  9556 ;; Defined at:
  9557 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  9558 ;; Parameters:    Size  Location     Type
  9559 ;;  multiplier      2    0[BANK1 ] unsigned int 
  9560 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  9561 ;; Auto vars:     Size  Location     Type
  9562 ;;  product         2    4[BANK1 ] unsigned int 
  9563 ;; Return value:  Size  Location     Type
  9564 ;;                  2    0[BANK1 ] unsigned int 
  9565 ;; Registers used:
  9566 ;;		wreg, status,2, status,0
  9567 ;; Tracked objects:
  9568 ;;		On entry : 0/0
  9569 ;;		On exit  : 0/0
  9570 ;;		Unchanged: 0/0
  9571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9572 ;;      Params:         0       0       4       0       0       0       0       0
  9573 ;;      Locals:         0       0       2       0       0       0       0       0
  9574 ;;      Temps:          0       0       0       0       0       0       0       0
  9575 ;;      Totals:         0       0       6       0       0       0       0       0
  9576 ;;Total ram usage:        6 bytes
  9577 ;; Hardware stack levels used:    1
  9578 ;; Hardware stack levels required when called:    7
  9579 ;; This function calls:
  9580 ;;		Nothing
  9581 ;; This function is called by:
  9582 ;;		_LedONStartConfig
  9583 ;; This function uses a non-reentrant model
  9584 ;;
  9585                           
  9586                           
  9587                           ;psect for function ___wmul
  9588  0FE4                     ___wmul:	
  9589                           
  9590                           ;incstack = 0
  9591                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9592  0FE4  0021               	movlb	1	; select bank1
  9593  0FE5  01E3               	clrf	___wmul@product^(0+128)
  9594  0FE6  01E4               	clrf	(___wmul@product+1)^(0+128)
  9595  0FE7                     l4851:	
  9596  0FE7  1C5F               	btfss	___wmul@multiplier^(0+128),0
  9597  0FE8  2FED               	goto	l1297
  9598  0FE9  0861               	movf	___wmul@multiplicand^(0+128),w
  9599  0FEA  07E3               	addwf	___wmul@product^(0+128),f
  9600  0FEB  0862               	movf	(___wmul@multiplicand+1)^(0+128),w
  9601  0FEC  3DE4               	addwfc	(___wmul@product+1)^(0+128),f
  9602  0FED                     l1297:	
  9603  0FED  3001               	movlw	1
  9604  0FEE                     u3135:	
  9605  0FEE  35E1               	lslf	___wmul@multiplicand^(0+128),f
  9606  0FEF  0DE2               	rlf	(___wmul@multiplicand+1)^(0+128),f
  9607  0FF0  0B89               	decfsz	9,f
  9608  0FF1  2FEE               	goto	u3135
  9609  0FF2  3001               	movlw	1
  9610  0FF3                     u3145:	
  9611  0FF3  36E0               	lsrf	(___wmul@multiplier+1)^(0+128),f
  9612  0FF4  0CDF               	rrf	___wmul@multiplier^(0+128),f
  9613  0FF5  0B89               	decfsz	9,f
  9614  0FF6  2FF3               	goto	u3145
  9615  0FF7  085F               	movf	___wmul@multiplier^(0+128),w
  9616  0FF8  0460               	iorwf	(___wmul@multiplier+1)^(0+128),w
  9617  0FF9  1D03               	btfss	3,2
  9618  0FFA  2FE7               	goto	l4851
  9619  0FFB  0864               	movf	(___wmul@product+1)^(0+128),w
  9620  0FFC  00E0               	movwf	(?___wmul+1)^(0+128)
  9621  0FFD  0863               	movf	___wmul@product^(0+128),w
  9622  0FFE  00DF               	movwf	?___wmul^(0+128)
  9623  0FFF  0008               	return
  9624  1000                     __end_of___wmul:	
  9625                           
  9626                           	psect	text40
  9627  06C9                     __ptext40:	
  9628 ;; *************** function ___lwdiv *****************
  9629 ;; Defined at:
  9630 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  9631 ;; Parameters:    Size  Location     Type
  9632 ;;  divisor         2    0[BANK1 ] unsigned int 
  9633 ;;  dividend        2    2[BANK1 ] unsigned int 
  9634 ;; Auto vars:     Size  Location     Type
  9635 ;;  quotient        2    6[BANK1 ] unsigned int 
  9636 ;;  counter         1    5[BANK1 ] unsigned char 
  9637 ;; Return value:  Size  Location     Type
  9638 ;;                  2    0[BANK1 ] unsigned int 
  9639 ;; Registers used:
  9640 ;;		wreg, status,2, status,0
  9641 ;; Tracked objects:
  9642 ;;		On entry : 0/0
  9643 ;;		On exit  : 0/0
  9644 ;;		Unchanged: 0/0
  9645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9646 ;;      Params:         0       0       4       0       0       0       0       0
  9647 ;;      Locals:         0       0       3       0       0       0       0       0
  9648 ;;      Temps:          0       0       1       0       0       0       0       0
  9649 ;;      Totals:         0       0       8       0       0       0       0       0
  9650 ;;Total ram usage:        8 bytes
  9651 ;; Hardware stack levels used:    1
  9652 ;; Hardware stack levels required when called:    7
  9653 ;; This function calls:
  9654 ;;		Nothing
  9655 ;; This function is called by:
  9656 ;;		_LedONStartConfig
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           
  9661                           ;psect for function ___lwdiv
  9662  06C9                     ___lwdiv:	
  9663                           
  9664                           ;incstack = 0
  9665                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9666  06C9  0021               	movlb	1	; select bank1
  9667  06CA  01E5               	clrf	___lwdiv@quotient^(0+128)
  9668  06CB  01E6               	clrf	(___lwdiv@quotient+1)^(0+128)
  9669  06CC  085F               	movf	___lwdiv@divisor^(0+128),w
  9670  06CD  0460               	iorwf	(___lwdiv@divisor+1)^(0+128),w
  9671  06CE  1903               	btfsc	3,2
  9672  06CF  2EF9               	goto	l4885
  9673  06D0  01E4               	clrf	___lwdiv@counter^(0+128)
  9674  06D1  0AE4               	incf	___lwdiv@counter^(0+128),f
  9675  06D2                     l4873:	
  9676  06D2  1BE0               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  9677  06D3  2EDE               	goto	l4875
  9678  06D4  3001               	movlw	1
  9679  06D5                     u3175:	
  9680  06D5  35DF               	lslf	___lwdiv@divisor^(0+128),f
  9681  06D6  0DE0               	rlf	(___lwdiv@divisor+1)^(0+128),f
  9682  06D7  0B89               	decfsz	9,f
  9683  06D8  2ED5               	goto	u3175
  9684  06D9  3001               	movlw	1
  9685  06DA  00E3               	movwf	??___lwdiv^(0+128)
  9686  06DB  0863               	movf	??___lwdiv^(0+128),w
  9687  06DC  07E4               	addwf	___lwdiv@counter^(0+128),f
  9688  06DD  2ED2               	goto	l4873
  9689  06DE                     l4875:	
  9690  06DE  3001               	movlw	1
  9691  06DF                     u3195:	
  9692  06DF  35E5               	lslf	___lwdiv@quotient^(0+128),f
  9693  06E0  0DE6               	rlf	(___lwdiv@quotient+1)^(0+128),f
  9694  06E1  0B89               	decfsz	9,f
  9695  06E2  2EDF               	goto	u3195
  9696  06E3  0860               	movf	(___lwdiv@divisor+1)^(0+128),w
  9697  06E4  0262               	subwf	(___lwdiv@dividend+1)^(0+128),w
  9698  06E5  1D03               	skipz
  9699  06E6  2EE9               	goto	u3205
  9700  06E7  085F               	movf	___lwdiv@divisor^(0+128),w
  9701  06E8  0261               	subwf	___lwdiv@dividend^(0+128),w
  9702  06E9                     u3205:	
  9703  06E9  1C03               	skipc
  9704  06EA  2EF0               	goto	l4881
  9705  06EB  085F               	movf	___lwdiv@divisor^(0+128),w
  9706  06EC  02E1               	subwf	___lwdiv@dividend^(0+128),f
  9707  06ED  0860               	movf	(___lwdiv@divisor+1)^(0+128),w
  9708  06EE  3BE2               	subwfb	(___lwdiv@dividend+1)^(0+128),f
  9709  06EF  1465               	bsf	___lwdiv@quotient^(0+128),0
  9710  06F0                     l4881:	
  9711  06F0  3001               	movlw	1
  9712  06F1                     u3215:	
  9713  06F1  36E0               	lsrf	(___lwdiv@divisor+1)^(0+128),f
  9714  06F2  0CDF               	rrf	___lwdiv@divisor^(0+128),f
  9715  06F3  0B89               	decfsz	9,f
  9716  06F4  2EF1               	goto	u3215
  9717  06F5  3001               	movlw	1
  9718  06F6  02E4               	subwf	___lwdiv@counter^(0+128),f
  9719  06F7  1D03               	btfss	3,2
  9720  06F8  2EDE               	goto	l4875
  9721  06F9                     l4885:	
  9722  06F9  0866               	movf	(___lwdiv@quotient+1)^(0+128),w
  9723  06FA  00E0               	movwf	(?___lwdiv+1)^(0+128)
  9724  06FB  0865               	movf	___lwdiv@quotient^(0+128),w
  9725  06FC  00DF               	movwf	?___lwdiv^(0+128)
  9726  06FD  0008               	return
  9727  06FE                     __end_of___lwdiv:	
  9728                           
  9729                           	psect	text41
  9730  0DA1                     __ptext41:	
  9731 ;; *************** function _EUSART_Write *****************
  9732 ;; Defined at:
  9733 ;;		line 96 in file "mcc_generated_files/eusart.c"
  9734 ;; Parameters:    Size  Location     Type
  9735 ;;  txData          1    wreg     unsigned char 
  9736 ;; Auto vars:     Size  Location     Type
  9737 ;;  txData          1    0[BANK1 ] unsigned char 
  9738 ;; Return value:  Size  Location     Type
  9739 ;;                  1    wreg      void 
  9740 ;; Registers used:
  9741 ;;		wreg
  9742 ;; Tracked objects:
  9743 ;;		On entry : 0/0
  9744 ;;		On exit  : 0/0
  9745 ;;		Unchanged: 0/0
  9746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9747 ;;      Params:         0       0       0       0       0       0       0       0
  9748 ;;      Locals:         0       0       1       0       0       0       0       0
  9749 ;;      Temps:          0       0       0       0       0       0       0       0
  9750 ;;      Totals:         0       0       1       0       0       0       0       0
  9751 ;;Total ram usage:        1 bytes
  9752 ;; Hardware stack levels used:    1
  9753 ;; Hardware stack levels required when called:    7
  9754 ;; This function calls:
  9755 ;;		Nothing
  9756 ;; This function is called by:
  9757 ;;		_main
  9758 ;;		_EPC_StateMachineControlLoop
  9759 ;;		_ModbusMasterTransaction
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763                           
  9764                           ;psect for function _EUSART_Write
  9765  0DA1                     _EUSART_Write:	
  9766                           
  9767                           ;incstack = 0
  9768                           ; Regs used in _EUSART_Write: [wreg]
  9769                           ;EUSART_Write@txData stored from wreg
  9770  0DA1  0021               	movlb	1	; select bank1
  9771  0DA2  00DF               	movwf	EUSART_Write@txData^(0+128)
  9772  0DA3                     l159:	
  9773                           ;eusart.c: 99: {
  9774                           
  9775                           ;eusart.c: 98: while(0 == PIR1bits.TXIF)
  9776                           
  9777  0DA3  0020               	movlb	0	; select bank0
  9778  0DA4  1E11               	btfss	17,4	;volatile
  9779  0DA5  2DA3               	goto	l159
  9780                           
  9781                           ;eusart.c: 100: }
  9782                           ;eusart.c: 102: TX1REG = txData;
  9783  0DA6  0021               	movlb	1	; select bank1
  9784  0DA7  085F               	movf	EUSART_Write@txData^(0+128),w
  9785  0DA8  0023               	movlb	3	; select bank3
  9786  0DA9  009A               	movwf	26	;volatile
  9787  0DAA  0008               	return
  9788  0DAB                     __end_of_EUSART_Write:	
  9789                           
  9790                           	psect	intentry
  9791  0004                     __pintentry:	
  9792 ;; *************** function _INTERRUPT_InterruptManager *****************
  9793 ;; Defined at:
  9794 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9795 ;; Parameters:    Size  Location     Type
  9796 ;;		None
  9797 ;; Auto vars:     Size  Location     Type
  9798 ;;		None
  9799 ;; Return value:  Size  Location     Type
  9800 ;;                  1    wreg      void 
  9801 ;; Registers used:
  9802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9803 ;; Tracked objects:
  9804 ;;		On entry : 0/0
  9805 ;;		On exit  : 0/0
  9806 ;;		Unchanged: 0/0
  9807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9808 ;;      Params:         0       0       0       0       0       0       0       0
  9809 ;;      Locals:         0       0       0       0       0       0       0       0
  9810 ;;      Temps:          0       1       0       0       0       0       0       0
  9811 ;;      Totals:         0       1       0       0       0       0       0       0
  9812 ;;Total ram usage:        1 bytes
  9813 ;; Hardware stack levels used:    1
  9814 ;; Hardware stack levels required when called:    6
  9815 ;; This function calls:
  9816 ;;		_CCP1_CaptureISR
  9817 ;;		_INT_ISR
  9818 ;;		_PIN_MANAGER_IOC
  9819 ;;		_TMR0_ISR
  9820 ;;		_TMR3_ISR
  9821 ;;		_TMR5_ISR
  9822 ;; This function is called by:
  9823 ;;		Interrupt level 1
  9824 ;; This function uses a non-reentrant model
  9825 ;;
  9826                           
  9827  0004                     _INTERRUPT_InterruptManager:	
  9828                           
  9829                           ;incstack = 0
  9830  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9831                           
  9832                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9833  0005  3180               	pagesel	$
  9834  0006  0020               	movlb	0	; select bank0
  9835  0007  087F               	movf	127,w
  9836  0008  00BD               	movwf	??_INTERRUPT_InterruptManager
  9837                           
  9838                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
  9839  0009  0021               	movlb	1	; select bank1
  9840  000A  1E90               	btfss	16,5	;volatile
  9841  000B  2813               	goto	i1l430
  9842  000C  0020               	movlb	0	; select bank0
  9843  000D  1E90               	btfss	16,5	;volatile
  9844  000E  2813               	goto	i1l430
  9845                           
  9846                           ;interrupt_manager.c: 55: {
  9847                           ;interrupt_manager.c: 56: TMR0_ISR();
  9848  000F  318D  252B  3180   	fcall	_TMR0_ISR
  9849                           
  9850                           ;interrupt_manager.c: 57: }
  9851  0012  2849               	goto	i1l442
  9852  0013                     i1l430:	
  9853                           
  9854                           ;interrupt_manager.c: 58: else if(PIE0bits.INTE == 1 && PIR0bits.INTF == 1)
  9855  0013  0021               	movlb	1	; select bank1
  9856  0014  1C10               	btfss	16,0	;volatile
  9857  0015  281D               	goto	i1l432
  9858  0016  0020               	movlb	0	; select bank0
  9859  0017  1C10               	btfss	16,0	;volatile
  9860  0018  281D               	goto	i1l432
  9861                           
  9862                           ;interrupt_manager.c: 59: {
  9863                           ;interrupt_manager.c: 60: INT_ISR();
  9864  0019  318D  2526  3180   	fcall	_INT_ISR
  9865                           
  9866                           ;interrupt_manager.c: 61: }
  9867  001C  2849               	goto	i1l442
  9868  001D                     i1l432:	
  9869                           
  9870                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE4bits.TMR5IE == 1 && PIR4bi
      +                          ts.TMR5IF == 1)
  9871  001D  1F0B               	btfss	11,6	;volatile
  9872  001E  2829               	goto	i1l434
  9873  001F  0021               	movlb	1	; select bank1
  9874  0020  1E14               	btfss	20,4	;volatile
  9875  0021  2829               	goto	i1l434
  9876  0022  0020               	movlb	0	; select bank0
  9877  0023  1E14               	btfss	20,4	;volatile
  9878  0024  2829               	goto	i1l434
  9879                           
  9880                           ;interrupt_manager.c: 63: {
  9881                           ;interrupt_manager.c: 64: TMR5_ISR();
  9882  0025  318E  26D4  3180   	fcall	_TMR5_ISR
  9883                           
  9884                           ;interrupt_manager.c: 65: }
  9885  0028  2849               	goto	i1l442
  9886  0029                     i1l434:	
  9887                           
  9888                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE3bits.TMR3IE == 1 && PIR3bi
      +                          ts.TMR3IF == 1)
  9889  0029  1F0B               	btfss	11,6	;volatile
  9890  002A  2835               	goto	i1l436
  9891  002B  0021               	movlb	1	; select bank1
  9892  002C  1E13               	btfss	19,4	;volatile
  9893  002D  2835               	goto	i1l436
  9894  002E  0020               	movlb	0	; select bank0
  9895  002F  1E13               	btfss	19,4	;volatile
  9896  0030  2835               	goto	i1l436
  9897                           
  9898                           ;interrupt_manager.c: 67: {
  9899                           ;interrupt_manager.c: 68: TMR3_ISR();
  9900  0031  318E  26C0  3180   	fcall	_TMR3_ISR
  9901                           
  9902                           ;interrupt_manager.c: 69: }
  9903  0034  2849               	goto	i1l442
  9904  0035                     i1l436:	
  9905                           
  9906                           ;interrupt_manager.c: 70: else if(INTCONbits.PEIE == 1 && PIE4bits.CCP1IE == 1 && PIR4bi
      +                          ts.CCP1IF == 1)
  9907  0035  1F0B               	btfss	11,6	;volatile
  9908  0036  2841               	goto	i1l438
  9909  0037  0021               	movlb	1	; select bank1
  9910  0038  1C14               	btfss	20,0	;volatile
  9911  0039  2841               	goto	i1l438
  9912  003A  0020               	movlb	0	; select bank0
  9913  003B  1C14               	btfss	20,0	;volatile
  9914  003C  2841               	goto	i1l438
  9915                           
  9916                           ;interrupt_manager.c: 71: {
  9917                           ;interrupt_manager.c: 72: CCP1_CaptureISR();
  9918  003D  318E  26FC  3180   	fcall	_CCP1_CaptureISR
  9919                           
  9920                           ;interrupt_manager.c: 73: }
  9921  0040  2849               	goto	i1l442
  9922  0041                     i1l438:	
  9923                           
  9924                           ;interrupt_manager.c: 74: else if(PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1)
  9925  0041  0021               	movlb	1	; select bank1
  9926  0042  1E10               	btfss	16,4	;volatile
  9927  0043  2849               	goto	i1l442
  9928  0044  0020               	movlb	0	; select bank0
  9929  0045  1E10               	btfss	16,4	;volatile
  9930  0046  2849               	goto	i1l442
  9931                           
  9932                           ;interrupt_manager.c: 75: {
  9933                           ;interrupt_manager.c: 76: PIN_MANAGER_IOC();
  9934  0047  318D  25C1         	fcall	_PIN_MANAGER_IOC
  9935  0049                     i1l442:	
  9936                           ;interrupt_manager.c: 78: else
  9937                           ;interrupt_manager.c: 79: {
  9938                           
  9939                           ;interrupt_manager.c: 77: }
  9940                           
  9941  0049  0020               	movlb	0	; select bank0
  9942  004A  083D               	movf	??_INTERRUPT_InterruptManager,w
  9943  004B  00FF               	movwf	127
  9944  004C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9945  004D  0009               	retfie
  9946  004E                     __end_of_INTERRUPT_InterruptManager:	
  9947                           
  9948                           	psect	text43
  9949  0ED4                     __ptext43:	
  9950 ;; *************** function _TMR5_ISR *****************
  9951 ;; Defined at:
  9952 ;;		line 156 in file "mcc_generated_files/tmr5.c"
  9953 ;; Parameters:    Size  Location     Type
  9954 ;;		None
  9955 ;; Auto vars:     Size  Location     Type
  9956 ;;		None
  9957 ;; Return value:  Size  Location     Type
  9958 ;;                  1    wreg      void 
  9959 ;; Registers used:
  9960 ;;		wreg, status,2, status,0, pclath, cstack
  9961 ;; Tracked objects:
  9962 ;;		On entry : 0/0
  9963 ;;		On exit  : 0/0
  9964 ;;		Unchanged: 0/0
  9965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9966 ;;      Params:         0       0       0       0       0       0       0       0
  9967 ;;      Locals:         0       0       0       0       0       0       0       0
  9968 ;;      Temps:          0       0       0       0       0       0       0       0
  9969 ;;      Totals:         0       0       0       0       0       0       0       0
  9970 ;;Total ram usage:        0 bytes
  9971 ;; Hardware stack levels used:    1
  9972 ;; Hardware stack levels required when called:    2
  9973 ;; This function calls:
  9974 ;;		Absolute function
  9975 ;;		_TMR5_DefaultInterruptHandler
  9976 ;; This function is called by:
  9977 ;;		_INTERRUPT_InterruptManager
  9978 ;; This function uses a non-reentrant model
  9979 ;;
  9980                           
  9981                           
  9982                           ;psect for function _TMR5_ISR
  9983  0ED4                     _TMR5_ISR:	
  9984                           
  9985                           ;tmr5.c: 160: PIR4bits.TMR5IF = 0;
  9986                           
  9987                           ;incstack = 0
  9988                           ; Regs used in _TMR5_ISR: [wreg+status,2+status,0+pclath+cstack]
  9989  0ED4  0020               	movlb	0	; select bank0
  9990  0ED5  1214               	bcf	20,4	;volatile
  9991                           
  9992                           ;tmr5.c: 162: TMR5H = (timer5ReloadVal >> 8);
  9993  0ED6  085E               	movf	_timer5ReloadVal+1,w	;volatile
  9994  0ED7  0028               	movlb	8	; select bank8
  9995  0ED8  0099               	movwf	25	;volatile
  9996                           
  9997                           ;tmr5.c: 163: TMR5L = timer5ReloadVal;
  9998  0ED9  0020               	movlb	0	; select bank0
  9999  0EDA  085D               	movf	_timer5ReloadVal,w	;volatile
 10000  0EDB  0028               	movlb	8	; select bank8
 10001  0EDC  0098               	movwf	24	;volatile
 10002                           
 10003                           ;tmr5.c: 165: if(TMR5_InterruptHandler)
 10004  0EDD  0021               	movlb	1	; select bank1
 10005  0EDE  085D               	movf	_TMR5_InterruptHandler^(0+128),w
 10006  0EDF  045E               	iorwf	(_TMR5_InterruptHandler+1)^(0+128),w
 10007  0EE0  1903               	btfsc	3,2
 10008  0EE1  0008               	return
 10009                           
 10010                           ;tmr5.c: 166: {
 10011                           ;tmr5.c: 167: TMR5_InterruptHandler();
 10012  0EE2  085E               	movf	(_TMR5_InterruptHandler+1)^(0+128),w
 10013  0EE3  008A               	movwf	10
 10014  0EE4  085D               	movf	_TMR5_InterruptHandler^(0+128),w
 10015  0EE5  000A               	callw
 10016  0EE6  318E               	pagesel	$
 10017  0EE7  0008               	return
 10018  0EE8                     __end_of_TMR5_ISR:	
 10019                           
 10020                           	psect	text44
 10021  0D0D                     __ptext44:	
 10022 ;; *************** function _TMR5_DefaultInterruptHandler *****************
 10023 ;; Defined at:
 10024 ;;		line 176 in file "mcc_generated_files/tmr5.c"
 10025 ;; Parameters:    Size  Location     Type
 10026 ;;		None
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;		None
 10029 ;; Return value:  Size  Location     Type
 10030 ;;                  1    wreg      void 
 10031 ;; Registers used:
 10032 ;;		status,2, status,0, pclath, cstack
 10033 ;; Tracked objects:
 10034 ;;		On entry : 0/0
 10035 ;;		On exit  : 0/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10038 ;;      Params:         0       0       0       0       0       0       0       0
 10039 ;;      Locals:         0       0       0       0       0       0       0       0
 10040 ;;      Temps:          0       0       0       0       0       0       0       0
 10041 ;;      Totals:         0       0       0       0       0       0       0       0
 10042 ;;Total ram usage:        0 bytes
 10043 ;; Hardware stack levels used:    1
 10044 ;; Hardware stack levels required when called:    1
 10045 ;; This function calls:
 10046 ;;		_Timer5_Overflow
 10047 ;; This function is called by:
 10048 ;;		_TMR5_Initialize
 10049 ;;		_TMR5_ISR
 10050 ;; This function uses a non-reentrant model
 10051 ;;
 10052                           
 10053                           
 10054                           ;psect for function _TMR5_DefaultInterruptHandler
 10055  0D0D                     _TMR5_DefaultInterruptHandler:	
 10056                           
 10057                           ;tmr5.c: 178: Timer5_Overflow();
 10058                           
 10059                           ;incstack = 0
 10060                           ; Regs used in _TMR5_DefaultInterruptHandler: [status,2+status,0+pclath+cstack]
 10061  0D0D  3180  2003         	fcall	_Timer5_Overflow
 10062  0D0F  0008               	return
 10063  0D10                     __end_of_TMR5_DefaultInterruptHandler:	
 10064                           
 10065                           	psect	text45
 10066  0003                     __ptext45:	
 10067 ;; *************** function _Timer5_Overflow *****************
 10068 ;; Defined at:
 10069 ;;		line 644 in file "main.c"
 10070 ;; Parameters:    Size  Location     Type
 10071 ;;		None
 10072 ;; Auto vars:     Size  Location     Type
 10073 ;;		None
 10074 ;; Return value:  Size  Location     Type
 10075 ;;                  1    wreg      void 
 10076 ;; Registers used:
 10077 ;;		None
 10078 ;; Tracked objects:
 10079 ;;		On entry : 0/0
 10080 ;;		On exit  : 0/0
 10081 ;;		Unchanged: 0/0
 10082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10083 ;;      Params:         0       0       0       0       0       0       0       0
 10084 ;;      Locals:         0       0       0       0       0       0       0       0
 10085 ;;      Temps:          0       0       0       0       0       0       0       0
 10086 ;;      Totals:         0       0       0       0       0       0       0       0
 10087 ;;Total ram usage:        0 bytes
 10088 ;; Hardware stack levels used:    1
 10089 ;; This function calls:
 10090 ;;		Nothing
 10091 ;; This function is called by:
 10092 ;;		_TMR5_DefaultInterruptHandler
 10093 ;; This function uses a non-reentrant model
 10094 ;;
 10095                           
 10096                           
 10097                           ;psect for function _Timer5_Overflow
 10098  0003                     _Timer5_Overflow:	
 10099                           
 10100                           ;incstack = 0
 10101                           ; Regs used in _Timer5_Overflow: []
 10102  0003  0008               	return
 10103  0004                     __end_of_Timer5_Overflow:	
 10104                           
 10105                           	psect	text46
 10106  0EC0                     __ptext46:	
 10107 ;; *************** function _TMR3_ISR *****************
 10108 ;; Defined at:
 10109 ;;		line 156 in file "mcc_generated_files/tmr3.c"
 10110 ;; Parameters:    Size  Location     Type
 10111 ;;		None
 10112 ;; Auto vars:     Size  Location     Type
 10113 ;;		None
 10114 ;; Return value:  Size  Location     Type
 10115 ;;                  1    wreg      void 
 10116 ;; Registers used:
 10117 ;;		wreg, status,2, status,0, pclath, cstack
 10118 ;; Tracked objects:
 10119 ;;		On entry : 0/0
 10120 ;;		On exit  : 0/0
 10121 ;;		Unchanged: 0/0
 10122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10123 ;;      Params:         0       0       0       0       0       0       0       0
 10124 ;;      Locals:         0       0       0       0       0       0       0       0
 10125 ;;      Temps:          0       0       0       0       0       0       0       0
 10126 ;;      Totals:         0       0       0       0       0       0       0       0
 10127 ;;Total ram usage:        0 bytes
 10128 ;; Hardware stack levels used:    1
 10129 ;; Hardware stack levels required when called:    2
 10130 ;; This function calls:
 10131 ;;		Absolute function
 10132 ;;		_TMR3_DefaultInterruptHandler
 10133 ;; This function is called by:
 10134 ;;		_INTERRUPT_InterruptManager
 10135 ;; This function uses a non-reentrant model
 10136 ;;
 10137                           
 10138                           
 10139                           ;psect for function _TMR3_ISR
 10140  0EC0                     _TMR3_ISR:	
 10141                           
 10142                           ;tmr3.c: 160: PIR3bits.TMR3IF = 0;
 10143                           
 10144                           ;incstack = 0
 10145                           ; Regs used in _TMR3_ISR: [wreg+status,2+status,0+pclath+cstack]
 10146  0EC0  0020               	movlb	0	; select bank0
 10147  0EC1  1213               	bcf	19,4	;volatile
 10148                           
 10149                           ;tmr3.c: 162: TMR3H = (timer3ReloadVal >> 8);
 10150  0EC2  085C               	movf	_timer3ReloadVal+1,w	;volatile
 10151  0EC3  0028               	movlb	8	; select bank8
 10152  0EC4  0092               	movwf	18	;volatile
 10153                           
 10154                           ;tmr3.c: 163: TMR3L = timer3ReloadVal;
 10155  0EC5  0020               	movlb	0	; select bank0
 10156  0EC6  085B               	movf	_timer3ReloadVal,w	;volatile
 10157  0EC7  0028               	movlb	8	; select bank8
 10158  0EC8  0091               	movwf	17	;volatile
 10159                           
 10160                           ;tmr3.c: 165: if(TMR3_InterruptHandler)
 10161  0EC9  0021               	movlb	1	; select bank1
 10162  0ECA  085B               	movf	_TMR3_InterruptHandler^(0+128),w
 10163  0ECB  045C               	iorwf	(_TMR3_InterruptHandler+1)^(0+128),w
 10164  0ECC  1903               	btfsc	3,2
 10165  0ECD  0008               	return
 10166                           
 10167                           ;tmr3.c: 166: {
 10168                           ;tmr3.c: 167: TMR3_InterruptHandler();
 10169  0ECE  085C               	movf	(_TMR3_InterruptHandler+1)^(0+128),w
 10170  0ECF  008A               	movwf	10
 10171  0ED0  085B               	movf	_TMR3_InterruptHandler^(0+128),w
 10172  0ED1  000A               	callw
 10173  0ED2  318E               	pagesel	$
 10174  0ED3  0008               	return
 10175  0ED4                     __end_of_TMR3_ISR:	
 10176                           
 10177                           	psect	text47
 10178  0D0A                     __ptext47:	
 10179 ;; *************** function _TMR3_DefaultInterruptHandler *****************
 10180 ;; Defined at:
 10181 ;;		line 176 in file "mcc_generated_files/tmr3.c"
 10182 ;; Parameters:    Size  Location     Type
 10183 ;;		None
 10184 ;; Auto vars:     Size  Location     Type
 10185 ;;		None
 10186 ;; Return value:  Size  Location     Type
 10187 ;;                  1    wreg      void 
 10188 ;; Registers used:
 10189 ;;		wreg, status,2, status,0, pclath, cstack
 10190 ;; Tracked objects:
 10191 ;;		On entry : 0/0
 10192 ;;		On exit  : 0/0
 10193 ;;		Unchanged: 0/0
 10194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10195 ;;      Params:         0       0       0       0       0       0       0       0
 10196 ;;      Locals:         0       0       0       0       0       0       0       0
 10197 ;;      Temps:          0       0       0       0       0       0       0       0
 10198 ;;      Totals:         0       0       0       0       0       0       0       0
 10199 ;;Total ram usage:        0 bytes
 10200 ;; Hardware stack levels used:    1
 10201 ;; Hardware stack levels required when called:    1
 10202 ;; This function calls:
 10203 ;;		_Timer3_Overflow
 10204 ;; This function is called by:
 10205 ;;		_TMR3_Initialize
 10206 ;;		_TMR3_ISR
 10207 ;; This function uses a non-reentrant model
 10208 ;;
 10209                           
 10210                           
 10211                           ;psect for function _TMR3_DefaultInterruptHandler
 10212  0D0A                     _TMR3_DefaultInterruptHandler:	
 10213                           
 10214                           ;tmr3.c: 178: Timer3_Overflow();
 10215                           
 10216                           ;incstack = 0
 10217                           ; Regs used in _TMR3_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 10218  0D0A  3187  2762         	fcall	_Timer3_Overflow
 10219  0D0C  0008               	return
 10220  0D0D                     __end_of_TMR3_DefaultInterruptHandler:	
 10221                           
 10222                           	psect	text48
 10223  0762                     __ptext48:	
 10224 ;; *************** function _Timer3_Overflow *****************
 10225 ;; Defined at:
 10226 ;;		line 637 in file "main.c"
 10227 ;; Parameters:    Size  Location     Type
 10228 ;;		None
 10229 ;; Auto vars:     Size  Location     Type
 10230 ;;		None
 10231 ;; Return value:  Size  Location     Type
 10232 ;;                  1    wreg      void 
 10233 ;; Registers used:
 10234 ;;		wreg, status,2, status,0
 10235 ;; Tracked objects:
 10236 ;;		On entry : 0/0
 10237 ;;		On exit  : 0/0
 10238 ;;		Unchanged: 0/0
 10239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10240 ;;      Params:         0       0       0       0       0       0       0       0
 10241 ;;      Locals:         0       0       0       0       0       0       0       0
 10242 ;;      Temps:          4       0       0       0       0       0       0       0
 10243 ;;      Totals:         4       0       0       0       0       0       0       0
 10244 ;;Total ram usage:        4 bytes
 10245 ;; Hardware stack levels used:    1
 10246 ;; This function calls:
 10247 ;;		Nothing
 10248 ;; This function is called by:
 10249 ;;		_TMR3_DefaultInterruptHandler
 10250 ;; This function uses a non-reentrant model
 10251 ;;
 10252                           
 10253                           
 10254                           ;psect for function _Timer3_Overflow
 10255  0762                     _Timer3_Overflow:	
 10256                           
 10257                           ;main.c: 639: EncEdgeTimeInterval= EncEdgeTimeInterval + 0x0000FFFF;
 10258                           
 10259                           ;incstack = 0
 10260                           ; Regs used in _Timer3_Overflow: [wreg+status,2+status,0]
 10261  0762  30FF               	movlw	255
 10262  0763  00F0               	movwf	??_Timer3_Overflow
 10263  0764  30FF               	movlw	255
 10264  0765  00F1               	movwf	??_Timer3_Overflow+1
 10265  0766  3000               	movlw	0
 10266  0767  00F2               	movwf	??_Timer3_Overflow+2
 10267  0768  3000               	movlw	0
 10268  0769  00F3               	movwf	??_Timer3_Overflow+3
 10269  076A  0020               	movlb	0	; select bank0
 10270  076B  083E               	movf	_EncEdgeTimeInterval,w
 10271  076C  07F0               	addwf	??_Timer3_Overflow,f
 10272  076D  083F               	movf	_EncEdgeTimeInterval+1,w
 10273  076E  3DF1               	addwfc	??_Timer3_Overflow+1,f
 10274  076F  0840               	movf	_EncEdgeTimeInterval+2,w
 10275  0770  3DF2               	addwfc	??_Timer3_Overflow+2,f
 10276  0771  0841               	movf	_EncEdgeTimeInterval+3,w
 10277  0772  3DF3               	addwfc	??_Timer3_Overflow+3,f
 10278  0773  0873               	movf	??_Timer3_Overflow+3,w
 10279  0774  00C1               	movwf	_EncEdgeTimeInterval+3
 10280  0775  0872               	movf	??_Timer3_Overflow+2,w
 10281  0776  00C0               	movwf	_EncEdgeTimeInterval+2
 10282  0777  0871               	movf	??_Timer3_Overflow+1,w
 10283  0778  00BF               	movwf	_EncEdgeTimeInterval+1
 10284  0779  0870               	movf	??_Timer3_Overflow,w
 10285  077A  00BE               	movwf	_EncEdgeTimeInterval
 10286                           
 10287                           ;main.c: 640: if(EncEdgeTimeInterval >0xEFFFFFFF)
 10288  077B  30F0               	movlw	240
 10289  077C  0241               	subwf	_EncEdgeTimeInterval+3,w
 10290  077D  1C03               	btfss	3,0
 10291  077E  0008               	return
 10292                           
 10293                           ;main.c: 641: EncEdgeTimeInterval=0xEFFFFFFF;
 10294  077F  30EF               	movlw	239
 10295  0780  00C1               	movwf	_EncEdgeTimeInterval+3
 10296  0781  30FF               	movlw	255
 10297  0782  00C0               	movwf	_EncEdgeTimeInterval+2
 10298  0783  30FF               	movlw	255
 10299  0784  00BF               	movwf	_EncEdgeTimeInterval+1
 10300  0785  30FF               	movlw	255
 10301  0786  00BE               	movwf	_EncEdgeTimeInterval
 10302  0787  0008               	return
 10303  0788                     __end_of_Timer3_Overflow:	
 10304                           
 10305                           	psect	text49
 10306  0D2B                     __ptext49:	
 10307 ;; *************** function _TMR0_ISR *****************
 10308 ;; Defined at:
 10309 ;;		line 123 in file "mcc_generated_files/tmr0.c"
 10310 ;; Parameters:    Size  Location     Type
 10311 ;;		None
 10312 ;; Auto vars:     Size  Location     Type
 10313 ;;		None
 10314 ;; Return value:  Size  Location     Type
 10315 ;;                  1    wreg      void 
 10316 ;; Registers used:
 10317 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10318 ;; Tracked objects:
 10319 ;;		On entry : 0/0
 10320 ;;		On exit  : 0/0
 10321 ;;		Unchanged: 0/0
 10322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10323 ;;      Params:         0       0       0       0       0       0       0       0
 10324 ;;      Locals:         0       0       0       0       0       0       0       0
 10325 ;;      Temps:          0       0       0       0       0       0       0       0
 10326 ;;      Totals:         0       0       0       0       0       0       0       0
 10327 ;;Total ram usage:        0 bytes
 10328 ;; Hardware stack levels used:    1
 10329 ;; Hardware stack levels required when called:    3
 10330 ;; This function calls:
 10331 ;;		_TMR0_CallBack
 10332 ;; This function is called by:
 10333 ;;		_INTERRUPT_InterruptManager
 10334 ;; This function uses a non-reentrant model
 10335 ;;
 10336                           
 10337                           
 10338                           ;psect for function _TMR0_ISR
 10339  0D2B                     _TMR0_ISR:	
 10340                           
 10341                           ;tmr0.c: 126: PIR0bits.TMR0IF = 0;
 10342                           
 10343                           ;incstack = 0
 10344                           ; Regs used in _TMR0_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10345  0D2B  0020               	movlb	0	; select bank0
 10346  0D2C  1290               	bcf	16,5	;volatile
 10347                           
 10348                           ;tmr0.c: 129: TMR0_CallBack();
 10349  0D2D  318E  2642         	fcall	_TMR0_CallBack
 10350  0D2F  0008               	return
 10351  0D30                     __end_of_TMR0_ISR:	
 10352                           
 10353                           	psect	text50
 10354  0E42                     __ptext50:	
 10355 ;; *************** function _TMR0_CallBack *****************
 10356 ;; Defined at:
 10357 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 10358 ;; Parameters:    Size  Location     Type
 10359 ;;		None
 10360 ;; Auto vars:     Size  Location     Type
 10361 ;;		None
 10362 ;; Return value:  Size  Location     Type
 10363 ;;                  1    wreg      void 
 10364 ;; Registers used:
 10365 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10366 ;; Tracked objects:
 10367 ;;		On entry : 0/0
 10368 ;;		On exit  : 0/0
 10369 ;;		Unchanged: 0/0
 10370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10371 ;;      Params:         0       0       0       0       0       0       0       0
 10372 ;;      Locals:         0       0       0       0       0       0       0       0
 10373 ;;      Temps:          0       0       0       0       0       0       0       0
 10374 ;;      Totals:         0       0       0       0       0       0       0       0
 10375 ;;Total ram usage:        0 bytes
 10376 ;; Hardware stack levels used:    1
 10377 ;; Hardware stack levels required when called:    2
 10378 ;; This function calls:
 10379 ;;		Absolute function
 10380 ;;		_TMR0_DefaultInterruptHandler
 10381 ;;		_Timer0_tick10msecFunc
 10382 ;; This function is called by:
 10383 ;;		_TMR0_ISR
 10384 ;; This function uses a non-reentrant model
 10385 ;;
 10386                           
 10387                           
 10388                           ;psect for function _TMR0_CallBack
 10389  0E42                     _TMR0_CallBack:	
 10390                           
 10391                           ;tmr0.c: 137: Timer0_tick10msecFunc();
 10392                           
 10393                           ;incstack = 0
 10394                           ; Regs used in _TMR0_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10395  0E42  3187  2788  318E   	fcall	_Timer0_tick10msecFunc
 10396                           
 10397                           ;tmr0.c: 139: if(TMR0_InterruptHandler)
 10398  0E45  0021               	movlb	1	; select bank1
 10399  0E46  0859               	movf	_TMR0_InterruptHandler^(0+128),w
 10400  0E47  045A               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 10401  0E48  1903               	btfsc	3,2
 10402  0E49  0008               	return
 10403                           
 10404                           ;tmr0.c: 140: {
 10405                           ;tmr0.c: 141: TMR0_InterruptHandler();
 10406  0E4A  085A               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 10407  0E4B  008A               	movwf	10
 10408  0E4C  0859               	movf	_TMR0_InterruptHandler^(0+128),w
 10409  0E4D  000A               	callw
 10410  0E4E  318E               	pagesel	$
 10411  0E4F  0008               	return
 10412  0E50                     __end_of_TMR0_CallBack:	
 10413                           
 10414                           	psect	text51
 10415  0788                     __ptext51:	
 10416 ;; *************** function _Timer0_tick10msecFunc *****************
 10417 ;; Defined at:
 10418 ;;		line 649 in file "main.c"
 10419 ;; Parameters:    Size  Location     Type
 10420 ;;		None
 10421 ;; Auto vars:     Size  Location     Type
 10422 ;;		None
 10423 ;; Return value:  Size  Location     Type
 10424 ;;                  1    wreg      void 
 10425 ;; Registers used:
 10426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10427 ;; Tracked objects:
 10428 ;;		On entry : 0/0
 10429 ;;		On exit  : 0/0
 10430 ;;		Unchanged: 0/0
 10431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10432 ;;      Params:         0       0       0       0       0       0       0       0
 10433 ;;      Locals:         0       0       0       0       0       0       0       0
 10434 ;;      Temps:          4       0       0       0       0       0       0       0
 10435 ;;      Totals:         4       0       0       0       0       0       0       0
 10436 ;;Total ram usage:        4 bytes
 10437 ;; Hardware stack levels used:    1
 10438 ;; Hardware stack levels required when called:    1
 10439 ;; This function calls:
 10440 ;;		_LedON_Control_10msec
 10441 ;; This function is called by:
 10442 ;;		_TMR0_CallBack
 10443 ;; This function uses a non-reentrant model
 10444 ;;
 10445                           
 10446                           
 10447                           ;psect for function _Timer0_tick10msecFunc
 10448  0788                     _Timer0_tick10msecFunc:	
 10449                           
 10450                           ;main.c: 651: LedON_Control_10msec();
 10451                           
 10452                           ;incstack = 0
 10453                           ; Regs used in _Timer0_tick10msecFunc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10454  0788  3185  2531  3187   	fcall	_LedON_Control_10msec
 10455                           
 10456                           ;main.c: 653: TimertickMsec= TimertickMsec+5;
 10457  078B  3005               	movlw	5
 10458  078C  00F0               	movwf	??_Timer0_tick10msecFunc
 10459  078D  3000               	movlw	0
 10460  078E  00F1               	movwf	??_Timer0_tick10msecFunc+1
 10461  078F  3000               	movlw	0
 10462  0790  00F2               	movwf	??_Timer0_tick10msecFunc+2
 10463  0791  3000               	movlw	0
 10464  0792  00F3               	movwf	??_Timer0_tick10msecFunc+3
 10465  0793  0021               	movlb	1	; select bank1
 10466  0794  0820               	movf	_TimertickMsec^(0+128),w
 10467  0795  07F0               	addwf	??_Timer0_tick10msecFunc,f
 10468  0796  0821               	movf	(_TimertickMsec+1)^(0+128),w
 10469  0797  3DF1               	addwfc	??_Timer0_tick10msecFunc+1,f
 10470  0798  0822               	movf	(_TimertickMsec+2)^(0+128),w
 10471  0799  3DF2               	addwfc	??_Timer0_tick10msecFunc+2,f
 10472  079A  0823               	movf	(_TimertickMsec+3)^(0+128),w
 10473  079B  3DF3               	addwfc	??_Timer0_tick10msecFunc+3,f
 10474  079C  0873               	movf	??_Timer0_tick10msecFunc+3,w
 10475  079D  00A3               	movwf	(_TimertickMsec+3)^(0+128)
 10476  079E  0872               	movf	??_Timer0_tick10msecFunc+2,w
 10477  079F  00A2               	movwf	(_TimertickMsec+2)^(0+128)
 10478  07A0  0871               	movf	??_Timer0_tick10msecFunc+1,w
 10479  07A1  00A1               	movwf	(_TimertickMsec+1)^(0+128)
 10480  07A2  0870               	movf	??_Timer0_tick10msecFunc,w
 10481  07A3  00A0               	movwf	_TimertickMsec^(0+128)
 10482                           
 10483                           ;main.c: 655: if(delayFlag==1)
 10484  07A4  0020               	movlb	0	; select bank0
 10485  07A5  034D               	decf	_delayFlag,w
 10486  07A6  1D03               	btfss	3,2
 10487  07A7  0008               	return
 10488                           
 10489                           ;main.c: 656: delayCount+=5;
 10490  07A8  3005               	movlw	5
 10491  07A9  0021               	movlb	1	; select bank1
 10492  07AA  07C4               	addwf	_delayCount^(0+128),f
 10493  07AB  3000               	movlw	0
 10494  07AC  3DC5               	addwfc	(_delayCount+1)^(0+128),f
 10495  07AD  0008               	return
 10496  07AE                     __end_of_Timer0_tick10msecFunc:	
 10497                           
 10498                           	psect	text52
 10499  0531                     __ptext52:	
 10500 ;; *************** function _LedON_Control_10msec *****************
 10501 ;; Defined at:
 10502 ;;		line 54 in file "LED_Ctrl.c"
 10503 ;; Parameters:    Size  Location     Type
 10504 ;;		None
 10505 ;; Auto vars:     Size  Location     Type
 10506 ;;		None
 10507 ;; Return value:  Size  Location     Type
 10508 ;;                  1    wreg      void 
 10509 ;; Registers used:
 10510 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10511 ;; Tracked objects:
 10512 ;;		On entry : 0/0
 10513 ;;		On exit  : 0/0
 10514 ;;		Unchanged: 0/0
 10515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10516 ;;      Params:         0       0       0       0       0       0       0       0
 10517 ;;      Locals:         0       0       0       0       0       0       0       0
 10518 ;;      Temps:          0       0       0       0       0       0       0       0
 10519 ;;      Totals:         0       0       0       0       0       0       0       0
 10520 ;;Total ram usage:        0 bytes
 10521 ;; Hardware stack levels used:    1
 10522 ;; This function calls:
 10523 ;;		Nothing
 10524 ;; This function is called by:
 10525 ;;		_Timer0_tick10msecFunc
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           
 10530                           ;psect for function _LedON_Control_10msec
 10531  0531                     _LedON_Control_10msec:	
 10532                           
 10533                           ;LED_Ctrl.c: 56: if(1==Led_ON)
 10534                           
 10535                           ;incstack = 0
 10536                           ; Regs used in _LedON_Control_10msec: [wreg-fsr0h+status,2+status,0]
 10537  0531  0020               	movlb	0	; select bank0
 10538  0532  034A               	decf	_Led_ON,w
 10539  0533  1D03               	btfss	3,2
 10540  0534  0008               	return
 10541                           
 10542                           ;LED_Ctrl.c: 57: {
 10543                           ;LED_Ctrl.c: 59: if(LED_msec_Cnt >= Blick_tickPoint)
 10544  0535  0021               	movlb	1	; select bank1
 10545  0536  0833               	movf	(_Blick_tickPoint+1)^(0+128),w
 10546  0537  0237               	subwf	(_LED_msec_Cnt+1)^(0+128),w
 10547  0538  1D03               	skipz
 10548  0539  2D3C               	goto	u193_25
 10549  053A  0832               	movf	_Blick_tickPoint^(0+128),w
 10550  053B  0236               	subwf	_LED_msec_Cnt^(0+128),w
 10551  053C                     u193_25:	
 10552  053C  1803               	btfsc	3,0
 10553  053D  2D63               	goto	i1l3591
 10554  053E  2D76               	goto	i1l3595
 10555  053F                     i1l3583:	
 10556                           ;LED_Ctrl.c: 62: {
 10557                           ;LED_Ctrl.c: 63: case 0 : do { LATCbits.LATC0 = ~LATCbits.LATC0; } while(0);
 10558                           
 10559                           ;LED_Ctrl.c: 60: {
 10560                           ;LED_Ctrl.c: 61: switch(LED_Color)
 10561                           
 10562  053F  1003               	clrc
 10563  0540  0022               	movlb	2	; select bank2
 10564  0541  1C0E               	btfss	14,0	;volatile
 10565  0542  1403               	setc
 10566  0543  1C03               	btfss	3,0
 10567  0544  2D48               	goto	u194_20
 10568  0545  0022               	movlb	2	; select bank2
 10569  0546  140E               	bsf	14,0	;volatile
 10570  0547  2D6F               	goto	i1l3593
 10571  0548                     u194_20:	
 10572  0548  0022               	movlb	2	; select bank2
 10573  0549  100E               	bcf	14,0	;volatile
 10574                           
 10575                           ;LED_Ctrl.c: 64: break;
 10576  054A  2D6F               	goto	i1l3593
 10577  054B                     i1l3585:	
 10578                           ;LED_Ctrl.c: 65: case 1 : do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
 10579                           
 10580  054B  1003               	clrc
 10581  054C  0022               	movlb	2	; select bank2
 10582  054D  1C8E               	btfss	14,1	;volatile
 10583  054E  1403               	setc
 10584  054F  1C03               	btfss	3,0
 10585  0550  2D54               	goto	u196_20
 10586  0551  0022               	movlb	2	; select bank2
 10587  0552  148E               	bsf	14,1	;volatile
 10588  0553  2D6F               	goto	i1l3593
 10589  0554                     u196_20:	
 10590  0554  0022               	movlb	2	; select bank2
 10591  0555  108E               	bcf	14,1	;volatile
 10592                           
 10593                           ;LED_Ctrl.c: 66: break;
 10594  0556  2D6F               	goto	i1l3593
 10595  0557                     i1l3587:	
 10596                           ;LED_Ctrl.c: 67: case 2 : do { LATCbits.LATC2 = ~LATCbits.LATC2; } while(0);
 10597                           
 10598  0557  1003               	clrc
 10599  0558  0022               	movlb	2	; select bank2
 10600  0559  1D0E               	btfss	14,2	;volatile
 10601  055A  1403               	setc
 10602  055B  1C03               	btfss	3,0
 10603  055C  2D60               	goto	u198_20
 10604  055D  0022               	movlb	2	; select bank2
 10605  055E  150E               	bsf	14,2	;volatile
 10606  055F  2D6F               	goto	i1l3593
 10607  0560                     u198_20:	
 10608  0560  0022               	movlb	2	; select bank2
 10609  0561  110E               	bcf	14,2	;volatile
 10610                           
 10611                           ;LED_Ctrl.c: 70: }
 10612                           
 10613                           ;LED_Ctrl.c: 69: default : break;
 10614                           
 10615                           ;LED_Ctrl.c: 68: break;
 10616  0562  2D6F               	goto	i1l3593
 10617  0563                     i1l3591:	
 10618  0563  0020               	movlb	0	; select bank0
 10619  0564  085A               	movf	_LED_Color,w
 10620                           
 10621                           ; Switch size 1, requested type "space"
 10622                           ; Number of cases is 3, Range of values is 0 to 2
 10623                           ; switch strategies available:
 10624                           ; Name         Instructions Cycles
 10625                           ; simple_byte           10     6 (average)
 10626                           ; direct_byte           12     6 (fixed)
 10627                           ; jumptable            260     6 (fixed)
 10628                           ;	Chosen strategy is simple_byte
 10629  0565  3A00               	xorlw	0	; case 0
 10630  0566  1903               	skipnz
 10631  0567  2D3F               	goto	i1l3583
 10632  0568  3A01               	xorlw	1	; case 1
 10633  0569  1903               	skipnz
 10634  056A  2D4B               	goto	i1l3585
 10635  056B  3A03               	xorlw	3	; case 2
 10636  056C  1903               	skipnz
 10637  056D  2D57               	goto	i1l3587
 10638  056E  2D6F               	goto	i1l3593
 10639  056F                     i1l3593:	
 10640                           
 10641                           ;LED_Ctrl.c: 73: Blick_tickPoint=Blick_tickPoint+Blick_tickPointMsec;
 10642  056F  0021               	movlb	1	; select bank1
 10643  0570  0834               	movf	_Blick_tickPointMsec^(0+128),w
 10644  0571  0732               	addwf	_Blick_tickPoint^(0+128),w
 10645  0572  00B2               	movwf	_Blick_tickPoint^(0+128)
 10646  0573  0835               	movf	(_Blick_tickPointMsec+1)^(0+128),w
 10647  0574  3D33               	addwfc	(_Blick_tickPoint+1)^(0+128),w
 10648  0575  00B3               	movwf	(_Blick_tickPoint+1)^(0+128)
 10649  0576                     i1l3595:	
 10650                           
 10651                           ;LED_Ctrl.c: 75: }
 10652                           ;LED_Ctrl.c: 77: if(LED_msec_Cnt > LedON_Duration_msec)
 10653  0576  0837               	movf	(_LED_msec_Cnt+1)^(0+128),w
 10654  0577  0231               	subwf	(_LedON_Duration_msec+1)^(0+128),w
 10655  0578  1D03               	skipz
 10656  0579  2D7C               	goto	u200_25
 10657  057A  0836               	movf	_LED_msec_Cnt^(0+128),w
 10658  057B  0230               	subwf	_LedON_Duration_msec^(0+128),w
 10659  057C                     u200_25:	
 10660  057C  1C03               	btfss	3,0
 10661  057D  2D88               	goto	i1l3601
 10662  057E  2D99               	goto	i1l3605
 10663  057F                     i1l1205:	
 10664                           ;LED_Ctrl.c: 80: {
 10665                           ;LED_Ctrl.c: 81: case 0 : do { LATCbits.LATC0 = 0; } while(0);
 10666                           
 10667                           ;LED_Ctrl.c: 78: {
 10668                           ;LED_Ctrl.c: 79: switch(LED_Color)
 10669                           
 10670  057F  0022               	movlb	2	; select bank2
 10671  0580  100E               	bcf	14,0	;volatile
 10672                           
 10673                           ;LED_Ctrl.c: 82: break;
 10674  0581  2D94               	goto	i1l3603
 10675  0582                     i1l1209:	
 10676                           ;LED_Ctrl.c: 83: case 1 : do { LATCbits.LATC1 = 0; } while(0);
 10677                           
 10678  0582  0022               	movlb	2	; select bank2
 10679  0583  108E               	bcf	14,1	;volatile
 10680                           
 10681                           ;LED_Ctrl.c: 84: break;
 10682  0584  2D94               	goto	i1l3603
 10683  0585                     i1l1212:	
 10684                           ;LED_Ctrl.c: 85: case 2 : do { LATCbits.LATC2 = 0; } while(0);
 10685                           
 10686  0585  0022               	movlb	2	; select bank2
 10687  0586  110E               	bcf	14,2	;volatile
 10688                           
 10689                           ;LED_Ctrl.c: 88: }
 10690                           
 10691                           ;LED_Ctrl.c: 87: default : break;
 10692                           
 10693                           ;LED_Ctrl.c: 86: break;
 10694  0587  2D94               	goto	i1l3603
 10695  0588                     i1l3601:	
 10696  0588  0020               	movlb	0	; select bank0
 10697  0589  085A               	movf	_LED_Color,w
 10698                           
 10699                           ; Switch size 1, requested type "space"
 10700                           ; Number of cases is 3, Range of values is 0 to 2
 10701                           ; switch strategies available:
 10702                           ; Name         Instructions Cycles
 10703                           ; simple_byte           10     6 (average)
 10704                           ; direct_byte           12     6 (fixed)
 10705                           ; jumptable            260     6 (fixed)
 10706                           ;	Chosen strategy is simple_byte
 10707  058A  3A00               	xorlw	0	; case 0
 10708  058B  1903               	skipnz
 10709  058C  2D7F               	goto	i1l1205
 10710  058D  3A01               	xorlw	1	; case 1
 10711  058E  1903               	skipnz
 10712  058F  2D82               	goto	i1l1209
 10713  0590  3A03               	xorlw	3	; case 2
 10714  0591  1903               	skipnz
 10715  0592  2D85               	goto	i1l1212
 10716  0593  2D94               	goto	i1l3603
 10717  0594                     i1l3603:	
 10718                           
 10719                           ;LED_Ctrl.c: 90: Led_ON=0;
 10720  0594  0020               	movlb	0	; select bank0
 10721  0595  01CA               	clrf	_Led_ON
 10722                           
 10723                           ;LED_Ctrl.c: 91: LED_msec_Cnt=0;
 10724  0596  0021               	movlb	1	; select bank1
 10725  0597  01B6               	clrf	_LED_msec_Cnt^(0+128)
 10726  0598  01B7               	clrf	(_LED_msec_Cnt+1)^(0+128)
 10727  0599                     i1l3605:	
 10728                           
 10729                           ;LED_Ctrl.c: 92: }
 10730                           ;LED_Ctrl.c: 94: LED_msec_Cnt+=5;
 10731  0599  3005               	movlw	5
 10732  059A  07B6               	addwf	_LED_msec_Cnt^(0+128),f
 10733  059B  3000               	movlw	0
 10734  059C  3DB7               	addwfc	(_LED_msec_Cnt+1)^(0+128),f
 10735  059D  0008               	return
 10736  059E                     __end_of_LedON_Control_10msec:	
 10737                           
 10738                           	psect	text53
 10739  0002                     __ptext53:	
 10740 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 10741 ;; Defined at:
 10742 ;;		line 149 in file "mcc_generated_files/tmr0.c"
 10743 ;; Parameters:    Size  Location     Type
 10744 ;;		None
 10745 ;; Auto vars:     Size  Location     Type
 10746 ;;		None
 10747 ;; Return value:  Size  Location     Type
 10748 ;;                  1    wreg      void 
 10749 ;; Registers used:
 10750 ;;		None
 10751 ;; Tracked objects:
 10752 ;;		On entry : 0/0
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10756 ;;      Params:         0       0       0       0       0       0       0       0
 10757 ;;      Locals:         0       0       0       0       0       0       0       0
 10758 ;;      Temps:          0       0       0       0       0       0       0       0
 10759 ;;      Totals:         0       0       0       0       0       0       0       0
 10760 ;;Total ram usage:        0 bytes
 10761 ;; Hardware stack levels used:    1
 10762 ;; This function calls:
 10763 ;;		Nothing
 10764 ;; This function is called by:
 10765 ;;		_TMR0_Initialize
 10766 ;;		_TMR0_CallBack
 10767 ;; This function uses a non-reentrant model
 10768 ;;
 10769                           
 10770                           
 10771                           ;psect for function _TMR0_DefaultInterruptHandler
 10772  0002                     _TMR0_DefaultInterruptHandler:	
 10773                           
 10774                           ;incstack = 0
 10775                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 10776  0002  0008               	return
 10777  0003                     __end_of_TMR0_DefaultInterruptHandler:	
 10778                           
 10779                           	psect	text54
 10780  0DC1                     __ptext54:	
 10781 ;; *************** function _PIN_MANAGER_IOC *****************
 10782 ;; Defined at:
 10783 ;;		line 132 in file "mcc_generated_files/pin_manager.c"
 10784 ;; Parameters:    Size  Location     Type
 10785 ;;		None
 10786 ;; Auto vars:     Size  Location     Type
 10787 ;;		None
 10788 ;; Return value:  Size  Location     Type
 10789 ;;                  1    wreg      void 
 10790 ;; Registers used:
 10791 ;;		wreg, status,2, status,0, pclath, cstack
 10792 ;; Tracked objects:
 10793 ;;		On entry : 0/0
 10794 ;;		On exit  : 0/0
 10795 ;;		Unchanged: 0/0
 10796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10797 ;;      Params:         0       0       0       0       0       0       0       0
 10798 ;;      Locals:         0       0       0       0       0       0       0       0
 10799 ;;      Temps:          0       0       0       0       0       0       0       0
 10800 ;;      Totals:         0       0       0       0       0       0       0       0
 10801 ;;Total ram usage:        0 bytes
 10802 ;; Hardware stack levels used:    1
 10803 ;; Hardware stack levels required when called:    2
 10804 ;; This function calls:
 10805 ;;		_IOCCF4_ISR
 10806 ;;		_IOCCF5_ISR
 10807 ;; This function is called by:
 10808 ;;		_INTERRUPT_InterruptManager
 10809 ;; This function uses a non-reentrant model
 10810 ;;
 10811                           
 10812                           
 10813                           ;psect for function _PIN_MANAGER_IOC
 10814  0DC1                     _PIN_MANAGER_IOC:	
 10815                           
 10816                           ;pin_manager.c: 135: if(IOCCFbits.IOCCF4 == 1)
 10817                           
 10818                           ;incstack = 0
 10819                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 10820  0DC1  0027               	movlb	7	; select bank7
 10821  0DC2  1E19               	btfss	25,4	;volatile
 10822  0DC3  2DC7               	goto	i1l4403
 10823                           
 10824                           ;pin_manager.c: 136: {
 10825                           ;pin_manager.c: 137: IOCCF4_ISR();
 10826  0DC4  318D  25F1  318D   	fcall	_IOCCF4_ISR
 10827  0DC7                     i1l4403:	
 10828                           
 10829                           ;pin_manager.c: 138: }
 10830                           ;pin_manager.c: 141: if(IOCCFbits.IOCCF5 == 1)
 10831  0DC7  0027               	movlb	7	; select bank7
 10832  0DC8  1E99               	btfss	25,5	;volatile
 10833  0DC9  0008               	return
 10834                           
 10835                           ;pin_manager.c: 142: {
 10836                           ;pin_manager.c: 143: IOCCF5_ISR();
 10837  0DCA  318D  25FE         	fcall	_IOCCF5_ISR
 10838  0DCC  0008               	return
 10839  0DCD                     __end_of_PIN_MANAGER_IOC:	
 10840                           
 10841                           	psect	text55
 10842  0DFE                     __ptext55:	
 10843 ;; *************** function _IOCCF5_ISR *****************
 10844 ;; Defined at:
 10845 ;;		line 182 in file "mcc_generated_files/pin_manager.c"
 10846 ;; Parameters:    Size  Location     Type
 10847 ;;		None
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;		None
 10850 ;; Return value:  Size  Location     Type
 10851 ;;                  1    wreg      void 
 10852 ;; Registers used:
 10853 ;;		wreg, status,2, status,0, pclath, cstack
 10854 ;; Tracked objects:
 10855 ;;		On entry : 0/0
 10856 ;;		On exit  : 0/0
 10857 ;;		Unchanged: 0/0
 10858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10859 ;;      Params:         0       0       0       0       0       0       0       0
 10860 ;;      Locals:         0       0       0       0       0       0       0       0
 10861 ;;      Temps:          0       0       0       0       0       0       0       0
 10862 ;;      Totals:         0       0       0       0       0       0       0       0
 10863 ;;Total ram usage:        0 bytes
 10864 ;; Hardware stack levels used:    1
 10865 ;; Hardware stack levels required when called:    1
 10866 ;; This function calls:
 10867 ;;		Absolute function
 10868 ;;		_IOCCF5_DefaultInterruptHandler
 10869 ;; This function is called by:
 10870 ;;		_PIN_MANAGER_IOC
 10871 ;; This function uses a non-reentrant model
 10872 ;;
 10873                           
 10874                           
 10875                           ;psect for function _IOCCF5_ISR
 10876  0DFE                     _IOCCF5_ISR:	
 10877                           
 10878                           ;pin_manager.c: 187: if(IOCCF5_InterruptHandler)
 10879                           
 10880                           ;incstack = 0
 10881                           ; Regs used in _IOCCF5_ISR: [wreg+status,2+status,0+pclath+cstack]
 10882  0DFE  0021               	movlb	1	; select bank1
 10883  0DFF  0855               	movf	_IOCCF5_InterruptHandler^(0+128),w
 10884  0E00  0456               	iorwf	(_IOCCF5_InterruptHandler+1)^(0+128),w
 10885  0E01  1903               	btfsc	3,2
 10886  0E02  2E08               	goto	i1l3965
 10887                           
 10888                           ;pin_manager.c: 188: {
 10889                           ;pin_manager.c: 189: IOCCF5_InterruptHandler();
 10890  0E03  0856               	movf	(_IOCCF5_InterruptHandler+1)^(0+128),w
 10891  0E04  008A               	movwf	10
 10892  0E05  0855               	movf	_IOCCF5_InterruptHandler^(0+128),w
 10893  0E06  000A               	callw
 10894  0E07  318D               	pagesel	$
 10895  0E08                     i1l3965:	
 10896                           
 10897                           ;pin_manager.c: 190: }
 10898                           ;pin_manager.c: 191: IOCCFbits.IOCCF5 = 0;
 10899  0E08  0027               	movlb	7	; select bank7
 10900  0E09  1299               	bcf	25,5	;volatile
 10901  0E0A  0008               	return
 10902  0E0B                     __end_of_IOCCF5_ISR:	
 10903                           
 10904                           	psect	text56
 10905  0D00                     __ptext56:	
 10906 ;; *************** function _IOCCF5_DefaultInterruptHandler *****************
 10907 ;; Defined at:
 10908 ;;		line 204 in file "mcc_generated_files/pin_manager.c"
 10909 ;; Parameters:    Size  Location     Type
 10910 ;;		None
 10911 ;; Auto vars:     Size  Location     Type
 10912 ;;		None
 10913 ;; Return value:  Size  Location     Type
 10914 ;;                  1    wreg      void 
 10915 ;; Registers used:
 10916 ;;		None
 10917 ;; Tracked objects:
 10918 ;;		On entry : 0/0
 10919 ;;		On exit  : 0/0
 10920 ;;		Unchanged: 0/0
 10921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10922 ;;      Params:         0       0       0       0       0       0       0       0
 10923 ;;      Locals:         0       0       0       0       0       0       0       0
 10924 ;;      Temps:          0       0       0       0       0       0       0       0
 10925 ;;      Totals:         0       0       0       0       0       0       0       0
 10926 ;;Total ram usage:        0 bytes
 10927 ;; Hardware stack levels used:    1
 10928 ;; This function calls:
 10929 ;;		Nothing
 10930 ;; This function is called by:
 10931 ;;		_PIN_MANAGER_Initialize
 10932 ;;		_IOCCF5_ISR
 10933 ;; This function uses a non-reentrant model
 10934 ;;
 10935                           
 10936                           
 10937                           ;psect for function _IOCCF5_DefaultInterruptHandler
 10938  0D00                     _IOCCF5_DefaultInterruptHandler:	
 10939                           
 10940                           ;incstack = 0
 10941                           ; Regs used in _IOCCF5_DefaultInterruptHandler: []
 10942  0D00  0008               	return
 10943  0D01                     __end_of_IOCCF5_DefaultInterruptHandler:	
 10944                           
 10945                           	psect	text57
 10946  0DF1                     __ptext57:	
 10947 ;; *************** function _IOCCF4_ISR *****************
 10948 ;; Defined at:
 10949 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
 10950 ;; Parameters:    Size  Location     Type
 10951 ;;		None
 10952 ;; Auto vars:     Size  Location     Type
 10953 ;;		None
 10954 ;; Return value:  Size  Location     Type
 10955 ;;                  1    wreg      void 
 10956 ;; Registers used:
 10957 ;;		wreg, status,2, status,0, pclath, cstack
 10958 ;; Tracked objects:
 10959 ;;		On entry : 0/0
 10960 ;;		On exit  : 0/0
 10961 ;;		Unchanged: 0/0
 10962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10963 ;;      Params:         0       0       0       0       0       0       0       0
 10964 ;;      Locals:         0       0       0       0       0       0       0       0
 10965 ;;      Temps:          0       0       0       0       0       0       0       0
 10966 ;;      Totals:         0       0       0       0       0       0       0       0
 10967 ;;Total ram usage:        0 bytes
 10968 ;; Hardware stack levels used:    1
 10969 ;; Hardware stack levels required when called:    1
 10970 ;; This function calls:
 10971 ;;		Absolute function
 10972 ;;		_IOCCF4_DefaultInterruptHandler
 10973 ;; This function is called by:
 10974 ;;		_PIN_MANAGER_IOC
 10975 ;; This function uses a non-reentrant model
 10976 ;;
 10977                           
 10978                           
 10979                           ;psect for function _IOCCF4_ISR
 10980  0DF1                     _IOCCF4_ISR:	
 10981                           
 10982                           ;pin_manager.c: 157: if(IOCCF4_InterruptHandler)
 10983                           
 10984                           ;incstack = 0
 10985                           ; Regs used in _IOCCF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 10986  0DF1  0021               	movlb	1	; select bank1
 10987  0DF2  0857               	movf	_IOCCF4_InterruptHandler^(0+128),w
 10988  0DF3  0458               	iorwf	(_IOCCF4_InterruptHandler+1)^(0+128),w
 10989  0DF4  1903               	btfsc	3,2
 10990  0DF5  2DFB               	goto	i1l3959
 10991                           
 10992                           ;pin_manager.c: 158: {
 10993                           ;pin_manager.c: 159: IOCCF4_InterruptHandler();
 10994  0DF6  0858               	movf	(_IOCCF4_InterruptHandler+1)^(0+128),w
 10995  0DF7  008A               	movwf	10
 10996  0DF8  0857               	movf	_IOCCF4_InterruptHandler^(0+128),w
 10997  0DF9  000A               	callw
 10998  0DFA  318D               	pagesel	$
 10999  0DFB                     i1l3959:	
 11000                           
 11001                           ;pin_manager.c: 160: }
 11002                           ;pin_manager.c: 161: IOCCFbits.IOCCF4 = 0;
 11003  0DFB  0027               	movlb	7	; select bank7
 11004  0DFC  1219               	bcf	25,4	;volatile
 11005  0DFD  0008               	return
 11006  0DFE                     __end_of_IOCCF4_ISR:	
 11007                           
 11008                           	psect	text58
 11009  0CFF                     __ptext58:	
 11010 ;; *************** function _IOCCF4_DefaultInterruptHandler *****************
 11011 ;; Defined at:
 11012 ;;		line 174 in file "mcc_generated_files/pin_manager.c"
 11013 ;; Parameters:    Size  Location     Type
 11014 ;;		None
 11015 ;; Auto vars:     Size  Location     Type
 11016 ;;		None
 11017 ;; Return value:  Size  Location     Type
 11018 ;;                  1    wreg      void 
 11019 ;; Registers used:
 11020 ;;		None
 11021 ;; Tracked objects:
 11022 ;;		On entry : 0/0
 11023 ;;		On exit  : 0/0
 11024 ;;		Unchanged: 0/0
 11025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11026 ;;      Params:         0       0       0       0       0       0       0       0
 11027 ;;      Locals:         0       0       0       0       0       0       0       0
 11028 ;;      Temps:          0       0       0       0       0       0       0       0
 11029 ;;      Totals:         0       0       0       0       0       0       0       0
 11030 ;;Total ram usage:        0 bytes
 11031 ;; Hardware stack levels used:    1
 11032 ;; This function calls:
 11033 ;;		Nothing
 11034 ;; This function is called by:
 11035 ;;		_PIN_MANAGER_Initialize
 11036 ;;		_IOCCF4_ISR
 11037 ;; This function uses a non-reentrant model
 11038 ;;
 11039                           
 11040                           
 11041                           ;psect for function _IOCCF4_DefaultInterruptHandler
 11042  0CFF                     _IOCCF4_DefaultInterruptHandler:	
 11043                           
 11044                           ;incstack = 0
 11045                           ; Regs used in _IOCCF4_DefaultInterruptHandler: []
 11046  0CFF  0008               	return
 11047  0D00                     __end_of_IOCCF4_DefaultInterruptHandler:	
 11048                           
 11049                           	psect	text59
 11050  0D26                     __ptext59:	
 11051 ;; *************** function _INT_ISR *****************
 11052 ;; Defined at:
 11053 ;;		line 44 in file "mcc_generated_files/ext_int.c"
 11054 ;; Parameters:    Size  Location     Type
 11055 ;;		None
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;		None
 11058 ;; Return value:  Size  Location     Type
 11059 ;;                  1    wreg      void 
 11060 ;; Registers used:
 11061 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11062 ;; Tracked objects:
 11063 ;;		On entry : 0/0
 11064 ;;		On exit  : 0/0
 11065 ;;		Unchanged: 0/0
 11066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11067 ;;      Params:         0       0       0       0       0       0       0       0
 11068 ;;      Locals:         0       0       0       0       0       0       0       0
 11069 ;;      Temps:          0       0       0       0       0       0       0       0
 11070 ;;      Totals:         0       0       0       0       0       0       0       0
 11071 ;;Total ram usage:        0 bytes
 11072 ;; Hardware stack levels used:    1
 11073 ;; Hardware stack levels required when called:    4
 11074 ;; This function calls:
 11075 ;;		_INT_CallBack
 11076 ;; This function is called by:
 11077 ;;		_INTERRUPT_InterruptManager
 11078 ;; This function uses a non-reentrant model
 11079 ;;
 11080                           
 11081                           
 11082                           ;psect for function _INT_ISR
 11083  0D26                     _INT_ISR:	
 11084                           
 11085                           ;ext_int.c: 50: (PIR0bits.INTF = 0);
 11086                           
 11087                           ;incstack = 0
 11088                           ; Regs used in _INT_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11089  0D26  0020               	movlb	0	; select bank0
 11090  0D27  1010               	bcf	16,0	;volatile
 11091                           
 11092                           ;ext_int.c: 53: INT_CallBack();
 11093  0D28  318E  2634         	fcall	_INT_CallBack
 11094  0D2A  0008               	return
 11095  0D2B                     __end_of_INT_ISR:	
 11096                           
 11097                           	psect	text60
 11098  0E34                     __ptext60:	
 11099 ;; *************** function _INT_CallBack *****************
 11100 ;; Defined at:
 11101 ;;		line 59 in file "mcc_generated_files/ext_int.c"
 11102 ;; Parameters:    Size  Location     Type
 11103 ;;		None
 11104 ;; Auto vars:     Size  Location     Type
 11105 ;;		None
 11106 ;; Return value:  Size  Location     Type
 11107 ;;                  1    wreg      void 
 11108 ;; Registers used:
 11109 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11110 ;; Tracked objects:
 11111 ;;		On entry : 0/0
 11112 ;;		On exit  : 0/0
 11113 ;;		Unchanged: 0/0
 11114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11115 ;;      Params:         0       0       0       0       0       0       0       0
 11116 ;;      Locals:         0       0       0       0       0       0       0       0
 11117 ;;      Temps:          0       0       0       0       0       0       0       0
 11118 ;;      Totals:         0       0       0       0       0       0       0       0
 11119 ;;Total ram usage:        0 bytes
 11120 ;; Hardware stack levels used:    1
 11121 ;; Hardware stack levels required when called:    3
 11122 ;; This function calls:
 11123 ;;		Absolute function
 11124 ;;		_EncINX_PulseRisingEvent
 11125 ;;		_INT_DefaultInterruptHandler
 11126 ;; This function is called by:
 11127 ;;		_INT_ISR
 11128 ;; This function uses a non-reentrant model
 11129 ;;
 11130                           
 11131                           
 11132                           ;psect for function _INT_CallBack
 11133  0E34                     _INT_CallBack:	
 11134                           
 11135                           ;ext_int.c: 62: EncINX_PulseRisingEvent();
 11136                           
 11137                           ;incstack = 0
 11138                           ; Regs used in _INT_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11139  0E34  3186  2651  318E   	fcall	_EncINX_PulseRisingEvent
 11140                           
 11141                           ;ext_int.c: 64: if(INT_InterruptHandler)
 11142  0E37  0021               	movlb	1	; select bank1
 11143  0E38  0853               	movf	_INT_InterruptHandler^(0+128),w
 11144  0E39  0454               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 11145  0E3A  1903               	btfsc	3,2
 11146  0E3B  0008               	return
 11147                           
 11148                           ;ext_int.c: 65: {
 11149                           ;ext_int.c: 66: INT_InterruptHandler();
 11150  0E3C  0854               	movf	(_INT_InterruptHandler+1)^(0+128),w
 11151  0E3D  008A               	movwf	10
 11152  0E3E  0853               	movf	_INT_InterruptHandler^(0+128),w
 11153  0E3F  000A               	callw
 11154  0E40  318E               	pagesel	$
 11155  0E41  0008               	return
 11156  0E42                     __end_of_INT_CallBack:	
 11157                           
 11158                           	psect	text61
 11159  0CFE                     __ptext61:	
 11160 ;; *************** function _INT_DefaultInterruptHandler *****************
 11161 ;; Defined at:
 11162 ;;		line 80 in file "mcc_generated_files/ext_int.c"
 11163 ;; Parameters:    Size  Location     Type
 11164 ;;		None
 11165 ;; Auto vars:     Size  Location     Type
 11166 ;;		None
 11167 ;; Return value:  Size  Location     Type
 11168 ;;                  1    wreg      void 
 11169 ;; Registers used:
 11170 ;;		None
 11171 ;; Tracked objects:
 11172 ;;		On entry : 0/0
 11173 ;;		On exit  : 0/0
 11174 ;;		Unchanged: 0/0
 11175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11176 ;;      Params:         0       0       0       0       0       0       0       0
 11177 ;;      Locals:         0       0       0       0       0       0       0       0
 11178 ;;      Temps:          0       0       0       0       0       0       0       0
 11179 ;;      Totals:         0       0       0       0       0       0       0       0
 11180 ;;Total ram usage:        0 bytes
 11181 ;; Hardware stack levels used:    1
 11182 ;; This function calls:
 11183 ;;		Nothing
 11184 ;; This function is called by:
 11185 ;;		_EXT_INT_Initialize
 11186 ;;		_INT_CallBack
 11187 ;; This function uses a non-reentrant model
 11188 ;;
 11189                           
 11190                           
 11191                           ;psect for function _INT_DefaultInterruptHandler
 11192  0CFE                     _INT_DefaultInterruptHandler:	
 11193                           
 11194                           ;incstack = 0
 11195                           ; Regs used in _INT_DefaultInterruptHandler: []
 11196  0CFE  0008               	return
 11197  0CFF                     __end_of_INT_DefaultInterruptHandler:	
 11198                           
 11199                           	psect	text62
 11200  0651                     __ptext62:	
 11201 ;; *************** function _EncINX_PulseRisingEvent *****************
 11202 ;; Defined at:
 11203 ;;		line 590 in file "main.c"
 11204 ;; Parameters:    Size  Location     Type
 11205 ;;		None
 11206 ;; Auto vars:     Size  Location     Type
 11207 ;;		None
 11208 ;; Return value:  Size  Location     Type
 11209 ;;                  1    wreg      void 
 11210 ;; Registers used:
 11211 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11212 ;; Tracked objects:
 11213 ;;		On entry : 0/0
 11214 ;;		On exit  : 0/0
 11215 ;;		Unchanged: 0/0
 11216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11217 ;;      Params:         0       0       0       0       0       0       0       0
 11218 ;;      Locals:         0       0       0       0       0       0       0       0
 11219 ;;      Temps:          1       0       0       0       0       0       0       0
 11220 ;;      Totals:         1       0       0       0       0       0       0       0
 11221 ;;Total ram usage:        1 bytes
 11222 ;; Hardware stack levels used:    1
 11223 ;; Hardware stack levels required when called:    2
 11224 ;; This function calls:
 11225 ;;		i1_EUSART_Write
 11226 ;;		i1_valuetocharHighNibble
 11227 ;;		i1_valuetocharLowNibble
 11228 ;; This function is called by:
 11229 ;;		_INT_CallBack
 11230 ;; This function uses a non-reentrant model
 11231 ;;
 11232                           
 11233                           
 11234                           ;psect for function _EncINX_PulseRisingEvent
 11235  0651                     _EncINX_PulseRisingEvent:	
 11236                           
 11237                           ;main.c: 592: EncoderPositionAtIndex = EncoderPosition;
 11238                           
 11239                           ;incstack = 0
 11240                           ; Regs used in _EncINX_PulseRisingEvent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11241  0651  0020               	movlb	0	; select bank0
 11242  0652  0845               	movf	_EncoderPosition+1,w
 11243  0653  0021               	movlb	1	; select bank1
 11244  0654  00C7               	movwf	(_EncoderPositionAtIndex+1)^(0+128)
 11245  0655  0020               	movlb	0	; select bank0
 11246  0656  0844               	movf	_EncoderPosition,w
 11247  0657  0021               	movlb	1	; select bank1
 11248  0658  00C6               	movwf	_EncoderPositionAtIndex^(0+128)
 11249                           
 11250                           ;main.c: 594: if(EncoderPositionOneCycle < 0)
 11251  0659  0020               	movlb	0	; select bank0
 11252  065A  1FD2               	btfss	_EncoderPositionOneCycle,7
 11253  065B  2E5E               	goto	i1l3673
 11254                           
 11255                           ;main.c: 595: EncoderPositionOneCycle=-EncoderPositionOneCycle;
 11256  065C  09D2               	comf	_EncoderPositionOneCycle,f
 11257  065D  0AD2               	incf	_EncoderPositionOneCycle,f
 11258  065E                     i1l3673:	
 11259                           
 11260                           ;main.c: 597: if(flagForFirstRevolution == 1 && EncoderPositionOneCycle > 5)
 11261  065E  0351               	decf	_flagForFirstRevolution,w
 11262  065F  1D03               	btfss	3,2
 11263  0660  2E8E               	goto	i1l3697
 11264  0661  0852               	movf	_EncoderPositionOneCycle,w
 11265  0662  3A80               	xorlw	128
 11266  0663  3E7A               	addlw	-134
 11267  0664  1C03               	skipc
 11268  0665  2E8E               	goto	i1l3697
 11269                           
 11270                           ;main.c: 599: {
 11271                           ;main.c: 600: if(EncoderPositionOneCycle < 32)
 11272  0666  0852               	movf	_EncoderPositionOneCycle,w
 11273  0667  3A80               	xorlw	128
 11274  0668  3E60               	addlw	-160
 11275  0669  1803               	skipnc
 11276  066A  2E70               	goto	i1l3687
 11277                           
 11278                           ;main.c: 601: {
 11279                           ;main.c: 602: EncPulseError=1;
 11280  066B  0021               	movlb	1	; select bank1
 11281  066C  01D2               	clrf	_EncPulseError^(0+128)
 11282  066D  0AD2               	incf	_EncPulseError^(0+128),f
 11283                           
 11284                           ;main.c: 603: EUSART_Write('X');
 11285  066E  3058               	movlw	88
 11286  066F  2E7C               	goto	L17
 11287  0670                     i1l3687:	
 11288                           ;main.c: 606: }
 11289                           
 11290                           ;main.c: 605: EUSART_Write(valuetocharLowNibble((unsigned char)((EncoderPositionOneCycle
      +                          ) & 0x00FF)));
 11291                           
 11292                           ;main.c: 604: EUSART_Write(valuetocharHighNibble((unsigned char)((EncoderPositionOneCycl
      +                          e) & 0x00FF)));
 11293                           
 11294                           
 11295                           ;main.c: 607: else if(EncoderPositionOneCycle > 32)
 11296  0670  0020               	movlb	0	; select bank0
 11297  0671  0852               	movf	_EncoderPositionOneCycle,w
 11298  0672  3A80               	xorlw	128
 11299  0673  3E5F               	addlw	-161
 11300  0674  1C03               	skipc
 11301  0675  2E8E               	goto	i1l3697
 11302                           
 11303                           ;main.c: 608: {
 11304                           ;main.c: 609: EncPulseError=2;
 11305  0676  3002               	movlw	2
 11306  0677  00F7               	movwf	??_EncINX_PulseRisingEvent
 11307  0678  0877               	movf	??_EncINX_PulseRisingEvent,w
 11308  0679  0021               	movlb	1	; select bank1
 11309  067A  00D2               	movwf	_EncPulseError^(0+128)
 11310                           
 11311                           ;main.c: 610: EUSART_Write('Y');
 11312  067B  3059               	movlw	89
 11313  067C                     L17:	
 11314  067C  318D  2565  3186   	fcall	i1_EUSART_Write
 11315                           
 11316                           ;main.c: 611: EUSART_Write(valuetocharHighNibble((unsigned char)((EncoderPositionOneCycl
      +                          e) & 0x00FF)));
 11317  067F  0020               	movlb	0	; select bank0
 11318  0680  0852               	movf	_EncoderPositionOneCycle,w
 11319  0681  318E  26AC  3186   	fcall	i1_valuetocharHighNibble
 11320  0684  318D  2565  3186   	fcall	i1_EUSART_Write
 11321                           
 11322                           ;main.c: 612: EUSART_Write(valuetocharLowNibble((unsigned char)((EncoderPositionOneCycle
      +                          ) & 0x00FF)));
 11323  0687  0020               	movlb	0	; select bank0
 11324  0688  0852               	movf	_EncoderPositionOneCycle,w
 11325  0689  318E  2626  3186   	fcall	i1_valuetocharLowNibble
 11326  068C  318D  2565         	fcall	i1_EUSART_Write
 11327  068E                     i1l3697:	
 11328                           
 11329                           ;main.c: 613: }
 11330                           ;main.c: 628: }
 11331                           ;main.c: 630: flagForFirstRevolution=1;
 11332  068E  0020               	movlb	0	; select bank0
 11333  068F  01D1               	clrf	_flagForFirstRevolution
 11334  0690  0AD1               	incf	_flagForFirstRevolution,f
 11335                           
 11336                           ;main.c: 633: EncoderPositionOneCycle=0;
 11337  0691  01D2               	clrf	_EncoderPositionOneCycle
 11338  0692  0008               	return
 11339  0693                     __end_of_EncINX_PulseRisingEvent:	
 11340                           
 11341                           	psect	text63
 11342  0E26                     __ptext63:	
 11343 ;; *************** function i1_valuetocharLowNibble *****************
 11344 ;; Defined at:
 11345 ;;		line 686 in file "main.c"
 11346 ;; Parameters:    Size  Location     Type
 11347 ;;  hexvalue        1    wreg     unsigned char 
 11348 ;; Auto vars:     Size  Location     Type
 11349 ;;  hexvalue        1    4[COMMON] unsigned char 
 11350 ;;  valuetocharL    1    5[COMMON] unsigned char 
 11351 ;; Return value:  Size  Location     Type
 11352 ;;                  1    wreg      unsigned char 
 11353 ;; Registers used:
 11354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11355 ;; Tracked objects:
 11356 ;;		On entry : 0/0
 11357 ;;		On exit  : 0/0
 11358 ;;		Unchanged: 0/0
 11359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11360 ;;      Params:         0       0       0       0       0       0       0       0
 11361 ;;      Locals:         2       0       0       0       0       0       0       0
 11362 ;;      Temps:          1       0       0       0       0       0       0       0
 11363 ;;      Totals:         3       0       0       0       0       0       0       0
 11364 ;;Total ram usage:        3 bytes
 11365 ;; Hardware stack levels used:    1
 11366 ;; Hardware stack levels required when called:    1
 11367 ;; This function calls:
 11368 ;;		i1_valtoasciichar
 11369 ;; This function is called by:
 11370 ;;		_EncINX_PulseRisingEvent
 11371 ;; This function uses a non-reentrant model
 11372 ;;
 11373                           
 11374                           
 11375                           ;psect for function i1_valuetocharLowNibble
 11376  0E26                     i1_valuetocharLowNibble:	
 11377                           
 11378                           ;incstack = 0
 11379                           ; Regs used in i1_valuetocharLowNibble: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11380                           ;i1valuetocharLowNibble@hexvalue stored from wreg
 11381  0E26  00F4               	movwf	i1valuetocharLowNibble@hexvalue
 11382                           
 11383                           ;main.c: 688: unsigned char hexval;
 11384                           ;main.c: 689: hexval=(unsigned char)((unsigned char)(hexvalue) & 0x0F);
 11385  0E27  0874               	movf	i1valuetocharLowNibble@hexvalue,w
 11386  0E28  390F               	andlw	15
 11387  0E29  00F3               	movwf	??i1_valuetocharLowNibble
 11388  0E2A  0873               	movf	??i1_valuetocharLowNibble,w
 11389  0E2B  00F5               	movwf	i1valuetocharLowNibble@hexval
 11390                           
 11391                           ;main.c: 690: hexval= valtoasciichar(hexval);
 11392  0E2C  0875               	movf	i1valuetocharLowNibble@hexval,w
 11393  0E2D  3186  26FE         	fcall	i1_valtoasciichar
 11394  0E2F  00F3               	movwf	??i1_valuetocharLowNibble
 11395  0E30  0873               	movf	??i1_valuetocharLowNibble,w
 11396  0E31  00F5               	movwf	i1valuetocharLowNibble@hexval
 11397                           
 11398                           ;main.c: 691: return hexval;
 11399  0E32  0875               	movf	i1valuetocharLowNibble@hexval,w
 11400  0E33  0008               	return
 11401  0E34                     __end_ofi1_valuetocharLowNibble:	
 11402                           
 11403                           	psect	text64
 11404  0EAC                     __ptext64:	
 11405 ;; *************** function i1_valuetocharHighNibble *****************
 11406 ;; Defined at:
 11407 ;;		line 677 in file "main.c"
 11408 ;; Parameters:    Size  Location     Type
 11409 ;;  hexvalue        1    wreg     unsigned char 
 11410 ;; Auto vars:     Size  Location     Type
 11411 ;;  hexvalue        1    5[COMMON] unsigned char 
 11412 ;;  valuetocharH    1    6[COMMON] unsigned char 
 11413 ;; Return value:  Size  Location     Type
 11414 ;;                  1    wreg      unsigned char 
 11415 ;; Registers used:
 11416 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11417 ;; Tracked objects:
 11418 ;;		On entry : 0/0
 11419 ;;		On exit  : 0/0
 11420 ;;		Unchanged: 0/0
 11421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11422 ;;      Params:         0       0       0       0       0       0       0       0
 11423 ;;      Locals:         2       0       0       0       0       0       0       0
 11424 ;;      Temps:          2       0       0       0       0       0       0       0
 11425 ;;      Totals:         4       0       0       0       0       0       0       0
 11426 ;;Total ram usage:        4 bytes
 11427 ;; Hardware stack levels used:    1
 11428 ;; Hardware stack levels required when called:    1
 11429 ;; This function calls:
 11430 ;;		i1_valtoasciichar
 11431 ;; This function is called by:
 11432 ;;		_EncINX_PulseRisingEvent
 11433 ;; This function uses a non-reentrant model
 11434 ;;
 11435                           
 11436                           
 11437                           ;psect for function i1_valuetocharHighNibble
 11438  0EAC                     i1_valuetocharHighNibble:	
 11439                           
 11440                           ;incstack = 0
 11441                           ; Regs used in i1_valuetocharHighNibble: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11442                           ;i1valuetocharHighNibble@hexvalue stored from wreg
 11443  0EAC  00F5               	movwf	i1valuetocharHighNibble@hexvalue
 11444                           
 11445                           ;main.c: 679: unsigned char hexval;
 11446                           ;main.c: 680: hexval=(unsigned char)((unsigned char)(hexvalue>>4) & 0x0F);
 11447  0EAD  0875               	movf	i1valuetocharHighNibble@hexvalue,w
 11448  0EAE  00F3               	movwf	??i1_valuetocharHighNibble
 11449  0EAF  3004               	movlw	4
 11450  0EB0                     u201_25:	
 11451  0EB0  36F3               	lsrf	??i1_valuetocharHighNibble,f
 11452  0EB1  0B89               	decfsz	9,f
 11453  0EB2  2EB0               	goto	u201_25
 11454  0EB3  0873               	movf	??i1_valuetocharHighNibble,w
 11455  0EB4  390F               	andlw	15
 11456  0EB5  00F4               	movwf	??i1_valuetocharHighNibble+1
 11457  0EB6  0874               	movf	??i1_valuetocharHighNibble+1,w
 11458  0EB7  00F6               	movwf	i1valuetocharHighNibble@hexval
 11459                           
 11460                           ;main.c: 681: hexval= valtoasciichar(hexval);
 11461  0EB8  0876               	movf	i1valuetocharHighNibble@hexval,w
 11462  0EB9  3186  26FE         	fcall	i1_valtoasciichar
 11463  0EBB  00F3               	movwf	??i1_valuetocharHighNibble
 11464  0EBC  0873               	movf	??i1_valuetocharHighNibble,w
 11465  0EBD  00F6               	movwf	i1valuetocharHighNibble@hexval
 11466                           
 11467                           ;main.c: 682: return hexval;
 11468  0EBE  0876               	movf	i1valuetocharHighNibble@hexval,w
 11469  0EBF  0008               	return
 11470  0EC0                     __end_ofi1_valuetocharHighNibble:	
 11471                           
 11472                           	psect	text65
 11473  06FE                     __ptext65:	
 11474 ;; *************** function i1_valtoasciichar *****************
 11475 ;; Defined at:
 11476 ;;		line 695 in file "main.c"
 11477 ;; Parameters:    Size  Location     Type
 11478 ;;  hexvalue1       1    wreg     unsigned char 
 11479 ;; Auto vars:     Size  Location     Type
 11480 ;;  hexvalue1       1    1[COMMON] unsigned char 
 11481 ;;  valtoasciich    1    2[COMMON] unsigned char 
 11482 ;; Return value:  Size  Location     Type
 11483 ;;                  1    wreg      unsigned char 
 11484 ;; Registers used:
 11485 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11486 ;; Tracked objects:
 11487 ;;		On entry : 0/0
 11488 ;;		On exit  : 0/0
 11489 ;;		Unchanged: 0/0
 11490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11491 ;;      Params:         0       0       0       0       0       0       0       0
 11492 ;;      Locals:         2       0       0       0       0       0       0       0
 11493 ;;      Temps:          1       0       0       0       0       0       0       0
 11494 ;;      Totals:         3       0       0       0       0       0       0       0
 11495 ;;Total ram usage:        3 bytes
 11496 ;; Hardware stack levels used:    1
 11497 ;; This function calls:
 11498 ;;		Nothing
 11499 ;; This function is called by:
 11500 ;;		i1_valuetocharHighNibble
 11501 ;;		i1_valuetocharLowNibble
 11502 ;; This function uses a non-reentrant model
 11503 ;;
 11504                           
 11505                           
 11506                           ;psect for function i1_valtoasciichar
 11507  06FE                     i1_valtoasciichar:	
 11508                           
 11509                           ;incstack = 0
 11510                           ; Regs used in i1_valtoasciichar: [wreg-fsr0h+status,2+status,0]
 11511                           ;i1valtoasciichar@hexvalue1 stored from wreg
 11512  06FE  00F1               	movwf	i1valtoasciichar@hexvalue1
 11513                           
 11514                           ;main.c: 697: unsigned char hexval='0';
 11515  06FF  3030               	movlw	48
 11516  0700  00F0               	movwf	??i1_valtoasciichar
 11517  0701  0870               	movf	??i1_valtoasciichar,w
 11518  0702  00F2               	movwf	i1valtoasciichar@hexval
 11519                           
 11520                           ;main.c: 698: switch((unsigned char)hexvalue1)
 11521  0703  2F27               	goto	i1l3441
 11522  0704                     i1l3407:	
 11523                           ;main.c: 699: {
 11524                           ;main.c: 700: case 0x00: hexval= '0'; break;
 11525                           
 11526  0704  3030               	movlw	48
 11527  0705  2F23               	goto	L32
 11528  0706                     i1l3409:	
 11529                           ;main.c: 701: case 0x01: hexval= '1'; break;
 11530                           
 11531  0706  3031               	movlw	49
 11532  0707  2F23               	goto	L32
 11533  0708                     i1l3411:	
 11534                           ;main.c: 702: case 0x02: hexval= '2'; break;
 11535                           
 11536  0708  3032               	movlw	50
 11537  0709  2F23               	goto	L32
 11538  070A                     i1l3413:	
 11539                           ;main.c: 703: case 0x03: hexval= '3'; break;
 11540                           
 11541  070A  3033               	movlw	51
 11542  070B  2F23               	goto	L32
 11543  070C                     i1l3415:	
 11544                           ;main.c: 704: case 0x04: hexval= '4'; break;
 11545                           
 11546  070C  3034               	movlw	52
 11547  070D  2F23               	goto	L32
 11548  070E                     i1l3417:	
 11549                           ;main.c: 705: case 0x05: hexval= '5'; break;
 11550                           
 11551  070E  3035               	movlw	53
 11552  070F  2F23               	goto	L32
 11553  0710                     i1l3419:	
 11554                           ;main.c: 706: case 0x06: hexval= '6'; break;
 11555                           
 11556  0710  3036               	movlw	54
 11557  0711  2F23               	goto	L32
 11558  0712                     i1l3421:	
 11559                           ;main.c: 707: case 0x07: hexval= '7'; break;
 11560                           
 11561  0712  3037               	movlw	55
 11562  0713  2F23               	goto	L32
 11563  0714                     i1l3423:	
 11564                           ;main.c: 708: case 0x08: hexval= '8'; break;
 11565                           
 11566  0714  3038               	movlw	56
 11567  0715  2F23               	goto	L32
 11568  0716                     i1l3425:	
 11569                           ;main.c: 709: case 0x09: hexval= '9'; break;
 11570                           
 11571  0716  3039               	movlw	57
 11572  0717  2F23               	goto	L32
 11573  0718                     i1l3427:	
 11574                           ;main.c: 710: case 0x0A: hexval= 'A'; break;
 11575                           
 11576  0718  3041               	movlw	65
 11577  0719  2F23               	goto	L32
 11578  071A                     i1l3429:	
 11579                           ;main.c: 711: case 0x0B: hexval= 'B'; break;
 11580                           
 11581  071A  3042               	movlw	66
 11582  071B  2F23               	goto	L32
 11583  071C                     i1l3431:	
 11584                           ;main.c: 712: case 0x0C: hexval= 'C'; break;
 11585                           
 11586  071C  3043               	movlw	67
 11587  071D  2F23               	goto	L32
 11588  071E                     i1l3433:	
 11589                           ;main.c: 713: case 0x0D: hexval= 'D'; break;
 11590                           
 11591  071E  3044               	movlw	68
 11592  071F  2F23               	goto	L32
 11593  0720                     i1l3435:	
 11594                           ;main.c: 714: case 0x0E: hexval= 'E'; break;
 11595                           
 11596  0720  3045               	movlw	69
 11597  0721  2F23               	goto	L32
 11598  0722                     i1l3437:	
 11599                           ;main.c: 715: case 0x0F: hexval= 'F'; break;
 11600                           
 11601  0722  3046               	movlw	70
 11602  0723                     L32:	
 11603  0723  00F0               	movwf	??i1_valtoasciichar
 11604  0724  0870               	movf	??i1_valtoasciichar,w
 11605  0725  00F2               	movwf	i1valtoasciichar@hexval
 11606                           
 11607                           ;main.c: 717: }
 11608                           
 11609                           ;main.c: 716: default : break;
 11610  0726  2F31               	goto	i1l3443
 11611  0727                     i1l3441:	
 11612  0727  0871               	movf	i1valtoasciichar@hexvalue1,w
 11613                           
 11614                           ; Switch size 1, requested type "space"
 11615                           ; Number of cases is 16, Range of values is 0 to 15
 11616                           ; switch strategies available:
 11617                           ; Name         Instructions Cycles
 11618                           ; direct_byte           38     6 (fixed)
 11619                           ; simple_byte           49    25 (average)
 11620                           ; jumptable            260     6 (fixed)
 11621                           ;	Chosen strategy is direct_byte
 11622  0728  0084               	movwf	4
 11623  0729  3010               	movlw	16
 11624  072A  0204               	subwf	4,w
 11625  072B  1803               	skipnc
 11626  072C  2F31               	goto	i1l3443
 11627  072D  3188               	movlp	high i1S5689
 11628  072E  3504               	lslf	4,w
 11629  072F  3E00               	addlw	low i1S5689
 11630  0730  0082               	movwf	2
 11631  0731                     i1l3443:	
 11632                           
 11633                           ;main.c: 718: return hexval;
 11634  0731  0872               	movf	i1valtoasciichar@hexval,w
 11635  0732  0008               	return
 11636  0733                     __end_ofi1_valtoasciichar:	
 11637                           
 11638                           	psect	swtext2
 11639  0800                     __pswtext2:	
 11640  0800                     i1S5689:	
 11641  0800  3187  2F04         	ljmp	i1l3407
 11642  0802  3187  2F06         	ljmp	i1l3409
 11643  0804  3187  2F08         	ljmp	i1l3411
 11644  0806  3187  2F0A         	ljmp	i1l3413
 11645  0808  3187  2F0C         	ljmp	i1l3415
 11646  080A  3187  2F0E         	ljmp	i1l3417
 11647  080C  3187  2F10         	ljmp	i1l3419
 11648  080E  3187  2F12         	ljmp	i1l3421
 11649  0810  3187  2F14         	ljmp	i1l3423
 11650  0812  3187  2F16         	ljmp	i1l3425
 11651  0814  3187  2F18         	ljmp	i1l3427
 11652  0816  3187  2F1A         	ljmp	i1l3429
 11653  0818  3187  2F1C         	ljmp	i1l3431
 11654  081A  3187  2F1E         	ljmp	i1l3433
 11655  081C  3187  2F20         	ljmp	i1l3435
 11656  081E  3187  2F22         	ljmp	i1l3437
 11657                           
 11658                           	psect	text66
 11659  0EFC                     __ptext66:	
 11660 ;; *************** function _CCP1_CaptureISR *****************
 11661 ;; Defined at:
 11662 ;;		line 84 in file "mcc_generated_files/ccp1.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;		None
 11665 ;; Auto vars:     Size  Location     Type
 11666 ;;  module          2   27[BANK0 ] struct CCPR1Reg_tag
 11667 ;; Return value:  Size  Location     Type
 11668 ;;                  1    wreg      void 
 11669 ;; Registers used:
 11670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11671 ;; Tracked objects:
 11672 ;;		On entry : 0/0
 11673 ;;		On exit  : 0/0
 11674 ;;		Unchanged: 0/0
 11675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11676 ;;      Params:         0       0       0       0       0       0       0       0
 11677 ;;      Locals:         0       2       0       0       0       0       0       0
 11678 ;;      Temps:          1       0       0       0       0       0       0       0
 11679 ;;      Totals:         1       2       0       0       0       0       0       0
 11680 ;;Total ram usage:        3 bytes
 11681 ;; Hardware stack levels used:    1
 11682 ;; Hardware stack levels required when called:    5
 11683 ;; This function calls:
 11684 ;;		_CCP1_CallBack
 11685 ;; This function is called by:
 11686 ;;		_INTERRUPT_InterruptManager
 11687 ;; This function uses a non-reentrant model
 11688 ;;
 11689                           
 11690                           
 11691                           ;psect for function _CCP1_CaptureISR
 11692  0EFC                     _CCP1_CaptureISR:	
 11693                           
 11694                           ;ccp1.c: 86: CCP_PERIOD_REG_T module;
 11695                           ;ccp1.c: 89: PIR4bits.CCP1IF = 0;
 11696                           
 11697                           ;incstack = 0
 11698                           ; Regs used in _CCP1_CaptureISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11699  0EFC  0020               	movlb	0	; select bank0
 11700  0EFD  1014               	bcf	20,0	;volatile
 11701                           
 11702                           ;ccp1.c: 92: module.ccpr1l = CCPR1L;
 11703  0EFE  0025               	movlb	5	; select bank5
 11704  0EFF  0811               	movf	17,w	;volatile
 11705  0F00  00FD               	movwf	??_CCP1_CaptureISR
 11706  0F01  087D               	movf	??_CCP1_CaptureISR,w
 11707  0F02  0020               	movlb	0	; select bank0
 11708  0F03  00BB               	movwf	CCP1_CaptureISR@module
 11709                           
 11710                           ;ccp1.c: 93: module.ccpr1h = CCPR1H;
 11711  0F04  0025               	movlb	5	; select bank5
 11712  0F05  0812               	movf	18,w	;volatile
 11713  0F06  00FD               	movwf	??_CCP1_CaptureISR
 11714  0F07  087D               	movf	??_CCP1_CaptureISR,w
 11715  0F08  0020               	movlb	0	; select bank0
 11716  0F09  00BC               	movwf	CCP1_CaptureISR@module+1
 11717                           
 11718                           ;ccp1.c: 96: CCP1_CallBack(module.ccpr1_16Bit);
 11719  0F0A  083C               	movf	CCP1_CaptureISR@module+1,w
 11720  0F0B  00BA               	movwf	CCP1_CallBack@capturedValue+1
 11721  0F0C  083B               	movf	CCP1_CaptureISR@module,w
 11722  0F0D  00B9               	movwf	CCP1_CallBack@capturedValue
 11723  0F0E  318D  256D         	fcall	_CCP1_CallBack
 11724  0F10  0008               	return
 11725  0F11                     __end_of_CCP1_CaptureISR:	
 11726                           
 11727                           	psect	text67
 11728  0D6D                     __ptext67:	
 11729 ;; *************** function _CCP1_CallBack *****************
 11730 ;; Defined at:
 11731 ;;		line 99 in file "mcc_generated_files/ccp1.c"
 11732 ;; Parameters:    Size  Location     Type
 11733 ;;  capturedValu    2   25[BANK0 ] unsigned int 
 11734 ;; Auto vars:     Size  Location     Type
 11735 ;;		None
 11736 ;; Return value:  Size  Location     Type
 11737 ;;                  1    wreg      void 
 11738 ;; Registers used:
 11739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11740 ;; Tracked objects:
 11741 ;;		On entry : 0/0
 11742 ;;		On exit  : 0/0
 11743 ;;		Unchanged: 0/0
 11744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11745 ;;      Params:         0       2       0       0       0       0       0       0
 11746 ;;      Locals:         0       0       0       0       0       0       0       0
 11747 ;;      Temps:          0       0       0       0       0       0       0       0
 11748 ;;      Totals:         0       2       0       0       0       0       0       0
 11749 ;;Total ram usage:        2 bytes
 11750 ;; Hardware stack levels used:    1
 11751 ;; Hardware stack levels required when called:    4
 11752 ;; This function calls:
 11753 ;;		_EncA_PulseEdgeEvent
 11754 ;; This function is called by:
 11755 ;;		_CCP1_CaptureISR
 11756 ;; This function uses a non-reentrant model
 11757 ;;
 11758                           
 11759                           
 11760                           ;psect for function _CCP1_CallBack
 11761  0D6D                     _CCP1_CallBack:	
 11762                           
 11763                           ;ccp1.c: 102: EncA_PulseEdgeEvent(capturedValue);
 11764                           
 11765                           ;incstack = 0
 11766                           ; Regs used in _CCP1_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11767  0D6D  0020               	movlb	0	; select bank0
 11768  0D6E  083A               	movf	CCP1_CallBack@capturedValue+1,w
 11769  0D6F  00B8               	movwf	EncA_PulseEdgeEvent@capturedValue+1
 11770  0D70  0839               	movf	CCP1_CallBack@capturedValue,w
 11771  0D71  00B7               	movwf	EncA_PulseEdgeEvent@capturedValue
 11772  0D72  3187  27EF         	fcall	_EncA_PulseEdgeEvent
 11773  0D74  0008               	return
 11774  0D75                     __end_of_CCP1_CallBack:	
 11775                           
 11776                           	psect	text68
 11777  07EF                     __ptext68:	
 11778 ;; *************** function _EncA_PulseEdgeEvent *****************
 11779 ;; Defined at:
 11780 ;;		line 265 in file "main.c"
 11781 ;; Parameters:    Size  Location     Type
 11782 ;;  capturedValu    2   23[BANK0 ] unsigned int 
 11783 ;; Auto vars:     Size  Location     Type
 11784 ;;		None
 11785 ;; Return value:  Size  Location     Type
 11786 ;;                  1    wreg      void 
 11787 ;; Registers used:
 11788 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11789 ;; Tracked objects:
 11790 ;;		On entry : 0/0
 11791 ;;		On exit  : 0/0
 11792 ;;		Unchanged: 0/0
 11793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11794 ;;      Params:         0       2       0       0       0       0       0       0
 11795 ;;      Locals:         0       0       0       0       0       0       0       0
 11796 ;;      Temps:          0       0       0       0       0       0       0       0
 11797 ;;      Totals:         0       2       0       0       0       0       0       0
 11798 ;;Total ram usage:        2 bytes
 11799 ;; Hardware stack levels used:    1
 11800 ;; Hardware stack levels required when called:    3
 11801 ;; This function calls:
 11802 ;;		_OnEncPulseEdgeEvent
 11803 ;; This function is called by:
 11804 ;;		_CCP1_CallBack
 11805 ;; This function uses a non-reentrant model
 11806 ;;
 11807                           
 11808                           
 11809                           ;psect for function _EncA_PulseEdgeEvent
 11810  07EF                     _EncA_PulseEdgeEvent:	
 11811                           
 11812                           ;incstack = 0
 11813                           ; Regs used in _EncA_PulseEdgeEvent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11814                           ;main.c: 267: do { LATCbits.LATC3 = 1; } while(0);
 11815  07EF  0022               	movlb	2	; select bank2
 11816  07F0  158E               	bsf	14,3	;volatile
 11817                           
 11818                           ;main.c: 269: PIE4bits.CCP1IE = 0;
 11819  07F1  0021               	movlb	1	; select bank1
 11820  07F2  1014               	bcf	20,0	;volatile
 11821                           
 11822                           ;main.c: 271: PIE4bits.CCP2IE = 0;
 11823  07F3  1094               	bcf	20,1	;volatile
 11824                           
 11825                           ;main.c: 272: OnEncPulseEdgeEvent(capturedValue);
 11826  07F4  0020               	movlb	0	; select bank0
 11827  07F5  0838               	movf	EncA_PulseEdgeEvent@capturedValue+1,w
 11828  07F6  00AE               	movwf	OnEncPulseEdgeEvent@capturevalue+1
 11829  07F7  0837               	movf	EncA_PulseEdgeEvent@capturedValue,w
 11830  07F8  00AD               	movwf	OnEncPulseEdgeEvent@capturevalue
 11831  07F9  3180  2090         	fcall	_OnEncPulseEdgeEvent
 11832                           
 11833                           ;main.c: 274: PIE4bits.CCP1IE = 1;
 11834  07FB  0021               	movlb	1	; select bank1
 11835  07FC  1414               	bsf	20,0	;volatile
 11836                           
 11837                           ;main.c: 277: do { LATCbits.LATC3 = 0; } while(0);
 11838  07FD  0022               	movlb	2	; select bank2
 11839  07FE  118E               	bcf	14,3	;volatile
 11840  07FF  0008               	return
 11841  0800                     __end_of_EncA_PulseEdgeEvent:	
 11842                           
 11843                           	psect	text69
 11844  0090                     __ptext69:	
 11845 ;; *************** function _OnEncPulseEdgeEvent *****************
 11846 ;; Defined at:
 11847 ;;		line 296 in file "main.c"
 11848 ;; Parameters:    Size  Location     Type
 11849 ;;  capturevalue    2   13[BANK0 ] unsigned int 
 11850 ;; Auto vars:     Size  Location     Type
 11851 ;;		None
 11852 ;; Return value:  Size  Location     Type
 11853 ;;                  1    wreg      void 
 11854 ;; Registers used:
 11855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11856 ;; Tracked objects:
 11857 ;;		On entry : 0/0
 11858 ;;		On exit  : 0/0
 11859 ;;		Unchanged: 0/0
 11860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11861 ;;      Params:         0       2       0       0       0       0       0       0
 11862 ;;      Locals:         0       0       0       0       0       0       0       0
 11863 ;;      Temps:          0       8       0       0       0       0       0       0
 11864 ;;      Totals:         0      10       0       0       0       0       0       0
 11865 ;;Total ram usage:       10 bytes
 11866 ;; Hardware stack levels used:    1
 11867 ;; Hardware stack levels required when called:    2
 11868 ;; This function calls:
 11869 ;;		_NutRunCycleStop
 11870 ;;		___lldiv
 11871 ;;		___lmul
 11872 ;;		_millis
 11873 ;;		i1_EUSART_Write
 11874 ;;		i1_NutRunCycleStart
 11875 ;;		i1_TMR3_StartTimer
 11876 ;;		i1_TMR3_WriteTimer
 11877 ;;		i1_getEncoderState
 11878 ;; This function is called by:
 11879 ;;		_EncA_PulseEdgeEvent
 11880 ;; This function uses a non-reentrant model
 11881 ;;
 11882                           
 11883                           
 11884                           ;psect for function _OnEncPulseEdgeEvent
 11885  0090                     _OnEncPulseEdgeEvent:	
 11886                           
 11887                           ;main.c: 299: TMR3_WriteTimer(0);
 11888                           
 11889                           ;incstack = 0
 11890                           ; Regs used in _OnEncPulseEdgeEvent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11891  0090  3000               	movlw	0
 11892  0091  00F0               	movwf	i1TMR3_WriteTimer@timerVal
 11893  0092  00F1               	movwf	i1TMR3_WriteTimer@timerVal+1
 11894  0093  318E  2650  3180   	fcall	i1_TMR3_WriteTimer
 11895                           
 11896                           ;main.c: 300: TMR3_StartTimer();
 11897  0096  318D  2507  3180   	fcall	i1_TMR3_StartTimer
 11898                           
 11899                           ;main.c: 304: EncEdgeTimeInterval= EncEdgeTimeInterval + capturevalue;
 11900  0099  0020               	movlb	0	; select bank0
 11901  009A  083E               	movf	_EncEdgeTimeInterval,w
 11902  009B  00AF               	movwf	??_OnEncPulseEdgeEvent
 11903  009C  083F               	movf	_EncEdgeTimeInterval+1,w
 11904  009D  00B0               	movwf	??_OnEncPulseEdgeEvent+1
 11905  009E  0840               	movf	_EncEdgeTimeInterval+2,w
 11906  009F  00B1               	movwf	??_OnEncPulseEdgeEvent+2
 11907  00A0  0841               	movf	_EncEdgeTimeInterval+3,w
 11908  00A1  00B2               	movwf	??_OnEncPulseEdgeEvent+3
 11909  00A2  082D               	movf	OnEncPulseEdgeEvent@capturevalue,w
 11910  00A3  00B3               	movwf	??_OnEncPulseEdgeEvent+4
 11911  00A4  082E               	movf	OnEncPulseEdgeEvent@capturevalue+1,w
 11912  00A5  00B4               	movwf	??_OnEncPulseEdgeEvent+5
 11913  00A6  01B5               	clrf	??_OnEncPulseEdgeEvent+6
 11914  00A7  01B6               	clrf	??_OnEncPulseEdgeEvent+7
 11915  00A8  0833               	movf	??_OnEncPulseEdgeEvent+4,w
 11916  00A9  07AF               	addwf	??_OnEncPulseEdgeEvent,f
 11917  00AA  0834               	movf	??_OnEncPulseEdgeEvent+5,w
 11918  00AB  3DB0               	addwfc	??_OnEncPulseEdgeEvent+1,f
 11919  00AC  0835               	movf	??_OnEncPulseEdgeEvent+6,w
 11920  00AD  3DB1               	addwfc	??_OnEncPulseEdgeEvent+2,f
 11921  00AE  0836               	movf	??_OnEncPulseEdgeEvent+7,w
 11922  00AF  3DB2               	addwfc	??_OnEncPulseEdgeEvent+3,f
 11923  00B0  0832               	movf	??_OnEncPulseEdgeEvent+3,w
 11924  00B1  00C1               	movwf	_EncEdgeTimeInterval+3
 11925  00B2  0831               	movf	??_OnEncPulseEdgeEvent+2,w
 11926  00B3  00C0               	movwf	_EncEdgeTimeInterval+2
 11927  00B4  0830               	movf	??_OnEncPulseEdgeEvent+1,w
 11928  00B5  00BF               	movwf	_EncEdgeTimeInterval+1
 11929  00B6  082F               	movf	??_OnEncPulseEdgeEvent,w
 11930  00B7  00BE               	movwf	_EncEdgeTimeInterval
 11931                           
 11932                           ;main.c: 306: switch(NutRunstate)
 11933  00B8  2A8A               	goto	i1l3541
 11934  00B9                     i1l3455:	
 11935                           ;main.c: 307: {
 11936                           ;main.c: 308: case 0:
 11937                           
 11938                           
 11939                           ;main.c: 309: if((EncoderPosition>32)||(EncoderPosition < -32))
 11940  00B9  0845               	movf	_EncoderPosition+1,w
 11941  00BA  3A80               	xorlw	128
 11942  00BB  00AF               	movwf	??_OnEncPulseEdgeEvent
 11943  00BC  3080               	movlw	128
 11944  00BD  022F               	subwf	??_OnEncPulseEdgeEvent,w
 11945  00BE  1D03               	skipz
 11946  00BF  28C2               	goto	u177_25
 11947  00C0  3021               	movlw	33
 11948  00C1  0244               	subwf	_EncoderPosition,w
 11949  00C2                     u177_25:	
 11950  00C2  1803               	skipnc
 11951  00C3  28D0               	goto	i1l676
 11952  00C4  0020               	movlb	0	; select bank0
 11953  00C5  0845               	movf	_EncoderPosition+1,w
 11954  00C6  3A80               	xorlw	128
 11955  00C7  00AF               	movwf	??_OnEncPulseEdgeEvent
 11956  00C8  307F               	movlw	127
 11957  00C9  022F               	subwf	??_OnEncPulseEdgeEvent,w
 11958  00CA  1D03               	skipz
 11959  00CB  28CE               	goto	u178_25
 11960  00CC  30E0               	movlw	224
 11961  00CD  0244               	subwf	_EncoderPosition,w
 11962  00CE                     u178_25:	
 11963  00CE  1803               	skipnc
 11964  00CF  2A99               	goto	i1l3543
 11965  00D0                     i1l676:	
 11966                           
 11967                           ;main.c: 311: {
 11968                           ;main.c: 312: NutRunstate= 1;
 11969  00D0  0020               	movlb	0	; select bank0
 11970  00D1  01CE               	clrf	_NutRunstate
 11971  00D2  0ACE               	incf	_NutRunstate,f
 11972                           
 11973                           ;main.c: 313: EUSART_Write('B');
 11974  00D3  3042               	movlw	66
 11975  00D4  318D  2565  3180   	fcall	i1_EUSART_Write
 11976                           
 11977                           ;main.c: 314: }
 11978                           ;main.c: 315: break;
 11979  00D7  2A99               	goto	i1l3543
 11980  00D8                     i1l3461:	
 11981                           ;main.c: 317: case 1:
 11982                           
 11983                           
 11984                           ;main.c: 318: if(EncEdgeTimeInterval < 6000)
 11985  00D8  0020               	movlb	0	; select bank0
 11986  00D9  0841               	movf	_EncEdgeTimeInterval+3,w
 11987  00DA  1D03               	btfss	3,2
 11988  00DB  2A99               	goto	i1l3543
 11989  00DC  0840               	movf	_EncEdgeTimeInterval+2,w
 11990  00DD  1D03               	btfss	3,2
 11991  00DE  2A99               	goto	i1l3543
 11992  00DF  3070               	movlw	112
 11993  00E0  023E               	subwf	_EncEdgeTimeInterval,w
 11994  00E1  3017               	movlw	23
 11995  00E2  3B3F               	subwfb	_EncEdgeTimeInterval+1,w
 11996  00E3  1803               	btfsc	3,0
 11997  00E4  2A99               	goto	i1l3543
 11998                           
 11999                           ;main.c: 319: {
 12000                           ;main.c: 320: NutRunstate= 2;
 12001  00E5  3002               	movlw	2
 12002  00E6  00AF               	movwf	??_OnEncPulseEdgeEvent
 12003  00E7  082F               	movf	??_OnEncPulseEdgeEvent,w
 12004  00E8  00CE               	movwf	_NutRunstate
 12005                           
 12006                           ;main.c: 321: multipleTimecheck0=0;
 12007  00E9  01D4               	clrf	_multipleTimecheck0
 12008                           
 12009                           ;main.c: 322: EncEdgeMinTimeIntSumAvg=0;
 12010  00EA  3000               	movlw	0
 12011  00EB  0021               	movlb	1	; select bank1
 12012  00EC  00AB               	movwf	(_EncEdgeMinTimeIntSumAvg+3)^(0+128)
 12013  00ED  3000               	movlw	0
 12014  00EE  00AA               	movwf	(_EncEdgeMinTimeIntSumAvg+2)^(0+128)
 12015  00EF  3000               	movlw	0
 12016  00F0  00A9               	movwf	(_EncEdgeMinTimeIntSumAvg+1)^(0+128)
 12017  00F1  3000               	movlw	0
 12018  00F2  00A8               	movwf	_EncEdgeMinTimeIntSumAvg^(0+128)
 12019                           
 12020                           ;main.c: 323: multipleTimecheck1=0;
 12021  00F3  0020               	movlb	0	; select bank0
 12022  00F4  01D3               	clrf	_multipleTimecheck1
 12023                           
 12024                           ;main.c: 324: EncEdgeMinTimeInterval=0xEFFFFFFF;
 12025  00F5  30EF               	movlw	239
 12026  00F6  00D9               	movwf	_EncEdgeMinTimeInterval+3
 12027  00F7  30FF               	movlw	255
 12028  00F8  00D8               	movwf	_EncEdgeMinTimeInterval+2
 12029  00F9  30FF               	movlw	255
 12030  00FA  00D7               	movwf	_EncEdgeMinTimeInterval+1
 12031  00FB  30FF               	movlw	255
 12032  00FC  00D6               	movwf	_EncEdgeMinTimeInterval
 12033                           
 12034                           ;main.c: 325: EUSART_Write('C');
 12035  00FD  3043               	movlw	67
 12036  00FE  318D  2565  3180   	fcall	i1_EUSART_Write
 12037                           
 12038                           ;main.c: 326: do { LATCbits.LATC1 = 1; } while(0);
 12039  0101  0022               	movlb	2	; select bank2
 12040  0102  148E               	bsf	14,1	;volatile
 12041                           
 12042                           ;main.c: 327: }
 12043                           ;main.c: 328: break;
 12044  0103  2A99               	goto	i1l3543
 12045  0104                     i1l3475:	
 12046                           ;main.c: 330: case 2:
 12047                           
 12048                           
 12049                           ;main.c: 332: if(EncEdgeTimeInterval < EncEdgeMinTimeInterval)
 12050  0104  0020               	movlb	0	; select bank0
 12051  0105  0859               	movf	_EncEdgeMinTimeInterval+3,w
 12052  0106  0241               	subwf	_EncEdgeTimeInterval+3,w
 12053  0107  1D03               	skipz
 12054  0108  2913               	goto	u180_25
 12055  0109  0858               	movf	_EncEdgeMinTimeInterval+2,w
 12056  010A  0240               	subwf	_EncEdgeTimeInterval+2,w
 12057  010B  1D03               	skipz
 12058  010C  2913               	goto	u180_25
 12059  010D  0857               	movf	_EncEdgeMinTimeInterval+1,w
 12060  010E  023F               	subwf	_EncEdgeTimeInterval+1,w
 12061  010F  1D03               	skipz
 12062  0110  2913               	goto	u180_25
 12063  0111  0856               	movf	_EncEdgeMinTimeInterval,w
 12064  0112  023E               	subwf	_EncEdgeTimeInterval,w
 12065  0113                     u180_25:	
 12066  0113  1803               	skipnc
 12067  0114  29AA               	goto	i1l3501
 12068                           
 12069                           ;main.c: 333: {
 12070                           ;main.c: 334: multipleTimecheck0++;
 12071  0115  3001               	movlw	1
 12072  0116  00AF               	movwf	??_OnEncPulseEdgeEvent
 12073  0117  082F               	movf	??_OnEncPulseEdgeEvent,w
 12074  0118  07D4               	addwf	_multipleTimecheck0,f
 12075                           
 12076                           ;main.c: 335: switch(multipleTimecheck0)
 12077  0119  2997               	goto	i1l3499
 12078  011A                     i1l3479:	
 12079                           ;main.c: 336: {
 12080                           ;main.c: 337: case 1: OldEncPos=EncoderPosition;
 12081                           
 12082  011A  0845               	movf	_EncoderPosition+1,w
 12083  011B  0021               	movlb	1	; select bank1
 12084  011C  00C9               	movwf	(_OldEncPos+1)^(0+128)
 12085  011D  0020               	movlb	0	; select bank0
 12086  011E  0844               	movf	_EncoderPosition,w
 12087  011F  0021               	movlb	1	; select bank1
 12088  0120  00C8               	movwf	_OldEncPos^(0+128)
 12089  0121                     i1l3481:	
 12090                           ;main.c: 340: case 2: EncEdgeMinTimeIntSumAvg+=EncEdgeTimeInterval;
 12091                           
 12092                           ;main.c: 339: break;
 12093                           
 12094                           ;main.c: 338: EncEdgeMinTimeIntSumAvg+=EncEdgeTimeInterval;
 12095                           
 12096  0121                     i1l3483:	
 12097                           ;main.c: 342: case 3: EncEdgeMinTimeIntSumAvg+=EncEdgeTimeInterval;
 12098                           
 12099                           ;main.c: 341: break;
 12100                           
 12101  0121                     i1l3485:	
 12102                           ;main.c: 344: case 4: EncEdgeMinTimeIntSumAvg+=EncEdgeTimeInterval;
 12103                           
 12104                           ;main.c: 343: break;
 12105                           
 12106  0121  0020               	movlb	0	; select bank0
 12107  0122  083E               	movf	_EncEdgeTimeInterval,w
 12108  0123  0021               	movlb	1	; select bank1
 12109  0124  07A8               	addwf	_EncEdgeMinTimeIntSumAvg^(0+128),f
 12110  0125  0020               	movlb	0	; select bank0
 12111  0126  083F               	movf	_EncEdgeTimeInterval+1,w
 12112  0127  0021               	movlb	1	; select bank1
 12113  0128  3DA9               	addwfc	(_EncEdgeMinTimeIntSumAvg+1)^(0+128),f
 12114  0129  0020               	movlb	0	; select bank0
 12115  012A  0840               	movf	_EncEdgeTimeInterval+2,w
 12116  012B  0021               	movlb	1	; select bank1
 12117  012C  3DAA               	addwfc	(_EncEdgeMinTimeIntSumAvg+2)^(0+128),f
 12118  012D  0020               	movlb	0	; select bank0
 12119  012E  0841               	movf	_EncEdgeTimeInterval+3,w
 12120  012F  0021               	movlb	1	; select bank1
 12121  0130  3DAB               	addwfc	(_EncEdgeMinTimeIntSumAvg+3)^(0+128),f
 12122                           
 12123                           ;main.c: 345: break;
 12124  0131  2A99               	goto	i1l3543
 12125  0132                     i1l3487:	
 12126                           ;main.c: 346: case 5: EncEdgeMinTimeIntSumAvg+=EncEdgeTimeInterval;
 12127                           
 12128  0132  0020               	movlb	0	; select bank0
 12129  0133  083E               	movf	_EncEdgeTimeInterval,w
 12130  0134  0021               	movlb	1	; select bank1
 12131  0135  07A8               	addwf	_EncEdgeMinTimeIntSumAvg^(0+128),f
 12132  0136  0020               	movlb	0	; select bank0
 12133  0137  083F               	movf	_EncEdgeTimeInterval+1,w
 12134  0138  0021               	movlb	1	; select bank1
 12135  0139  3DA9               	addwfc	(_EncEdgeMinTimeIntSumAvg+1)^(0+128),f
 12136  013A  0020               	movlb	0	; select bank0
 12137  013B  0840               	movf	_EncEdgeTimeInterval+2,w
 12138  013C  0021               	movlb	1	; select bank1
 12139  013D  3DAA               	addwfc	(_EncEdgeMinTimeIntSumAvg+2)^(0+128),f
 12140  013E  0020               	movlb	0	; select bank0
 12141  013F  0841               	movf	_EncEdgeTimeInterval+3,w
 12142  0140  0021               	movlb	1	; select bank1
 12143  0141  3DAB               	addwfc	(_EncEdgeMinTimeIntSumAvg+3)^(0+128),f
 12144                           
 12145                           ;main.c: 347: if((EncoderPosition-OldEncPos) == (multipleTimecheck0-1))
 12146  0142  0020               	movlb	0	; select bank0
 12147  0143  0854               	movf	_multipleTimecheck0,w
 12148  0144  3EFF               	addlw	255
 12149  0145  00AF               	movwf	??_OnEncPulseEdgeEvent
 12150  0146  30FF               	movlw	255
 12151  0147  1803               	skipnc
 12152  0148  3000               	movlw	0
 12153  0149  00B0               	movwf	??_OnEncPulseEdgeEvent+1
 12154  014A  0021               	movlb	1	; select bank1
 12155  014B  0948               	comf	_OldEncPos^(0+128),w
 12156  014C  0020               	movlb	0	; select bank0
 12157  014D  00B1               	movwf	??_OnEncPulseEdgeEvent+2
 12158  014E  0021               	movlb	1	; select bank1
 12159  014F  0949               	comf	(_OldEncPos+1)^(0+128),w
 12160  0150  0020               	movlb	0	; select bank0
 12161  0151  00B2               	movwf	??_OnEncPulseEdgeEvent+3
 12162  0152  0AB1               	incf	??_OnEncPulseEdgeEvent+2,f
 12163  0153  1903               	skipnz
 12164  0154  0AB2               	incf	??_OnEncPulseEdgeEvent+3,f
 12165  0155  0844               	movf	_EncoderPosition,w
 12166  0156  0731               	addwf	??_OnEncPulseEdgeEvent+2,w
 12167  0157  00B3               	movwf	??_OnEncPulseEdgeEvent+4
 12168  0158  0845               	movf	_EncoderPosition+1,w
 12169  0159  3D32               	addwfc	??_OnEncPulseEdgeEvent+3,w
 12170  015A  00B4               	movwf	??_OnEncPulseEdgeEvent+5
 12171  015B  0830               	movf	??_OnEncPulseEdgeEvent+1,w
 12172  015C  0634               	xorwf	??_OnEncPulseEdgeEvent+5,w
 12173  015D  1D03               	skipz
 12174  015E  2961               	goto	u181_25
 12175  015F  082F               	movf	??_OnEncPulseEdgeEvent,w
 12176  0160  0633               	xorwf	??_OnEncPulseEdgeEvent+4,w
 12177  0161                     u181_25:	
 12178  0161  1D03               	skipz
 12179  0162  298C               	goto	i1l3493
 12180                           
 12181                           ;main.c: 348: {
 12182                           ;main.c: 349: EncEdgeMinTimeInterval= EncEdgeMinTimeIntSumAvg/multipleTimecheck0;
 12183  0163  0854               	movf	_multipleTimecheck0,w
 12184  0164  00AF               	movwf	??_OnEncPulseEdgeEvent
 12185  0165  01B0               	clrf	??_OnEncPulseEdgeEvent+1
 12186  0166  01B1               	clrf	??_OnEncPulseEdgeEvent+2
 12187  0167  01B2               	clrf	??_OnEncPulseEdgeEvent+3
 12188  0168  0832               	movf	??_OnEncPulseEdgeEvent+3,w
 12189  0169  00A3               	movwf	___lldiv@divisor+3
 12190  016A  0831               	movf	??_OnEncPulseEdgeEvent+2,w
 12191  016B  00A2               	movwf	___lldiv@divisor+2
 12192  016C  0830               	movf	??_OnEncPulseEdgeEvent+1,w
 12193  016D  00A1               	movwf	___lldiv@divisor+1
 12194  016E  082F               	movf	??_OnEncPulseEdgeEvent,w
 12195  016F  00A0               	movwf	___lldiv@divisor
 12196  0170  0021               	movlb	1	; select bank1
 12197  0171  082B               	movf	(_EncEdgeMinTimeIntSumAvg+3)^(0+128),w
 12198  0172  0020               	movlb	0	; select bank0
 12199  0173  00A7               	movwf	___lldiv@dividend+3
 12200  0174  0021               	movlb	1	; select bank1
 12201  0175  082A               	movf	(_EncEdgeMinTimeIntSumAvg+2)^(0+128),w
 12202  0176  0020               	movlb	0	; select bank0
 12203  0177  00A6               	movwf	___lldiv@dividend+2
 12204  0178  0021               	movlb	1	; select bank1
 12205  0179  0829               	movf	(_EncEdgeMinTimeIntSumAvg+1)^(0+128),w
 12206  017A  0020               	movlb	0	; select bank0
 12207  017B  00A5               	movwf	___lldiv@dividend+1
 12208  017C  0021               	movlb	1	; select bank1
 12209  017D  0828               	movf	_EncEdgeMinTimeIntSumAvg^(0+128),w
 12210  017E  0020               	movlb	0	; select bank0
 12211  017F  00A4               	movwf	___lldiv@dividend
 12212  0180  3185  25FE  3180   	fcall	___lldiv
 12213  0183  0020               	movlb	0	; select bank0
 12214  0184  0823               	movf	?___lldiv+3,w
 12215  0185  00D9               	movwf	_EncEdgeMinTimeInterval+3
 12216  0186  0822               	movf	?___lldiv+2,w
 12217  0187  00D8               	movwf	_EncEdgeMinTimeInterval+2
 12218  0188  0821               	movf	?___lldiv+1,w
 12219  0189  00D7               	movwf	_EncEdgeMinTimeInterval+1
 12220  018A  0820               	movf	?___lldiv,w
 12221  018B  00D6               	movwf	_EncEdgeMinTimeInterval
 12222  018C                     i1l3493:	
 12223                           
 12224                           ;main.c: 350: }
 12225                           ;main.c: 351: multipleTimecheck0=0;
 12226  018C  01D4               	clrf	_multipleTimecheck0
 12227                           
 12228                           ;main.c: 352: EncEdgeMinTimeIntSumAvg=0;
 12229  018D  3000               	movlw	0
 12230  018E  0021               	movlb	1	; select bank1
 12231  018F  00AB               	movwf	(_EncEdgeMinTimeIntSumAvg+3)^(0+128)
 12232  0190  3000               	movlw	0
 12233  0191  00AA               	movwf	(_EncEdgeMinTimeIntSumAvg+2)^(0+128)
 12234  0192  3000               	movlw	0
 12235  0193  00A9               	movwf	(_EncEdgeMinTimeIntSumAvg+1)^(0+128)
 12236  0194  3000               	movlw	0
 12237  0195  00A8               	movwf	_EncEdgeMinTimeIntSumAvg^(0+128)
 12238                           
 12239                           ;main.c: 355: }
 12240                           
 12241                           ;main.c: 354: default:break;
 12242                           
 12243                           ;main.c: 353: break;
 12244  0196  2A99               	goto	i1l3543
 12245  0197                     i1l3499:	
 12246  0197  0020               	movlb	0	; select bank0
 12247  0198  0854               	movf	_multipleTimecheck0,w
 12248                           
 12249                           ; Switch size 1, requested type "space"
 12250                           ; Number of cases is 5, Range of values is 1 to 5
 12251                           ; switch strategies available:
 12252                           ; Name         Instructions Cycles
 12253                           ; simple_byte           16     9 (average)
 12254                           ; direct_byte           19     9 (fixed)
 12255                           ; jumptable            263     9 (fixed)
 12256                           ;	Chosen strategy is simple_byte
 12257  0199  3A01               	xorlw	1	; case 1
 12258  019A  1903               	skipnz
 12259  019B  291A               	goto	i1l3479
 12260  019C  3A03               	xorlw	3	; case 2
 12261  019D  1903               	skipnz
 12262  019E  2921               	goto	i1l3481
 12263  019F  3A01               	xorlw	1	; case 3
 12264  01A0  1903               	skipnz
 12265  01A1  2921               	goto	i1l3483
 12266  01A2  3A07               	xorlw	7	; case 4
 12267  01A3  1903               	skipnz
 12268  01A4  2921               	goto	i1l3485
 12269  01A5  3A01               	xorlw	1	; case 5
 12270  01A6  1903               	skipnz
 12271  01A7  2932               	goto	i1l3487
 12272  01A8  2A99               	goto	i1l3543
 12273                           
 12274                           ;main.c: 358: }
 12275  01A9  2A99               	goto	i1l3543
 12276  01AA                     i1l3501:	
 12277                           
 12278                           ;main.c: 359: else if(EncEdgeTimeInterval >= (EncEdgeMinTimeInterval + ((EncEdgeMinTimeI
      +                          nterval*EncSpdredFact)/100)))
 12279  01AA  3000               	movlw	0
 12280  01AB  00A3               	movwf	___lldiv@divisor+3
 12281  01AC  3000               	movlw	0
 12282  01AD  00A2               	movwf	___lldiv@divisor+2
 12283  01AE  3000               	movlw	0
 12284  01AF  00A1               	movwf	___lldiv@divisor+1
 12285  01B0  3064               	movlw	100
 12286  01B1  00A0               	movwf	___lldiv@divisor
 12287  01B2  0859               	movf	_EncEdgeMinTimeInterval+3,w
 12288  01B3  00F3               	movwf	___lmul@multiplier+3
 12289  01B4  0858               	movf	_EncEdgeMinTimeInterval+2,w
 12290  01B5  00F2               	movwf	___lmul@multiplier+2
 12291  01B6  0857               	movf	_EncEdgeMinTimeInterval+1,w
 12292  01B7  00F1               	movwf	___lmul@multiplier+1
 12293  01B8  0856               	movf	_EncEdgeMinTimeInterval,w
 12294  01B9  00F0               	movwf	___lmul@multiplier
 12295  01BA  0021               	movlb	1	; select bank1
 12296  01BB  086B               	movf	(_EncSpdredFact+3)^(0+128),w
 12297  01BC  00F7               	movwf	___lmul@multiplicand+3
 12298  01BD  086A               	movf	(_EncSpdredFact+2)^(0+128),w
 12299  01BE  00F6               	movwf	___lmul@multiplicand+2
 12300  01BF  0869               	movf	(_EncSpdredFact+1)^(0+128),w
 12301  01C0  00F5               	movwf	___lmul@multiplicand+1
 12302  01C1  0868               	movf	_EncSpdredFact^(0+128),w
 12303  01C2  00F4               	movwf	___lmul@multiplicand
 12304  01C3  3187  2733  3180   	fcall	___lmul
 12305  01C6  0873               	movf	?___lmul+3,w
 12306  01C7  0020               	movlb	0	; select bank0
 12307  01C8  00A7               	movwf	___lldiv@dividend+3
 12308  01C9  0872               	movf	?___lmul+2,w
 12309  01CA  00A6               	movwf	___lldiv@dividend+2
 12310  01CB  0871               	movf	?___lmul+1,w
 12311  01CC  00A5               	movwf	___lldiv@dividend+1
 12312  01CD  0870               	movf	?___lmul,w
 12313  01CE  00A4               	movwf	___lldiv@dividend
 12314  01CF  3185  25FE  3180   	fcall	___lldiv
 12315  01D2  0020               	movlb	0	; select bank0
 12316  01D3  0820               	movf	?___lldiv,w
 12317  01D4  0756               	addwf	_EncEdgeMinTimeInterval,w
 12318  01D5  00AF               	movwf	??_OnEncPulseEdgeEvent
 12319  01D6  0821               	movf	?___lldiv+1,w
 12320  01D7  3D57               	addwfc	_EncEdgeMinTimeInterval+1,w
 12321  01D8  00B0               	movwf	??_OnEncPulseEdgeEvent+1
 12322  01D9  0822               	movf	?___lldiv+2,w
 12323  01DA  3D58               	addwfc	_EncEdgeMinTimeInterval+2,w
 12324  01DB  00B1               	movwf	??_OnEncPulseEdgeEvent+2
 12325  01DC  0823               	movf	?___lldiv+3,w
 12326  01DD  3D59               	addwfc	_EncEdgeMinTimeInterval+3,w
 12327  01DE  00B2               	movwf	??_OnEncPulseEdgeEvent+3
 12328  01DF  0832               	movf	??_OnEncPulseEdgeEvent+3,w
 12329  01E0  0241               	subwf	_EncEdgeTimeInterval+3,w
 12330  01E1  1D03               	skipz
 12331  01E2  29ED               	goto	u182_25
 12332  01E3  0831               	movf	??_OnEncPulseEdgeEvent+2,w
 12333  01E4  0240               	subwf	_EncEdgeTimeInterval+2,w
 12334  01E5  1D03               	skipz
 12335  01E6  29ED               	goto	u182_25
 12336  01E7  0830               	movf	??_OnEncPulseEdgeEvent+1,w
 12337  01E8  023F               	subwf	_EncEdgeTimeInterval+1,w
 12338  01E9  1D03               	skipz
 12339  01EA  29ED               	goto	u182_25
 12340  01EB  082F               	movf	??_OnEncPulseEdgeEvent,w
 12341  01EC  023E               	subwf	_EncEdgeTimeInterval,w
 12342  01ED                     u182_25:	
 12343  01ED  1C03               	skipc
 12344  01EE  2A99               	goto	i1l3543
 12345                           
 12346                           ;main.c: 360: {
 12347                           ;main.c: 363: multipleTimecheck1++;
 12348  01EF  3001               	movlw	1
 12349  01F0  00AF               	movwf	??_OnEncPulseEdgeEvent
 12350  01F1  082F               	movf	??_OnEncPulseEdgeEvent,w
 12351  01F2  07D3               	addwf	_multipleTimecheck1,f
 12352                           
 12353                           ;main.c: 364: switch(multipleTimecheck1)
 12354  01F3  2A50               	goto	i1l3527
 12355  01F4                     i1l3505:	
 12356                           ;main.c: 365: {
 12357                           ;main.c: 366: case 1: OldEncPos=EncoderPosition;
 12358                           
 12359  01F4  0845               	movf	_EncoderPosition+1,w
 12360  01F5  0021               	movlb	1	; select bank1
 12361  01F6  00C9               	movwf	(_OldEncPos+1)^(0+128)
 12362  01F7  0020               	movlb	0	; select bank0
 12363  01F8  0844               	movf	_EncoderPosition,w
 12364  01F9  0021               	movlb	1	; select bank1
 12365  01FA  00C8               	movwf	_OldEncPos^(0+128)
 12366                           
 12367                           ;main.c: 373: break;
 12368                           
 12369                           ;main.c: 372: case 4:
 12370                           
 12371                           ;main.c: 371: break;
 12372                           
 12373                           ;main.c: 370: case 3:
 12374                           
 12375                           ;main.c: 369: break;
 12376                           
 12377                           ;main.c: 368: case 2:
 12378                           
 12379                           ;main.c: 367: break;
 12380  01FB  2A99               	goto	i1l3543
 12381  01FC                     i1l3507:	
 12382                           ;main.c: 374: case 5: if((EncoderPosition-OldEncPos) == (multipleTimecheck1-1))
 12383                           
 12384  01FC  0020               	movlb	0	; select bank0
 12385  01FD  0853               	movf	_multipleTimecheck1,w
 12386  01FE  3EFF               	addlw	255
 12387  01FF  00AF               	movwf	??_OnEncPulseEdgeEvent
 12388  0200  30FF               	movlw	255
 12389  0201  1803               	skipnc
 12390  0202  3000               	movlw	0
 12391  0203  00B0               	movwf	??_OnEncPulseEdgeEvent+1
 12392  0204  0021               	movlb	1	; select bank1
 12393  0205  0948               	comf	_OldEncPos^(0+128),w
 12394  0206  0020               	movlb	0	; select bank0
 12395  0207  00B1               	movwf	??_OnEncPulseEdgeEvent+2
 12396  0208  0021               	movlb	1	; select bank1
 12397  0209  0949               	comf	(_OldEncPos+1)^(0+128),w
 12398  020A  0020               	movlb	0	; select bank0
 12399  020B  00B2               	movwf	??_OnEncPulseEdgeEvent+3
 12400  020C  0AB1               	incf	??_OnEncPulseEdgeEvent+2,f
 12401  020D  1903               	skipnz
 12402  020E  0AB2               	incf	??_OnEncPulseEdgeEvent+3,f
 12403  020F  0844               	movf	_EncoderPosition,w
 12404  0210  0731               	addwf	??_OnEncPulseEdgeEvent+2,w
 12405  0211  00B3               	movwf	??_OnEncPulseEdgeEvent+4
 12406  0212  0845               	movf	_EncoderPosition+1,w
 12407  0213  3D32               	addwfc	??_OnEncPulseEdgeEvent+3,w
 12408  0214  00B4               	movwf	??_OnEncPulseEdgeEvent+5
 12409  0215  0830               	movf	??_OnEncPulseEdgeEvent+1,w
 12410  0216  0634               	xorwf	??_OnEncPulseEdgeEvent+5,w
 12411  0217  1D03               	skipz
 12412  0218  2A1B               	goto	u183_25
 12413  0219  082F               	movf	??_OnEncPulseEdgeEvent,w
 12414  021A  0633               	xorwf	??_OnEncPulseEdgeEvent+4,w
 12415  021B                     u183_25:	
 12416  021B  1D03               	skipz
 12417  021C  2A4E               	goto	i1l3523
 12418                           
 12419                           ;main.c: 375: {
 12420                           ;main.c: 376: ShutdownDetected = 1;
 12421  021D  01CF               	clrf	_ShutdownDetected
 12422  021E  0ACF               	incf	_ShutdownDetected,f
 12423                           
 12424                           ;main.c: 377: NutRunCycleStop();
 12425  021F  318F  2711  3180   	fcall	_NutRunCycleStop
 12426                           
 12427                           ;main.c: 379: if(EncoderPosition < 0)
 12428  0222  0020               	movlb	0	; select bank0
 12429  0223  1FC5               	btfss	_EncoderPosition+1,7
 12430  0224  2A31               	goto	i1l3517
 12431                           
 12432                           ;main.c: 380: NutRunLength = -EncoderPosition;
 12433  0225  0944               	comf	_EncoderPosition,w
 12434  0226  00AF               	movwf	??_OnEncPulseEdgeEvent
 12435  0227  0945               	comf	_EncoderPosition+1,w
 12436  0228  00B0               	movwf	??_OnEncPulseEdgeEvent+1
 12437  0229  0AAF               	incf	??_OnEncPulseEdgeEvent,f
 12438  022A  1903               	skipnz
 12439  022B  0AB0               	incf	??_OnEncPulseEdgeEvent+1,f
 12440  022C  082F               	movf	??_OnEncPulseEdgeEvent,w
 12441  022D  00C6               	movwf	_NutRunLength
 12442  022E  0830               	movf	??_OnEncPulseEdgeEvent+1,w
 12443  022F  00C7               	movwf	_NutRunLength+1
 12444  0230  2A35               	goto	i1l3519
 12445  0231                     i1l3517:	
 12446                           
 12447                           ;main.c: 381: else
 12448                           ;main.c: 382: NutRunLength = EncoderPosition;
 12449  0231  0845               	movf	_EncoderPosition+1,w
 12450  0232  00C7               	movwf	_NutRunLength+1
 12451  0233  0844               	movf	_EncoderPosition,w
 12452  0234  00C6               	movwf	_NutRunLength
 12453  0235                     i1l3519:	
 12454                           
 12455                           ;main.c: 384: IdleTimeOnShutOff = millis() + 2100;
 12456  0235  318D  2597  3180   	fcall	_millis
 12457  0238  3034               	movlw	52
 12458  0239  0770               	addwf	?_millis,w
 12459  023A  0021               	movlb	1	; select bank1
 12460  023B  00A4               	movwf	_IdleTimeOnShutOff^(0+128)
 12461  023C  3008               	movlw	8
 12462  023D  3D71               	addwfc	?_millis+1,w
 12463  023E  00A5               	movwf	(_IdleTimeOnShutOff+1)^(0+128)
 12464  023F  3000               	movlw	0
 12465  0240  3D72               	addwfc	?_millis+2,w
 12466  0241  00A6               	movwf	(_IdleTimeOnShutOff+2)^(0+128)
 12467  0242  3000               	movlw	0
 12468  0243  3D73               	addwfc	?_millis+3,w
 12469  0244  00A7               	movwf	(_IdleTimeOnShutOff+3)^(0+128)
 12470                           
 12471                           ;main.c: 385: EUSART_Write('D');
 12472  0245  3044               	movlw	68
 12473  0246  318D  2565  3180   	fcall	i1_EUSART_Write
 12474                           
 12475                           ;main.c: 386: NutRunstate = 3;
 12476  0249  3003               	movlw	3
 12477  024A  0020               	movlb	0	; select bank0
 12478  024B  00AF               	movwf	??_OnEncPulseEdgeEvent
 12479  024C  082F               	movf	??_OnEncPulseEdgeEvent,w
 12480  024D  00CE               	movwf	_NutRunstate
 12481  024E                     i1l3523:	
 12482                           
 12483                           ;main.c: 387: }
 12484                           ;main.c: 388: multipleTimecheck1=0;
 12485  024E  01D3               	clrf	_multipleTimecheck1
 12486                           
 12487                           ;main.c: 391: }
 12488                           
 12489                           ;main.c: 390: default:break;
 12490                           
 12491                           ;main.c: 389: break;
 12492  024F  2A99               	goto	i1l3543
 12493  0250                     i1l3527:	
 12494  0250  0853               	movf	_multipleTimecheck1,w
 12495                           
 12496                           ; Switch size 1, requested type "space"
 12497                           ; Number of cases is 5, Range of values is 1 to 5
 12498                           ; switch strategies available:
 12499                           ; Name         Instructions Cycles
 12500                           ; simple_byte           16     9 (average)
 12501                           ; direct_byte           19     9 (fixed)
 12502                           ; jumptable            263     9 (fixed)
 12503                           ;	Chosen strategy is simple_byte
 12504  0251  3A01               	xorlw	1	; case 1
 12505  0252  1903               	skipnz
 12506  0253  29F4               	goto	i1l3505
 12507  0254  3A03               	xorlw	3	; case 2
 12508  0255  1903               	skipnz
 12509  0256  2A99               	goto	i1l3543
 12510  0257  3A01               	xorlw	1	; case 3
 12511  0258  1903               	skipnz
 12512  0259  2A99               	goto	i1l3543
 12513  025A  3A07               	xorlw	7	; case 4
 12514  025B  1903               	skipnz
 12515  025C  2A99               	goto	i1l3543
 12516  025D  3A01               	xorlw	1	; case 5
 12517  025E  1903               	skipnz
 12518  025F  29FC               	goto	i1l3507
 12519  0260  2A99               	goto	i1l3543
 12520                           
 12521                           ;main.c: 394: }
 12522                           ;main.c: 395: break;
 12523  0261  2A99               	goto	i1l3543
 12524  0262                     i1l3529:	
 12525                           ;main.c: 397: case 3:
 12526                           
 12527                           
 12528                           ;main.c: 398: if(millis() > IdleTimeOnShutOff )
 12529  0262  318D  2597  3180   	fcall	_millis
 12530  0265  0873               	movf	?_millis+3,w
 12531  0266  0021               	movlb	1	; select bank1
 12532  0267  0227               	subwf	(_IdleTimeOnShutOff+3)^(0+128),w
 12533  0268  1D03               	skipz
 12534  0269  2A74               	goto	u185_25
 12535  026A  0872               	movf	?_millis+2,w
 12536  026B  0226               	subwf	(_IdleTimeOnShutOff+2)^(0+128),w
 12537  026C  1D03               	skipz
 12538  026D  2A74               	goto	u185_25
 12539  026E  0871               	movf	?_millis+1,w
 12540  026F  0225               	subwf	(_IdleTimeOnShutOff+1)^(0+128),w
 12541  0270  1D03               	skipz
 12542  0271  2A74               	goto	u185_25
 12543  0272  0870               	movf	?_millis,w
 12544  0273  0224               	subwf	_IdleTimeOnShutOff^(0+128),w
 12545  0274                     u185_25:	
 12546  0274  1803               	skipnc
 12547  0275  2A99               	goto	i1l3543
 12548                           
 12549                           ;main.c: 399: {
 12550                           ;main.c: 400: NutRunstate = 0;
 12551  0276  0020               	movlb	0	; select bank0
 12552  0277  01CE               	clrf	_NutRunstate
 12553                           
 12554                           ;main.c: 401: EncoderPosition = 0;
 12555  0278  01C4               	clrf	_EncoderPosition
 12556  0279  01C5               	clrf	_EncoderPosition+1
 12557                           
 12558                           ;main.c: 402: EncEdgeMinTimeInterval= 0xEFFFFFFF;
 12559  027A  30EF               	movlw	239
 12560  027B  00D9               	movwf	_EncEdgeMinTimeInterval+3
 12561  027C  30FF               	movlw	255
 12562  027D  00D8               	movwf	_EncEdgeMinTimeInterval+2
 12563  027E  30FF               	movlw	255
 12564  027F  00D7               	movwf	_EncEdgeMinTimeInterval+1
 12565  0280  30FF               	movlw	255
 12566  0281  00D6               	movwf	_EncEdgeMinTimeInterval
 12567                           
 12568                           ;main.c: 403: EUSART_Write('A');
 12569  0282  3041               	movlw	65
 12570  0283  318D  2565  3180   	fcall	i1_EUSART_Write
 12571                           
 12572                           ;main.c: 404: NutRunCycleStart();
 12573  0286  318E  2618  3180   	fcall	i1_NutRunCycleStart
 12574                           
 12575                           ;main.c: 409: }
 12576                           
 12577                           ;main.c: 408: default : break;
 12578                           
 12579                           ;main.c: 405: }
 12580                           ;main.c: 406: break;
 12581  0289  2A99               	goto	i1l3543
 12582  028A                     i1l3541:	
 12583  028A  0020               	movlb	0	; select bank0
 12584  028B  084E               	movf	_NutRunstate,w
 12585                           
 12586                           ; Switch size 1, requested type "space"
 12587                           ; Number of cases is 4, Range of values is 0 to 3
 12588                           ; switch strategies available:
 12589                           ; Name         Instructions Cycles
 12590                           ; simple_byte           13     7 (average)
 12591                           ; direct_byte           14     6 (fixed)
 12592                           ; jumptable            260     6 (fixed)
 12593                           ;	Chosen strategy is simple_byte
 12594  028C  3A00               	xorlw	0	; case 0
 12595  028D  1903               	skipnz
 12596  028E  28B9               	goto	i1l3455
 12597  028F  3A01               	xorlw	1	; case 1
 12598  0290  1903               	skipnz
 12599  0291  28D8               	goto	i1l3461
 12600  0292  3A03               	xorlw	3	; case 2
 12601  0293  1903               	skipnz
 12602  0294  2904               	goto	i1l3475
 12603  0295  3A01               	xorlw	1	; case 3
 12604  0296  1903               	skipnz
 12605  0297  2A62               	goto	i1l3529
 12606  0298  2A99               	goto	i1l3543
 12607  0299                     i1l3543:	
 12608                           
 12609                           ;main.c: 411: EncEdgeTimeIntervalOld= EncEdgeTimeInterval;
 12610  0299  0020               	movlb	0	; select bank0
 12611  029A  0841               	movf	_EncEdgeTimeInterval+3,w
 12612  029B  0021               	movlb	1	; select bank1
 12613  029C  00AF               	movwf	(_EncEdgeTimeIntervalOld+3)^(0+128)
 12614  029D  0020               	movlb	0	; select bank0
 12615  029E  0840               	movf	_EncEdgeTimeInterval+2,w
 12616  029F  0021               	movlb	1	; select bank1
 12617  02A0  00AE               	movwf	(_EncEdgeTimeIntervalOld+2)^(0+128)
 12618  02A1  0020               	movlb	0	; select bank0
 12619  02A2  083F               	movf	_EncEdgeTimeInterval+1,w
 12620  02A3  0021               	movlb	1	; select bank1
 12621  02A4  00AD               	movwf	(_EncEdgeTimeIntervalOld+1)^(0+128)
 12622  02A5  0020               	movlb	0	; select bank0
 12623  02A6  083E               	movf	_EncEdgeTimeInterval,w
 12624  02A7  0021               	movlb	1	; select bank1
 12625  02A8  00AC               	movwf	_EncEdgeTimeIntervalOld^(0+128)
 12626                           
 12627                           ;main.c: 412: EncEdgeTimeInterval=0;
 12628  02A9  3000               	movlw	0
 12629  02AA  0020               	movlb	0	; select bank0
 12630  02AB  00C1               	movwf	_EncEdgeTimeInterval+3
 12631  02AC  3000               	movlw	0
 12632  02AD  00C0               	movwf	_EncEdgeTimeInterval+2
 12633  02AE  3000               	movlw	0
 12634  02AF  00BF               	movwf	_EncEdgeTimeInterval+1
 12635  02B0  3000               	movlw	0
 12636  02B1  00BE               	movwf	_EncEdgeTimeInterval
 12637                           
 12638                           ;main.c: 414: EncEdgeGotFlag=1;
 12639  02B2  01D0               	clrf	_EncEdgeGotFlag
 12640  02B3  0AD0               	incf	_EncEdgeGotFlag,f
 12641                           
 12642                           ;main.c: 416: OldEncPulseOpState=EncPulseOpState;
 12643  02B4  0849               	movf	_EncPulseOpState+1,w
 12644  02B5  0021               	movlb	1	; select bank1
 12645  02B6  00CB               	movwf	(_OldEncPulseOpState+1)^(0+128)
 12646  02B7  0020               	movlb	0	; select bank0
 12647  02B8  0848               	movf	_EncPulseOpState,w
 12648  02B9  0021               	movlb	1	; select bank1
 12649  02BA  00CA               	movwf	_OldEncPulseOpState^(0+128)
 12650                           
 12651                           ;main.c: 417: getEncoderState();
 12652  02BB  318D  25AB  3180   	fcall	i1_getEncoderState
 12653                           
 12654                           ;main.c: 419: if((OldEncPulseOpState == 0) && (EncPulseOpState == 1))
 12655  02BE  0021               	movlb	1	; select bank1
 12656  02BF  084A               	movf	_OldEncPulseOpState^(0+128),w
 12657  02C0  044B               	iorwf	(_OldEncPulseOpState+1)^(0+128),w
 12658  02C1  1D03               	btfss	3,2
 12659  02C2  2ADC               	goto	i1l3563
 12660  02C3  0020               	movlb	0	; select bank0
 12661  02C4  0348               	decf	_EncPulseOpState,w
 12662  02C5  0449               	iorwf	_EncPulseOpState+1,w
 12663  02C6  1D03               	btfss	3,2
 12664  02C7  2ADC               	goto	i1l3563
 12665                           
 12666                           ;main.c: 420: {
 12667                           ;main.c: 421: if(PORTCbits.RC4)
 12668  02C8  1E0E               	btfss	14,4	;volatile
 12669  02C9  2AD3               	goto	i1l3559
 12670                           
 12671                           ;main.c: 422: {
 12672                           ;main.c: 423: EncoderPosition--;
 12673  02CA  30FF               	movlw	255
 12674  02CB  07C4               	addwf	_EncoderPosition,f
 12675  02CC  30FF               	movlw	255
 12676  02CD  3DC5               	addwfc	_EncoderPosition+1,f
 12677                           
 12678                           ;main.c: 424: EncoderPositionOneCycle--;
 12679  02CE  30FF               	movlw	255
 12680  02CF  00AF               	movwf	??_OnEncPulseEdgeEvent
 12681  02D0  082F               	movf	??_OnEncPulseEdgeEvent,w
 12682  02D1  07D2               	addwf	_EncoderPositionOneCycle,f
 12683                           
 12684                           ;main.c: 425: }
 12685  02D2  0008               	return
 12686  02D3                     i1l3559:	
 12687                           
 12688                           ;main.c: 426: else
 12689                           ;main.c: 427: {
 12690                           ;main.c: 428: EncoderPosition++;
 12691  02D3  3001               	movlw	1
 12692  02D4  07C4               	addwf	_EncoderPosition,f
 12693  02D5  3000               	movlw	0
 12694  02D6  3DC5               	addwfc	_EncoderPosition+1,f
 12695                           
 12696                           ;main.c: 429: EncoderPositionOneCycle++;
 12697  02D7  3001               	movlw	1
 12698  02D8  00AF               	movwf	??_OnEncPulseEdgeEvent
 12699  02D9  082F               	movf	??_OnEncPulseEdgeEvent,w
 12700  02DA  07D2               	addwf	_EncoderPositionOneCycle,f
 12701                           
 12702                           ;main.c: 430: }
 12703                           ;main.c: 431: }
 12704  02DB  0008               	return
 12705  02DC                     i1l3563:	
 12706                           
 12707                           ;main.c: 432: else if((OldEncPulseOpState == 1) && (EncPulseOpState == 0))
 12708  02DC  0021               	movlb	1	; select bank1
 12709  02DD  034A               	decf	_OldEncPulseOpState^(0+128),w
 12710  02DE  044B               	iorwf	(_OldEncPulseOpState+1)^(0+128),w
 12711  02DF  1D03               	btfss	3,2
 12712  02E0  0008               	return
 12713  02E1  0020               	movlb	0	; select bank0
 12714  02E2  0848               	movf	_EncPulseOpState,w
 12715  02E3  0449               	iorwf	_EncPulseOpState+1,w
 12716  02E4  1D03               	btfss	3,2
 12717  02E5  0008               	return
 12718                           
 12719                           ;main.c: 433: {
 12720                           ;main.c: 434: if(PORTCbits.RC4)
 12721  02E6  1E0E               	btfss	14,4	;volatile
 12722  02E7  2AF1               	goto	i1l3573
 12723                           
 12724                           ;main.c: 435: {
 12725                           ;main.c: 436: EncoderPosition++;
 12726  02E8  3001               	movlw	1
 12727  02E9  07C4               	addwf	_EncoderPosition,f
 12728  02EA  3000               	movlw	0
 12729  02EB  3DC5               	addwfc	_EncoderPosition+1,f
 12730                           
 12731                           ;main.c: 437: EncoderPositionOneCycle++;
 12732  02EC  3001               	movlw	1
 12733  02ED  00AF               	movwf	??_OnEncPulseEdgeEvent
 12734  02EE  082F               	movf	??_OnEncPulseEdgeEvent,w
 12735  02EF  07D2               	addwf	_EncoderPositionOneCycle,f
 12736                           
 12737                           ;main.c: 438: }
 12738  02F0  0008               	return
 12739  02F1                     i1l3573:	
 12740                           
 12741                           ;main.c: 439: else
 12742                           ;main.c: 440: {
 12743                           ;main.c: 441: EncoderPosition--;
 12744  02F1  30FF               	movlw	255
 12745  02F2  07C4               	addwf	_EncoderPosition,f
 12746  02F3  30FF               	movlw	255
 12747  02F4  3DC5               	addwfc	_EncoderPosition+1,f
 12748                           
 12749                           ;main.c: 442: EncoderPositionOneCycle--;
 12750  02F5  30FF               	movlw	255
 12751  02F6  00AF               	movwf	??_OnEncPulseEdgeEvent
 12752  02F7  082F               	movf	??_OnEncPulseEdgeEvent,w
 12753  02F8  07D2               	addwf	_EncoderPositionOneCycle,f
 12754  02F9  0008               	return
 12755  02FA                     __end_of_OnEncPulseEdgeEvent:	
 12756                           
 12757                           	psect	text70
 12758  0DAB                     __ptext70:	
 12759 ;; *************** function i1_getEncoderState *****************
 12760 ;; Defined at:
 12761 ;;		line 544 in file "main.c"
 12762 ;; Parameters:    Size  Location     Type
 12763 ;;		None
 12764 ;; Auto vars:     Size  Location     Type
 12765 ;;		None
 12766 ;; Return value:  Size  Location     Type
 12767 ;;                  1    wreg      void 
 12768 ;; Registers used:
 12769 ;;		wreg, status,2
 12770 ;; Tracked objects:
 12771 ;;		On entry : 0/0
 12772 ;;		On exit  : 0/0
 12773 ;;		Unchanged: 0/0
 12774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12775 ;;      Params:         0       0       0       0       0       0       0       0
 12776 ;;      Locals:         0       0       0       0       0       0       0       0
 12777 ;;      Temps:          0       0       0       0       0       0       0       0
 12778 ;;      Totals:         0       0       0       0       0       0       0       0
 12779 ;;Total ram usage:        0 bytes
 12780 ;; Hardware stack levels used:    1
 12781 ;; This function calls:
 12782 ;;		Nothing
 12783 ;; This function is called by:
 12784 ;;		_OnEncPulseEdgeEvent
 12785 ;; This function uses a non-reentrant model
 12786 ;;
 12787                           
 12788                           
 12789                           ;psect for function i1_getEncoderState
 12790  0DAB                     i1_getEncoderState:	
 12791                           
 12792                           ;main.c: 546: if(PORTCbits.RC5)
 12793                           
 12794                           ;incstack = 0
 12795                           ; Regs used in i1_getEncoderState: [wreg+status,2]
 12796  0DAB  0020               	movlb	0	; select bank0
 12797  0DAC  1E8E               	btfss	14,5	;volatile
 12798  0DAD  2DB3               	goto	i1l3403
 12799                           
 12800                           ;main.c: 547: {
 12801                           ;main.c: 549: EncPulseOpState= 1;
 12802  0DAE  3001               	movlw	1
 12803  0DAF  00C8               	movwf	_EncPulseOpState
 12804  0DB0  3000               	movlw	0
 12805  0DB1  00C9               	movwf	_EncPulseOpState+1
 12806                           
 12807                           ;main.c: 552: }
 12808  0DB2  0008               	return
 12809  0DB3                     i1l3403:	
 12810                           
 12811                           ;main.c: 553: else
 12812                           ;main.c: 554: {
 12813                           ;main.c: 556: EncPulseOpState= 0;
 12814  0DB3  01C8               	clrf	_EncPulseOpState
 12815  0DB4  01C9               	clrf	_EncPulseOpState+1
 12816  0DB5  0008               	return
 12817  0DB6                     __end_ofi1_getEncoderState:	
 12818                           
 12819                           	psect	text71
 12820  0E18                     __ptext71:	
 12821 ;; *************** function i1_NutRunCycleStart *****************
 12822 ;; Defined at:
 12823 ;;		line 521 in file "main.c"
 12824 ;; Parameters:    Size  Location     Type
 12825 ;;		None
 12826 ;; Auto vars:     Size  Location     Type
 12827 ;;		None
 12828 ;; Return value:  Size  Location     Type
 12829 ;;                  1    wreg      void 
 12830 ;; Registers used:
 12831 ;;		wreg, status,2, status,0, pclath, cstack
 12832 ;; Tracked objects:
 12833 ;;		On entry : 0/0
 12834 ;;		On exit  : 0/0
 12835 ;;		Unchanged: 0/0
 12836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12837 ;;      Params:         0       0       0       0       0       0       0       0
 12838 ;;      Locals:         0       0       0       0       0       0       0       0
 12839 ;;      Temps:          0       0       0       0       0       0       0       0
 12840 ;;      Totals:         0       0       0       0       0       0       0       0
 12841 ;;Total ram usage:        0 bytes
 12842 ;; Hardware stack levels used:    1
 12843 ;; Hardware stack levels required when called:    1
 12844 ;; This function calls:
 12845 ;;		i1_NutRunCycleReset
 12846 ;;		i1_TMR3_StartTimer
 12847 ;;		i1_TMR3_WriteTimer
 12848 ;; This function is called by:
 12849 ;;		_OnEncPulseEdgeEvent
 12850 ;; This function uses a non-reentrant model
 12851 ;;
 12852                           
 12853                           
 12854                           ;psect for function i1_NutRunCycleStart
 12855  0E18                     i1_NutRunCycleStart:	
 12856                           
 12857                           ;main.c: 523: NutRunCycleReset();
 12858                           
 12859                           ;incstack = 0
 12860                           ; Regs used in i1_NutRunCycleStart: [wreg+status,2+status,0+pclath+cstack]
 12861  0E18  318F  2727  318E   	fcall	i1_NutRunCycleReset
 12862                           
 12863                           ;main.c: 525: TMR3_WriteTimer(0);
 12864  0E1B  3000               	movlw	0
 12865  0E1C  00F0               	movwf	i1TMR3_WriteTimer@timerVal
 12866  0E1D  00F1               	movwf	i1TMR3_WriteTimer@timerVal+1
 12867  0E1E  318E  2650  318E   	fcall	i1_TMR3_WriteTimer
 12868                           
 12869                           ;main.c: 526: TMR3_StartTimer();
 12870  0E21  318D  2507         	fcall	i1_TMR3_StartTimer
 12871                           
 12872                           ;main.c: 527: PIE3bits.TMR3IE = 1;
 12873  0E23  0021               	movlb	1	; select bank1
 12874  0E24  1613               	bsf	19,4	;volatile
 12875  0E25  0008               	return
 12876  0E26                     __end_ofi1_NutRunCycleStart:	
 12877                           
 12878                           	psect	text72
 12879  0D07                     __ptext72:	
 12880 ;; *************** function i1_TMR3_StartTimer *****************
 12881 ;; Defined at:
 12882 ;;		line 96 in file "mcc_generated_files/tmr3.c"
 12883 ;; Parameters:    Size  Location     Type
 12884 ;;		None
 12885 ;; Auto vars:     Size  Location     Type
 12886 ;;		None
 12887 ;; Return value:  Size  Location     Type
 12888 ;;                  1    wreg      void 
 12889 ;; Registers used:
 12890 ;;		None
 12891 ;; Tracked objects:
 12892 ;;		On entry : 0/0
 12893 ;;		On exit  : 0/0
 12894 ;;		Unchanged: 0/0
 12895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12896 ;;      Params:         0       0       0       0       0       0       0       0
 12897 ;;      Locals:         0       0       0       0       0       0       0       0
 12898 ;;      Temps:          0       0       0       0       0       0       0       0
 12899 ;;      Totals:         0       0       0       0       0       0       0       0
 12900 ;;Total ram usage:        0 bytes
 12901 ;; Hardware stack levels used:    1
 12902 ;; This function calls:
 12903 ;;		Nothing
 12904 ;; This function is called by:
 12905 ;;		_OnEncPulseEdgeEvent
 12906 ;;		i1_NutRunCycleStart
 12907 ;; This function uses a non-reentrant model
 12908 ;;
 12909                           
 12910                           
 12911                           ;psect for function i1_TMR3_StartTimer
 12912  0D07                     i1_TMR3_StartTimer:	
 12913                           
 12914                           ;tmr3.c: 99: T3CONbits.TMR3ON = 1;
 12915                           
 12916                           ;incstack = 0
 12917                           ; Regs used in i1_TMR3_StartTimer: []
 12918  0D07  0028               	movlb	8	; select bank8
 12919  0D08  1413               	bsf	19,0	;volatile
 12920  0D09  0008               	return
 12921  0D0A                     __end_ofi1_TMR3_StartTimer:	
 12922                           
 12923                           	psect	text73
 12924  0F27                     __ptext73:	
 12925 ;; *************** function i1_NutRunCycleReset *****************
 12926 ;; Defined at:
 12927 ;;		line 509 in file "main.c"
 12928 ;; Parameters:    Size  Location     Type
 12929 ;;		None
 12930 ;; Auto vars:     Size  Location     Type
 12931 ;;		None
 12932 ;; Return value:  Size  Location     Type
 12933 ;;                  1    wreg      void 
 12934 ;; Registers used:
 12935 ;;		wreg, status,2
 12936 ;; Tracked objects:
 12937 ;;		On entry : 0/0
 12938 ;;		On exit  : 0/0
 12939 ;;		Unchanged: 0/0
 12940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12941 ;;      Params:         0       0       0       0       0       0       0       0
 12942 ;;      Locals:         0       0       0       0       0       0       0       0
 12943 ;;      Temps:          0       0       0       0       0       0       0       0
 12944 ;;      Totals:         0       0       0       0       0       0       0       0
 12945 ;;Total ram usage:        0 bytes
 12946 ;; Hardware stack levels used:    1
 12947 ;; This function calls:
 12948 ;;		Nothing
 12949 ;; This function is called by:
 12950 ;;		i1_NutRunCycleStart
 12951 ;; This function uses a non-reentrant model
 12952 ;;
 12953                           
 12954                           
 12955                           ;psect for function i1_NutRunCycleReset
 12956  0F27                     i1_NutRunCycleReset:	
 12957                           
 12958                           ;main.c: 511: EncEdgeMinTimeInterval= 0xEFFFFFFF;
 12959                           
 12960                           ;incstack = 0
 12961                           ; Regs used in i1_NutRunCycleReset: [wreg+status,2]
 12962  0F27  30EF               	movlw	239
 12963  0F28  0020               	movlb	0	; select bank0
 12964  0F29  00D9               	movwf	_EncEdgeMinTimeInterval+3
 12965  0F2A  30FF               	movlw	255
 12966  0F2B  00D8               	movwf	_EncEdgeMinTimeInterval+2
 12967  0F2C  30FF               	movlw	255
 12968  0F2D  00D7               	movwf	_EncEdgeMinTimeInterval+1
 12969  0F2E  30FF               	movlw	255
 12970  0F2F  00D6               	movwf	_EncEdgeMinTimeInterval
 12971                           
 12972                           ;main.c: 512: EncEdgeTimeInterval= 0x00000000;
 12973  0F30  3000               	movlw	0
 12974  0F31  00C1               	movwf	_EncEdgeTimeInterval+3
 12975  0F32  3000               	movlw	0
 12976  0F33  00C0               	movwf	_EncEdgeTimeInterval+2
 12977  0F34  3000               	movlw	0
 12978  0F35  00BF               	movwf	_EncEdgeTimeInterval+1
 12979  0F36  3000               	movlw	0
 12980  0F37  00BE               	movwf	_EncEdgeTimeInterval
 12981                           
 12982                           ;main.c: 514: EncoderPosition= 0;
 12983  0F38  01C4               	clrf	_EncoderPosition
 12984  0F39  01C5               	clrf	_EncoderPosition+1
 12985                           
 12986                           ;main.c: 517: NutRunLength = 0;
 12987  0F3A  01C6               	clrf	_NutRunLength
 12988  0F3B  01C7               	clrf	_NutRunLength+1
 12989  0F3C  0008               	return
 12990  0F3D                     __end_ofi1_NutRunCycleReset:	
 12991                           
 12992                           	psect	text74
 12993  0D65                     __ptext74:	
 12994 ;; *************** function i1_EUSART_Write *****************
 12995 ;; Defined at:
 12996 ;;		line 96 in file "mcc_generated_files/eusart.c"
 12997 ;; Parameters:    Size  Location     Type
 12998 ;;  txData          1    wreg     unsigned char 
 12999 ;; Auto vars:     Size  Location     Type
 13000 ;;  txData          1    0[COMMON] unsigned char 
 13001 ;; Return value:  Size  Location     Type
 13002 ;;                  1    wreg      void 
 13003 ;; Registers used:
 13004 ;;		wreg
 13005 ;; Tracked objects:
 13006 ;;		On entry : 0/0
 13007 ;;		On exit  : 0/0
 13008 ;;		Unchanged: 0/0
 13009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13010 ;;      Params:         0       0       0       0       0       0       0       0
 13011 ;;      Locals:         1       0       0       0       0       0       0       0
 13012 ;;      Temps:          0       0       0       0       0       0       0       0
 13013 ;;      Totals:         1       0       0       0       0       0       0       0
 13014 ;;Total ram usage:        1 bytes
 13015 ;; Hardware stack levels used:    1
 13016 ;; This function calls:
 13017 ;;		Nothing
 13018 ;; This function is called by:
 13019 ;;		_OnEncPulseEdgeEvent
 13020 ;;		_EncINX_PulseRisingEvent
 13021 ;; This function uses a non-reentrant model
 13022 ;;
 13023                           
 13024                           
 13025                           ;psect for function i1_EUSART_Write
 13026  0D65                     i1_EUSART_Write:	
 13027                           
 13028                           ;incstack = 0
 13029                           ; Regs used in i1_EUSART_Write: [wreg]
 13030                           ;i1EUSART_Write@txData stored from wreg
 13031  0D65  00F0               	movwf	i1EUSART_Write@txData
 13032  0D66                     i1l159:	
 13033                           ;eusart.c: 99: {
 13034                           
 13035                           ;eusart.c: 98: while(0 == PIR1bits.TXIF)
 13036                           
 13037  0D66  0020               	movlb	0	; select bank0
 13038  0D67  1E11               	btfss	17,4	;volatile
 13039  0D68  2D66               	goto	i1l159
 13040                           
 13041                           ;eusart.c: 100: }
 13042                           ;eusart.c: 102: TX1REG = txData;
 13043  0D69  0870               	movf	i1EUSART_Write@txData,w
 13044  0D6A  0023               	movlb	3	; select bank3
 13045  0D6B  009A               	movwf	26	;volatile
 13046  0D6C  0008               	return
 13047  0D6D                     __end_ofi1_EUSART_Write:	
 13048                           
 13049                           	psect	text75
 13050  0D97                     __ptext75:	
 13051 ;; *************** function _millis *****************
 13052 ;; Defined at:
 13053 ;;		line 659 in file "main.c"
 13054 ;; Parameters:    Size  Location     Type
 13055 ;;		None
 13056 ;; Auto vars:     Size  Location     Type
 13057 ;;		None
 13058 ;; Return value:  Size  Location     Type
 13059 ;;                  4    0[COMMON] unsigned long 
 13060 ;; Registers used:
 13061 ;;		wreg
 13062 ;; Tracked objects:
 13063 ;;		On entry : 0/0
 13064 ;;		On exit  : 0/0
 13065 ;;		Unchanged: 0/0
 13066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13067 ;;      Params:         4       0       0       0       0       0       0       0
 13068 ;;      Locals:         0       0       0       0       0       0       0       0
 13069 ;;      Temps:          0       0       0       0       0       0       0       0
 13070 ;;      Totals:         4       0       0       0       0       0       0       0
 13071 ;;Total ram usage:        4 bytes
 13072 ;; Hardware stack levels used:    1
 13073 ;; This function calls:
 13074 ;;		Nothing
 13075 ;; This function is called by:
 13076 ;;		_OnEncPulseEdgeEvent
 13077 ;;		_ModbusMasterTransaction
 13078 ;; This function uses a non-reentrant model
 13079 ;;
 13080                           
 13081                           
 13082                           ;psect for function _millis
 13083  0D97                     _millis:	
 13084                           
 13085                           ;main.c: 661: return TimertickMsec;
 13086                           
 13087                           ;incstack = 0
 13088                           ; Regs used in _millis: [wreg]
 13089  0D97  0021               	movlb	1	; select bank1
 13090  0D98  0823               	movf	(_TimertickMsec+3)^(0+128),w
 13091  0D99  00F3               	movwf	?_millis+3
 13092  0D9A  0822               	movf	(_TimertickMsec+2)^(0+128),w
 13093  0D9B  00F2               	movwf	?_millis+2
 13094  0D9C  0821               	movf	(_TimertickMsec+1)^(0+128),w
 13095  0D9D  00F1               	movwf	?_millis+1
 13096  0D9E  0820               	movf	_TimertickMsec^(0+128),w
 13097  0D9F  00F0               	movwf	?_millis
 13098  0DA0  0008               	return
 13099  0DA1                     __end_of_millis:	
 13100                           
 13101                           	psect	text76
 13102  0733                     __ptext76:	
 13103 ;; *************** function ___lmul *****************
 13104 ;; Defined at:
 13105 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
 13106 ;; Parameters:    Size  Location     Type
 13107 ;;  multiplier      4    0[COMMON] unsigned long 
 13108 ;;  multiplicand    4    4[COMMON] unsigned long 
 13109 ;; Auto vars:     Size  Location     Type
 13110 ;;  product         4    8[COMMON] unsigned long 
 13111 ;; Return value:  Size  Location     Type
 13112 ;;                  4    0[COMMON] unsigned long 
 13113 ;; Registers used:
 13114 ;;		wreg, status,2, status,0
 13115 ;; Tracked objects:
 13116 ;;		On entry : 0/0
 13117 ;;		On exit  : 0/0
 13118 ;;		Unchanged: 0/0
 13119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13120 ;;      Params:         8       0       0       0       0       0       0       0
 13121 ;;      Locals:         4       0       0       0       0       0       0       0
 13122 ;;      Temps:          0       0       0       0       0       0       0       0
 13123 ;;      Totals:        12       0       0       0       0       0       0       0
 13124 ;;Total ram usage:       12 bytes
 13125 ;; Hardware stack levels used:    1
 13126 ;; This function calls:
 13127 ;;		Nothing
 13128 ;; This function is called by:
 13129 ;;		_OnEncPulseEdgeEvent
 13130 ;; This function uses a non-reentrant model
 13131 ;;
 13132                           
 13133                           
 13134                           ;psect for function ___lmul
 13135  0733                     ___lmul:	
 13136                           
 13137                           ;incstack = 0
 13138                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 13139  0733  3000               	movlw	0
 13140  0734  00FB               	movwf	___lmul@product+3
 13141  0735  3000               	movlw	0
 13142  0736  00FA               	movwf	___lmul@product+2
 13143  0737  3000               	movlw	0
 13144  0738  00F9               	movwf	___lmul@product+1
 13145  0739  3000               	movlw	0
 13146  073A  00F8               	movwf	___lmul@product
 13147  073B                     i1l3353:	
 13148  073B  1C70               	btfss	___lmul@multiplier,0
 13149  073C  2F45               	goto	i1l3357
 13150  073D  0874               	movf	___lmul@multiplicand,w
 13151  073E  07F8               	addwf	___lmul@product,f
 13152  073F  0875               	movf	___lmul@multiplicand+1,w
 13153  0740  3DF9               	addwfc	___lmul@product+1,f
 13154  0741  0876               	movf	___lmul@multiplicand+2,w
 13155  0742  3DFA               	addwfc	___lmul@product+2,f
 13156  0743  0877               	movf	___lmul@multiplicand+3,w
 13157  0744  3DFB               	addwfc	___lmul@product+3,f
 13158  0745                     i1l3357:	
 13159  0745  3001               	movlw	1
 13160  0746                     u165_25:	
 13161  0746  35F4               	lslf	___lmul@multiplicand,f
 13162  0747  0DF5               	rlf	___lmul@multiplicand+1,f
 13163  0748  0DF6               	rlf	___lmul@multiplicand+2,f
 13164  0749  0DF7               	rlf	___lmul@multiplicand+3,f
 13165  074A  0B89               	decfsz	9,f
 13166  074B  2F46               	goto	u165_25
 13167  074C  3001               	movlw	1
 13168  074D                     u166_25:	
 13169  074D  36F3               	lsrf	___lmul@multiplier+3,f
 13170  074E  0CF2               	rrf	___lmul@multiplier+2,f
 13171  074F  0CF1               	rrf	___lmul@multiplier+1,f
 13172  0750  0CF0               	rrf	___lmul@multiplier,f
 13173  0751  0B89               	decfsz	9,f
 13174  0752  2F4D               	goto	u166_25
 13175  0753  0873               	movf	___lmul@multiplier+3,w
 13176  0754  0472               	iorwf	___lmul@multiplier+2,w
 13177  0755  0471               	iorwf	___lmul@multiplier+1,w
 13178  0756  0470               	iorwf	___lmul@multiplier,w
 13179  0757  1D03               	skipz
 13180  0758  2F3B               	goto	i1l3353
 13181  0759  087B               	movf	___lmul@product+3,w
 13182  075A  00F3               	movwf	?___lmul+3
 13183  075B  087A               	movf	___lmul@product+2,w
 13184  075C  00F2               	movwf	?___lmul+2
 13185  075D  0879               	movf	___lmul@product+1,w
 13186  075E  00F1               	movwf	?___lmul+1
 13187  075F  0878               	movf	___lmul@product,w
 13188  0760  00F0               	movwf	?___lmul
 13189  0761  0008               	return
 13190  0762                     __end_of___lmul:	
 13191                           
 13192                           	psect	text77
 13193  05FE                     __ptext77:	
 13194 ;; *************** function ___lldiv *****************
 13195 ;; Defined at:
 13196 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
 13197 ;; Parameters:    Size  Location     Type
 13198 ;;  divisor         4    0[BANK0 ] unsigned long 
 13199 ;;  dividend        4    4[BANK0 ] unsigned long 
 13200 ;; Auto vars:     Size  Location     Type
 13201 ;;  quotient        4    8[BANK0 ] unsigned long 
 13202 ;;  counter         1   12[BANK0 ] unsigned char 
 13203 ;; Return value:  Size  Location     Type
 13204 ;;                  4    0[BANK0 ] unsigned long 
 13205 ;; Registers used:
 13206 ;;		wreg, status,2, status,0
 13207 ;; Tracked objects:
 13208 ;;		On entry : 0/0
 13209 ;;		On exit  : 0/0
 13210 ;;		Unchanged: 0/0
 13211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13212 ;;      Params:         0       8       0       0       0       0       0       0
 13213 ;;      Locals:         0       5       0       0       0       0       0       0
 13214 ;;      Temps:          1       0       0       0       0       0       0       0
 13215 ;;      Totals:         1      13       0       0       0       0       0       0
 13216 ;;Total ram usage:       14 bytes
 13217 ;; Hardware stack levels used:    1
 13218 ;; This function calls:
 13219 ;;		Nothing
 13220 ;; This function is called by:
 13221 ;;		_OnEncPulseEdgeEvent
 13222 ;; This function uses a non-reentrant model
 13223 ;;
 13224                           
 13225                           
 13226                           ;psect for function ___lldiv
 13227  05FE                     ___lldiv:	
 13228                           
 13229                           ;incstack = 0
 13230                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 13231  05FE  3000               	movlw	0
 13232  05FF  0020               	movlb	0	; select bank0
 13233  0600  00AB               	movwf	___lldiv@quotient+3
 13234  0601  3000               	movlw	0
 13235  0602  00AA               	movwf	___lldiv@quotient+2
 13236  0603  3000               	movlw	0
 13237  0604  00A9               	movwf	___lldiv@quotient+1
 13238  0605  3000               	movlw	0
 13239  0606  00A8               	movwf	___lldiv@quotient
 13240  0607  0823               	movf	___lldiv@divisor+3,w
 13241  0608  0422               	iorwf	___lldiv@divisor+2,w
 13242  0609  0421               	iorwf	___lldiv@divisor+1,w
 13243  060A  0420               	iorwf	___lldiv@divisor,w
 13244  060B  1903               	skipnz
 13245  060C  2E48               	goto	i1l3385
 13246  060D  01AC               	clrf	___lldiv@counter
 13247  060E  0AAC               	incf	___lldiv@counter,f
 13248  060F                     i1l3371:	
 13249  060F  1BA3               	btfsc	___lldiv@divisor+3,7
 13250  0610  2E1D               	goto	i1l3373
 13251  0611  3001               	movlw	1
 13252  0612                     u169_25:	
 13253  0612  35A0               	lslf	___lldiv@divisor,f
 13254  0613  0DA1               	rlf	___lldiv@divisor+1,f
 13255  0614  0DA2               	rlf	___lldiv@divisor+2,f
 13256  0615  0DA3               	rlf	___lldiv@divisor+3,f
 13257  0616  0B89               	decfsz	9,f
 13258  0617  2E12               	goto	u169_25
 13259  0618  3001               	movlw	1
 13260  0619  00FC               	movwf	??___lldiv
 13261  061A  087C               	movf	??___lldiv,w
 13262  061B  07AC               	addwf	___lldiv@counter,f
 13263  061C  2E0F               	goto	i1l3371
 13264  061D                     i1l3373:	
 13265  061D  3001               	movlw	1
 13266  061E                     u171_25:	
 13267  061E  35A8               	lslf	___lldiv@quotient,f
 13268  061F  0DA9               	rlf	___lldiv@quotient+1,f
 13269  0620  0DAA               	rlf	___lldiv@quotient+2,f
 13270  0621  0DAB               	rlf	___lldiv@quotient+3,f
 13271  0622  0B89               	decfsz	9,f
 13272  0623  2E1E               	goto	u171_25
 13273  0624  0823               	movf	___lldiv@divisor+3,w
 13274  0625  0227               	subwf	___lldiv@dividend+3,w
 13275  0626  1D03               	skipz
 13276  0627  2E32               	goto	u172_25
 13277  0628  0822               	movf	___lldiv@divisor+2,w
 13278  0629  0226               	subwf	___lldiv@dividend+2,w
 13279  062A  1D03               	skipz
 13280  062B  2E32               	goto	u172_25
 13281  062C  0821               	movf	___lldiv@divisor+1,w
 13282  062D  0225               	subwf	___lldiv@dividend+1,w
 13283  062E  1D03               	skipz
 13284  062F  2E32               	goto	u172_25
 13285  0630  0820               	movf	___lldiv@divisor,w
 13286  0631  0224               	subwf	___lldiv@dividend,w
 13287  0632                     u172_25:	
 13288  0632  1C03               	skipc
 13289  0633  2E3D               	goto	i1l3381
 13290  0634  0820               	movf	___lldiv@divisor,w
 13291  0635  02A4               	subwf	___lldiv@dividend,f
 13292  0636  0821               	movf	___lldiv@divisor+1,w
 13293  0637  3BA5               	subwfb	___lldiv@dividend+1,f
 13294  0638  0822               	movf	___lldiv@divisor+2,w
 13295  0639  3BA6               	subwfb	___lldiv@dividend+2,f
 13296  063A  0823               	movf	___lldiv@divisor+3,w
 13297  063B  3BA7               	subwfb	___lldiv@dividend+3,f
 13298  063C  1428               	bsf	___lldiv@quotient,0
 13299  063D                     i1l3381:	
 13300  063D  3001               	movlw	1
 13301  063E                     u173_25:	
 13302  063E  36A3               	lsrf	___lldiv@divisor+3,f
 13303  063F  0CA2               	rrf	___lldiv@divisor+2,f
 13304  0640  0CA1               	rrf	___lldiv@divisor+1,f
 13305  0641  0CA0               	rrf	___lldiv@divisor,f
 13306  0642  0B89               	decfsz	9,f
 13307  0643  2E3E               	goto	u173_25
 13308  0644  3001               	movlw	1
 13309  0645  02AC               	subwf	___lldiv@counter,f
 13310  0646  1D03               	btfss	3,2
 13311  0647  2E1D               	goto	i1l3373
 13312  0648                     i1l3385:	
 13313  0648  082B               	movf	___lldiv@quotient+3,w
 13314  0649  00A3               	movwf	?___lldiv+3
 13315  064A  082A               	movf	___lldiv@quotient+2,w
 13316  064B  00A2               	movwf	?___lldiv+2
 13317  064C  0829               	movf	___lldiv@quotient+1,w
 13318  064D  00A1               	movwf	?___lldiv+1
 13319  064E  0828               	movf	___lldiv@quotient,w
 13320  064F  00A0               	movwf	?___lldiv
 13321  0650  0008               	return
 13322  0651                     __end_of___lldiv:	
 13323                           
 13324                           	psect	text78
 13325  0F11                     __ptext78:	
 13326 ;; *************** function _NutRunCycleStop *****************
 13327 ;; Defined at:
 13328 ;;		line 534 in file "main.c"
 13329 ;; Parameters:    Size  Location     Type
 13330 ;;		None
 13331 ;; Auto vars:     Size  Location     Type
 13332 ;;		None
 13333 ;; Return value:  Size  Location     Type
 13334 ;;                  1    wreg      void 
 13335 ;; Registers used:
 13336 ;;		wreg, status,2, status,0, pclath, cstack
 13337 ;; Tracked objects:
 13338 ;;		On entry : 0/0
 13339 ;;		On exit  : 0/0
 13340 ;;		Unchanged: 0/0
 13341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13342 ;;      Params:         0       0       0       0       0       0       0       0
 13343 ;;      Locals:         0       0       0       0       0       0       0       0
 13344 ;;      Temps:          0       0       0       0       0       0       0       0
 13345 ;;      Totals:         0       0       0       0       0       0       0       0
 13346 ;;Total ram usage:        0 bytes
 13347 ;; Hardware stack levels used:    1
 13348 ;; Hardware stack levels required when called:    1
 13349 ;; This function calls:
 13350 ;;		i1_TMR3_StopTimer
 13351 ;;		i1_TMR3_WriteTimer
 13352 ;;		i1_TMR5_StopTimer
 13353 ;;		i1_TMR5_WriteTimer
 13354 ;; This function is called by:
 13355 ;;		_OnEncPulseEdgeEvent
 13356 ;; This function uses a non-reentrant model
 13357 ;;
 13358                           
 13359                           
 13360                           ;psect for function _NutRunCycleStop
 13361  0F11                     _NutRunCycleStop:	
 13362                           
 13363                           ;main.c: 536: TMR3_WriteTimer(0);
 13364                           
 13365                           ;incstack = 0
 13366                           ; Regs used in _NutRunCycleStop: [wreg+status,2+status,0+pclath+cstack]
 13367  0F11  3000               	movlw	0
 13368  0F12  00F0               	movwf	i1TMR3_WriteTimer@timerVal
 13369  0F13  00F1               	movwf	i1TMR3_WriteTimer@timerVal+1
 13370  0F14  318E  2650  318F   	fcall	i1_TMR3_WriteTimer
 13371                           
 13372                           ;main.c: 537: TMR3_StopTimer();
 13373  0F17  318D  2501  318F   	fcall	i1_TMR3_StopTimer
 13374                           
 13375                           ;main.c: 538: PIE3bits.TMR3IE = 0;
 13376  0F1A  0021               	movlb	1	; select bank1
 13377  0F1B  1213               	bcf	19,4	;volatile
 13378                           
 13379                           ;main.c: 539: TMR5_WriteTimer(0);
 13380  0F1C  3000               	movlw	0
 13381  0F1D  00F0               	movwf	i1TMR5_WriteTimer@timerVal
 13382  0F1E  00F1               	movwf	i1TMR5_WriteTimer@timerVal+1
 13383  0F1F  318E  265F  318F   	fcall	i1_TMR5_WriteTimer
 13384                           
 13385                           ;main.c: 540: TMR5_StopTimer();
 13386  0F22  318D  2504         	fcall	i1_TMR5_StopTimer
 13387                           
 13388                           ;main.c: 541: PIE4bits.TMR5IE = 0;
 13389  0F24  0021               	movlb	1	; select bank1
 13390  0F25  1214               	bcf	20,4	;volatile
 13391  0F26  0008               	return
 13392  0F27                     __end_of_NutRunCycleStop:	
 13393                           
 13394                           	psect	text79
 13395  0E5F                     __ptext79:	
 13396 ;; *************** function i1_TMR5_WriteTimer *****************
 13397 ;; Defined at:
 13398 ;;		line 117 in file "mcc_generated_files/tmr5.c"
 13399 ;; Parameters:    Size  Location     Type
 13400 ;;  timerVal        2    0[COMMON] unsigned int 
 13401 ;; Auto vars:     Size  Location     Type
 13402 ;;		None
 13403 ;; Return value:  Size  Location     Type
 13404 ;;                  1    wreg      void 
 13405 ;; Registers used:
 13406 ;;		wreg, status,2
 13407 ;; Tracked objects:
 13408 ;;		On entry : 0/0
 13409 ;;		On exit  : 0/0
 13410 ;;		Unchanged: 0/0
 13411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13412 ;;      Params:         2       0       0       0       0       0       0       0
 13413 ;;      Locals:         0       0       0       0       0       0       0       0
 13414 ;;      Temps:          0       0       0       0       0       0       0       0
 13415 ;;      Totals:         2       0       0       0       0       0       0       0
 13416 ;;Total ram usage:        2 bytes
 13417 ;; Hardware stack levels used:    1
 13418 ;; This function calls:
 13419 ;;		Nothing
 13420 ;; This function is called by:
 13421 ;;		_NutRunCycleStop
 13422 ;; This function uses a non-reentrant model
 13423 ;;
 13424                           
 13425                           
 13426                           ;psect for function i1_TMR5_WriteTimer
 13427  0E5F                     i1_TMR5_WriteTimer:	
 13428                           
 13429                           ;tmr5.c: 119: if (T5CONbits.T5SYNC == 1)
 13430                           
 13431                           ;incstack = 0
 13432                           ; Regs used in i1_TMR5_WriteTimer: [wreg+status,2]
 13433  0E5F  0028               	movlb	8	; select bank8
 13434  0E60  1D1A               	btfss	26,2	;volatile
 13435  0E61  2E69               	goto	i1l3309
 13436                           
 13437                           ;tmr5.c: 120: {
 13438                           ;tmr5.c: 122: T5CONbits.TMR5ON = 0;
 13439  0E62  101A               	bcf	26,0	;volatile
 13440                           
 13441                           ;tmr5.c: 125: TMR5H = (timerVal >> 8);
 13442  0E63  0871               	movf	i1TMR5_WriteTimer@timerVal+1,w
 13443  0E64  0099               	movwf	25	;volatile
 13444                           
 13445                           ;tmr5.c: 126: TMR5L = timerVal;
 13446  0E65  0870               	movf	i1TMR5_WriteTimer@timerVal,w
 13447  0E66  0098               	movwf	24	;volatile
 13448                           
 13449                           ;tmr5.c: 129: T5CONbits.TMR5ON =1;
 13450  0E67  141A               	bsf	26,0	;volatile
 13451                           
 13452                           ;tmr5.c: 130: }
 13453  0E68  0008               	return
 13454  0E69                     i1l3309:	
 13455                           
 13456                           ;tmr5.c: 131: else
 13457                           ;tmr5.c: 132: {
 13458                           ;tmr5.c: 134: TMR5H = (timerVal >> 8);
 13459  0E69  0871               	movf	i1TMR5_WriteTimer@timerVal+1,w
 13460  0E6A  0099               	movwf	25	;volatile
 13461                           
 13462                           ;tmr5.c: 135: TMR5L = timerVal;
 13463  0E6B  0870               	movf	i1TMR5_WriteTimer@timerVal,w
 13464  0E6C  0098               	movwf	24	;volatile
 13465  0E6D  0008               	return
 13466  0E6E                     __end_ofi1_TMR5_WriteTimer:	
 13467                           
 13468                           	psect	text80
 13469  0D04                     __ptext80:	
 13470 ;; *************** function i1_TMR5_StopTimer *****************
 13471 ;; Defined at:
 13472 ;;		line 102 in file "mcc_generated_files/tmr5.c"
 13473 ;; Parameters:    Size  Location     Type
 13474 ;;		None
 13475 ;; Auto vars:     Size  Location     Type
 13476 ;;		None
 13477 ;; Return value:  Size  Location     Type
 13478 ;;                  1    wreg      void 
 13479 ;; Registers used:
 13480 ;;		None
 13481 ;; Tracked objects:
 13482 ;;		On entry : 0/0
 13483 ;;		On exit  : 0/0
 13484 ;;		Unchanged: 0/0
 13485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13486 ;;      Params:         0       0       0       0       0       0       0       0
 13487 ;;      Locals:         0       0       0       0       0       0       0       0
 13488 ;;      Temps:          0       0       0       0       0       0       0       0
 13489 ;;      Totals:         0       0       0       0       0       0       0       0
 13490 ;;Total ram usage:        0 bytes
 13491 ;; Hardware stack levels used:    1
 13492 ;; This function calls:
 13493 ;;		Nothing
 13494 ;; This function is called by:
 13495 ;;		_NutRunCycleStop
 13496 ;; This function uses a non-reentrant model
 13497 ;;
 13498                           
 13499                           
 13500                           ;psect for function i1_TMR5_StopTimer
 13501  0D04                     i1_TMR5_StopTimer:	
 13502                           
 13503                           ;tmr5.c: 105: T5CONbits.TMR5ON = 0;
 13504                           
 13505                           ;incstack = 0
 13506                           ; Regs used in i1_TMR5_StopTimer: []
 13507  0D04  0028               	movlb	8	; select bank8
 13508  0D05  101A               	bcf	26,0	;volatile
 13509  0D06  0008               	return
 13510  0D07                     __end_ofi1_TMR5_StopTimer:	
 13511                           
 13512                           	psect	text81
 13513  0E50                     __ptext81:	
 13514 ;; *************** function i1_TMR3_WriteTimer *****************
 13515 ;; Defined at:
 13516 ;;		line 117 in file "mcc_generated_files/tmr3.c"
 13517 ;; Parameters:    Size  Location     Type
 13518 ;;  timerVal        2    0[COMMON] unsigned int 
 13519 ;; Auto vars:     Size  Location     Type
 13520 ;;		None
 13521 ;; Return value:  Size  Location     Type
 13522 ;;                  1    wreg      void 
 13523 ;; Registers used:
 13524 ;;		wreg, status,2
 13525 ;; Tracked objects:
 13526 ;;		On entry : 0/0
 13527 ;;		On exit  : 0/0
 13528 ;;		Unchanged: 0/0
 13529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13530 ;;      Params:         2       0       0       0       0       0       0       0
 13531 ;;      Locals:         0       0       0       0       0       0       0       0
 13532 ;;      Temps:          0       0       0       0       0       0       0       0
 13533 ;;      Totals:         2       0       0       0       0       0       0       0
 13534 ;;Total ram usage:        2 bytes
 13535 ;; Hardware stack levels used:    1
 13536 ;; This function calls:
 13537 ;;		Nothing
 13538 ;; This function is called by:
 13539 ;;		_OnEncPulseEdgeEvent
 13540 ;;		_NutRunCycleStop
 13541 ;;		i1_NutRunCycleStart
 13542 ;; This function uses a non-reentrant model
 13543 ;;
 13544                           
 13545                           
 13546                           ;psect for function i1_TMR3_WriteTimer
 13547  0E50                     i1_TMR3_WriteTimer:	
 13548                           
 13549                           ;tmr3.c: 119: if (T3CONbits.T3SYNC == 1)
 13550                           
 13551                           ;incstack = 0
 13552                           ; Regs used in i1_TMR3_WriteTimer: [wreg+status,2]
 13553  0E50  0028               	movlb	8	; select bank8
 13554  0E51  1D13               	btfss	19,2	;volatile
 13555  0E52  2E5A               	goto	i1l3327
 13556                           
 13557                           ;tmr3.c: 120: {
 13558                           ;tmr3.c: 122: T3CONbits.TMR3ON = 0;
 13559  0E53  1013               	bcf	19,0	;volatile
 13560                           
 13561                           ;tmr3.c: 125: TMR3H = (timerVal >> 8);
 13562  0E54  0871               	movf	i1TMR3_WriteTimer@timerVal+1,w
 13563  0E55  0092               	movwf	18	;volatile
 13564                           
 13565                           ;tmr3.c: 126: TMR3L = timerVal;
 13566  0E56  0870               	movf	i1TMR3_WriteTimer@timerVal,w
 13567  0E57  0091               	movwf	17	;volatile
 13568                           
 13569                           ;tmr3.c: 129: T3CONbits.TMR3ON =1;
 13570  0E58  1413               	bsf	19,0	;volatile
 13571                           
 13572                           ;tmr3.c: 130: }
 13573  0E59  0008               	return
 13574  0E5A                     i1l3327:	
 13575                           
 13576                           ;tmr3.c: 131: else
 13577                           ;tmr3.c: 132: {
 13578                           ;tmr3.c: 134: TMR3H = (timerVal >> 8);
 13579  0E5A  0871               	movf	i1TMR3_WriteTimer@timerVal+1,w
 13580  0E5B  0092               	movwf	18	;volatile
 13581                           
 13582                           ;tmr3.c: 135: TMR3L = timerVal;
 13583  0E5C  0870               	movf	i1TMR3_WriteTimer@timerVal,w
 13584  0E5D  0091               	movwf	17	;volatile
 13585  0E5E  0008               	return
 13586  0E5F                     __end_ofi1_TMR3_WriteTimer:	
 13587                           
 13588                           	psect	text82
 13589  0D01                     __ptext82:	
 13590 ;; *************** function i1_TMR3_StopTimer *****************
 13591 ;; Defined at:
 13592 ;;		line 102 in file "mcc_generated_files/tmr3.c"
 13593 ;; Parameters:    Size  Location     Type
 13594 ;;		None
 13595 ;; Auto vars:     Size  Location     Type
 13596 ;;		None
 13597 ;; Return value:  Size  Location     Type
 13598 ;;                  1    wreg      void 
 13599 ;; Registers used:
 13600 ;;		None
 13601 ;; Tracked objects:
 13602 ;;		On entry : 0/0
 13603 ;;		On exit  : 0/0
 13604 ;;		Unchanged: 0/0
 13605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13606 ;;      Params:         0       0       0       0       0       0       0       0
 13607 ;;      Locals:         0       0       0       0       0       0       0       0
 13608 ;;      Temps:          0       0       0       0       0       0       0       0
 13609 ;;      Totals:         0       0       0       0       0       0       0       0
 13610 ;;Total ram usage:        0 bytes
 13611 ;; Hardware stack levels used:    1
 13612 ;; This function calls:
 13613 ;;		Nothing
 13614 ;; This function is called by:
 13615 ;;		_NutRunCycleStop
 13616 ;; This function uses a non-reentrant model
 13617 ;;
 13618                           
 13619                           
 13620                           ;psect for function i1_TMR3_StopTimer
 13621  0D01                     i1_TMR3_StopTimer:	
 13622                           
 13623                           ;tmr3.c: 105: T3CONbits.TMR3ON = 0;
 13624                           
 13625                           ;incstack = 0
 13626                           ; Regs used in i1_TMR3_StopTimer: []
 13627  0D01  0028               	movlb	8	; select bank8
 13628  0D02  1013               	bcf	19,0	;volatile
 13629  0D03  0008               	return
 13630  0D04                     __end_ofi1_TMR3_StopTimer:	
 13631  007E                     btemp	set	126	;btemp
 13632  007E                     int$flags	set	126
 13633  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        13
    BSS         75
    Persistent  16
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      63
    BANK1            80      9      80
    BANK2            80      8       8
    BANK3             0      0       0
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    rxBuffer	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    txBuffer	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    postTransmission@postTransmission	PTR FTN()void  size(2) Largest target is 1
		 -> postTransmission_App(), 

    preTransmission@preTransmission	PTR FTN()void  size(2) Largest target is 1
		 -> preTransmission_App(), 

    _postTransmission	PTR FTN()void  size(2) Largest target is 1
		 -> postTransmission_App(), Absolute function(), 

    _preTransmission	PTR FTN()void  size(2) Largest target is 1
		 -> preTransmission_App(), Absolute function(), 

    INT_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    IOCCF5_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> IOCCF5_DefaultInterruptHandler(), 

    IOCCF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF5_DefaultInterruptHandler(), Absolute function(), 

    IOCCF4_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> IOCCF4_DefaultInterruptHandler(), 

    IOCCF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF4_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR3_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), 

    TMR3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), Absolute function(), 

    TMR5_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR5_DefaultInterruptHandler(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR5_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_CCP1_CaptureISR
    _TMR3_DefaultInterruptHandler->_Timer3_Overflow
    _TMR0_CallBack->_Timer0_tick10msecFunc
    _INT_CallBack->_EncINX_PulseRisingEvent
    _EncINX_PulseRisingEvent->i1_valuetocharHighNibble
    i1_valuetocharLowNibble->i1_valtoasciichar
    i1_valuetocharHighNibble->i1_valtoasciichar
    _OnEncPulseEdgeEvent->___lldiv
    i1_NutRunCycleStart->i1_TMR3_WriteTimer
    ___lldiv->___lmul
    _NutRunCycleStop->i1_TMR3_WriteTimer
    _NutRunCycleStop->i1_TMR5_WriteTimer

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_CCP1_CaptureISR
    _CCP1_CaptureISR->_CCP1_CallBack
    _CCP1_CallBack->_EncA_PulseEdgeEvent
    _EncA_PulseEdgeEvent->_OnEncPulseEdgeEvent
    _OnEncPulseEdgeEvent->___lldiv

Critical Paths under _main in BANK1

    _main->_LedONStartConfig
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _TMR5_Initialize->_TMR5_SetInterruptHandler
    _TMR3_Initialize->_TMR3_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF5_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _NutRunCycleStart->_TMR3_WriteTimer
    _ModbusMasterSetup->_ModbusMasterInit
    _ModbusMasterSetup->_postTransmission
    _ModbusMasterSetup->_preTransmission
    _EPC_StateMachineControlLoop->_LedONStartConfig
    _valuetocharLowNibble->_valtoasciichar
    _valuetocharHighNibble->_valtoasciichar
    _LedONStartConfig->___lwdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_EPC_StateMachineControlLoop
    _EPC_StateMachineControlLoop->_LedONStartConfig

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5356
        _EPC_StateMachineControlLoop
                       _EUSART_Write
                   _LedONStartConfig
                    _LedONStatusBusy
                  _ModbusMasterSetup
                   _NutRunCycleStart
                  _SYSTEM_Initialize
                     _TMR3_StopTimer
                    _TMR3_WriteTimer
                     _TMR5_StopTimer
                    _TMR5_WriteTimer
                    _getEncoderState
 ---------------------------------------------------------------------------------
 (1) _getEncoderState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR5_WriteTimer                                      2     0      2     243
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _TMR5_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR3_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     682
                     _ADC_Initialize
                    _CCP1_Initialize
                    _CCP2_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR3_Initialize
                    _TMR5_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0     108
           _TMR5_SetInterruptHandler
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR5_SetInterruptHandler                             2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0     108
           _TMR3_SetInterruptHandler
                    _TMR3_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR3_SetInterruptHandler                             2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     108
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0     250
                                              2 BANK1      1     1      0
         _IOCCF4_SetInterruptHandler
         _IOCCF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF5_SetInterruptHandler                           2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCCF4_SetInterruptHandler                           2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     108
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CCP2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NutRunCycleStart                                     0     0      0     362
                   _NutRunCycleReset
                    _TMR3_StartTimer
                    _TMR3_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR3_WriteTimer                                      2     0      2     362
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR3_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ModbusMasterSetup                                    0     0      0     247
                  _EUSART_Initialize
                   _ModbusMasterInit
                   _postTransmission
                    _preTransmission
 ---------------------------------------------------------------------------------
 (2) _preTransmission                                      2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _postTransmission                                     2     0      2     108
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ModbusMasterInit                                     2     2      0      31
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LedONStatusBusy                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EPC_StateMachineControlLoop                          4     4      0    1942
                                              4 BANK2      4     4      0
                       _EUSART_Write
                   _LedONStartConfig
                   _NutRunCycleReset
              _valuetocharHighNibble
               _valuetocharLowNibble
 ---------------------------------------------------------------------------------
 (2) _valuetocharLowNibble                                 3     3      0     212
                                              3 BANK1      3     3      0
                     _valtoasciichar
 ---------------------------------------------------------------------------------
 (2) _valuetocharHighNibble                                4     4      0     212
                                              3 BANK1      4     4      0
                     _valtoasciichar
 ---------------------------------------------------------------------------------
 (3) _valtoasciichar                                       3     3      0     113
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (2) _NutRunCycleReset                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LedONStartConfig                                     5     3      2    1487
                                              8 BANK1      1     1      0
                                              0 BANK2      4     2      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     395
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _EUSART_Write                                         1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0    1857
                                             29 BANK0      1     1      0
                    _CCP1_CaptureISR
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR3_ISR
                           _TMR5_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR5_ISR                                             0     0      0       0
                   Absolute function *
       _TMR5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR5_DefaultInterruptHandler                         0     0      0       0
                    _Timer5_Overflow
 ---------------------------------------------------------------------------------
 (7) _Timer5_Overflow                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _TMR3_ISR                                             0     0      0       0
                   Absolute function *
       _TMR3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR3_DefaultInterruptHandler                         0     0      0       0
                    _Timer3_Overflow
 ---------------------------------------------------------------------------------
 (7) _Timer3_Overflow                                      4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
              _Timer0_tick10msecFunc
 ---------------------------------------------------------------------------------
 (7) _Timer0_tick10msecFunc                                4     4      0       0
                                              0 COMMON     4     4      0
               _LedON_Control_10msec
 ---------------------------------------------------------------------------------
 (8) _LedON_Control_10msec                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCCF4_ISR
                         _IOCCF5_ISR
 ---------------------------------------------------------------------------------
 (6) _IOCCF5_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCCF5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IOCCF4_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _IOCCF4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT_ISR                                              0     0      0     280
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (6) _INT_CallBack                                         0     0      0     280
                   Absolute function *
            _EncINX_PulseRisingEvent
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _INT_DefaultInterruptHandler                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EncINX_PulseRisingEvent                              1     1      0     280
                                              7 COMMON     1     1      0
                     i1_EUSART_Write
            i1_valuetocharHighNibble
             i1_valuetocharLowNibble
 ---------------------------------------------------------------------------------
 (8) i1_valuetocharLowNibble                               3     3      0     129
                                              3 COMMON     3     3      0
                   i1_valtoasciichar
 ---------------------------------------------------------------------------------
 (8) i1_valuetocharHighNibble                              4     4      0     129
                                              3 COMMON     4     4      0
                   i1_valtoasciichar
 ---------------------------------------------------------------------------------
 (9) i1_valtoasciichar                                     3     3      0      61
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CCP1_CaptureISR                                      3     3      0    1577
                                             13 COMMON     1     1      0
                                             27 BANK0      2     2      0
                      _CCP1_CallBack
 ---------------------------------------------------------------------------------
 (6) _CCP1_CallBack                                        2     0      2    1530
                                             25 BANK0      2     0      2
                _EncA_PulseEdgeEvent
 ---------------------------------------------------------------------------------
 (7) _EncA_PulseEdgeEvent                                  2     0      2    1444
                                             23 BANK0      2     0      2
                _OnEncPulseEdgeEvent
 ---------------------------------------------------------------------------------
 (8) _OnEncPulseEdgeEvent                                 10     8      2    1358
                                             13 BANK0     10     8      2
                    _NutRunCycleStop
                            ___lldiv
                             ___lmul
                             _millis
                     i1_EUSART_Write
                 i1_NutRunCycleStart
                  i1_TMR3_StartTimer
                  i1_TMR3_WriteTimer
                  i1_getEncoderState
 ---------------------------------------------------------------------------------
 (9) i1_getEncoderState                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i1_NutRunCycleStart                                   0     0      0     166
                 i1_NutRunCycleReset
                  i1_TMR3_StartTimer
                  i1_TMR3_WriteTimer
 ---------------------------------------------------------------------------------
 (9) i1_TMR3_StartTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_NutRunCycleReset                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_EUSART_Write                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _millis                                               4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (9) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) ___lldiv                                             14     6      8     418
                                             12 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (9) _NutRunCycleStop                                      0     0      0     280
                   i1_TMR3_StopTimer
                  i1_TMR3_WriteTimer
                   i1_TMR5_StopTimer
                  i1_TMR5_WriteTimer
 ---------------------------------------------------------------------------------
 (10) i1_TMR5_WriteTimer                                   2     0      2     114
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) i1_TMR5_StopTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i1_TMR3_WriteTimer                                    2     0      2     166
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) i1_TMR3_StopTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPC_StateMachineControlLoop
     _EUSART_Write
     _LedONStartConfig
       ___lwdiv
       ___wmul
     _NutRunCycleReset
     _valuetocharHighNibble
       _valtoasciichar
     _valuetocharLowNibble
       _valtoasciichar
   _EUSART_Write
   _LedONStartConfig
     ___lwdiv
     ___wmul
   _LedONStatusBusy
   _ModbusMasterSetup
     _EUSART_Initialize
     _ModbusMasterInit
     _postTransmission
     _preTransmission
   _NutRunCycleStart
     _NutRunCycleReset
     _TMR3_StartTimer
     _TMR3_WriteTimer
   _SYSTEM_Initialize
     _ADC_Initialize
     _CCP1_Initialize
     _CCP2_Initialize
     _EUSART_Initialize
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCCF4_SetInterruptHandler
       _IOCCF5_SetInterruptHandler
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR3_Initialize
       _TMR3_SetInterruptHandler
       _TMR3_StartTimer
     _TMR5_Initialize
       _TMR5_SetInterruptHandler
       _TMR5_StartTimer
     _WDT_Initialize
   _TMR3_StopTimer
   _TMR3_WriteTimer
   _TMR5_StopTimer
   _TMR5_WriteTimer
   _getEncoderState

 _INTERRUPT_InterruptManager (ROOT)
   _CCP1_CaptureISR
     _CCP1_CallBack
       _EncA_PulseEdgeEvent
         _OnEncPulseEdgeEvent
           _NutRunCycleStop
             i1_TMR3_StopTimer
             i1_TMR3_WriteTimer
             i1_TMR5_StopTimer
             i1_TMR5_WriteTimer
           ___lldiv
             ___lmul (ARG)
           ___lmul
           _millis
           i1_EUSART_Write
           i1_NutRunCycleStart
             i1_NutRunCycleReset
             i1_TMR3_StartTimer
             i1_TMR3_WriteTimer
           i1_TMR3_StartTimer
           i1_TMR3_WriteTimer
           i1_getEncoderState
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _EncINX_PulseRisingEvent *
         i1_EUSART_Write
         i1_valuetocharHighNibble
           i1_valtoasciichar
         i1_valuetocharLowNibble
           i1_valtoasciichar
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
     _IOCCF4_ISR
       Absolute function(Fake) *
       _IOCCF4_DefaultInterruptHandler *
     _IOCCF5_ISR
       Absolute function(Fake) *
       _IOCCF5_DefaultInterruptHandler *
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _Timer0_tick10msecFunc *
         _LedON_Control_10msec
   _TMR3_ISR
     Absolute function(Fake) *
     _TMR3_DefaultInterruptHandler *
       _Timer3_Overflow
   _TMR5_ISR
     Absolute function(Fake) *
     _TMR5_DefaultInterruptHandler *
       _Timer5_Overflow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      A5       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1E      3F       6       78.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      9      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      8       8      10       10.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK3                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      A5      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Apr 10 11:24:05 2017

                          ??i1_EUSART_Write 0070                            __u16WriteAddress 00BE  
          __end_of_TMR5_SetInterruptHandler 0D65                                           pc 0002  
    __end_of_IOCCF4_DefaultInterruptHandler 0D00     __size_of_IOCCF4_DefaultInterruptHandler 0001  
            _IOCCF4_DefaultInterruptHandler 0CFF                                 __CFG_CP$OFF 0000  
                       ___wmul@multiplicand 00E1                 __size_ofi1_NutRunCycleReset 0016  
                         ??_TMR5_WriteTimer 00E1                 __size_ofi1_NutRunCycleStart 000E  
                   __end_of_CCP1_Initialize 0E8C                    __size_of_Timer5_Overflow 0001  
                               __CFG_LVP$ON 0000                          __u16ResponseBuffer 20F0  
                                       l159 0DA3                                         _GIE 005F  
                              __CFG_CPD$OFF 0000               LedONStartConfig@LedONNumBlink 0121  
                 __size_of_LedONStartConfig 0071                                         wreg 0009  
                                      S5687 07CF              preTransmission@preTransmission 00DF  
                                      l1172 046C                                        l1176 046F  
                                      l1179 0472                             _timer3ReloadVal 005B  
                                      l1297 0FED                  __size_ofi1_TMR5_WriteTimer 000F  
                                      l5073 0475                                        l5083 04BA  
                                      l5075 0481                                        l5423 0DBE  
                                      l5513 044D                                        l5409 0F8E  
                                      l4811 06A0                                        l5443 0310  
                                      l5451 031A                                        l4821 06AA  
                                      l4813 06A2                                        l4805 069A  
                                      l4831 06B4                                        l4823 06AC  
                                      l4815 06A4                                        l4807 069C  
                                      l5439 0302                                        l4833 06B6  
                                      l4825 06AE                                        l4817 06A6  
                                      l4809 069E                                        l4841 06C7  
                                      l4851 0FE7                                        l4835 06B8  
                                      l4827 06B0                                        l4819 06A8  
                                      l5571 04FF                                        l4829 06B2  
                                      l4839 06BD                                        l4935 0F77  
                                      l5583 052D                                        l5575 050E  
                                      l4881 06F0                                        l4873 06D2  
                                      l4875 06DE                                        l5579 051D  
                                      l4885 06F9                                        _LATA 010C  
                                      _LATB 010D                             __end_of_INT_ISR 0D2B  
                                      _LATC 010E                                        u3205 06E9  
                                      u3215 06F1                                        u3135 0FEE  
                                      u3145 0FF3                                        u3250 05FC  
                                      u3315 0F58                                        u3175 06D5  
                                      u3195 06DF                                        u3705 03B0  
                                      u3715 03CE                                        u3725 03EC  
                                      u3735 040A                                        u3745 0428  
                                      u3695 0392                                        _WPUA 020C  
                                      _WPUB 020D                                        _WPUC 020E  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                   __end_of_CCP2_Initialize 0D97                                        _main 04C4  
                           _TMR0_StartTimer 0D16                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        fsr1l 0006  
                                      btemp 007E            ??_IOCCF5_DefaultInterruptHandler 0070  
           ?_IOCCF5_DefaultInterruptHandler 0070                               __CFG_BOREN$ON 0000  
       __end_of_INT_DefaultInterruptHandler 0CFF                 _INT_DefaultInterruptHandler 0CFE  
             ??_EPC_StateMachineControlLoop 0124                          _MBreadNoOfPulseCnt 00EE  
                             __CFG_BORV$LOW 0000                                        start 004E  
                           _timer5ReloadVal 005D                     _EncEdgeMinTimeIntSumAvg 00A8  
                           _TMR3_Initialize 0FB0             __end_of_INT_SetInterruptHandler 0D47  
                             __CFG_CSWEN$ON 0000                               __CFG_MCLRE$ON 0000  
                          ?_CCP1_CaptureISR 0070                            ?_getEncoderState 0070  
                   __end_of_TMR0_Initialize 0EFC              ??_TMR0_DefaultInterruptHandler 0070  
                             ?_EUSART_Write 0070              __size_of_OSCILLATOR_Initialize 0008  
             __end_of_OSCILLATOR_Initialize 0D7D                            ??_valtoasciichar 00DF  
                       __size_of_IOCCF4_ISR 000D                         __size_of_IOCCF5_ISR 000D  
                                     _ADACT 009F                                       ?_main 0070  
                             __CFG_WDTE$OFF 0000                             __end_of___lldiv 0651  
                                     _T3CON 0413                                       _T5CON 041A  
                            __CFG_DEBUG$OFF 0000                             __end_of___lwdiv 06FE  
                                     i1l430 0013                                       i1l159 0D66  
                                     i1l432 001D                                       i1l434 0029  
                                     i1l442 0049                                       i1l436 0035  
                                     i1l438 0041                                       i1l676 00D0  
                    _flagForFirstRevolution 0051                                       _OSCEN 091D  
                                     _TMR0H 0016                                       _TMR0L 0015  
                                     _TMR3H 0412                                       _TMR5H 0419  
                                     _TMR3L 0411                                       _TMR5L 0418  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E                      __size_of_CCP1_CallBack 0008  
         __size_of_TMR0_SetInterruptHandler 0006           __size_of_TMR3_SetInterruptHandler 0006  
                       ___lmul@multiplicand 0074                   ?_TMR0_SetInterruptHandler 00DF  
                 ?_TMR3_SetInterruptHandler 00DF                            __end_of_TMR0_ISR 0D30  
                          __end_of_TMR3_ISR 0ED4                            __end_of_TMR5_ISR 0EE8  
                    ?_Timer0_tick10msecFunc 0070              ??_TMR3_DefaultInterruptHandler 0074  
                   __end_of_PIN_MANAGER_IOC 0DCD                              _WDT_Initialize 0D22  
                                     pclath 000A                   __size_of_ModbusMasterInit 0010  
              __end_of_valuetocharLowNibble 0E9C                    __end_ofi1_TMR3_StopTimer 0D04  
                         ?_postTransmission 00DF             __size_ofi1_valuetocharLowNibble 000E  
                       _OnEncPulseEdgeEvent 0090                                       status 0003  
                                     wtemp0 007E                             _LedONStatusBusy 0D10  
                        ??_postTransmission 00E1                             _TMR5_Initialize 0FCA  
                           __initialization 0050                                __end_of_main 0531  
                            ??_EUSART_Write 00DF                 ?_INTERRUPT_InterruptManager 0070  
            __size_of_valuetocharHighNibble 0016                    __end_ofi1_TMR5_StopTimer 0D07  
             __end_of_valuetocharHighNibble 0F69                        ?_OnEncPulseEdgeEvent 002D  
      __size_of_EPC_StateMachineControlLoop 0159                           ??_Timer3_Overflow 0070  
                                    ??_main 00E8                            ?_CCP1_Initialize 0070  
                  _TMR5_SetInterruptHandler 0D5F                             _TMR3_StartTimer 0D13  
          __size_ofi1_valuetocharHighNibble 0014                       _TMR3_InterruptHandler 00DB  
                    __end_of_WDT_Initialize 0D26                                   ??_INT_ISR 0078  
                         ??_Timer5_Overflow 0070                     __end_of_TMR0_StartTimer 0D19  
                                    _ADCON0 009D                                      _ADCON1 009E  
                                    _ADRESH 009C                                      _ADRESL 009B  
                                    i1S5689 0800                                      _CCPR1H 0292  
                                    _CCPR2H 0296                                      _CCPR1L 0291  
                                    _CCPR2L 0295               valuetocharHighNibble@hexvalue 00E4  
              ??_IOCCF4_SetInterruptHandler 00E1                                      _ANSELA 018C  
                                    _ANSELB 018D                                      _ANSELC 018E  
                        __CFG_RSTOSC$HFINT1 0000                                      _T0CON0 0017  
                                    _T0CON1 0018                                      _T3GCON 0414  
            i1valuetocharLowNibble@hexvalue 0074                                      _T5GCON 041B  
                                    _RC1REG 0199                                      _RC1STA 019D  
                                    i1l1212 0585                                      i1l1205 057F  
                                    i1l1209 0582                                      _ODCONA 028C  
                                    _ODCONB 028D                                      _ODCONC 028E  
                                    u200_25 057C                                      i1l3403 0DB3  
                                    i1l3411 0708                                      i1l3309 0E69  
                                    i1l3501 01AA                                      i1l3421 0712  
                                    i1l3413 070A                                      u201_25 0EB0  
                                    i1l3327 0E5A                                      i1l3431 071C  
                                    i1l3423 0714                                      i1l3415 070C  
                                    i1l3407 0704                                      i1l3353 073B  
                                    i1l3505 01F4                                      i1l3433 071E  
                                    i1l3425 0716                                      i1l3417 070E  
                                    i1l3409 0706                                      i1l3441 0727  
                                    i1l3601 0588                                      i1l3371 060F  
                                    i1l3523 024E                                      i1l3507 01FC  
                                    i1l3435 0720                                      i1l3427 0718  
                                    i1l3419 0710                                      i1l3443 0731  
                                    i1l4403 0DC7                                      i1l3603 0594  
                   __end_of_TMR3_Initialize 0FCA                                      i1l3381 063D  
                                    i1l3373 061D                                      i1l3357 0745  
                                    i1l3517 0231                                      i1l3461 00D8  
                                    i1l3541 028A                                      i1l3437 0722  
                                    i1l3429 071A                                      i1l3605 0599  
                                    i1l3519 0235                                      i1l3527 0250  
                                    i1l3543 0299                                      i1l3455 00B9  
                                    i1l3385 0648                                      i1l3529 0262  
                                    i1l3481 0121                                      i1l3563 02DC  
                                    i1l3483 0121                                      i1l3475 0104  
                                    i1l3573 02F1                                      i1l3493 018C  
                                    i1l3485 0121                                      i1l3559 02D3  
                                    i1l3487 0132                                      i1l3479 011A  
                                    i1l3583 053F                                      i1l3591 0563  
                                    i1l3673 065E                                      i1l3585 054B  
                                    i1l3593 056F                                      i1l3499 0197  
                                    i1l3587 0557                                      i1l3595 0576  
                                    i1l3687 0670                                      i1l3697 068E  
                                    i1l3965 0E08                                      i1l3959 0DFB  
                                    _INLVLA 038C                                      _INLVLC 038E  
                                    u171_25 061E                                      u172_25 0632  
                                    u180_25 0113                                      u173_25 063E  
                                    u165_25 0746                                      u181_25 0161  
                                    u166_25 074D                                      u182_25 01ED  
                                    u183_25 021B                                      u169_25 0612  
                                    u185_25 0274                                      u177_25 00C2  
                                    u193_25 053C                                      u194_20 0548  
                                    u178_25 00CE                                      u196_20 0554  
                                    u198_20 0560                                      _OSCFRQ 091F  
                                    _TX1REG 019A                                      _WDTCON 0097  
                                    _TX1STA 019E                            ?_CCP2_Initialize 0070  
                                __u8MBSlave 004C                             _TMR3_WriteTimer 0F69  
                                    _Led_ON 004A                               _CCP1_CallBack 0D6D  
                            __CFG_PWRTE$OFF 0000                                      ___lmul 0733  
                                    ___wmul 0FE4                              __CFG_STVREN$ON 0000  
                                 ??___lldiv 007C                                   ??___lwdiv 00E3  
                  __size_of_preTransmission 0006                    ?_EncINX_PulseRisingEvent 0070  
                     ModbusMasterInit@slave 00E0                            ?_TMR0_Initialize 0070  
                                    _millis 0D97                       ??_OnEncPulseEdgeEvent 002F  
                    i1_valuetocharLowNibble 0E26                               ?_INT_CallBack 0070  
       __size_of_IOCCF4_SetInterruptHandler 0006                             __u16ReadAddress 00C2  
                           _TMR5_StartTimer 0D19                            _LedONStartConfig 0453  
                           ?_WDT_Initialize 0070                    __end_ofi1_valtoasciichar 0733  
                     __end_of_TMR0_CallBack 0E50            __size_of_INT_SetInterruptHandler 0006  
   INT_SetInterruptHandler@InterruptHandler 00DF  IOCCF5_SetInterruptHandler@InterruptHandler 00DF  
IOCCF4_SetInterruptHandler@InterruptHandler 00DF    TMR0_SetInterruptHandler@InterruptHandler 00DF  
  TMR3_SetInterruptHandler@InterruptHandler 00DF    TMR5_SetInterruptHandler@InterruptHandler 00DF  
                          ?_PIN_MANAGER_IOC 0070                 __end_of_EncA_PulseEdgeEvent 0800  
                   __end_of_LedONStatusBusy 0D13                             _EncPulseOpState 0048  
                              ??_IOCCF4_ISR 0070                                ??_IOCCF5_ISR 0070  
                   __end_of_TMR5_Initialize 0FE4                           _SYSTEM_Initialize 07AE  
                 __size_of_NutRunCycleReset 0016                     __end_of__initialization 008C  
                 __size_of_NutRunCycleStart 000F                              ?_CCP1_CallBack 0039  
                        ?_SYSTEM_Initialize 0070                __end_of_LedON_Control_10msec 059E  
                           _TMR5_WriteTimer 0F80                              __pcstackCOMMON 0070  
                    __u8ResponseBufferIndex 00CF                                __pidataBANK0 0D30  
                              __pidataBANK1 0D7D                         ??_SYSTEM_Initialize 00E2  
                   __end_of_TMR3_StartTimer 0D16                                   ?_TMR0_ISR 0070  
                                 ?_TMR3_ISR 0070                                   ?_TMR5_ISR 0070  
                            ??_INT_CallBack 0078                        _valuetocharLowNibble 0E8C  
                        __end_of_IOCCF4_ISR 0DFE                          __end_of_IOCCF5_ISR 0E0B  
               __size_of_EXT_INT_Initialize 000D                          _multipleTimecheck0 0054  
                        _multipleTimecheck1 0053                       _MBreadPulseTimeoutSec 00EC  
                    __u8TransmitBufferIndex 004B                            ?_TMR0_StartTimer 0070  
                 __end_of_SYSTEM_Initialize 07CF                      _EncoderPositionAtIndex 00C6  
                   __end_of_TMR3_WriteTimer 0F80                                  __pbssBANK0 003E  
                                __pbssBANK1 00A0                            _ModbusMasterInit 0E9C  
                      __end_of_EUSART_Write 0DAB                            ?_TMR3_Initialize 0070  
           i1valuetocharHighNibble@hexvalue 0075                                  _delayCount 00C4  
                               __u16ReadQty 00C0             __end_of_EncINX_PulseRisingEvent 0693  
                  __size_of_NutRunCycleStop 0016                                  __pmaintext 04C4  
           OnEncPulseEdgeEvent@capturevalue 002D            __end_of_TMR0_SetInterruptHandler 0D59  
                                   ?___lmul 0070            __end_of_TMR3_SetInterruptHandler 0D5F  
                                   ?___wmul 00DF                  __end_ofi1_NutRunCycleReset 0F3D  
                                ??_TMR0_ISR 0074                     __end_of_TMR5_StartTimer 0D1C  
                           __CFG_PPS1WAY$ON 0000                                  ??_TMR3_ISR 0074  
                __end_ofi1_NutRunCycleStart 0E26                                  ??_TMR5_ISR 0070  
                                __pintentry 0004                                     _CCP1CAP 0294  
                                   _CCP2CAP 0298                                     _CCP1CON 0293  
                                   _CCP2CON 0297                              ___lmul@product 0078  
                                   ?_millis 0070                       ?_valuetocharLowNibble 0070  
    __end_of_IOCCF5_DefaultInterruptHandler 0D01     __size_of_IOCCF5_DefaultInterruptHandler 0001  
            _IOCCF5_DefaultInterruptHandler 0D00                     i1_valuetocharHighNibble 0EAC  
                   __size_of_ADC_Initialize 0009                     ??_Timer0_tick10msecFunc 0070  
                         ??_preTransmission 00E1                                     _SP1BRGH 019C  
                                   _SP1BRGL 019B                                     _INT_ISR 0D26  
                                   _OSCCON1 0919                                     _OSCCON3 091B  
                                   _OSCTUNE 091E          __end_of_IOCCF4_SetInterruptHandler 0D4D  
                _IOCCF4_SetInterruptHandler 0D47                                     _PPSLOCK 0E0F  
                          ?_LedONStatusBusy 0070                     __end_of_TMR5_WriteTimer 0F97  
                           ??_CCP1_CallBack 007D                            ?_TMR5_Initialize 0070  
                         ?i1_TMR3_StopTimer 0070                         _Blick_tickPointMsec 00B4  
                   __size_of_TMR3_StopTimer 0003                          ??i1_TMR3_StopTimer 0070  
                           _Timer3_Overflow 0762                  ??_TMR5_SetInterruptHandler 00E1  
                           __size_of___lmul 002F                            ?_TMR3_StartTimer 0070  
                                   ___lldiv 05FE                             __size_of___wmul 001C  
                                   ___lwdiv 06C9                             _Timer5_Overflow 0003  
                 __size_of_postTransmission 0006                           i1_getEncoderState 0DAB  
                           __size_of_millis 000A                                     __ptext1 0DB6  
                                   __ptext2 0F80                                     __ptext3 0D1F  
                                   __ptext4 0D1C                                     __ptext5 07AE  
                                   __ptext6 0D22                                     __ptext7 0FCA  
                                   __ptext8 0D19                                     __ptext9 0D5F  
                         ?i1_TMR5_StopTimer 0070                    __size_of_CCP1_CaptureISR 0015  
                   __size_of_TMR5_StopTimer 0003                          ?i1_getEncoderState 0070  
                     _OSCILLATOR_Initialize 0D75                     __size_ofi1_EUSART_Write 0008  
                        ??i1_TMR5_StopTimer 0070                        _LedON_Control_10msec 0531  
                                 _T3CONbits 0413                    __size_of_getEncoderState 000B  
                  ??_PIN_MANAGER_Initialize 00E1                     _INT_SetInterruptHandler 0D41  
                                 _T5CONbits 041A                                   _IOCCFbits 0399  
                               _NutRunstate 004E                                   _IOCCNbits 0398  
                                 _IOCCPbits 0397                         ??i1_getEncoderState 0070  
                __size_of_SYSTEM_Initialize 0021                                   _LED_Color 005A  
                                   clrloop0 0DDA                        end_of_initialization 008C  
                          ?_TMR3_WriteTimer 00DF         __end_of_EPC_StateMachineControlLoop 0453  
               _EPC_StateMachineControlLoop 02FA                            _NutRunCycleReset 0F3D  
                          _NutRunCycleStart 0E6E                                     init_ram 0DE5  
                         __postTransmission 00B8                                     initloop 0DE6  
                      __end_of_INT_CallBack 0E42                           _EUSART_Initialize 0DCD  
                           ___lldiv@divisor 0020                    __end_of_LedONStartConfig 04C4  
                           ___lldiv@counter 002C                          ?_EUSART_Initialize 0070  
                   ?i1_valuetocharLowNibble 0070                   __end_ofi1_getEncoderState 0DB6  
                 ??i1_valuetocharHighNibble 0073                            ?_TMR5_StartTimer 0070  
                    ??_valuetocharLowNibble 00E2                           ??_NutRunCycleStop 0072  
          LedONStartConfig@LedONDurationSec 0120                         ??_EUSART_Initialize 00DF  
                          ??_WDT_Initialize 00DF                    _TMR0_SetInterruptHandler 0D53  
                                 _PORTCbits 000E                    _TMR3_SetInterruptHandler 0D59  
                     _TMR5_InterruptHandler 00DD                       ?_LedON_Control_10msec 0070  
                     _valuetocharHighNibble 0F53                     _IOCCF4_InterruptHandler 00D7  
                     __size_of_EUSART_Write 000A            __size_of_EncINX_PulseRisingEvent 0042  
                         ?i1_valtoasciichar 0070                    __size_of_CCP1_Initialize 000F  
                   __size_of_valtoasciichar 0036                            __CFG_FEXTOSC$OFF 0000  
              ??_IOCCF5_SetInterruptHandler 00E1                            ?_TMR5_WriteTimer 00DF  
                        ??i1_valtoasciichar 0070                     __end_of_Timer3_Overflow 0788  
                                 _RXPPSbits 0E24                     TMR5_WriteTimer@timerVal 00DF  
                 __end_of_EUSART_Initialize 0DD9                            __preTransmission 00BA  
                   __end_of_Timer5_Overflow 0004              __end_ofi1_valuetocharLowNibble 0E34  
                    _EncEdgeTimeIntervalOld 00AC                 __end_of_OnEncPulseEdgeEvent 02FA  
                               _CCP1PPSbits 0E14                      _EncEdgeMinTimeInterval 0056  
                               _CCP2PPSbits 0E15                   i1TMR5_WriteTimer@timerVal 0070  
                  __size_of_CCP2_Initialize 0009                     __u8ResponseBufferLength 00CE  
                            __end_of___lmul 0762                              __end_of___wmul 1000  
                             _EncSpdredFact 00E8                    __end_of_ModbusMasterInit 0EAC  
                              _EUSART_Write 0DA1                           __size_of_TMR0_ISR 0005  
                         __size_of_TMR3_ISR 0014                              _ADC_Initialize 0D85  
                         __size_of_TMR5_ISR 0014                          __u16TransmitBuffer 2170  
                    ?_OSCILLATOR_Initialize 0070                              __end_of_millis 0DA1  
                 ??_INT_SetInterruptHandler 00E1         __size_of_IOCCF5_SetInterruptHandler 0006  
                             _EncPulseError 00D2                         start_initialization 0050  
                                 _OldEncPos 00C8        __end_of_TMR5_DefaultInterruptHandler 0D10  
     __size_of_TMR5_DefaultInterruptHandler 0003                _TMR5_DefaultInterruptHandler 0D0D  
                       _EncEdgeTimeInterval 003E                    __size_of_TMR0_Initialize 0014  
           __size_of_PIN_MANAGER_Initialize 0060                           ??_CCP1_CaptureISR 007D  
                         ??_getEncoderState 00DF               i1valuetocharHighNibble@hexval 0076  
                            _TMR3_StopTimer 0D1C                __size_of_EncA_PulseEdgeEvent 0011  
                  __size_of_PIN_MANAGER_IOC 000C                ?_INT_DefaultInterruptHandler 0070  
                           _MBread_EPC_Ctrl 00CC                            __CFG_LPBOREN$OFF 0000  
               valuetocharHighNibble@hexval 00E5                                    ??___lmul 0078  
                           _preTransmission 0D3B                                    ??___wmul 00E3  
                __size_ofi1_getEncoderState 000B                                _LED_msec_Cnt 00B6  
                               _CCPTMRSbits 029F                      __size_of_TMR0_CallBack 000E  
                    __end_of_ADC_Initialize 0D8E                                 __pdataBANK0 0056  
                               __pdataBANK1 00E8                            _postTransmission 0D35  
                                  ??_millis 0074                  __end_of_EXT_INT_Initialize 0E18  
                    ??_LedON_Control_10msec 0070                              _TMR5_StopTimer 0D1F  
                    ?_valuetocharHighNibble 0070                       CCP1_CaptureISR@module 003B  
                            i1_EUSART_Write 0D65                                 __pbssBIGRAM 20F0  
                         _ModbusMasterSetup 0F97                                   ___latbits 0001  
            __size_of_Timer0_tick10msecFunc 0026                                    ?_INT_ISR 0070  
                             __pcstackBANK0 0020                               __pcstackBANK1 00DF  
                             __pcstackBANK2 0120                          i1_NutRunCycleReset 0F27  
             __end_of_Timer0_tick10msecFunc 07AE                          i1_NutRunCycleStart 0E18  
               ?_IOCCF4_SetInterruptHandler 00DF                          ?_ModbusMasterSetup 0070  
                     __size_of_INT_CallBack 000E               ?_TMR5_DefaultInterruptHandler 0070  
                    __end_of_TMR3_StopTimer 0D1F                     _EncoderPositionOneCycle 0052  
                       ?i1_NutRunCycleReset 0070                            ?_Timer3_Overflow 0070  
                       ?i1_NutRunCycleStart 0070                  __size_of_EUSART_Initialize 000C  
                       ??_ModbusMasterSetup 00E1                       _TMR0_InterruptHandler 00D9  
                         ??_CCP1_Initialize 00DF                                   __pnvBANK0 005B  
                                 __pnvBANK1 00D3                    __size_of_TMR0_StartTimer 0003  
                                 _delayFlag 004D                     _IOCCF5_InterruptHandler 00D5  
                          ___lwdiv@dividend 00E1                      _PIN_MANAGER_Initialize 059E  
                          ?_Timer5_Overflow 0070               ??_INT_DefaultInterruptHandler 0070  
                  __size_of_TMR3_Initialize 001A                         _preTransmission_App 0000  
                                  ?___lldiv 0020                                    ?___lwdiv 00DF  
                           ?_ADC_Initialize 0070                      __end_of_TMR5_StopTimer 0D22  
                      ??i1_NutRunCycleReset 0070                        ??i1_NutRunCycleStart 0072  
                    __end_ofi1_EUSART_Write 0D6D                   __size_ofi1_TMR3_StopTimer 0003  
                  __end_of_NutRunCycleReset 0F53                ??_INTERRUPT_InterruptManager 003D  
                  __end_of_NutRunCycleStart 0E7D                                   __pswtext1 07CF  
                                 __pswtext2 0800                   __end_of_ModbusMasterSetup 0FB0  
                              _INT_CallBack 0E34                                __u16WriteQty 0042  
                                  _BAUD1CON 019F                           ??_CCP2_Initialize 00DF  
                   _EncINX_PulseRisingEvent 0651          __end_of_IOCCF5_SetInterruptHandler 0D53  
                _IOCCF5_SetInterruptHandler 0D4D                            ___lwdiv@quotient 00E5  
                            _valtoasciichar 0693                               _TMR0_CallBack 0E42  
          postTransmission@postTransmission 00DF                        i1EUSART_Write@txData 0070  
                           ?_TMR3_StopTimer 0070            ??_IOCCF4_DefaultInterruptHandler 0070  
           ?_IOCCF4_DefaultInterruptHandler 0070                   __size_ofi1_TMR5_StopTimer 0003  
                         ??_TMR0_Initialize 00E1                              ___wmul@product 00E3  
                                  _LATBbits 010D                                    _LATCbits 010E  
                   __end_of_preTransmission 0D41                       __end_of_CCP1_CallBack 0D75  
                                 clear_ram0 0DD9                                    _PIE0bits 0090  
                            _EncEdgeGotFlag 0050                             _NutRunCycleStop 0F11  
                                  _PIE3bits 0093                                    _PIE4bits 0094  
                   valtoasciichar@hexvalue1 00E0                    __size_of_LedONStatusBusy 0003  
       __size_of_INTERRUPT_InterruptManager 004A                  ??_TMR0_SetInterruptHandler 00E1  
                                  _PIR0bits 0010                           _IdleTimeOnShutOff 00A4  
                                  _PIR1bits 0011                           ?_LedONStartConfig 0120  
                                  _PIR3bits 0013                                    _PIR4bits 0014  
                ??_TMR3_SetInterruptHandler 00E1                    __size_of_TMR5_Initialize 001A  
                                  _TMR0_ISR 0D2B                          ??_LedONStartConfig 0122  
                                  _TMR3_ISR 0EC0                                    _TMR5_ISR 0ED4  
                         ??_PIN_MANAGER_IOC 0070                             ?_TMR5_StopTimer 0070  
                         i1_TMR3_StartTimer 0D07                             ?i1_EUSART_Write 0070  
                 i1valtoasciichar@hexvalue1 0071                               _TimertickMsec 00A0  
                                _ADCON0bits 009D                           ___wmul@multiplier 00DF  
                        ?i1_TMR3_StartTimer 0070                    __size_of_TMR3_StartTimer 0003  
      __size_of_INT_DefaultInterruptHandler 0001                      __end_of_valtoasciichar 06C9  
         __size_of_TMR5_SetInterruptHandler 0006                   ?_TMR5_SetInterruptHandler 00DF  
                          __size_of_INT_ISR 0005                      i1valtoasciichar@hexval 0072  
                            ?_TMR0_CallBack 0070                         ??i1_TMR3_StartTimer 0070  
                         ___lmul@multiplier 0070                           i1_TMR3_WriteTimer 0E50  
            ??_TMR5_DefaultInterruptHandler 0070                          ?i1_TMR3_WriteTimer 0070  
                  __size_of_TMR3_WriteTimer 0017                   __size_ofi1_valtoasciichar 0035  
                valuetocharLowNibble@hexval 00E4                   __end_ofi1_TMR3_StartTimer 0D0A  
                        _OldEncPulseOpState 00CA                         ??i1_TMR3_WriteTimer 0072  
                   ??_OSCILLATOR_Initialize 00DF                valuetocharLowNibble@hexvalue 00E3  
                      _postTransmission_App 0000                           ??_TMR0_StartTimer 00DF  
                          __size_of___lldiv 0053                            __size_of___lwdiv 0035  
                CCP1_CallBack@capturedValue 0039                             _CCP1_CaptureISR 0EFC  
                         ?_ModbusMasterInit 0070               __size_of_valuetocharLowNibble 0010  
                         ??_TMR3_Initialize 00E1                  __size_of_ModbusMasterSetup 0019  
                 ??_EncINX_PulseRisingEvent 0077                             _getEncoderState 0DB6  
                        ??_ModbusMasterInit 00DF                         _EncA_PulseEdgeEvent 07EF  
                  __size_of_TMR5_StartTimer 0003                                  _T0CON0bits 0017  
                           ?_valtoasciichar 0070                             ___lwdiv@divisor 00DF  
                           ___lwdiv@counter 00E4                                    __ptext10 0FB0  
                                  __ptext11 0D59                                    __ptext20 0D41  
                                  __ptext12 0EE8                                    __ptext21 0D8E  
                                  __ptext13 0D16                                    __ptext30 0E9C  
                                  __ptext22 0E7D                                    __ptext14 0D53  
                                  __ptext31 0DCD                                    __ptext23 0D85  
                                  __ptext15 059E                                    __ptext40 06C9  
                                  __ptext32 0D10                                    __ptext24 0E6E  
                                  __ptext16 0D4D                                    __ptext41 0DA1  
                                  __ptext33 02FA                                    __ptext25 0F69  
                                  __ptext17 0D47                                    __ptext50 0E42  
                                  __ptext34 0E8C                                    __ptext26 0D13  
                                  __ptext18 0D75                                    __ptext51 0788  
                                  __ptext43 0ED4                                    __ptext35 0F53  
                                  __ptext27 0F97                                    __ptext19 0E0B  
                                  __ptext60 0E34                                    __ptext52 0531  
                                  __ptext44 0D0D                                    __ptext36 0693  
                                  __ptext28 0D3B                                    __ptext61 0CFE  
                                  __ptext53 0002                                    __ptext45 0003  
                                  __ptext37 0F3D                                    __ptext29 0D35  
                                  __ptext70 0DAB                                    __ptext62 0651  
                                  __ptext54 0DC1                                    __ptext46 0EC0  
                                  __ptext38 0453                                    __ptext71 0E18  
                                  __ptext63 0E26                                    __ptext55 0DFE  
                                  __ptext47 0D0A                                    __ptext39 0FE4  
                                  __ptext80 0D04                                    __ptext72 0D07  
                                  __ptext64 0EAC                                    __ptext56 0D00  
                                  __ptext48 0762                                    __ptext81 0E50  
                                  __ptext73 0F27                                    __ptext65 06FE  
                                  __ptext57 0DF1                                    __ptext49 0D2B  
                                  __ptext82 0D01                                    __ptext74 0D65  
                                  __ptext66 0EFC                                    __ptext58 0CFF  
                                  __ptext75 0D97                                    __ptext67 0D6D  
                                  __ptext59 0D26                                    __ptext76 0733  
                                  __ptext68 07EF                                    __ptext77 05FE  
                                  __ptext69 0090                                    __ptext78 0F11  
                                  __ptext79 0E5F                        valtoasciichar@hexval 00E1  
                              _NutRunLength 0046                   __end_ofi1_TMR3_WriteTimer 0E5F  
                   __end_of_NutRunCycleStop 0F27                                  _T3GCONbits 0414  
                                _IOCCF4_ISR 0DF1                     TMR3_WriteTimer@timerVal 00DF  
                                _IOCCF5_ISR 0DFE                    __end_of_postTransmission 0D3B  
                          _ShutdownDetected 004F                           i1_TMR5_WriteTimer 0E5F  
                             __size_of_main 006D                                  _T5GCONbits 041B  
                          ?_preTransmission 00DF                        ?_EncA_PulseEdgeEvent 0037  
      __end_of_TMR0_DefaultInterruptHandler 0003       __size_of_TMR0_DefaultInterruptHandler 0001  
              _TMR0_DefaultInterruptHandler 0002                          ?i1_TMR5_WriteTimer 0070  
                  ?i1_valuetocharHighNibble 0070                                    _rxBuffer 00D0  
                  __size_of_TMR5_WriteTimer 0017                                  _RC1STAbits 019D  
                                  _txBuffer 00D1                                  _RB5PPSbits 0E9D  
                 i1TMR3_WriteTimer@timerVal 0070                                    int$flags 007E  
                       ??i1_TMR5_WriteTimer 0072                     ??_valuetocharHighNibble 00E2  
        __end_of_INTERRUPT_InterruptManager 004E                  _INTERRUPT_InterruptManager 0004  
          EncA_PulseEdgeEvent@capturedValue 0037                           ??_LedONStatusBusy 00DF  
                          i1_TMR3_StopTimer 0D01        __end_of_TMR3_DefaultInterruptHandler 0D0D  
     __size_of_TMR3_DefaultInterruptHandler 0003                _TMR3_DefaultInterruptHandler 0D0A  
              __size_of_OnEncPulseEdgeEvent 026A                 PIN_MANAGER_Initialize@state 00E1  
                         ??_TMR5_Initialize 00E1                    LedONStartConfig@LEDcolor 00E7  
                                _INTCONbits 000B                             ??_TMR0_CallBack 0074  
                      _INT_InterruptHandler 00D3                             _CCP1_Initialize 0E7D  
                   _u16TransmitBufferLength 00BC                          _EXT_INT_Initialize 0E0B  
                   __size_of_WDT_Initialize 0004                   __end_ofi1_TMR5_WriteTimer 0E6E  
                                _INTPPSbits 0E10                           ??_TMR3_StartTimer 00DF  
                                  intlevel1 0000                            i1_TMR5_StopTimer 0D04  
                       _LedON_Duration_msec 00B0                            ___lldiv@dividend 0024  
                   ?_PIN_MANAGER_Initialize 0070                       ??_EncA_PulseEdgeEvent 007D  
                         __CFG_CLKOUTEN$OFF 0000                         ?_EXT_INT_Initialize 0070  
                               _PPSLOCKbits 0E0F                            ??_ADC_Initialize 00DF  
             ?_TMR0_DefaultInterruptHandler 0070                     __end_of_CCP1_CaptureISR 0F11  
                           _CCP2_Initialize 0D8E                  __size_ofi1_TMR3_StartTimer 0003  
                           _EncoderPosition 0044                     __end_of_getEncoderState 0DC1  
                         _EncPulseCntResult 0055                    ?_INT_SetInterruptHandler 00DF  
                         ??_TMR3_WriteTimer 00E1                           ?_NutRunCycleReset 0070  
                         ?_NutRunCycleStart 0070                        ??_EXT_INT_Initialize 00E1  
             ?_TMR3_DefaultInterruptHandler 0070                            ___lldiv@quotient 0028  
             __size_of_LedON_Control_10msec 006D                          ??_NutRunCycleReset 00DF  
                           _TMR0_Initialize 0EE8                             _Blick_tickPoint 00B2  
                        ??_NutRunCycleStart 00E1                            ??_TMR3_StopTimer 00DF  
               ?_IOCCF5_SetInterruptHandler 00DF                       _Timer0_tick10msecFunc 0788  
                __size_ofi1_TMR3_WriteTimer 000F                            ?_NutRunCycleStop 0070  
                        EUSART_Write@txData 00DF                           ??_TMR5_StartTimer 00DF  
                               ?_IOCCF4_ISR 0070                                 ?_IOCCF5_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 05FE                    ??i1_valuetocharLowNibble 0073  
           __end_ofi1_valuetocharHighNibble 0EC0                ?_EPC_StateMachineControlLoop 0070  
                           _PIN_MANAGER_IOC 0DC1                            ??_TMR5_StopTimer 00DF  
              i1valuetocharLowNibble@hexval 0075                            i1_valtoasciichar 06FE  
                  __size_of_Timer3_Overflow 0026  
