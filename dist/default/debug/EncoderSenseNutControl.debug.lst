

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed May 31 01:10:03 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F18344
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	intentry,global,class=CODE,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	dabs	1,0x7E,2
   103  0000                     
   104                           ; Version 1.41
   105                           ; Generated 25/01/2017 GMT
   106                           ; 
   107                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   108                           ; All rights reserved.
   109                           ; 
   110                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   111                           ; 
   112                           ; Redistribution and use in source and binary forms, with or without modification, are
   113                           ; permitted provided that the following conditions are met:
   114                           ; 
   115                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   116                           ;        conditions and the following disclaimer.
   117                           ; 
   118                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   119                           ;        of conditions and the following disclaimer in the documentation and/or other
   120                           ;        materials provided with the distribution.
   121                           ; 
   122                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   123                           ;        software without specific prior written permission.
   124                           ; 
   125                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   126                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   127                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   128                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   129                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   130                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   131                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   132                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   133                           ; 
   134                           ; 
   135                           ; Code-generator required, PIC16F18344 Definitions
   136                           ; 
   137                           ; SFR Addresses
   138  0000                     	;# 
   139  0001                     	;# 
   140  0002                     	;# 
   141  0003                     	;# 
   142  0004                     	;# 
   143  0005                     	;# 
   144  0006                     	;# 
   145  0007                     	;# 
   146  0008                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0016                     	;# 
   162  0017                     	;# 
   163  0018                     	;# 
   164  0019                     	;# 
   165  0019                     	;# 
   166  001A                     	;# 
   167  001B                     	;# 
   168  001C                     	;# 
   169  001D                     	;# 
   170  001E                     	;# 
   171  001F                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0094                     	;# 
   180  0097                     	;# 
   181  009B                     	;# 
   182  009B                     	;# 
   183  009C                     	;# 
   184  009D                     	;# 
   185  009E                     	;# 
   186  009F                     	;# 
   187  010C                     	;# 
   188  010D                     	;# 
   189  010E                     	;# 
   190  0111                     	;# 
   191  0112                     	;# 
   192  0113                     	;# 
   193  0114                     	;# 
   194  0115                     	;# 
   195  0116                     	;# 
   196  0117                     	;# 
   197  0118                     	;# 
   198  0119                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201  018E                     	;# 
   202  0197                     	;# 
   203  0199                     	;# 
   204  0199                     	;# 
   205  0199                     	;# 
   206  019A                     	;# 
   207  019A                     	;# 
   208  019A                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019B                     	;# 
   213  019B                     	;# 
   214  019C                     	;# 
   215  019C                     	;# 
   216  019C                     	;# 
   217  019D                     	;# 
   218  019D                     	;# 
   219  019D                     	;# 
   220  019E                     	;# 
   221  019E                     	;# 
   222  019E                     	;# 
   223  019F                     	;# 
   224  019F                     	;# 
   225  019F                     	;# 
   226  019F                     	;# 
   227  019F                     	;# 
   228  020C                     	;# 
   229  020D                     	;# 
   230  020E                     	;# 
   231  0211                     	;# 
   232  0211                     	;# 
   233  0212                     	;# 
   234  0212                     	;# 
   235  0213                     	;# 
   236  0213                     	;# 
   237  0214                     	;# 
   238  0214                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0216                     	;# 
   244  0216                     	;# 
   245  0217                     	;# 
   246  0217                     	;# 
   247  028C                     	;# 
   248  028D                     	;# 
   249  028E                     	;# 
   250  0291                     	;# 
   251  0291                     	;# 
   252  0292                     	;# 
   253  0293                     	;# 
   254  0294                     	;# 
   255  0295                     	;# 
   256  0295                     	;# 
   257  0296                     	;# 
   258  0297                     	;# 
   259  0298                     	;# 
   260  029F                     	;# 
   261  030C                     	;# 
   262  030D                     	;# 
   263  030E                     	;# 
   264  0311                     	;# 
   265  0311                     	;# 
   266  0312                     	;# 
   267  0313                     	;# 
   268  0314                     	;# 
   269  0315                     	;# 
   270  0315                     	;# 
   271  0316                     	;# 
   272  0317                     	;# 
   273  0318                     	;# 
   274  038C                     	;# 
   275  038D                     	;# 
   276  038E                     	;# 
   277  0391                     	;# 
   278  0392                     	;# 
   279  0393                     	;# 
   280  0394                     	;# 
   281  0395                     	;# 
   282  0396                     	;# 
   283  0397                     	;# 
   284  0398                     	;# 
   285  0399                     	;# 
   286  039A                     	;# 
   287  039C                     	;# 
   288  039D                     	;# 
   289  039E                     	;# 
   290  039F                     	;# 
   291  0411                     	;# 
   292  0411                     	;# 
   293  0412                     	;# 
   294  0413                     	;# 
   295  0414                     	;# 
   296  0415                     	;# 
   297  0416                     	;# 
   298  0417                     	;# 
   299  0418                     	;# 
   300  0418                     	;# 
   301  0419                     	;# 
   302  041A                     	;# 
   303  041B                     	;# 
   304  041C                     	;# 
   305  041D                     	;# 
   306  041E                     	;# 
   307  041F                     	;# 
   308  0498                     	;# 
   309  0498                     	;# 
   310  0499                     	;# 
   311  049A                     	;# 
   312  049B                     	;# 
   313  049B                     	;# 
   314  049C                     	;# 
   315  049D                     	;# 
   316  049E                     	;# 
   317  049F                     	;# 
   318  0617                     	;# 
   319  0618                     	;# 
   320  0619                     	;# 
   321  0619                     	;# 
   322  061A                     	;# 
   323  061B                     	;# 
   324  061C                     	;# 
   325  061C                     	;# 
   326  061F                     	;# 
   327  0691                     	;# 
   328  0692                     	;# 
   329  0693                     	;# 
   330  0694                     	;# 
   331  0695                     	;# 
   332  0696                     	;# 
   333  0697                     	;# 
   334  0698                     	;# 
   335  0699                     	;# 
   336  0711                     	;# 
   337  0712                     	;# 
   338  0713                     	;# 
   339  0714                     	;# 
   340  0715                     	;# 
   341  0716                     	;# 
   342  0717                     	;# 
   343  0718                     	;# 
   344  0719                     	;# 
   345  0891                     	;# 
   346  0891                     	;# 
   347  0891                     	;# 
   348  0891                     	;# 
   349  0891                     	;# 
   350  0891                     	;# 
   351  0892                     	;# 
   352  0892                     	;# 
   353  0892                     	;# 
   354  0893                     	;# 
   355  0893                     	;# 
   356  0893                     	;# 
   357  0893                     	;# 
   358  0893                     	;# 
   359  0893                     	;# 
   360  0894                     	;# 
   361  0894                     	;# 
   362  0894                     	;# 
   363  0895                     	;# 
   364  0895                     	;# 
   365  0895                     	;# 
   366  0896                     	;# 
   367  0896                     	;# 
   368  0896                     	;# 
   369  089B                     	;# 
   370  0911                     	;# 
   371  0912                     	;# 
   372  0913                     	;# 
   373  0914                     	;# 
   374  0915                     	;# 
   375  0916                     	;# 
   376  0918                     	;# 
   377  0919                     	;# 
   378  091A                     	;# 
   379  091B                     	;# 
   380  091C                     	;# 
   381  091D                     	;# 
   382  091E                     	;# 
   383  091F                     	;# 
   384  0E0F                     	;# 
   385  0E10                     	;# 
   386  0E11                     	;# 
   387  0E12                     	;# 
   388  0E13                     	;# 
   389  0E14                     	;# 
   390  0E15                     	;# 
   391  0E16                     	;# 
   392  0E17                     	;# 
   393  0E18                     	;# 
   394  0E19                     	;# 
   395  0E1A                     	;# 
   396  0E1B                     	;# 
   397  0E1C                     	;# 
   398  0E20                     	;# 
   399  0E21                     	;# 
   400  0E22                     	;# 
   401  0E24                     	;# 
   402  0E25                     	;# 
   403  0E28                     	;# 
   404  0E29                     	;# 
   405  0E2A                     	;# 
   406  0E2B                     	;# 
   407  0E2C                     	;# 
   408  0E2D                     	;# 
   409  0E2E                     	;# 
   410  0E2F                     	;# 
   411  0E90                     	;# 
   412  0E91                     	;# 
   413  0E92                     	;# 
   414  0E94                     	;# 
   415  0E95                     	;# 
   416  0E9C                     	;# 
   417  0E9D                     	;# 
   418  0E9E                     	;# 
   419  0E9F                     	;# 
   420  0EA0                     	;# 
   421  0EA1                     	;# 
   422  0EA2                     	;# 
   423  0EA3                     	;# 
   424  0EA4                     	;# 
   425  0EA5                     	;# 
   426  0EA6                     	;# 
   427  0EA7                     	;# 
   428  0F0F                     	;# 
   429  0F10                     	;# 
   430  0F11                     	;# 
   431  0F12                     	;# 
   432  0F13                     	;# 
   433  0F14                     	;# 
   434  0F15                     	;# 
   435  0F16                     	;# 
   436  0F17                     	;# 
   437  0F18                     	;# 
   438  0F19                     	;# 
   439  0F1A                     	;# 
   440  0F1B                     	;# 
   441  0F1C                     	;# 
   442  0F1D                     	;# 
   443  0F1E                     	;# 
   444  0F1F                     	;# 
   445  0F20                     	;# 
   446  0F21                     	;# 
   447  0F22                     	;# 
   448  0F23                     	;# 
   449  0F24                     	;# 
   450  0F25                     	;# 
   451  0F26                     	;# 
   452  0F27                     	;# 
   453  0F28                     	;# 
   454  0F29                     	;# 
   455  0F2A                     	;# 
   456  0F2B                     	;# 
   457  0F2C                     	;# 
   458  0F2D                     	;# 
   459  0F2E                     	;# 
   460  0F2F                     	;# 
   461  0F30                     	;# 
   462  0F31                     	;# 
   463  0F32                     	;# 
   464  0F33                     	;# 
   465  0F34                     	;# 
   466  0F35                     	;# 
   467  0F36                     	;# 
   468  0F37                     	;# 
   469  0FE4                     	;# 
   470  0FE5                     	;# 
   471  0FE6                     	;# 
   472  0FE7                     	;# 
   473  0FE8                     	;# 
   474  0FE9                     	;# 
   475  0FEA                     	;# 
   476  0FEB                     	;# 
   477  0FED                     	;# 
   478  0FEE                     	;# 
   479  0FEF                     	;# 
   480  0000                     	;# 
   481  0001                     	;# 
   482  0002                     	;# 
   483  0003                     	;# 
   484  0004                     	;# 
   485  0005                     	;# 
   486  0006                     	;# 
   487  0007                     	;# 
   488  0008                     	;# 
   489  0009                     	;# 
   490  000A                     	;# 
   491  000B                     	;# 
   492  000C                     	;# 
   493  000D                     	;# 
   494  000E                     	;# 
   495  0010                     	;# 
   496  0011                     	;# 
   497  0012                     	;# 
   498  0013                     	;# 
   499  0014                     	;# 
   500  0015                     	;# 
   501  0015                     	;# 
   502  0016                     	;# 
   503  0016                     	;# 
   504  0017                     	;# 
   505  0018                     	;# 
   506  0019                     	;# 
   507  0019                     	;# 
   508  001A                     	;# 
   509  001B                     	;# 
   510  001C                     	;# 
   511  001D                     	;# 
   512  001E                     	;# 
   513  001F                     	;# 
   514  008C                     	;# 
   515  008D                     	;# 
   516  008E                     	;# 
   517  0090                     	;# 
   518  0091                     	;# 
   519  0092                     	;# 
   520  0093                     	;# 
   521  0094                     	;# 
   522  0097                     	;# 
   523  009B                     	;# 
   524  009B                     	;# 
   525  009C                     	;# 
   526  009D                     	;# 
   527  009E                     	;# 
   528  009F                     	;# 
   529  010C                     	;# 
   530  010D                     	;# 
   531  010E                     	;# 
   532  0111                     	;# 
   533  0112                     	;# 
   534  0113                     	;# 
   535  0114                     	;# 
   536  0115                     	;# 
   537  0116                     	;# 
   538  0117                     	;# 
   539  0118                     	;# 
   540  0119                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0197                     	;# 
   545  0199                     	;# 
   546  0199                     	;# 
   547  0199                     	;# 
   548  019A                     	;# 
   549  019A                     	;# 
   550  019A                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019C                     	;# 
   557  019C                     	;# 
   558  019C                     	;# 
   559  019D                     	;# 
   560  019D                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019E                     	;# 
   564  019E                     	;# 
   565  019F                     	;# 
   566  019F                     	;# 
   567  019F                     	;# 
   568  019F                     	;# 
   569  019F                     	;# 
   570  020C                     	;# 
   571  020D                     	;# 
   572  020E                     	;# 
   573  0211                     	;# 
   574  0211                     	;# 
   575  0212                     	;# 
   576  0212                     	;# 
   577  0213                     	;# 
   578  0213                     	;# 
   579  0214                     	;# 
   580  0214                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  028C                     	;# 
   590  028D                     	;# 
   591  028E                     	;# 
   592  0291                     	;# 
   593  0291                     	;# 
   594  0292                     	;# 
   595  0293                     	;# 
   596  0294                     	;# 
   597  0295                     	;# 
   598  0295                     	;# 
   599  0296                     	;# 
   600  0297                     	;# 
   601  0298                     	;# 
   602  029F                     	;# 
   603  030C                     	;# 
   604  030D                     	;# 
   605  030E                     	;# 
   606  0311                     	;# 
   607  0311                     	;# 
   608  0312                     	;# 
   609  0313                     	;# 
   610  0314                     	;# 
   611  0315                     	;# 
   612  0315                     	;# 
   613  0316                     	;# 
   614  0317                     	;# 
   615  0318                     	;# 
   616  038C                     	;# 
   617  038D                     	;# 
   618  038E                     	;# 
   619  0391                     	;# 
   620  0392                     	;# 
   621  0393                     	;# 
   622  0394                     	;# 
   623  0395                     	;# 
   624  0396                     	;# 
   625  0397                     	;# 
   626  0398                     	;# 
   627  0399                     	;# 
   628  039A                     	;# 
   629  039C                     	;# 
   630  039D                     	;# 
   631  039E                     	;# 
   632  039F                     	;# 
   633  0411                     	;# 
   634  0411                     	;# 
   635  0412                     	;# 
   636  0413                     	;# 
   637  0414                     	;# 
   638  0415                     	;# 
   639  0416                     	;# 
   640  0417                     	;# 
   641  0418                     	;# 
   642  0418                     	;# 
   643  0419                     	;# 
   644  041A                     	;# 
   645  041B                     	;# 
   646  041C                     	;# 
   647  041D                     	;# 
   648  041E                     	;# 
   649  041F                     	;# 
   650  0498                     	;# 
   651  0498                     	;# 
   652  0499                     	;# 
   653  049A                     	;# 
   654  049B                     	;# 
   655  049B                     	;# 
   656  049C                     	;# 
   657  049D                     	;# 
   658  049E                     	;# 
   659  049F                     	;# 
   660  0617                     	;# 
   661  0618                     	;# 
   662  0619                     	;# 
   663  0619                     	;# 
   664  061A                     	;# 
   665  061B                     	;# 
   666  061C                     	;# 
   667  061C                     	;# 
   668  061F                     	;# 
   669  0691                     	;# 
   670  0692                     	;# 
   671  0693                     	;# 
   672  0694                     	;# 
   673  0695                     	;# 
   674  0696                     	;# 
   675  0697                     	;# 
   676  0698                     	;# 
   677  0699                     	;# 
   678  0711                     	;# 
   679  0712                     	;# 
   680  0713                     	;# 
   681  0714                     	;# 
   682  0715                     	;# 
   683  0716                     	;# 
   684  0717                     	;# 
   685  0718                     	;# 
   686  0719                     	;# 
   687  0891                     	;# 
   688  0891                     	;# 
   689  0891                     	;# 
   690  0891                     	;# 
   691  0891                     	;# 
   692  0891                     	;# 
   693  0892                     	;# 
   694  0892                     	;# 
   695  0892                     	;# 
   696  0893                     	;# 
   697  0893                     	;# 
   698  0893                     	;# 
   699  0893                     	;# 
   700  0893                     	;# 
   701  0893                     	;# 
   702  0894                     	;# 
   703  0894                     	;# 
   704  0894                     	;# 
   705  0895                     	;# 
   706  0895                     	;# 
   707  0895                     	;# 
   708  0896                     	;# 
   709  0896                     	;# 
   710  0896                     	;# 
   711  089B                     	;# 
   712  0911                     	;# 
   713  0912                     	;# 
   714  0913                     	;# 
   715  0914                     	;# 
   716  0915                     	;# 
   717  0916                     	;# 
   718  0918                     	;# 
   719  0919                     	;# 
   720  091A                     	;# 
   721  091B                     	;# 
   722  091C                     	;# 
   723  091D                     	;# 
   724  091E                     	;# 
   725  091F                     	;# 
   726  0E0F                     	;# 
   727  0E10                     	;# 
   728  0E11                     	;# 
   729  0E12                     	;# 
   730  0E13                     	;# 
   731  0E14                     	;# 
   732  0E15                     	;# 
   733  0E16                     	;# 
   734  0E17                     	;# 
   735  0E18                     	;# 
   736  0E19                     	;# 
   737  0E1A                     	;# 
   738  0E1B                     	;# 
   739  0E1C                     	;# 
   740  0E20                     	;# 
   741  0E21                     	;# 
   742  0E22                     	;# 
   743  0E24                     	;# 
   744  0E25                     	;# 
   745  0E28                     	;# 
   746  0E29                     	;# 
   747  0E2A                     	;# 
   748  0E2B                     	;# 
   749  0E2C                     	;# 
   750  0E2D                     	;# 
   751  0E2E                     	;# 
   752  0E2F                     	;# 
   753  0E90                     	;# 
   754  0E91                     	;# 
   755  0E92                     	;# 
   756  0E94                     	;# 
   757  0E95                     	;# 
   758  0E9C                     	;# 
   759  0E9D                     	;# 
   760  0E9E                     	;# 
   761  0E9F                     	;# 
   762  0EA0                     	;# 
   763  0EA1                     	;# 
   764  0EA2                     	;# 
   765  0EA3                     	;# 
   766  0EA4                     	;# 
   767  0EA5                     	;# 
   768  0EA6                     	;# 
   769  0EA7                     	;# 
   770  0F0F                     	;# 
   771  0F10                     	;# 
   772  0F11                     	;# 
   773  0F12                     	;# 
   774  0F13                     	;# 
   775  0F14                     	;# 
   776  0F15                     	;# 
   777  0F16                     	;# 
   778  0F17                     	;# 
   779  0F18                     	;# 
   780  0F19                     	;# 
   781  0F1A                     	;# 
   782  0F1B                     	;# 
   783  0F1C                     	;# 
   784  0F1D                     	;# 
   785  0F1E                     	;# 
   786  0F1F                     	;# 
   787  0F20                     	;# 
   788  0F21                     	;# 
   789  0F22                     	;# 
   790  0F23                     	;# 
   791  0F24                     	;# 
   792  0F25                     	;# 
   793  0F26                     	;# 
   794  0F27                     	;# 
   795  0F28                     	;# 
   796  0F29                     	;# 
   797  0F2A                     	;# 
   798  0F2B                     	;# 
   799  0F2C                     	;# 
   800  0F2D                     	;# 
   801  0F2E                     	;# 
   802  0F2F                     	;# 
   803  0F30                     	;# 
   804  0F31                     	;# 
   805  0F32                     	;# 
   806  0F33                     	;# 
   807  0F34                     	;# 
   808  0F35                     	;# 
   809  0F36                     	;# 
   810  0F37                     	;# 
   811  0FE4                     	;# 
   812  0FE5                     	;# 
   813  0FE6                     	;# 
   814  0FE7                     	;# 
   815  0FE8                     	;# 
   816  0FE9                     	;# 
   817  0FEA                     	;# 
   818  0FEB                     	;# 
   819  0FED                     	;# 
   820  0FEE                     	;# 
   821  0FEF                     	;# 
   822  0000                     	;# 
   823  0001                     	;# 
   824  0002                     	;# 
   825  0003                     	;# 
   826  0004                     	;# 
   827  0005                     	;# 
   828  0006                     	;# 
   829  0007                     	;# 
   830  0008                     	;# 
   831  0009                     	;# 
   832  000A                     	;# 
   833  000B                     	;# 
   834  000C                     	;# 
   835  000D                     	;# 
   836  000E                     	;# 
   837  0010                     	;# 
   838  0011                     	;# 
   839  0012                     	;# 
   840  0013                     	;# 
   841  0014                     	;# 
   842  0015                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  0019                     	;# 
   850  001A                     	;# 
   851  001B                     	;# 
   852  001C                     	;# 
   853  001D                     	;# 
   854  001E                     	;# 
   855  001F                     	;# 
   856  008C                     	;# 
   857  008D                     	;# 
   858  008E                     	;# 
   859  0090                     	;# 
   860  0091                     	;# 
   861  0092                     	;# 
   862  0093                     	;# 
   863  0094                     	;# 
   864  0097                     	;# 
   865  009B                     	;# 
   866  009B                     	;# 
   867  009C                     	;# 
   868  009D                     	;# 
   869  009E                     	;# 
   870  009F                     	;# 
   871  010C                     	;# 
   872  010D                     	;# 
   873  010E                     	;# 
   874  0111                     	;# 
   875  0112                     	;# 
   876  0113                     	;# 
   877  0114                     	;# 
   878  0115                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  0118                     	;# 
   882  0119                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0197                     	;# 
   887  0199                     	;# 
   888  0199                     	;# 
   889  0199                     	;# 
   890  019A                     	;# 
   891  019A                     	;# 
   892  019A                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019C                     	;# 
   899  019C                     	;# 
   900  019C                     	;# 
   901  019D                     	;# 
   902  019D                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019E                     	;# 
   906  019E                     	;# 
   907  019F                     	;# 
   908  019F                     	;# 
   909  019F                     	;# 
   910  019F                     	;# 
   911  019F                     	;# 
   912  020C                     	;# 
   913  020D                     	;# 
   914  020E                     	;# 
   915  0211                     	;# 
   916  0211                     	;# 
   917  0212                     	;# 
   918  0212                     	;# 
   919  0213                     	;# 
   920  0213                     	;# 
   921  0214                     	;# 
   922  0214                     	;# 
   923  0215                     	;# 
   924  0215                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0216                     	;# 
   928  0216                     	;# 
   929  0217                     	;# 
   930  0217                     	;# 
   931  028C                     	;# 
   932  028D                     	;# 
   933  028E                     	;# 
   934  0291                     	;# 
   935  0291                     	;# 
   936  0292                     	;# 
   937  0293                     	;# 
   938  0294                     	;# 
   939  0295                     	;# 
   940  0295                     	;# 
   941  0296                     	;# 
   942  0297                     	;# 
   943  0298                     	;# 
   944  029F                     	;# 
   945  030C                     	;# 
   946  030D                     	;# 
   947  030E                     	;# 
   948  0311                     	;# 
   949  0311                     	;# 
   950  0312                     	;# 
   951  0313                     	;# 
   952  0314                     	;# 
   953  0315                     	;# 
   954  0315                     	;# 
   955  0316                     	;# 
   956  0317                     	;# 
   957  0318                     	;# 
   958  038C                     	;# 
   959  038D                     	;# 
   960  038E                     	;# 
   961  0391                     	;# 
   962  0392                     	;# 
   963  0393                     	;# 
   964  0394                     	;# 
   965  0395                     	;# 
   966  0396                     	;# 
   967  0397                     	;# 
   968  0398                     	;# 
   969  0399                     	;# 
   970  039A                     	;# 
   971  039C                     	;# 
   972  039D                     	;# 
   973  039E                     	;# 
   974  039F                     	;# 
   975  0411                     	;# 
   976  0411                     	;# 
   977  0412                     	;# 
   978  0413                     	;# 
   979  0414                     	;# 
   980  0415                     	;# 
   981  0416                     	;# 
   982  0417                     	;# 
   983  0418                     	;# 
   984  0418                     	;# 
   985  0419                     	;# 
   986  041A                     	;# 
   987  041B                     	;# 
   988  041C                     	;# 
   989  041D                     	;# 
   990  041E                     	;# 
   991  041F                     	;# 
   992  0498                     	;# 
   993  0498                     	;# 
   994  0499                     	;# 
   995  049A                     	;# 
   996  049B                     	;# 
   997  049B                     	;# 
   998  049C                     	;# 
   999  049D                     	;# 
  1000  049E                     	;# 
  1001  049F                     	;# 
  1002  0617                     	;# 
  1003  0618                     	;# 
  1004  0619                     	;# 
  1005  0619                     	;# 
  1006  061A                     	;# 
  1007  061B                     	;# 
  1008  061C                     	;# 
  1009  061C                     	;# 
  1010  061F                     	;# 
  1011  0691                     	;# 
  1012  0692                     	;# 
  1013  0693                     	;# 
  1014  0694                     	;# 
  1015  0695                     	;# 
  1016  0696                     	;# 
  1017  0697                     	;# 
  1018  0698                     	;# 
  1019  0699                     	;# 
  1020  0711                     	;# 
  1021  0712                     	;# 
  1022  0713                     	;# 
  1023  0714                     	;# 
  1024  0715                     	;# 
  1025  0716                     	;# 
  1026  0717                     	;# 
  1027  0718                     	;# 
  1028  0719                     	;# 
  1029  0891                     	;# 
  1030  0891                     	;# 
  1031  0891                     	;# 
  1032  0891                     	;# 
  1033  0891                     	;# 
  1034  0891                     	;# 
  1035  0892                     	;# 
  1036  0892                     	;# 
  1037  0892                     	;# 
  1038  0893                     	;# 
  1039  0893                     	;# 
  1040  0893                     	;# 
  1041  0893                     	;# 
  1042  0893                     	;# 
  1043  0893                     	;# 
  1044  0894                     	;# 
  1045  0894                     	;# 
  1046  0894                     	;# 
  1047  0895                     	;# 
  1048  0895                     	;# 
  1049  0895                     	;# 
  1050  0896                     	;# 
  1051  0896                     	;# 
  1052  0896                     	;# 
  1053  089B                     	;# 
  1054  0911                     	;# 
  1055  0912                     	;# 
  1056  0913                     	;# 
  1057  0914                     	;# 
  1058  0915                     	;# 
  1059  0916                     	;# 
  1060  0918                     	;# 
  1061  0919                     	;# 
  1062  091A                     	;# 
  1063  091B                     	;# 
  1064  091C                     	;# 
  1065  091D                     	;# 
  1066  091E                     	;# 
  1067  091F                     	;# 
  1068  0E0F                     	;# 
  1069  0E10                     	;# 
  1070  0E11                     	;# 
  1071  0E12                     	;# 
  1072  0E13                     	;# 
  1073  0E14                     	;# 
  1074  0E15                     	;# 
  1075  0E16                     	;# 
  1076  0E17                     	;# 
  1077  0E18                     	;# 
  1078  0E19                     	;# 
  1079  0E1A                     	;# 
  1080  0E1B                     	;# 
  1081  0E1C                     	;# 
  1082  0E20                     	;# 
  1083  0E21                     	;# 
  1084  0E22                     	;# 
  1085  0E24                     	;# 
  1086  0E25                     	;# 
  1087  0E28                     	;# 
  1088  0E29                     	;# 
  1089  0E2A                     	;# 
  1090  0E2B                     	;# 
  1091  0E2C                     	;# 
  1092  0E2D                     	;# 
  1093  0E2E                     	;# 
  1094  0E2F                     	;# 
  1095  0E90                     	;# 
  1096  0E91                     	;# 
  1097  0E92                     	;# 
  1098  0E94                     	;# 
  1099  0E95                     	;# 
  1100  0E9C                     	;# 
  1101  0E9D                     	;# 
  1102  0E9E                     	;# 
  1103  0E9F                     	;# 
  1104  0EA0                     	;# 
  1105  0EA1                     	;# 
  1106  0EA2                     	;# 
  1107  0EA3                     	;# 
  1108  0EA4                     	;# 
  1109  0EA5                     	;# 
  1110  0EA6                     	;# 
  1111  0EA7                     	;# 
  1112  0F0F                     	;# 
  1113  0F10                     	;# 
  1114  0F11                     	;# 
  1115  0F12                     	;# 
  1116  0F13                     	;# 
  1117  0F14                     	;# 
  1118  0F15                     	;# 
  1119  0F16                     	;# 
  1120  0F17                     	;# 
  1121  0F18                     	;# 
  1122  0F19                     	;# 
  1123  0F1A                     	;# 
  1124  0F1B                     	;# 
  1125  0F1C                     	;# 
  1126  0F1D                     	;# 
  1127  0F1E                     	;# 
  1128  0F1F                     	;# 
  1129  0F20                     	;# 
  1130  0F21                     	;# 
  1131  0F22                     	;# 
  1132  0F23                     	;# 
  1133  0F24                     	;# 
  1134  0F25                     	;# 
  1135  0F26                     	;# 
  1136  0F27                     	;# 
  1137  0F28                     	;# 
  1138  0F29                     	;# 
  1139  0F2A                     	;# 
  1140  0F2B                     	;# 
  1141  0F2C                     	;# 
  1142  0F2D                     	;# 
  1143  0F2E                     	;# 
  1144  0F2F                     	;# 
  1145  0F30                     	;# 
  1146  0F31                     	;# 
  1147  0F32                     	;# 
  1148  0F33                     	;# 
  1149  0F34                     	;# 
  1150  0F35                     	;# 
  1151  0F36                     	;# 
  1152  0F37                     	;# 
  1153  0FE4                     	;# 
  1154  0FE5                     	;# 
  1155  0FE6                     	;# 
  1156  0FE7                     	;# 
  1157  0FE8                     	;# 
  1158  0FE9                     	;# 
  1159  0FEA                     	;# 
  1160  0FEB                     	;# 
  1161  0FED                     	;# 
  1162  0FEE                     	;# 
  1163  0FEF                     	;# 
  1164  0000                     	;# 
  1165  0001                     	;# 
  1166  0002                     	;# 
  1167  0003                     	;# 
  1168  0004                     	;# 
  1169  0005                     	;# 
  1170  0006                     	;# 
  1171  0007                     	;# 
  1172  0008                     	;# 
  1173  0009                     	;# 
  1174  000A                     	;# 
  1175  000B                     	;# 
  1176  000C                     	;# 
  1177  000D                     	;# 
  1178  000E                     	;# 
  1179  0010                     	;# 
  1180  0011                     	;# 
  1181  0012                     	;# 
  1182  0013                     	;# 
  1183  0014                     	;# 
  1184  0015                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  0019                     	;# 
  1192  001A                     	;# 
  1193  001B                     	;# 
  1194  001C                     	;# 
  1195  001D                     	;# 
  1196  001E                     	;# 
  1197  001F                     	;# 
  1198  008C                     	;# 
  1199  008D                     	;# 
  1200  008E                     	;# 
  1201  0090                     	;# 
  1202  0091                     	;# 
  1203  0092                     	;# 
  1204  0093                     	;# 
  1205  0094                     	;# 
  1206  0097                     	;# 
  1207  009B                     	;# 
  1208  009B                     	;# 
  1209  009C                     	;# 
  1210  009D                     	;# 
  1211  009E                     	;# 
  1212  009F                     	;# 
  1213  010C                     	;# 
  1214  010D                     	;# 
  1215  010E                     	;# 
  1216  0111                     	;# 
  1217  0112                     	;# 
  1218  0113                     	;# 
  1219  0114                     	;# 
  1220  0115                     	;# 
  1221  0116                     	;# 
  1222  0117                     	;# 
  1223  0118                     	;# 
  1224  0119                     	;# 
  1225  018C                     	;# 
  1226  018D                     	;# 
  1227  018E                     	;# 
  1228  0197                     	;# 
  1229  0199                     	;# 
  1230  0199                     	;# 
  1231  0199                     	;# 
  1232  019A                     	;# 
  1233  019A                     	;# 
  1234  019A                     	;# 
  1235  019B                     	;# 
  1236  019B                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019C                     	;# 
  1241  019C                     	;# 
  1242  019C                     	;# 
  1243  019D                     	;# 
  1244  019D                     	;# 
  1245  019D                     	;# 
  1246  019E                     	;# 
  1247  019E                     	;# 
  1248  019E                     	;# 
  1249  019F                     	;# 
  1250  019F                     	;# 
  1251  019F                     	;# 
  1252  019F                     	;# 
  1253  019F                     	;# 
  1254  020C                     	;# 
  1255  020D                     	;# 
  1256  020E                     	;# 
  1257  0211                     	;# 
  1258  0211                     	;# 
  1259  0212                     	;# 
  1260  0212                     	;# 
  1261  0213                     	;# 
  1262  0213                     	;# 
  1263  0214                     	;# 
  1264  0214                     	;# 
  1265  0215                     	;# 
  1266  0215                     	;# 
  1267  0215                     	;# 
  1268  0215                     	;# 
  1269  0216                     	;# 
  1270  0216                     	;# 
  1271  0217                     	;# 
  1272  0217                     	;# 
  1273  028C                     	;# 
  1274  028D                     	;# 
  1275  028E                     	;# 
  1276  0291                     	;# 
  1277  0291                     	;# 
  1278  0292                     	;# 
  1279  0293                     	;# 
  1280  0294                     	;# 
  1281  0295                     	;# 
  1282  0295                     	;# 
  1283  0296                     	;# 
  1284  0297                     	;# 
  1285  0298                     	;# 
  1286  029F                     	;# 
  1287  030C                     	;# 
  1288  030D                     	;# 
  1289  030E                     	;# 
  1290  0311                     	;# 
  1291  0311                     	;# 
  1292  0312                     	;# 
  1293  0313                     	;# 
  1294  0314                     	;# 
  1295  0315                     	;# 
  1296  0315                     	;# 
  1297  0316                     	;# 
  1298  0317                     	;# 
  1299  0318                     	;# 
  1300  038C                     	;# 
  1301  038D                     	;# 
  1302  038E                     	;# 
  1303  0391                     	;# 
  1304  0392                     	;# 
  1305  0393                     	;# 
  1306  0394                     	;# 
  1307  0395                     	;# 
  1308  0396                     	;# 
  1309  0397                     	;# 
  1310  0398                     	;# 
  1311  0399                     	;# 
  1312  039A                     	;# 
  1313  039C                     	;# 
  1314  039D                     	;# 
  1315  039E                     	;# 
  1316  039F                     	;# 
  1317  0411                     	;# 
  1318  0411                     	;# 
  1319  0412                     	;# 
  1320  0413                     	;# 
  1321  0414                     	;# 
  1322  0415                     	;# 
  1323  0416                     	;# 
  1324  0417                     	;# 
  1325  0418                     	;# 
  1326  0418                     	;# 
  1327  0419                     	;# 
  1328  041A                     	;# 
  1329  041B                     	;# 
  1330  041C                     	;# 
  1331  041D                     	;# 
  1332  041E                     	;# 
  1333  041F                     	;# 
  1334  0498                     	;# 
  1335  0498                     	;# 
  1336  0499                     	;# 
  1337  049A                     	;# 
  1338  049B                     	;# 
  1339  049B                     	;# 
  1340  049C                     	;# 
  1341  049D                     	;# 
  1342  049E                     	;# 
  1343  049F                     	;# 
  1344  0617                     	;# 
  1345  0618                     	;# 
  1346  0619                     	;# 
  1347  0619                     	;# 
  1348  061A                     	;# 
  1349  061B                     	;# 
  1350  061C                     	;# 
  1351  061C                     	;# 
  1352  061F                     	;# 
  1353  0691                     	;# 
  1354  0692                     	;# 
  1355  0693                     	;# 
  1356  0694                     	;# 
  1357  0695                     	;# 
  1358  0696                     	;# 
  1359  0697                     	;# 
  1360  0698                     	;# 
  1361  0699                     	;# 
  1362  0711                     	;# 
  1363  0712                     	;# 
  1364  0713                     	;# 
  1365  0714                     	;# 
  1366  0715                     	;# 
  1367  0716                     	;# 
  1368  0717                     	;# 
  1369  0718                     	;# 
  1370  0719                     	;# 
  1371  0891                     	;# 
  1372  0891                     	;# 
  1373  0891                     	;# 
  1374  0891                     	;# 
  1375  0891                     	;# 
  1376  0891                     	;# 
  1377  0892                     	;# 
  1378  0892                     	;# 
  1379  0892                     	;# 
  1380  0893                     	;# 
  1381  0893                     	;# 
  1382  0893                     	;# 
  1383  0893                     	;# 
  1384  0893                     	;# 
  1385  0893                     	;# 
  1386  0894                     	;# 
  1387  0894                     	;# 
  1388  0894                     	;# 
  1389  0895                     	;# 
  1390  0895                     	;# 
  1391  0895                     	;# 
  1392  0896                     	;# 
  1393  0896                     	;# 
  1394  0896                     	;# 
  1395  089B                     	;# 
  1396  0911                     	;# 
  1397  0912                     	;# 
  1398  0913                     	;# 
  1399  0914                     	;# 
  1400  0915                     	;# 
  1401  0916                     	;# 
  1402  0918                     	;# 
  1403  0919                     	;# 
  1404  091A                     	;# 
  1405  091B                     	;# 
  1406  091C                     	;# 
  1407  091D                     	;# 
  1408  091E                     	;# 
  1409  091F                     	;# 
  1410  0E0F                     	;# 
  1411  0E10                     	;# 
  1412  0E11                     	;# 
  1413  0E12                     	;# 
  1414  0E13                     	;# 
  1415  0E14                     	;# 
  1416  0E15                     	;# 
  1417  0E16                     	;# 
  1418  0E17                     	;# 
  1419  0E18                     	;# 
  1420  0E19                     	;# 
  1421  0E1A                     	;# 
  1422  0E1B                     	;# 
  1423  0E1C                     	;# 
  1424  0E20                     	;# 
  1425  0E21                     	;# 
  1426  0E22                     	;# 
  1427  0E24                     	;# 
  1428  0E25                     	;# 
  1429  0E28                     	;# 
  1430  0E29                     	;# 
  1431  0E2A                     	;# 
  1432  0E2B                     	;# 
  1433  0E2C                     	;# 
  1434  0E2D                     	;# 
  1435  0E2E                     	;# 
  1436  0E2F                     	;# 
  1437  0E90                     	;# 
  1438  0E91                     	;# 
  1439  0E92                     	;# 
  1440  0E94                     	;# 
  1441  0E95                     	;# 
  1442  0E9C                     	;# 
  1443  0E9D                     	;# 
  1444  0E9E                     	;# 
  1445  0E9F                     	;# 
  1446  0EA0                     	;# 
  1447  0EA1                     	;# 
  1448  0EA2                     	;# 
  1449  0EA3                     	;# 
  1450  0EA4                     	;# 
  1451  0EA5                     	;# 
  1452  0EA6                     	;# 
  1453  0EA7                     	;# 
  1454  0F0F                     	;# 
  1455  0F10                     	;# 
  1456  0F11                     	;# 
  1457  0F12                     	;# 
  1458  0F13                     	;# 
  1459  0F14                     	;# 
  1460  0F15                     	;# 
  1461  0F16                     	;# 
  1462  0F17                     	;# 
  1463  0F18                     	;# 
  1464  0F19                     	;# 
  1465  0F1A                     	;# 
  1466  0F1B                     	;# 
  1467  0F1C                     	;# 
  1468  0F1D                     	;# 
  1469  0F1E                     	;# 
  1470  0F1F                     	;# 
  1471  0F20                     	;# 
  1472  0F21                     	;# 
  1473  0F22                     	;# 
  1474  0F23                     	;# 
  1475  0F24                     	;# 
  1476  0F25                     	;# 
  1477  0F26                     	;# 
  1478  0F27                     	;# 
  1479  0F28                     	;# 
  1480  0F29                     	;# 
  1481  0F2A                     	;# 
  1482  0F2B                     	;# 
  1483  0F2C                     	;# 
  1484  0F2D                     	;# 
  1485  0F2E                     	;# 
  1486  0F2F                     	;# 
  1487  0F30                     	;# 
  1488  0F31                     	;# 
  1489  0F32                     	;# 
  1490  0F33                     	;# 
  1491  0F34                     	;# 
  1492  0F35                     	;# 
  1493  0F36                     	;# 
  1494  0F37                     	;# 
  1495  0FE4                     	;# 
  1496  0FE5                     	;# 
  1497  0FE6                     	;# 
  1498  0FE7                     	;# 
  1499  0FE8                     	;# 
  1500  0FE9                     	;# 
  1501  0FEA                     	;# 
  1502  0FEB                     	;# 
  1503  0FED                     	;# 
  1504  0FEE                     	;# 
  1505  0FEF                     	;# 
  1506  0000                     	;# 
  1507  0001                     	;# 
  1508  0002                     	;# 
  1509  0003                     	;# 
  1510  0004                     	;# 
  1511  0005                     	;# 
  1512  0006                     	;# 
  1513  0007                     	;# 
  1514  0008                     	;# 
  1515  0009                     	;# 
  1516  000A                     	;# 
  1517  000B                     	;# 
  1518  000C                     	;# 
  1519  000D                     	;# 
  1520  000E                     	;# 
  1521  0010                     	;# 
  1522  0011                     	;# 
  1523  0012                     	;# 
  1524  0013                     	;# 
  1525  0014                     	;# 
  1526  0015                     	;# 
  1527  0015                     	;# 
  1528  0016                     	;# 
  1529  0016                     	;# 
  1530  0017                     	;# 
  1531  0018                     	;# 
  1532  0019                     	;# 
  1533  0019                     	;# 
  1534  001A                     	;# 
  1535  001B                     	;# 
  1536  001C                     	;# 
  1537  001D                     	;# 
  1538  001E                     	;# 
  1539  001F                     	;# 
  1540  008C                     	;# 
  1541  008D                     	;# 
  1542  008E                     	;# 
  1543  0090                     	;# 
  1544  0091                     	;# 
  1545  0092                     	;# 
  1546  0093                     	;# 
  1547  0094                     	;# 
  1548  0097                     	;# 
  1549  009B                     	;# 
  1550  009B                     	;# 
  1551  009C                     	;# 
  1552  009D                     	;# 
  1553  009E                     	;# 
  1554  009F                     	;# 
  1555  010C                     	;# 
  1556  010D                     	;# 
  1557  010E                     	;# 
  1558  0111                     	;# 
  1559  0112                     	;# 
  1560  0113                     	;# 
  1561  0114                     	;# 
  1562  0115                     	;# 
  1563  0116                     	;# 
  1564  0117                     	;# 
  1565  0118                     	;# 
  1566  0119                     	;# 
  1567  018C                     	;# 
  1568  018D                     	;# 
  1569  018E                     	;# 
  1570  0197                     	;# 
  1571  0199                     	;# 
  1572  0199                     	;# 
  1573  0199                     	;# 
  1574  019A                     	;# 
  1575  019A                     	;# 
  1576  019A                     	;# 
  1577  019B                     	;# 
  1578  019B                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019C                     	;# 
  1583  019C                     	;# 
  1584  019C                     	;# 
  1585  019D                     	;# 
  1586  019D                     	;# 
  1587  019D                     	;# 
  1588  019E                     	;# 
  1589  019E                     	;# 
  1590  019E                     	;# 
  1591  019F                     	;# 
  1592  019F                     	;# 
  1593  019F                     	;# 
  1594  019F                     	;# 
  1595  019F                     	;# 
  1596  020C                     	;# 
  1597  020D                     	;# 
  1598  020E                     	;# 
  1599  0211                     	;# 
  1600  0211                     	;# 
  1601  0212                     	;# 
  1602  0212                     	;# 
  1603  0213                     	;# 
  1604  0213                     	;# 
  1605  0214                     	;# 
  1606  0214                     	;# 
  1607  0215                     	;# 
  1608  0215                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0216                     	;# 
  1612  0216                     	;# 
  1613  0217                     	;# 
  1614  0217                     	;# 
  1615  028C                     	;# 
  1616  028D                     	;# 
  1617  028E                     	;# 
  1618  0291                     	;# 
  1619  0291                     	;# 
  1620  0292                     	;# 
  1621  0293                     	;# 
  1622  0294                     	;# 
  1623  0295                     	;# 
  1624  0295                     	;# 
  1625  0296                     	;# 
  1626  0297                     	;# 
  1627  0298                     	;# 
  1628  029F                     	;# 
  1629  030C                     	;# 
  1630  030D                     	;# 
  1631  030E                     	;# 
  1632  0311                     	;# 
  1633  0311                     	;# 
  1634  0312                     	;# 
  1635  0313                     	;# 
  1636  0314                     	;# 
  1637  0315                     	;# 
  1638  0315                     	;# 
  1639  0316                     	;# 
  1640  0317                     	;# 
  1641  0318                     	;# 
  1642  038C                     	;# 
  1643  038D                     	;# 
  1644  038E                     	;# 
  1645  0391                     	;# 
  1646  0392                     	;# 
  1647  0393                     	;# 
  1648  0394                     	;# 
  1649  0395                     	;# 
  1650  0396                     	;# 
  1651  0397                     	;# 
  1652  0398                     	;# 
  1653  0399                     	;# 
  1654  039A                     	;# 
  1655  039C                     	;# 
  1656  039D                     	;# 
  1657  039E                     	;# 
  1658  039F                     	;# 
  1659  0411                     	;# 
  1660  0411                     	;# 
  1661  0412                     	;# 
  1662  0413                     	;# 
  1663  0414                     	;# 
  1664  0415                     	;# 
  1665  0416                     	;# 
  1666  0417                     	;# 
  1667  0418                     	;# 
  1668  0418                     	;# 
  1669  0419                     	;# 
  1670  041A                     	;# 
  1671  041B                     	;# 
  1672  041C                     	;# 
  1673  041D                     	;# 
  1674  041E                     	;# 
  1675  041F                     	;# 
  1676  0498                     	;# 
  1677  0498                     	;# 
  1678  0499                     	;# 
  1679  049A                     	;# 
  1680  049B                     	;# 
  1681  049B                     	;# 
  1682  049C                     	;# 
  1683  049D                     	;# 
  1684  049E                     	;# 
  1685  049F                     	;# 
  1686  0617                     	;# 
  1687  0618                     	;# 
  1688  0619                     	;# 
  1689  0619                     	;# 
  1690  061A                     	;# 
  1691  061B                     	;# 
  1692  061C                     	;# 
  1693  061C                     	;# 
  1694  061F                     	;# 
  1695  0691                     	;# 
  1696  0692                     	;# 
  1697  0693                     	;# 
  1698  0694                     	;# 
  1699  0695                     	;# 
  1700  0696                     	;# 
  1701  0697                     	;# 
  1702  0698                     	;# 
  1703  0699                     	;# 
  1704  0711                     	;# 
  1705  0712                     	;# 
  1706  0713                     	;# 
  1707  0714                     	;# 
  1708  0715                     	;# 
  1709  0716                     	;# 
  1710  0717                     	;# 
  1711  0718                     	;# 
  1712  0719                     	;# 
  1713  0891                     	;# 
  1714  0891                     	;# 
  1715  0891                     	;# 
  1716  0891                     	;# 
  1717  0891                     	;# 
  1718  0891                     	;# 
  1719  0892                     	;# 
  1720  0892                     	;# 
  1721  0892                     	;# 
  1722  0893                     	;# 
  1723  0893                     	;# 
  1724  0893                     	;# 
  1725  0893                     	;# 
  1726  0893                     	;# 
  1727  0893                     	;# 
  1728  0894                     	;# 
  1729  0894                     	;# 
  1730  0894                     	;# 
  1731  0895                     	;# 
  1732  0895                     	;# 
  1733  0895                     	;# 
  1734  0896                     	;# 
  1735  0896                     	;# 
  1736  0896                     	;# 
  1737  089B                     	;# 
  1738  0911                     	;# 
  1739  0912                     	;# 
  1740  0913                     	;# 
  1741  0914                     	;# 
  1742  0915                     	;# 
  1743  0916                     	;# 
  1744  0918                     	;# 
  1745  0919                     	;# 
  1746  091A                     	;# 
  1747  091B                     	;# 
  1748  091C                     	;# 
  1749  091D                     	;# 
  1750  091E                     	;# 
  1751  091F                     	;# 
  1752  0E0F                     	;# 
  1753  0E10                     	;# 
  1754  0E11                     	;# 
  1755  0E12                     	;# 
  1756  0E13                     	;# 
  1757  0E14                     	;# 
  1758  0E15                     	;# 
  1759  0E16                     	;# 
  1760  0E17                     	;# 
  1761  0E18                     	;# 
  1762  0E19                     	;# 
  1763  0E1A                     	;# 
  1764  0E1B                     	;# 
  1765  0E1C                     	;# 
  1766  0E20                     	;# 
  1767  0E21                     	;# 
  1768  0E22                     	;# 
  1769  0E24                     	;# 
  1770  0E25                     	;# 
  1771  0E28                     	;# 
  1772  0E29                     	;# 
  1773  0E2A                     	;# 
  1774  0E2B                     	;# 
  1775  0E2C                     	;# 
  1776  0E2D                     	;# 
  1777  0E2E                     	;# 
  1778  0E2F                     	;# 
  1779  0E90                     	;# 
  1780  0E91                     	;# 
  1781  0E92                     	;# 
  1782  0E94                     	;# 
  1783  0E95                     	;# 
  1784  0E9C                     	;# 
  1785  0E9D                     	;# 
  1786  0E9E                     	;# 
  1787  0E9F                     	;# 
  1788  0EA0                     	;# 
  1789  0EA1                     	;# 
  1790  0EA2                     	;# 
  1791  0EA3                     	;# 
  1792  0EA4                     	;# 
  1793  0EA5                     	;# 
  1794  0EA6                     	;# 
  1795  0EA7                     	;# 
  1796  0F0F                     	;# 
  1797  0F10                     	;# 
  1798  0F11                     	;# 
  1799  0F12                     	;# 
  1800  0F13                     	;# 
  1801  0F14                     	;# 
  1802  0F15                     	;# 
  1803  0F16                     	;# 
  1804  0F17                     	;# 
  1805  0F18                     	;# 
  1806  0F19                     	;# 
  1807  0F1A                     	;# 
  1808  0F1B                     	;# 
  1809  0F1C                     	;# 
  1810  0F1D                     	;# 
  1811  0F1E                     	;# 
  1812  0F1F                     	;# 
  1813  0F20                     	;# 
  1814  0F21                     	;# 
  1815  0F22                     	;# 
  1816  0F23                     	;# 
  1817  0F24                     	;# 
  1818  0F25                     	;# 
  1819  0F26                     	;# 
  1820  0F27                     	;# 
  1821  0F28                     	;# 
  1822  0F29                     	;# 
  1823  0F2A                     	;# 
  1824  0F2B                     	;# 
  1825  0F2C                     	;# 
  1826  0F2D                     	;# 
  1827  0F2E                     	;# 
  1828  0F2F                     	;# 
  1829  0F30                     	;# 
  1830  0F31                     	;# 
  1831  0F32                     	;# 
  1832  0F33                     	;# 
  1833  0F34                     	;# 
  1834  0F35                     	;# 
  1835  0F36                     	;# 
  1836  0F37                     	;# 
  1837  0FE4                     	;# 
  1838  0FE5                     	;# 
  1839  0FE6                     	;# 
  1840  0FE7                     	;# 
  1841  0FE8                     	;# 
  1842  0FE9                     	;# 
  1843  0FEA                     	;# 
  1844  0FEB                     	;# 
  1845  0FED                     	;# 
  1846  0FEE                     	;# 
  1847  0FEF                     	;# 
  1848  0000                     	;# 
  1849  0001                     	;# 
  1850  0002                     	;# 
  1851  0003                     	;# 
  1852  0004                     	;# 
  1853  0005                     	;# 
  1854  0006                     	;# 
  1855  0007                     	;# 
  1856  0008                     	;# 
  1857  0009                     	;# 
  1858  000A                     	;# 
  1859  000B                     	;# 
  1860  000C                     	;# 
  1861  000D                     	;# 
  1862  000E                     	;# 
  1863  0010                     	;# 
  1864  0011                     	;# 
  1865  0012                     	;# 
  1866  0013                     	;# 
  1867  0014                     	;# 
  1868  0015                     	;# 
  1869  0015                     	;# 
  1870  0016                     	;# 
  1871  0016                     	;# 
  1872  0017                     	;# 
  1873  0018                     	;# 
  1874  0019                     	;# 
  1875  0019                     	;# 
  1876  001A                     	;# 
  1877  001B                     	;# 
  1878  001C                     	;# 
  1879  001D                     	;# 
  1880  001E                     	;# 
  1881  001F                     	;# 
  1882  008C                     	;# 
  1883  008D                     	;# 
  1884  008E                     	;# 
  1885  0090                     	;# 
  1886  0091                     	;# 
  1887  0092                     	;# 
  1888  0093                     	;# 
  1889  0094                     	;# 
  1890  0097                     	;# 
  1891  009B                     	;# 
  1892  009B                     	;# 
  1893  009C                     	;# 
  1894  009D                     	;# 
  1895  009E                     	;# 
  1896  009F                     	;# 
  1897  010C                     	;# 
  1898  010D                     	;# 
  1899  010E                     	;# 
  1900  0111                     	;# 
  1901  0112                     	;# 
  1902  0113                     	;# 
  1903  0114                     	;# 
  1904  0115                     	;# 
  1905  0116                     	;# 
  1906  0117                     	;# 
  1907  0118                     	;# 
  1908  0119                     	;# 
  1909  018C                     	;# 
  1910  018D                     	;# 
  1911  018E                     	;# 
  1912  0197                     	;# 
  1913  0199                     	;# 
  1914  0199                     	;# 
  1915  0199                     	;# 
  1916  019A                     	;# 
  1917  019A                     	;# 
  1918  019A                     	;# 
  1919  019B                     	;# 
  1920  019B                     	;# 
  1921  019B                     	;# 
  1922  019B                     	;# 
  1923  019B                     	;# 
  1924  019C                     	;# 
  1925  019C                     	;# 
  1926  019C                     	;# 
  1927  019D                     	;# 
  1928  019D                     	;# 
  1929  019D                     	;# 
  1930  019E                     	;# 
  1931  019E                     	;# 
  1932  019E                     	;# 
  1933  019F                     	;# 
  1934  019F                     	;# 
  1935  019F                     	;# 
  1936  019F                     	;# 
  1937  019F                     	;# 
  1938  020C                     	;# 
  1939  020D                     	;# 
  1940  020E                     	;# 
  1941  0211                     	;# 
  1942  0211                     	;# 
  1943  0212                     	;# 
  1944  0212                     	;# 
  1945  0213                     	;# 
  1946  0213                     	;# 
  1947  0214                     	;# 
  1948  0214                     	;# 
  1949  0215                     	;# 
  1950  0215                     	;# 
  1951  0215                     	;# 
  1952  0215                     	;# 
  1953  0216                     	;# 
  1954  0216                     	;# 
  1955  0217                     	;# 
  1956  0217                     	;# 
  1957  028C                     	;# 
  1958  028D                     	;# 
  1959  028E                     	;# 
  1960  0291                     	;# 
  1961  0291                     	;# 
  1962  0292                     	;# 
  1963  0293                     	;# 
  1964  0294                     	;# 
  1965  0295                     	;# 
  1966  0295                     	;# 
  1967  0296                     	;# 
  1968  0297                     	;# 
  1969  0298                     	;# 
  1970  029F                     	;# 
  1971  030C                     	;# 
  1972  030D                     	;# 
  1973  030E                     	;# 
  1974  0311                     	;# 
  1975  0311                     	;# 
  1976  0312                     	;# 
  1977  0313                     	;# 
  1978  0314                     	;# 
  1979  0315                     	;# 
  1980  0315                     	;# 
  1981  0316                     	;# 
  1982  0317                     	;# 
  1983  0318                     	;# 
  1984  038C                     	;# 
  1985  038D                     	;# 
  1986  038E                     	;# 
  1987  0391                     	;# 
  1988  0392                     	;# 
  1989  0393                     	;# 
  1990  0394                     	;# 
  1991  0395                     	;# 
  1992  0396                     	;# 
  1993  0397                     	;# 
  1994  0398                     	;# 
  1995  0399                     	;# 
  1996  039A                     	;# 
  1997  039C                     	;# 
  1998  039D                     	;# 
  1999  039E                     	;# 
  2000  039F                     	;# 
  2001  0411                     	;# 
  2002  0411                     	;# 
  2003  0412                     	;# 
  2004  0413                     	;# 
  2005  0414                     	;# 
  2006  0415                     	;# 
  2007  0416                     	;# 
  2008  0417                     	;# 
  2009  0418                     	;# 
  2010  0418                     	;# 
  2011  0419                     	;# 
  2012  041A                     	;# 
  2013  041B                     	;# 
  2014  041C                     	;# 
  2015  041D                     	;# 
  2016  041E                     	;# 
  2017  041F                     	;# 
  2018  0498                     	;# 
  2019  0498                     	;# 
  2020  0499                     	;# 
  2021  049A                     	;# 
  2022  049B                     	;# 
  2023  049B                     	;# 
  2024  049C                     	;# 
  2025  049D                     	;# 
  2026  049E                     	;# 
  2027  049F                     	;# 
  2028  0617                     	;# 
  2029  0618                     	;# 
  2030  0619                     	;# 
  2031  0619                     	;# 
  2032  061A                     	;# 
  2033  061B                     	;# 
  2034  061C                     	;# 
  2035  061C                     	;# 
  2036  061F                     	;# 
  2037  0691                     	;# 
  2038  0692                     	;# 
  2039  0693                     	;# 
  2040  0694                     	;# 
  2041  0695                     	;# 
  2042  0696                     	;# 
  2043  0697                     	;# 
  2044  0698                     	;# 
  2045  0699                     	;# 
  2046  0711                     	;# 
  2047  0712                     	;# 
  2048  0713                     	;# 
  2049  0714                     	;# 
  2050  0715                     	;# 
  2051  0716                     	;# 
  2052  0717                     	;# 
  2053  0718                     	;# 
  2054  0719                     	;# 
  2055  0891                     	;# 
  2056  0891                     	;# 
  2057  0891                     	;# 
  2058  0891                     	;# 
  2059  0891                     	;# 
  2060  0891                     	;# 
  2061  0892                     	;# 
  2062  0892                     	;# 
  2063  0892                     	;# 
  2064  0893                     	;# 
  2065  0893                     	;# 
  2066  0893                     	;# 
  2067  0893                     	;# 
  2068  0893                     	;# 
  2069  0893                     	;# 
  2070  0894                     	;# 
  2071  0894                     	;# 
  2072  0894                     	;# 
  2073  0895                     	;# 
  2074  0895                     	;# 
  2075  0895                     	;# 
  2076  0896                     	;# 
  2077  0896                     	;# 
  2078  0896                     	;# 
  2079  089B                     	;# 
  2080  0911                     	;# 
  2081  0912                     	;# 
  2082  0913                     	;# 
  2083  0914                     	;# 
  2084  0915                     	;# 
  2085  0916                     	;# 
  2086  0918                     	;# 
  2087  0919                     	;# 
  2088  091A                     	;# 
  2089  091B                     	;# 
  2090  091C                     	;# 
  2091  091D                     	;# 
  2092  091E                     	;# 
  2093  091F                     	;# 
  2094  0E0F                     	;# 
  2095  0E10                     	;# 
  2096  0E11                     	;# 
  2097  0E12                     	;# 
  2098  0E13                     	;# 
  2099  0E14                     	;# 
  2100  0E15                     	;# 
  2101  0E16                     	;# 
  2102  0E17                     	;# 
  2103  0E18                     	;# 
  2104  0E19                     	;# 
  2105  0E1A                     	;# 
  2106  0E1B                     	;# 
  2107  0E1C                     	;# 
  2108  0E20                     	;# 
  2109  0E21                     	;# 
  2110  0E22                     	;# 
  2111  0E24                     	;# 
  2112  0E25                     	;# 
  2113  0E28                     	;# 
  2114  0E29                     	;# 
  2115  0E2A                     	;# 
  2116  0E2B                     	;# 
  2117  0E2C                     	;# 
  2118  0E2D                     	;# 
  2119  0E2E                     	;# 
  2120  0E2F                     	;# 
  2121  0E90                     	;# 
  2122  0E91                     	;# 
  2123  0E92                     	;# 
  2124  0E94                     	;# 
  2125  0E95                     	;# 
  2126  0E9C                     	;# 
  2127  0E9D                     	;# 
  2128  0E9E                     	;# 
  2129  0E9F                     	;# 
  2130  0EA0                     	;# 
  2131  0EA1                     	;# 
  2132  0EA2                     	;# 
  2133  0EA3                     	;# 
  2134  0EA4                     	;# 
  2135  0EA5                     	;# 
  2136  0EA6                     	;# 
  2137  0EA7                     	;# 
  2138  0F0F                     	;# 
  2139  0F10                     	;# 
  2140  0F11                     	;# 
  2141  0F12                     	;# 
  2142  0F13                     	;# 
  2143  0F14                     	;# 
  2144  0F15                     	;# 
  2145  0F16                     	;# 
  2146  0F17                     	;# 
  2147  0F18                     	;# 
  2148  0F19                     	;# 
  2149  0F1A                     	;# 
  2150  0F1B                     	;# 
  2151  0F1C                     	;# 
  2152  0F1D                     	;# 
  2153  0F1E                     	;# 
  2154  0F1F                     	;# 
  2155  0F20                     	;# 
  2156  0F21                     	;# 
  2157  0F22                     	;# 
  2158  0F23                     	;# 
  2159  0F24                     	;# 
  2160  0F25                     	;# 
  2161  0F26                     	;# 
  2162  0F27                     	;# 
  2163  0F28                     	;# 
  2164  0F29                     	;# 
  2165  0F2A                     	;# 
  2166  0F2B                     	;# 
  2167  0F2C                     	;# 
  2168  0F2D                     	;# 
  2169  0F2E                     	;# 
  2170  0F2F                     	;# 
  2171  0F30                     	;# 
  2172  0F31                     	;# 
  2173  0F32                     	;# 
  2174  0F33                     	;# 
  2175  0F34                     	;# 
  2176  0F35                     	;# 
  2177  0F36                     	;# 
  2178  0F37                     	;# 
  2179  0FE4                     	;# 
  2180  0FE5                     	;# 
  2181  0FE6                     	;# 
  2182  0FE7                     	;# 
  2183  0FE8                     	;# 
  2184  0FE9                     	;# 
  2185  0FEA                     	;# 
  2186  0FEB                     	;# 
  2187  0FED                     	;# 
  2188  0FEE                     	;# 
  2189  0FEF                     	;# 
  2190  0000                     	;# 
  2191  0001                     	;# 
  2192  0002                     	;# 
  2193  0003                     	;# 
  2194  0004                     	;# 
  2195  0005                     	;# 
  2196  0006                     	;# 
  2197  0007                     	;# 
  2198  0008                     	;# 
  2199  0009                     	;# 
  2200  000A                     	;# 
  2201  000B                     	;# 
  2202  000C                     	;# 
  2203  000D                     	;# 
  2204  000E                     	;# 
  2205  0010                     	;# 
  2206  0011                     	;# 
  2207  0012                     	;# 
  2208  0013                     	;# 
  2209  0014                     	;# 
  2210  0015                     	;# 
  2211  0015                     	;# 
  2212  0016                     	;# 
  2213  0016                     	;# 
  2214  0017                     	;# 
  2215  0018                     	;# 
  2216  0019                     	;# 
  2217  0019                     	;# 
  2218  001A                     	;# 
  2219  001B                     	;# 
  2220  001C                     	;# 
  2221  001D                     	;# 
  2222  001E                     	;# 
  2223  001F                     	;# 
  2224  008C                     	;# 
  2225  008D                     	;# 
  2226  008E                     	;# 
  2227  0090                     	;# 
  2228  0091                     	;# 
  2229  0092                     	;# 
  2230  0093                     	;# 
  2231  0094                     	;# 
  2232  0097                     	;# 
  2233  009B                     	;# 
  2234  009B                     	;# 
  2235  009C                     	;# 
  2236  009D                     	;# 
  2237  009E                     	;# 
  2238  009F                     	;# 
  2239  010C                     	;# 
  2240  010D                     	;# 
  2241  010E                     	;# 
  2242  0111                     	;# 
  2243  0112                     	;# 
  2244  0113                     	;# 
  2245  0114                     	;# 
  2246  0115                     	;# 
  2247  0116                     	;# 
  2248  0117                     	;# 
  2249  0118                     	;# 
  2250  0119                     	;# 
  2251  018C                     	;# 
  2252  018D                     	;# 
  2253  018E                     	;# 
  2254  0197                     	;# 
  2255  0199                     	;# 
  2256  0199                     	;# 
  2257  0199                     	;# 
  2258  019A                     	;# 
  2259  019A                     	;# 
  2260  019A                     	;# 
  2261  019B                     	;# 
  2262  019B                     	;# 
  2263  019B                     	;# 
  2264  019B                     	;# 
  2265  019B                     	;# 
  2266  019C                     	;# 
  2267  019C                     	;# 
  2268  019C                     	;# 
  2269  019D                     	;# 
  2270  019D                     	;# 
  2271  019D                     	;# 
  2272  019E                     	;# 
  2273  019E                     	;# 
  2274  019E                     	;# 
  2275  019F                     	;# 
  2276  019F                     	;# 
  2277  019F                     	;# 
  2278  019F                     	;# 
  2279  019F                     	;# 
  2280  020C                     	;# 
  2281  020D                     	;# 
  2282  020E                     	;# 
  2283  0211                     	;# 
  2284  0211                     	;# 
  2285  0212                     	;# 
  2286  0212                     	;# 
  2287  0213                     	;# 
  2288  0213                     	;# 
  2289  0214                     	;# 
  2290  0214                     	;# 
  2291  0215                     	;# 
  2292  0215                     	;# 
  2293  0215                     	;# 
  2294  0215                     	;# 
  2295  0216                     	;# 
  2296  0216                     	;# 
  2297  0217                     	;# 
  2298  0217                     	;# 
  2299  028C                     	;# 
  2300  028D                     	;# 
  2301  028E                     	;# 
  2302  0291                     	;# 
  2303  0291                     	;# 
  2304  0292                     	;# 
  2305  0293                     	;# 
  2306  0294                     	;# 
  2307  0295                     	;# 
  2308  0295                     	;# 
  2309  0296                     	;# 
  2310  0297                     	;# 
  2311  0298                     	;# 
  2312  029F                     	;# 
  2313  030C                     	;# 
  2314  030D                     	;# 
  2315  030E                     	;# 
  2316  0311                     	;# 
  2317  0311                     	;# 
  2318  0312                     	;# 
  2319  0313                     	;# 
  2320  0314                     	;# 
  2321  0315                     	;# 
  2322  0315                     	;# 
  2323  0316                     	;# 
  2324  0317                     	;# 
  2325  0318                     	;# 
  2326  038C                     	;# 
  2327  038D                     	;# 
  2328  038E                     	;# 
  2329  0391                     	;# 
  2330  0392                     	;# 
  2331  0393                     	;# 
  2332  0394                     	;# 
  2333  0395                     	;# 
  2334  0396                     	;# 
  2335  0397                     	;# 
  2336  0398                     	;# 
  2337  0399                     	;# 
  2338  039A                     	;# 
  2339  039C                     	;# 
  2340  039D                     	;# 
  2341  039E                     	;# 
  2342  039F                     	;# 
  2343  0411                     	;# 
  2344  0411                     	;# 
  2345  0412                     	;# 
  2346  0413                     	;# 
  2347  0414                     	;# 
  2348  0415                     	;# 
  2349  0416                     	;# 
  2350  0417                     	;# 
  2351  0418                     	;# 
  2352  0418                     	;# 
  2353  0419                     	;# 
  2354  041A                     	;# 
  2355  041B                     	;# 
  2356  041C                     	;# 
  2357  041D                     	;# 
  2358  041E                     	;# 
  2359  041F                     	;# 
  2360  0498                     	;# 
  2361  0498                     	;# 
  2362  0499                     	;# 
  2363  049A                     	;# 
  2364  049B                     	;# 
  2365  049B                     	;# 
  2366  049C                     	;# 
  2367  049D                     	;# 
  2368  049E                     	;# 
  2369  049F                     	;# 
  2370  0617                     	;# 
  2371  0618                     	;# 
  2372  0619                     	;# 
  2373  0619                     	;# 
  2374  061A                     	;# 
  2375  061B                     	;# 
  2376  061C                     	;# 
  2377  061C                     	;# 
  2378  061F                     	;# 
  2379  0691                     	;# 
  2380  0692                     	;# 
  2381  0693                     	;# 
  2382  0694                     	;# 
  2383  0695                     	;# 
  2384  0696                     	;# 
  2385  0697                     	;# 
  2386  0698                     	;# 
  2387  0699                     	;# 
  2388  0711                     	;# 
  2389  0712                     	;# 
  2390  0713                     	;# 
  2391  0714                     	;# 
  2392  0715                     	;# 
  2393  0716                     	;# 
  2394  0717                     	;# 
  2395  0718                     	;# 
  2396  0719                     	;# 
  2397  0891                     	;# 
  2398  0891                     	;# 
  2399  0891                     	;# 
  2400  0891                     	;# 
  2401  0891                     	;# 
  2402  0891                     	;# 
  2403  0892                     	;# 
  2404  0892                     	;# 
  2405  0892                     	;# 
  2406  0893                     	;# 
  2407  0893                     	;# 
  2408  0893                     	;# 
  2409  0893                     	;# 
  2410  0893                     	;# 
  2411  0893                     	;# 
  2412  0894                     	;# 
  2413  0894                     	;# 
  2414  0894                     	;# 
  2415  0895                     	;# 
  2416  0895                     	;# 
  2417  0895                     	;# 
  2418  0896                     	;# 
  2419  0896                     	;# 
  2420  0896                     	;# 
  2421  089B                     	;# 
  2422  0911                     	;# 
  2423  0912                     	;# 
  2424  0913                     	;# 
  2425  0914                     	;# 
  2426  0915                     	;# 
  2427  0916                     	;# 
  2428  0918                     	;# 
  2429  0919                     	;# 
  2430  091A                     	;# 
  2431  091B                     	;# 
  2432  091C                     	;# 
  2433  091D                     	;# 
  2434  091E                     	;# 
  2435  091F                     	;# 
  2436  0E0F                     	;# 
  2437  0E10                     	;# 
  2438  0E11                     	;# 
  2439  0E12                     	;# 
  2440  0E13                     	;# 
  2441  0E14                     	;# 
  2442  0E15                     	;# 
  2443  0E16                     	;# 
  2444  0E17                     	;# 
  2445  0E18                     	;# 
  2446  0E19                     	;# 
  2447  0E1A                     	;# 
  2448  0E1B                     	;# 
  2449  0E1C                     	;# 
  2450  0E20                     	;# 
  2451  0E21                     	;# 
  2452  0E22                     	;# 
  2453  0E24                     	;# 
  2454  0E25                     	;# 
  2455  0E28                     	;# 
  2456  0E29                     	;# 
  2457  0E2A                     	;# 
  2458  0E2B                     	;# 
  2459  0E2C                     	;# 
  2460  0E2D                     	;# 
  2461  0E2E                     	;# 
  2462  0E2F                     	;# 
  2463  0E90                     	;# 
  2464  0E91                     	;# 
  2465  0E92                     	;# 
  2466  0E94                     	;# 
  2467  0E95                     	;# 
  2468  0E9C                     	;# 
  2469  0E9D                     	;# 
  2470  0E9E                     	;# 
  2471  0E9F                     	;# 
  2472  0EA0                     	;# 
  2473  0EA1                     	;# 
  2474  0EA2                     	;# 
  2475  0EA3                     	;# 
  2476  0EA4                     	;# 
  2477  0EA5                     	;# 
  2478  0EA6                     	;# 
  2479  0EA7                     	;# 
  2480  0F0F                     	;# 
  2481  0F10                     	;# 
  2482  0F11                     	;# 
  2483  0F12                     	;# 
  2484  0F13                     	;# 
  2485  0F14                     	;# 
  2486  0F15                     	;# 
  2487  0F16                     	;# 
  2488  0F17                     	;# 
  2489  0F18                     	;# 
  2490  0F19                     	;# 
  2491  0F1A                     	;# 
  2492  0F1B                     	;# 
  2493  0F1C                     	;# 
  2494  0F1D                     	;# 
  2495  0F1E                     	;# 
  2496  0F1F                     	;# 
  2497  0F20                     	;# 
  2498  0F21                     	;# 
  2499  0F22                     	;# 
  2500  0F23                     	;# 
  2501  0F24                     	;# 
  2502  0F25                     	;# 
  2503  0F26                     	;# 
  2504  0F27                     	;# 
  2505  0F28                     	;# 
  2506  0F29                     	;# 
  2507  0F2A                     	;# 
  2508  0F2B                     	;# 
  2509  0F2C                     	;# 
  2510  0F2D                     	;# 
  2511  0F2E                     	;# 
  2512  0F2F                     	;# 
  2513  0F30                     	;# 
  2514  0F31                     	;# 
  2515  0F32                     	;# 
  2516  0F33                     	;# 
  2517  0F34                     	;# 
  2518  0F35                     	;# 
  2519  0F36                     	;# 
  2520  0F37                     	;# 
  2521  0FE4                     	;# 
  2522  0FE5                     	;# 
  2523  0FE6                     	;# 
  2524  0FE7                     	;# 
  2525  0FE8                     	;# 
  2526  0FE9                     	;# 
  2527  0FEA                     	;# 
  2528  0FEB                     	;# 
  2529  0FED                     	;# 
  2530  0FEE                     	;# 
  2531  0FEF                     	;# 
  2532  0000                     	;# 
  2533  0001                     	;# 
  2534  0002                     	;# 
  2535  0003                     	;# 
  2536  0004                     	;# 
  2537  0005                     	;# 
  2538  0006                     	;# 
  2539  0007                     	;# 
  2540  0008                     	;# 
  2541  0009                     	;# 
  2542  000A                     	;# 
  2543  000B                     	;# 
  2544  000C                     	;# 
  2545  000D                     	;# 
  2546  000E                     	;# 
  2547  0010                     	;# 
  2548  0011                     	;# 
  2549  0012                     	;# 
  2550  0013                     	;# 
  2551  0014                     	;# 
  2552  0015                     	;# 
  2553  0015                     	;# 
  2554  0016                     	;# 
  2555  0016                     	;# 
  2556  0017                     	;# 
  2557  0018                     	;# 
  2558  0019                     	;# 
  2559  0019                     	;# 
  2560  001A                     	;# 
  2561  001B                     	;# 
  2562  001C                     	;# 
  2563  001D                     	;# 
  2564  001E                     	;# 
  2565  001F                     	;# 
  2566  008C                     	;# 
  2567  008D                     	;# 
  2568  008E                     	;# 
  2569  0090                     	;# 
  2570  0091                     	;# 
  2571  0092                     	;# 
  2572  0093                     	;# 
  2573  0094                     	;# 
  2574  0097                     	;# 
  2575  009B                     	;# 
  2576  009B                     	;# 
  2577  009C                     	;# 
  2578  009D                     	;# 
  2579  009E                     	;# 
  2580  009F                     	;# 
  2581  010C                     	;# 
  2582  010D                     	;# 
  2583  010E                     	;# 
  2584  0111                     	;# 
  2585  0112                     	;# 
  2586  0113                     	;# 
  2587  0114                     	;# 
  2588  0115                     	;# 
  2589  0116                     	;# 
  2590  0117                     	;# 
  2591  0118                     	;# 
  2592  0119                     	;# 
  2593  018C                     	;# 
  2594  018D                     	;# 
  2595  018E                     	;# 
  2596  0197                     	;# 
  2597  0199                     	;# 
  2598  0199                     	;# 
  2599  0199                     	;# 
  2600  019A                     	;# 
  2601  019A                     	;# 
  2602  019A                     	;# 
  2603  019B                     	;# 
  2604  019B                     	;# 
  2605  019B                     	;# 
  2606  019B                     	;# 
  2607  019B                     	;# 
  2608  019C                     	;# 
  2609  019C                     	;# 
  2610  019C                     	;# 
  2611  019D                     	;# 
  2612  019D                     	;# 
  2613  019D                     	;# 
  2614  019E                     	;# 
  2615  019E                     	;# 
  2616  019E                     	;# 
  2617  019F                     	;# 
  2618  019F                     	;# 
  2619  019F                     	;# 
  2620  019F                     	;# 
  2621  019F                     	;# 
  2622  020C                     	;# 
  2623  020D                     	;# 
  2624  020E                     	;# 
  2625  0211                     	;# 
  2626  0211                     	;# 
  2627  0212                     	;# 
  2628  0212                     	;# 
  2629  0213                     	;# 
  2630  0213                     	;# 
  2631  0214                     	;# 
  2632  0214                     	;# 
  2633  0215                     	;# 
  2634  0215                     	;# 
  2635  0215                     	;# 
  2636  0215                     	;# 
  2637  0216                     	;# 
  2638  0216                     	;# 
  2639  0217                     	;# 
  2640  0217                     	;# 
  2641  028C                     	;# 
  2642  028D                     	;# 
  2643  028E                     	;# 
  2644  0291                     	;# 
  2645  0291                     	;# 
  2646  0292                     	;# 
  2647  0293                     	;# 
  2648  0294                     	;# 
  2649  0295                     	;# 
  2650  0295                     	;# 
  2651  0296                     	;# 
  2652  0297                     	;# 
  2653  0298                     	;# 
  2654  029F                     	;# 
  2655  030C                     	;# 
  2656  030D                     	;# 
  2657  030E                     	;# 
  2658  0311                     	;# 
  2659  0311                     	;# 
  2660  0312                     	;# 
  2661  0313                     	;# 
  2662  0314                     	;# 
  2663  0315                     	;# 
  2664  0315                     	;# 
  2665  0316                     	;# 
  2666  0317                     	;# 
  2667  0318                     	;# 
  2668  038C                     	;# 
  2669  038D                     	;# 
  2670  038E                     	;# 
  2671  0391                     	;# 
  2672  0392                     	;# 
  2673  0393                     	;# 
  2674  0394                     	;# 
  2675  0395                     	;# 
  2676  0396                     	;# 
  2677  0397                     	;# 
  2678  0398                     	;# 
  2679  0399                     	;# 
  2680  039A                     	;# 
  2681  039C                     	;# 
  2682  039D                     	;# 
  2683  039E                     	;# 
  2684  039F                     	;# 
  2685  0411                     	;# 
  2686  0411                     	;# 
  2687  0412                     	;# 
  2688  0413                     	;# 
  2689  0414                     	;# 
  2690  0415                     	;# 
  2691  0416                     	;# 
  2692  0417                     	;# 
  2693  0418                     	;# 
  2694  0418                     	;# 
  2695  0419                     	;# 
  2696  041A                     	;# 
  2697  041B                     	;# 
  2698  041C                     	;# 
  2699  041D                     	;# 
  2700  041E                     	;# 
  2701  041F                     	;# 
  2702  0498                     	;# 
  2703  0498                     	;# 
  2704  0499                     	;# 
  2705  049A                     	;# 
  2706  049B                     	;# 
  2707  049B                     	;# 
  2708  049C                     	;# 
  2709  049D                     	;# 
  2710  049E                     	;# 
  2711  049F                     	;# 
  2712  0617                     	;# 
  2713  0618                     	;# 
  2714  0619                     	;# 
  2715  0619                     	;# 
  2716  061A                     	;# 
  2717  061B                     	;# 
  2718  061C                     	;# 
  2719  061C                     	;# 
  2720  061F                     	;# 
  2721  0691                     	;# 
  2722  0692                     	;# 
  2723  0693                     	;# 
  2724  0694                     	;# 
  2725  0695                     	;# 
  2726  0696                     	;# 
  2727  0697                     	;# 
  2728  0698                     	;# 
  2729  0699                     	;# 
  2730  0711                     	;# 
  2731  0712                     	;# 
  2732  0713                     	;# 
  2733  0714                     	;# 
  2734  0715                     	;# 
  2735  0716                     	;# 
  2736  0717                     	;# 
  2737  0718                     	;# 
  2738  0719                     	;# 
  2739  0891                     	;# 
  2740  0891                     	;# 
  2741  0891                     	;# 
  2742  0891                     	;# 
  2743  0891                     	;# 
  2744  0891                     	;# 
  2745  0892                     	;# 
  2746  0892                     	;# 
  2747  0892                     	;# 
  2748  0893                     	;# 
  2749  0893                     	;# 
  2750  0893                     	;# 
  2751  0893                     	;# 
  2752  0893                     	;# 
  2753  0893                     	;# 
  2754  0894                     	;# 
  2755  0894                     	;# 
  2756  0894                     	;# 
  2757  0895                     	;# 
  2758  0895                     	;# 
  2759  0895                     	;# 
  2760  0896                     	;# 
  2761  0896                     	;# 
  2762  0896                     	;# 
  2763  089B                     	;# 
  2764  0911                     	;# 
  2765  0912                     	;# 
  2766  0913                     	;# 
  2767  0914                     	;# 
  2768  0915                     	;# 
  2769  0916                     	;# 
  2770  0918                     	;# 
  2771  0919                     	;# 
  2772  091A                     	;# 
  2773  091B                     	;# 
  2774  091C                     	;# 
  2775  091D                     	;# 
  2776  091E                     	;# 
  2777  091F                     	;# 
  2778  0E0F                     	;# 
  2779  0E10                     	;# 
  2780  0E11                     	;# 
  2781  0E12                     	;# 
  2782  0E13                     	;# 
  2783  0E14                     	;# 
  2784  0E15                     	;# 
  2785  0E16                     	;# 
  2786  0E17                     	;# 
  2787  0E18                     	;# 
  2788  0E19                     	;# 
  2789  0E1A                     	;# 
  2790  0E1B                     	;# 
  2791  0E1C                     	;# 
  2792  0E20                     	;# 
  2793  0E21                     	;# 
  2794  0E22                     	;# 
  2795  0E24                     	;# 
  2796  0E25                     	;# 
  2797  0E28                     	;# 
  2798  0E29                     	;# 
  2799  0E2A                     	;# 
  2800  0E2B                     	;# 
  2801  0E2C                     	;# 
  2802  0E2D                     	;# 
  2803  0E2E                     	;# 
  2804  0E2F                     	;# 
  2805  0E90                     	;# 
  2806  0E91                     	;# 
  2807  0E92                     	;# 
  2808  0E94                     	;# 
  2809  0E95                     	;# 
  2810  0E9C                     	;# 
  2811  0E9D                     	;# 
  2812  0E9E                     	;# 
  2813  0E9F                     	;# 
  2814  0EA0                     	;# 
  2815  0EA1                     	;# 
  2816  0EA2                     	;# 
  2817  0EA3                     	;# 
  2818  0EA4                     	;# 
  2819  0EA5                     	;# 
  2820  0EA6                     	;# 
  2821  0EA7                     	;# 
  2822  0F0F                     	;# 
  2823  0F10                     	;# 
  2824  0F11                     	;# 
  2825  0F12                     	;# 
  2826  0F13                     	;# 
  2827  0F14                     	;# 
  2828  0F15                     	;# 
  2829  0F16                     	;# 
  2830  0F17                     	;# 
  2831  0F18                     	;# 
  2832  0F19                     	;# 
  2833  0F1A                     	;# 
  2834  0F1B                     	;# 
  2835  0F1C                     	;# 
  2836  0F1D                     	;# 
  2837  0F1E                     	;# 
  2838  0F1F                     	;# 
  2839  0F20                     	;# 
  2840  0F21                     	;# 
  2841  0F22                     	;# 
  2842  0F23                     	;# 
  2843  0F24                     	;# 
  2844  0F25                     	;# 
  2845  0F26                     	;# 
  2846  0F27                     	;# 
  2847  0F28                     	;# 
  2848  0F29                     	;# 
  2849  0F2A                     	;# 
  2850  0F2B                     	;# 
  2851  0F2C                     	;# 
  2852  0F2D                     	;# 
  2853  0F2E                     	;# 
  2854  0F2F                     	;# 
  2855  0F30                     	;# 
  2856  0F31                     	;# 
  2857  0F32                     	;# 
  2858  0F33                     	;# 
  2859  0F34                     	;# 
  2860  0F35                     	;# 
  2861  0F36                     	;# 
  2862  0F37                     	;# 
  2863  0FE4                     	;# 
  2864  0FE5                     	;# 
  2865  0FE6                     	;# 
  2866  0FE7                     	;# 
  2867  0FE8                     	;# 
  2868  0FE9                     	;# 
  2869  0FEA                     	;# 
  2870  0FEB                     	;# 
  2871  0FED                     	;# 
  2872  0FEE                     	;# 
  2873  0FEF                     	;# 
  2874  0000                     	;# 
  2875  0001                     	;# 
  2876  0002                     	;# 
  2877  0003                     	;# 
  2878  0004                     	;# 
  2879  0005                     	;# 
  2880  0006                     	;# 
  2881  0007                     	;# 
  2882  0008                     	;# 
  2883  0009                     	;# 
  2884  000A                     	;# 
  2885  000B                     	;# 
  2886  000C                     	;# 
  2887  000D                     	;# 
  2888  000E                     	;# 
  2889  0010                     	;# 
  2890  0011                     	;# 
  2891  0012                     	;# 
  2892  0013                     	;# 
  2893  0014                     	;# 
  2894  0015                     	;# 
  2895  0015                     	;# 
  2896  0016                     	;# 
  2897  0016                     	;# 
  2898  0017                     	;# 
  2899  0018                     	;# 
  2900  0019                     	;# 
  2901  0019                     	;# 
  2902  001A                     	;# 
  2903  001B                     	;# 
  2904  001C                     	;# 
  2905  001D                     	;# 
  2906  001E                     	;# 
  2907  001F                     	;# 
  2908  008C                     	;# 
  2909  008D                     	;# 
  2910  008E                     	;# 
  2911  0090                     	;# 
  2912  0091                     	;# 
  2913  0092                     	;# 
  2914  0093                     	;# 
  2915  0094                     	;# 
  2916  0097                     	;# 
  2917  009B                     	;# 
  2918  009B                     	;# 
  2919  009C                     	;# 
  2920  009D                     	;# 
  2921  009E                     	;# 
  2922  009F                     	;# 
  2923  010C                     	;# 
  2924  010D                     	;# 
  2925  010E                     	;# 
  2926  0111                     	;# 
  2927  0112                     	;# 
  2928  0113                     	;# 
  2929  0114                     	;# 
  2930  0115                     	;# 
  2931  0116                     	;# 
  2932  0117                     	;# 
  2933  0118                     	;# 
  2934  0119                     	;# 
  2935  018C                     	;# 
  2936  018D                     	;# 
  2937  018E                     	;# 
  2938  0197                     	;# 
  2939  0199                     	;# 
  2940  0199                     	;# 
  2941  0199                     	;# 
  2942  019A                     	;# 
  2943  019A                     	;# 
  2944  019A                     	;# 
  2945  019B                     	;# 
  2946  019B                     	;# 
  2947  019B                     	;# 
  2948  019B                     	;# 
  2949  019B                     	;# 
  2950  019C                     	;# 
  2951  019C                     	;# 
  2952  019C                     	;# 
  2953  019D                     	;# 
  2954  019D                     	;# 
  2955  019D                     	;# 
  2956  019E                     	;# 
  2957  019E                     	;# 
  2958  019E                     	;# 
  2959  019F                     	;# 
  2960  019F                     	;# 
  2961  019F                     	;# 
  2962  019F                     	;# 
  2963  019F                     	;# 
  2964  020C                     	;# 
  2965  020D                     	;# 
  2966  020E                     	;# 
  2967  0211                     	;# 
  2968  0211                     	;# 
  2969  0212                     	;# 
  2970  0212                     	;# 
  2971  0213                     	;# 
  2972  0213                     	;# 
  2973  0214                     	;# 
  2974  0214                     	;# 
  2975  0215                     	;# 
  2976  0215                     	;# 
  2977  0215                     	;# 
  2978  0215                     	;# 
  2979  0216                     	;# 
  2980  0216                     	;# 
  2981  0217                     	;# 
  2982  0217                     	;# 
  2983  028C                     	;# 
  2984  028D                     	;# 
  2985  028E                     	;# 
  2986  0291                     	;# 
  2987  0291                     	;# 
  2988  0292                     	;# 
  2989  0293                     	;# 
  2990  0294                     	;# 
  2991  0295                     	;# 
  2992  0295                     	;# 
  2993  0296                     	;# 
  2994  0297                     	;# 
  2995  0298                     	;# 
  2996  029F                     	;# 
  2997  030C                     	;# 
  2998  030D                     	;# 
  2999  030E                     	;# 
  3000  0311                     	;# 
  3001  0311                     	;# 
  3002  0312                     	;# 
  3003  0313                     	;# 
  3004  0314                     	;# 
  3005  0315                     	;# 
  3006  0315                     	;# 
  3007  0316                     	;# 
  3008  0317                     	;# 
  3009  0318                     	;# 
  3010  038C                     	;# 
  3011  038D                     	;# 
  3012  038E                     	;# 
  3013  0391                     	;# 
  3014  0392                     	;# 
  3015  0393                     	;# 
  3016  0394                     	;# 
  3017  0395                     	;# 
  3018  0396                     	;# 
  3019  0397                     	;# 
  3020  0398                     	;# 
  3021  0399                     	;# 
  3022  039A                     	;# 
  3023  039C                     	;# 
  3024  039D                     	;# 
  3025  039E                     	;# 
  3026  039F                     	;# 
  3027  0411                     	;# 
  3028  0411                     	;# 
  3029  0412                     	;# 
  3030  0413                     	;# 
  3031  0414                     	;# 
  3032  0415                     	;# 
  3033  0416                     	;# 
  3034  0417                     	;# 
  3035  0418                     	;# 
  3036  0418                     	;# 
  3037  0419                     	;# 
  3038  041A                     	;# 
  3039  041B                     	;# 
  3040  041C                     	;# 
  3041  041D                     	;# 
  3042  041E                     	;# 
  3043  041F                     	;# 
  3044  0498                     	;# 
  3045  0498                     	;# 
  3046  0499                     	;# 
  3047  049A                     	;# 
  3048  049B                     	;# 
  3049  049B                     	;# 
  3050  049C                     	;# 
  3051  049D                     	;# 
  3052  049E                     	;# 
  3053  049F                     	;# 
  3054  0617                     	;# 
  3055  0618                     	;# 
  3056  0619                     	;# 
  3057  0619                     	;# 
  3058  061A                     	;# 
  3059  061B                     	;# 
  3060  061C                     	;# 
  3061  061C                     	;# 
  3062  061F                     	;# 
  3063  0691                     	;# 
  3064  0692                     	;# 
  3065  0693                     	;# 
  3066  0694                     	;# 
  3067  0695                     	;# 
  3068  0696                     	;# 
  3069  0697                     	;# 
  3070  0698                     	;# 
  3071  0699                     	;# 
  3072  0711                     	;# 
  3073  0712                     	;# 
  3074  0713                     	;# 
  3075  0714                     	;# 
  3076  0715                     	;# 
  3077  0716                     	;# 
  3078  0717                     	;# 
  3079  0718                     	;# 
  3080  0719                     	;# 
  3081  0891                     	;# 
  3082  0891                     	;# 
  3083  0891                     	;# 
  3084  0891                     	;# 
  3085  0891                     	;# 
  3086  0891                     	;# 
  3087  0892                     	;# 
  3088  0892                     	;# 
  3089  0892                     	;# 
  3090  0893                     	;# 
  3091  0893                     	;# 
  3092  0893                     	;# 
  3093  0893                     	;# 
  3094  0893                     	;# 
  3095  0893                     	;# 
  3096  0894                     	;# 
  3097  0894                     	;# 
  3098  0894                     	;# 
  3099  0895                     	;# 
  3100  0895                     	;# 
  3101  0895                     	;# 
  3102  0896                     	;# 
  3103  0896                     	;# 
  3104  0896                     	;# 
  3105  089B                     	;# 
  3106  0911                     	;# 
  3107  0912                     	;# 
  3108  0913                     	;# 
  3109  0914                     	;# 
  3110  0915                     	;# 
  3111  0916                     	;# 
  3112  0918                     	;# 
  3113  0919                     	;# 
  3114  091A                     	;# 
  3115  091B                     	;# 
  3116  091C                     	;# 
  3117  091D                     	;# 
  3118  091E                     	;# 
  3119  091F                     	;# 
  3120  0E0F                     	;# 
  3121  0E10                     	;# 
  3122  0E11                     	;# 
  3123  0E12                     	;# 
  3124  0E13                     	;# 
  3125  0E14                     	;# 
  3126  0E15                     	;# 
  3127  0E16                     	;# 
  3128  0E17                     	;# 
  3129  0E18                     	;# 
  3130  0E19                     	;# 
  3131  0E1A                     	;# 
  3132  0E1B                     	;# 
  3133  0E1C                     	;# 
  3134  0E20                     	;# 
  3135  0E21                     	;# 
  3136  0E22                     	;# 
  3137  0E24                     	;# 
  3138  0E25                     	;# 
  3139  0E28                     	;# 
  3140  0E29                     	;# 
  3141  0E2A                     	;# 
  3142  0E2B                     	;# 
  3143  0E2C                     	;# 
  3144  0E2D                     	;# 
  3145  0E2E                     	;# 
  3146  0E2F                     	;# 
  3147  0E90                     	;# 
  3148  0E91                     	;# 
  3149  0E92                     	;# 
  3150  0E94                     	;# 
  3151  0E95                     	;# 
  3152  0E9C                     	;# 
  3153  0E9D                     	;# 
  3154  0E9E                     	;# 
  3155  0E9F                     	;# 
  3156  0EA0                     	;# 
  3157  0EA1                     	;# 
  3158  0EA2                     	;# 
  3159  0EA3                     	;# 
  3160  0EA4                     	;# 
  3161  0EA5                     	;# 
  3162  0EA6                     	;# 
  3163  0EA7                     	;# 
  3164  0F0F                     	;# 
  3165  0F10                     	;# 
  3166  0F11                     	;# 
  3167  0F12                     	;# 
  3168  0F13                     	;# 
  3169  0F14                     	;# 
  3170  0F15                     	;# 
  3171  0F16                     	;# 
  3172  0F17                     	;# 
  3173  0F18                     	;# 
  3174  0F19                     	;# 
  3175  0F1A                     	;# 
  3176  0F1B                     	;# 
  3177  0F1C                     	;# 
  3178  0F1D                     	;# 
  3179  0F1E                     	;# 
  3180  0F1F                     	;# 
  3181  0F20                     	;# 
  3182  0F21                     	;# 
  3183  0F22                     	;# 
  3184  0F23                     	;# 
  3185  0F24                     	;# 
  3186  0F25                     	;# 
  3187  0F26                     	;# 
  3188  0F27                     	;# 
  3189  0F28                     	;# 
  3190  0F29                     	;# 
  3191  0F2A                     	;# 
  3192  0F2B                     	;# 
  3193  0F2C                     	;# 
  3194  0F2D                     	;# 
  3195  0F2E                     	;# 
  3196  0F2F                     	;# 
  3197  0F30                     	;# 
  3198  0F31                     	;# 
  3199  0F32                     	;# 
  3200  0F33                     	;# 
  3201  0F34                     	;# 
  3202  0F35                     	;# 
  3203  0F36                     	;# 
  3204  0F37                     	;# 
  3205  0FE4                     	;# 
  3206  0FE5                     	;# 
  3207  0FE6                     	;# 
  3208  0FE7                     	;# 
  3209  0FE8                     	;# 
  3210  0FE9                     	;# 
  3211  0FEA                     	;# 
  3212  0FEB                     	;# 
  3213  0FED                     	;# 
  3214  0FEE                     	;# 
  3215  0FEF                     	;# 
  3216  0000                     	;# 
  3217  0001                     	;# 
  3218  0002                     	;# 
  3219  0003                     	;# 
  3220  0004                     	;# 
  3221  0005                     	;# 
  3222  0006                     	;# 
  3223  0007                     	;# 
  3224  0008                     	;# 
  3225  0009                     	;# 
  3226  000A                     	;# 
  3227  000B                     	;# 
  3228  000C                     	;# 
  3229  000D                     	;# 
  3230  000E                     	;# 
  3231  0010                     	;# 
  3232  0011                     	;# 
  3233  0012                     	;# 
  3234  0013                     	;# 
  3235  0014                     	;# 
  3236  0015                     	;# 
  3237  0015                     	;# 
  3238  0016                     	;# 
  3239  0016                     	;# 
  3240  0017                     	;# 
  3241  0018                     	;# 
  3242  0019                     	;# 
  3243  0019                     	;# 
  3244  001A                     	;# 
  3245  001B                     	;# 
  3246  001C                     	;# 
  3247  001D                     	;# 
  3248  001E                     	;# 
  3249  001F                     	;# 
  3250  008C                     	;# 
  3251  008D                     	;# 
  3252  008E                     	;# 
  3253  0090                     	;# 
  3254  0091                     	;# 
  3255  0092                     	;# 
  3256  0093                     	;# 
  3257  0094                     	;# 
  3258  0097                     	;# 
  3259  009B                     	;# 
  3260  009B                     	;# 
  3261  009C                     	;# 
  3262  009D                     	;# 
  3263  009E                     	;# 
  3264  009F                     	;# 
  3265  010C                     	;# 
  3266  010D                     	;# 
  3267  010E                     	;# 
  3268  0111                     	;# 
  3269  0112                     	;# 
  3270  0113                     	;# 
  3271  0114                     	;# 
  3272  0115                     	;# 
  3273  0116                     	;# 
  3274  0117                     	;# 
  3275  0118                     	;# 
  3276  0119                     	;# 
  3277  018C                     	;# 
  3278  018D                     	;# 
  3279  018E                     	;# 
  3280  0197                     	;# 
  3281  0199                     	;# 
  3282  0199                     	;# 
  3283  0199                     	;# 
  3284  019A                     	;# 
  3285  019A                     	;# 
  3286  019A                     	;# 
  3287  019B                     	;# 
  3288  019B                     	;# 
  3289  019B                     	;# 
  3290  019B                     	;# 
  3291  019B                     	;# 
  3292  019C                     	;# 
  3293  019C                     	;# 
  3294  019C                     	;# 
  3295  019D                     	;# 
  3296  019D                     	;# 
  3297  019D                     	;# 
  3298  019E                     	;# 
  3299  019E                     	;# 
  3300  019E                     	;# 
  3301  019F                     	;# 
  3302  019F                     	;# 
  3303  019F                     	;# 
  3304  019F                     	;# 
  3305  019F                     	;# 
  3306  020C                     	;# 
  3307  020D                     	;# 
  3308  020E                     	;# 
  3309  0211                     	;# 
  3310  0211                     	;# 
  3311  0212                     	;# 
  3312  0212                     	;# 
  3313  0213                     	;# 
  3314  0213                     	;# 
  3315  0214                     	;# 
  3316  0214                     	;# 
  3317  0215                     	;# 
  3318  0215                     	;# 
  3319  0215                     	;# 
  3320  0215                     	;# 
  3321  0216                     	;# 
  3322  0216                     	;# 
  3323  0217                     	;# 
  3324  0217                     	;# 
  3325  028C                     	;# 
  3326  028D                     	;# 
  3327  028E                     	;# 
  3328  0291                     	;# 
  3329  0291                     	;# 
  3330  0292                     	;# 
  3331  0293                     	;# 
  3332  0294                     	;# 
  3333  0295                     	;# 
  3334  0295                     	;# 
  3335  0296                     	;# 
  3336  0297                     	;# 
  3337  0298                     	;# 
  3338  029F                     	;# 
  3339  030C                     	;# 
  3340  030D                     	;# 
  3341  030E                     	;# 
  3342  0311                     	;# 
  3343  0311                     	;# 
  3344  0312                     	;# 
  3345  0313                     	;# 
  3346  0314                     	;# 
  3347  0315                     	;# 
  3348  0315                     	;# 
  3349  0316                     	;# 
  3350  0317                     	;# 
  3351  0318                     	;# 
  3352  038C                     	;# 
  3353  038D                     	;# 
  3354  038E                     	;# 
  3355  0391                     	;# 
  3356  0392                     	;# 
  3357  0393                     	;# 
  3358  0394                     	;# 
  3359  0395                     	;# 
  3360  0396                     	;# 
  3361  0397                     	;# 
  3362  0398                     	;# 
  3363  0399                     	;# 
  3364  039A                     	;# 
  3365  039C                     	;# 
  3366  039D                     	;# 
  3367  039E                     	;# 
  3368  039F                     	;# 
  3369  0411                     	;# 
  3370  0411                     	;# 
  3371  0412                     	;# 
  3372  0413                     	;# 
  3373  0414                     	;# 
  3374  0415                     	;# 
  3375  0416                     	;# 
  3376  0417                     	;# 
  3377  0418                     	;# 
  3378  0418                     	;# 
  3379  0419                     	;# 
  3380  041A                     	;# 
  3381  041B                     	;# 
  3382  041C                     	;# 
  3383  041D                     	;# 
  3384  041E                     	;# 
  3385  041F                     	;# 
  3386  0498                     	;# 
  3387  0498                     	;# 
  3388  0499                     	;# 
  3389  049A                     	;# 
  3390  049B                     	;# 
  3391  049B                     	;# 
  3392  049C                     	;# 
  3393  049D                     	;# 
  3394  049E                     	;# 
  3395  049F                     	;# 
  3396  0617                     	;# 
  3397  0618                     	;# 
  3398  0619                     	;# 
  3399  0619                     	;# 
  3400  061A                     	;# 
  3401  061B                     	;# 
  3402  061C                     	;# 
  3403  061C                     	;# 
  3404  061F                     	;# 
  3405  0691                     	;# 
  3406  0692                     	;# 
  3407  0693                     	;# 
  3408  0694                     	;# 
  3409  0695                     	;# 
  3410  0696                     	;# 
  3411  0697                     	;# 
  3412  0698                     	;# 
  3413  0699                     	;# 
  3414  0711                     	;# 
  3415  0712                     	;# 
  3416  0713                     	;# 
  3417  0714                     	;# 
  3418  0715                     	;# 
  3419  0716                     	;# 
  3420  0717                     	;# 
  3421  0718                     	;# 
  3422  0719                     	;# 
  3423  0891                     	;# 
  3424  0891                     	;# 
  3425  0891                     	;# 
  3426  0891                     	;# 
  3427  0891                     	;# 
  3428  0891                     	;# 
  3429  0892                     	;# 
  3430  0892                     	;# 
  3431  0892                     	;# 
  3432  0893                     	;# 
  3433  0893                     	;# 
  3434  0893                     	;# 
  3435  0893                     	;# 
  3436  0893                     	;# 
  3437  0893                     	;# 
  3438  0894                     	;# 
  3439  0894                     	;# 
  3440  0894                     	;# 
  3441  0895                     	;# 
  3442  0895                     	;# 
  3443  0895                     	;# 
  3444  0896                     	;# 
  3445  0896                     	;# 
  3446  0896                     	;# 
  3447  089B                     	;# 
  3448  0911                     	;# 
  3449  0912                     	;# 
  3450  0913                     	;# 
  3451  0914                     	;# 
  3452  0915                     	;# 
  3453  0916                     	;# 
  3454  0918                     	;# 
  3455  0919                     	;# 
  3456  091A                     	;# 
  3457  091B                     	;# 
  3458  091C                     	;# 
  3459  091D                     	;# 
  3460  091E                     	;# 
  3461  091F                     	;# 
  3462  0E0F                     	;# 
  3463  0E10                     	;# 
  3464  0E11                     	;# 
  3465  0E12                     	;# 
  3466  0E13                     	;# 
  3467  0E14                     	;# 
  3468  0E15                     	;# 
  3469  0E16                     	;# 
  3470  0E17                     	;# 
  3471  0E18                     	;# 
  3472  0E19                     	;# 
  3473  0E1A                     	;# 
  3474  0E1B                     	;# 
  3475  0E1C                     	;# 
  3476  0E20                     	;# 
  3477  0E21                     	;# 
  3478  0E22                     	;# 
  3479  0E24                     	;# 
  3480  0E25                     	;# 
  3481  0E28                     	;# 
  3482  0E29                     	;# 
  3483  0E2A                     	;# 
  3484  0E2B                     	;# 
  3485  0E2C                     	;# 
  3486  0E2D                     	;# 
  3487  0E2E                     	;# 
  3488  0E2F                     	;# 
  3489  0E90                     	;# 
  3490  0E91                     	;# 
  3491  0E92                     	;# 
  3492  0E94                     	;# 
  3493  0E95                     	;# 
  3494  0E9C                     	;# 
  3495  0E9D                     	;# 
  3496  0E9E                     	;# 
  3497  0E9F                     	;# 
  3498  0EA0                     	;# 
  3499  0EA1                     	;# 
  3500  0EA2                     	;# 
  3501  0EA3                     	;# 
  3502  0EA4                     	;# 
  3503  0EA5                     	;# 
  3504  0EA6                     	;# 
  3505  0EA7                     	;# 
  3506  0F0F                     	;# 
  3507  0F10                     	;# 
  3508  0F11                     	;# 
  3509  0F12                     	;# 
  3510  0F13                     	;# 
  3511  0F14                     	;# 
  3512  0F15                     	;# 
  3513  0F16                     	;# 
  3514  0F17                     	;# 
  3515  0F18                     	;# 
  3516  0F19                     	;# 
  3517  0F1A                     	;# 
  3518  0F1B                     	;# 
  3519  0F1C                     	;# 
  3520  0F1D                     	;# 
  3521  0F1E                     	;# 
  3522  0F1F                     	;# 
  3523  0F20                     	;# 
  3524  0F21                     	;# 
  3525  0F22                     	;# 
  3526  0F23                     	;# 
  3527  0F24                     	;# 
  3528  0F25                     	;# 
  3529  0F26                     	;# 
  3530  0F27                     	;# 
  3531  0F28                     	;# 
  3532  0F29                     	;# 
  3533  0F2A                     	;# 
  3534  0F2B                     	;# 
  3535  0F2C                     	;# 
  3536  0F2D                     	;# 
  3537  0F2E                     	;# 
  3538  0F2F                     	;# 
  3539  0F30                     	;# 
  3540  0F31                     	;# 
  3541  0F32                     	;# 
  3542  0F33                     	;# 
  3543  0F34                     	;# 
  3544  0F35                     	;# 
  3545  0F36                     	;# 
  3546  0F37                     	;# 
  3547  0FE4                     	;# 
  3548  0FE5                     	;# 
  3549  0FE6                     	;# 
  3550  0FE7                     	;# 
  3551  0FE8                     	;# 
  3552  0FE9                     	;# 
  3553  0FEA                     	;# 
  3554  0FEB                     	;# 
  3555  0FED                     	;# 
  3556  0FEE                     	;# 
  3557  0FEF                     	;# 
  3558  0000                     	;# 
  3559  0001                     	;# 
  3560  0002                     	;# 
  3561  0003                     	;# 
  3562  0004                     	;# 
  3563  0005                     	;# 
  3564  0006                     	;# 
  3565  0007                     	;# 
  3566  0008                     	;# 
  3567  0009                     	;# 
  3568  000A                     	;# 
  3569  000B                     	;# 
  3570  000C                     	;# 
  3571  000D                     	;# 
  3572  000E                     	;# 
  3573  0010                     	;# 
  3574  0011                     	;# 
  3575  0012                     	;# 
  3576  0013                     	;# 
  3577  0014                     	;# 
  3578  0015                     	;# 
  3579  0015                     	;# 
  3580  0016                     	;# 
  3581  0016                     	;# 
  3582  0017                     	;# 
  3583  0018                     	;# 
  3584  0019                     	;# 
  3585  0019                     	;# 
  3586  001A                     	;# 
  3587  001B                     	;# 
  3588  001C                     	;# 
  3589  001D                     	;# 
  3590  001E                     	;# 
  3591  001F                     	;# 
  3592  008C                     	;# 
  3593  008D                     	;# 
  3594  008E                     	;# 
  3595  0090                     	;# 
  3596  0091                     	;# 
  3597  0092                     	;# 
  3598  0093                     	;# 
  3599  0094                     	;# 
  3600  0097                     	;# 
  3601  009B                     	;# 
  3602  009B                     	;# 
  3603  009C                     	;# 
  3604  009D                     	;# 
  3605  009E                     	;# 
  3606  009F                     	;# 
  3607  010C                     	;# 
  3608  010D                     	;# 
  3609  010E                     	;# 
  3610  0111                     	;# 
  3611  0112                     	;# 
  3612  0113                     	;# 
  3613  0114                     	;# 
  3614  0115                     	;# 
  3615  0116                     	;# 
  3616  0117                     	;# 
  3617  0118                     	;# 
  3618  0119                     	;# 
  3619  018C                     	;# 
  3620  018D                     	;# 
  3621  018E                     	;# 
  3622  0197                     	;# 
  3623  0199                     	;# 
  3624  0199                     	;# 
  3625  0199                     	;# 
  3626  019A                     	;# 
  3627  019A                     	;# 
  3628  019A                     	;# 
  3629  019B                     	;# 
  3630  019B                     	;# 
  3631  019B                     	;# 
  3632  019B                     	;# 
  3633  019B                     	;# 
  3634  019C                     	;# 
  3635  019C                     	;# 
  3636  019C                     	;# 
  3637  019D                     	;# 
  3638  019D                     	;# 
  3639  019D                     	;# 
  3640  019E                     	;# 
  3641  019E                     	;# 
  3642  019E                     	;# 
  3643  019F                     	;# 
  3644  019F                     	;# 
  3645  019F                     	;# 
  3646  019F                     	;# 
  3647  019F                     	;# 
  3648  020C                     	;# 
  3649  020D                     	;# 
  3650  020E                     	;# 
  3651  0211                     	;# 
  3652  0211                     	;# 
  3653  0212                     	;# 
  3654  0212                     	;# 
  3655  0213                     	;# 
  3656  0213                     	;# 
  3657  0214                     	;# 
  3658  0214                     	;# 
  3659  0215                     	;# 
  3660  0215                     	;# 
  3661  0215                     	;# 
  3662  0215                     	;# 
  3663  0216                     	;# 
  3664  0216                     	;# 
  3665  0217                     	;# 
  3666  0217                     	;# 
  3667  028C                     	;# 
  3668  028D                     	;# 
  3669  028E                     	;# 
  3670  0291                     	;# 
  3671  0291                     	;# 
  3672  0292                     	;# 
  3673  0293                     	;# 
  3674  0294                     	;# 
  3675  0295                     	;# 
  3676  0295                     	;# 
  3677  0296                     	;# 
  3678  0297                     	;# 
  3679  0298                     	;# 
  3680  029F                     	;# 
  3681  030C                     	;# 
  3682  030D                     	;# 
  3683  030E                     	;# 
  3684  0311                     	;# 
  3685  0311                     	;# 
  3686  0312                     	;# 
  3687  0313                     	;# 
  3688  0314                     	;# 
  3689  0315                     	;# 
  3690  0315                     	;# 
  3691  0316                     	;# 
  3692  0317                     	;# 
  3693  0318                     	;# 
  3694  038C                     	;# 
  3695  038D                     	;# 
  3696  038E                     	;# 
  3697  0391                     	;# 
  3698  0392                     	;# 
  3699  0393                     	;# 
  3700  0394                     	;# 
  3701  0395                     	;# 
  3702  0396                     	;# 
  3703  0397                     	;# 
  3704  0398                     	;# 
  3705  0399                     	;# 
  3706  039A                     	;# 
  3707  039C                     	;# 
  3708  039D                     	;# 
  3709  039E                     	;# 
  3710  039F                     	;# 
  3711  0411                     	;# 
  3712  0411                     	;# 
  3713  0412                     	;# 
  3714  0413                     	;# 
  3715  0414                     	;# 
  3716  0415                     	;# 
  3717  0416                     	;# 
  3718  0417                     	;# 
  3719  0418                     	;# 
  3720  0418                     	;# 
  3721  0419                     	;# 
  3722  041A                     	;# 
  3723  041B                     	;# 
  3724  041C                     	;# 
  3725  041D                     	;# 
  3726  041E                     	;# 
  3727  041F                     	;# 
  3728  0498                     	;# 
  3729  0498                     	;# 
  3730  0499                     	;# 
  3731  049A                     	;# 
  3732  049B                     	;# 
  3733  049B                     	;# 
  3734  049C                     	;# 
  3735  049D                     	;# 
  3736  049E                     	;# 
  3737  049F                     	;# 
  3738  0617                     	;# 
  3739  0618                     	;# 
  3740  0619                     	;# 
  3741  0619                     	;# 
  3742  061A                     	;# 
  3743  061B                     	;# 
  3744  061C                     	;# 
  3745  061C                     	;# 
  3746  061F                     	;# 
  3747  0691                     	;# 
  3748  0692                     	;# 
  3749  0693                     	;# 
  3750  0694                     	;# 
  3751  0695                     	;# 
  3752  0696                     	;# 
  3753  0697                     	;# 
  3754  0698                     	;# 
  3755  0699                     	;# 
  3756  0711                     	;# 
  3757  0712                     	;# 
  3758  0713                     	;# 
  3759  0714                     	;# 
  3760  0715                     	;# 
  3761  0716                     	;# 
  3762  0717                     	;# 
  3763  0718                     	;# 
  3764  0719                     	;# 
  3765  0891                     	;# 
  3766  0891                     	;# 
  3767  0891                     	;# 
  3768  0891                     	;# 
  3769  0891                     	;# 
  3770  0891                     	;# 
  3771  0892                     	;# 
  3772  0892                     	;# 
  3773  0892                     	;# 
  3774  0893                     	;# 
  3775  0893                     	;# 
  3776  0893                     	;# 
  3777  0893                     	;# 
  3778  0893                     	;# 
  3779  0893                     	;# 
  3780  0894                     	;# 
  3781  0894                     	;# 
  3782  0894                     	;# 
  3783  0895                     	;# 
  3784  0895                     	;# 
  3785  0895                     	;# 
  3786  0896                     	;# 
  3787  0896                     	;# 
  3788  0896                     	;# 
  3789  089B                     	;# 
  3790  0911                     	;# 
  3791  0912                     	;# 
  3792  0913                     	;# 
  3793  0914                     	;# 
  3794  0915                     	;# 
  3795  0916                     	;# 
  3796  0918                     	;# 
  3797  0919                     	;# 
  3798  091A                     	;# 
  3799  091B                     	;# 
  3800  091C                     	;# 
  3801  091D                     	;# 
  3802  091E                     	;# 
  3803  091F                     	;# 
  3804  0E0F                     	;# 
  3805  0E10                     	;# 
  3806  0E11                     	;# 
  3807  0E12                     	;# 
  3808  0E13                     	;# 
  3809  0E14                     	;# 
  3810  0E15                     	;# 
  3811  0E16                     	;# 
  3812  0E17                     	;# 
  3813  0E18                     	;# 
  3814  0E19                     	;# 
  3815  0E1A                     	;# 
  3816  0E1B                     	;# 
  3817  0E1C                     	;# 
  3818  0E20                     	;# 
  3819  0E21                     	;# 
  3820  0E22                     	;# 
  3821  0E24                     	;# 
  3822  0E25                     	;# 
  3823  0E28                     	;# 
  3824  0E29                     	;# 
  3825  0E2A                     	;# 
  3826  0E2B                     	;# 
  3827  0E2C                     	;# 
  3828  0E2D                     	;# 
  3829  0E2E                     	;# 
  3830  0E2F                     	;# 
  3831  0E90                     	;# 
  3832  0E91                     	;# 
  3833  0E92                     	;# 
  3834  0E94                     	;# 
  3835  0E95                     	;# 
  3836  0E9C                     	;# 
  3837  0E9D                     	;# 
  3838  0E9E                     	;# 
  3839  0E9F                     	;# 
  3840  0EA0                     	;# 
  3841  0EA1                     	;# 
  3842  0EA2                     	;# 
  3843  0EA3                     	;# 
  3844  0EA4                     	;# 
  3845  0EA5                     	;# 
  3846  0EA6                     	;# 
  3847  0EA7                     	;# 
  3848  0F0F                     	;# 
  3849  0F10                     	;# 
  3850  0F11                     	;# 
  3851  0F12                     	;# 
  3852  0F13                     	;# 
  3853  0F14                     	;# 
  3854  0F15                     	;# 
  3855  0F16                     	;# 
  3856  0F17                     	;# 
  3857  0F18                     	;# 
  3858  0F19                     	;# 
  3859  0F1A                     	;# 
  3860  0F1B                     	;# 
  3861  0F1C                     	;# 
  3862  0F1D                     	;# 
  3863  0F1E                     	;# 
  3864  0F1F                     	;# 
  3865  0F20                     	;# 
  3866  0F21                     	;# 
  3867  0F22                     	;# 
  3868  0F23                     	;# 
  3869  0F24                     	;# 
  3870  0F25                     	;# 
  3871  0F26                     	;# 
  3872  0F27                     	;# 
  3873  0F28                     	;# 
  3874  0F29                     	;# 
  3875  0F2A                     	;# 
  3876  0F2B                     	;# 
  3877  0F2C                     	;# 
  3878  0F2D                     	;# 
  3879  0F2E                     	;# 
  3880  0F2F                     	;# 
  3881  0F30                     	;# 
  3882  0F31                     	;# 
  3883  0F32                     	;# 
  3884  0F33                     	;# 
  3885  0F34                     	;# 
  3886  0F35                     	;# 
  3887  0F36                     	;# 
  3888  0F37                     	;# 
  3889  0FE4                     	;# 
  3890  0FE5                     	;# 
  3891  0FE6                     	;# 
  3892  0FE7                     	;# 
  3893  0FE8                     	;# 
  3894  0FE9                     	;# 
  3895  0FEA                     	;# 
  3896  0FEB                     	;# 
  3897  0FED                     	;# 
  3898  0FEE                     	;# 
  3899  0FEF                     	;# 
  3900  0000                     	;# 
  3901  0001                     	;# 
  3902  0002                     	;# 
  3903  0003                     	;# 
  3904  0004                     	;# 
  3905  0005                     	;# 
  3906  0006                     	;# 
  3907  0007                     	;# 
  3908  0008                     	;# 
  3909  0009                     	;# 
  3910  000A                     	;# 
  3911  000B                     	;# 
  3912  000C                     	;# 
  3913  000D                     	;# 
  3914  000E                     	;# 
  3915  0010                     	;# 
  3916  0011                     	;# 
  3917  0012                     	;# 
  3918  0013                     	;# 
  3919  0014                     	;# 
  3920  0015                     	;# 
  3921  0015                     	;# 
  3922  0016                     	;# 
  3923  0016                     	;# 
  3924  0017                     	;# 
  3925  0018                     	;# 
  3926  0019                     	;# 
  3927  0019                     	;# 
  3928  001A                     	;# 
  3929  001B                     	;# 
  3930  001C                     	;# 
  3931  001D                     	;# 
  3932  001E                     	;# 
  3933  001F                     	;# 
  3934  008C                     	;# 
  3935  008D                     	;# 
  3936  008E                     	;# 
  3937  0090                     	;# 
  3938  0091                     	;# 
  3939  0092                     	;# 
  3940  0093                     	;# 
  3941  0094                     	;# 
  3942  0097                     	;# 
  3943  009B                     	;# 
  3944  009B                     	;# 
  3945  009C                     	;# 
  3946  009D                     	;# 
  3947  009E                     	;# 
  3948  009F                     	;# 
  3949  010C                     	;# 
  3950  010D                     	;# 
  3951  010E                     	;# 
  3952  0111                     	;# 
  3953  0112                     	;# 
  3954  0113                     	;# 
  3955  0114                     	;# 
  3956  0115                     	;# 
  3957  0116                     	;# 
  3958  0117                     	;# 
  3959  0118                     	;# 
  3960  0119                     	;# 
  3961  018C                     	;# 
  3962  018D                     	;# 
  3963  018E                     	;# 
  3964  0197                     	;# 
  3965  0199                     	;# 
  3966  0199                     	;# 
  3967  0199                     	;# 
  3968  019A                     	;# 
  3969  019A                     	;# 
  3970  019A                     	;# 
  3971  019B                     	;# 
  3972  019B                     	;# 
  3973  019B                     	;# 
  3974  019B                     	;# 
  3975  019B                     	;# 
  3976  019C                     	;# 
  3977  019C                     	;# 
  3978  019C                     	;# 
  3979  019D                     	;# 
  3980  019D                     	;# 
  3981  019D                     	;# 
  3982  019E                     	;# 
  3983  019E                     	;# 
  3984  019E                     	;# 
  3985  019F                     	;# 
  3986  019F                     	;# 
  3987  019F                     	;# 
  3988  019F                     	;# 
  3989  019F                     	;# 
  3990  020C                     	;# 
  3991  020D                     	;# 
  3992  020E                     	;# 
  3993  0211                     	;# 
  3994  0211                     	;# 
  3995  0212                     	;# 
  3996  0212                     	;# 
  3997  0213                     	;# 
  3998  0213                     	;# 
  3999  0214                     	;# 
  4000  0214                     	;# 
  4001  0215                     	;# 
  4002  0215                     	;# 
  4003  0215                     	;# 
  4004  0215                     	;# 
  4005  0216                     	;# 
  4006  0216                     	;# 
  4007  0217                     	;# 
  4008  0217                     	;# 
  4009  028C                     	;# 
  4010  028D                     	;# 
  4011  028E                     	;# 
  4012  0291                     	;# 
  4013  0291                     	;# 
  4014  0292                     	;# 
  4015  0293                     	;# 
  4016  0294                     	;# 
  4017  0295                     	;# 
  4018  0295                     	;# 
  4019  0296                     	;# 
  4020  0297                     	;# 
  4021  0298                     	;# 
  4022  029F                     	;# 
  4023  030C                     	;# 
  4024  030D                     	;# 
  4025  030E                     	;# 
  4026  0311                     	;# 
  4027  0311                     	;# 
  4028  0312                     	;# 
  4029  0313                     	;# 
  4030  0314                     	;# 
  4031  0315                     	;# 
  4032  0315                     	;# 
  4033  0316                     	;# 
  4034  0317                     	;# 
  4035  0318                     	;# 
  4036  038C                     	;# 
  4037  038D                     	;# 
  4038  038E                     	;# 
  4039  0391                     	;# 
  4040  0392                     	;# 
  4041  0393                     	;# 
  4042  0394                     	;# 
  4043  0395                     	;# 
  4044  0396                     	;# 
  4045  0397                     	;# 
  4046  0398                     	;# 
  4047  0399                     	;# 
  4048  039A                     	;# 
  4049  039C                     	;# 
  4050  039D                     	;# 
  4051  039E                     	;# 
  4052  039F                     	;# 
  4053  0411                     	;# 
  4054  0411                     	;# 
  4055  0412                     	;# 
  4056  0413                     	;# 
  4057  0414                     	;# 
  4058  0415                     	;# 
  4059  0416                     	;# 
  4060  0417                     	;# 
  4061  0418                     	;# 
  4062  0418                     	;# 
  4063  0419                     	;# 
  4064  041A                     	;# 
  4065  041B                     	;# 
  4066  041C                     	;# 
  4067  041D                     	;# 
  4068  041E                     	;# 
  4069  041F                     	;# 
  4070  0498                     	;# 
  4071  0498                     	;# 
  4072  0499                     	;# 
  4073  049A                     	;# 
  4074  049B                     	;# 
  4075  049B                     	;# 
  4076  049C                     	;# 
  4077  049D                     	;# 
  4078  049E                     	;# 
  4079  049F                     	;# 
  4080  0617                     	;# 
  4081  0618                     	;# 
  4082  0619                     	;# 
  4083  0619                     	;# 
  4084  061A                     	;# 
  4085  061B                     	;# 
  4086  061C                     	;# 
  4087  061C                     	;# 
  4088  061F                     	;# 
  4089  0691                     	;# 
  4090  0692                     	;# 
  4091  0693                     	;# 
  4092  0694                     	;# 
  4093  0695                     	;# 
  4094  0696                     	;# 
  4095  0697                     	;# 
  4096  0698                     	;# 
  4097  0699                     	;# 
  4098  0711                     	;# 
  4099  0712                     	;# 
  4100  0713                     	;# 
  4101  0714                     	;# 
  4102  0715                     	;# 
  4103  0716                     	;# 
  4104  0717                     	;# 
  4105  0718                     	;# 
  4106  0719                     	;# 
  4107  0891                     	;# 
  4108  0891                     	;# 
  4109  0891                     	;# 
  4110  0891                     	;# 
  4111  0891                     	;# 
  4112  0891                     	;# 
  4113  0892                     	;# 
  4114  0892                     	;# 
  4115  0892                     	;# 
  4116  0893                     	;# 
  4117  0893                     	;# 
  4118  0893                     	;# 
  4119  0893                     	;# 
  4120  0893                     	;# 
  4121  0893                     	;# 
  4122  0894                     	;# 
  4123  0894                     	;# 
  4124  0894                     	;# 
  4125  0895                     	;# 
  4126  0895                     	;# 
  4127  0895                     	;# 
  4128  0896                     	;# 
  4129  0896                     	;# 
  4130  0896                     	;# 
  4131  089B                     	;# 
  4132  0911                     	;# 
  4133  0912                     	;# 
  4134  0913                     	;# 
  4135  0914                     	;# 
  4136  0915                     	;# 
  4137  0916                     	;# 
  4138  0918                     	;# 
  4139  0919                     	;# 
  4140  091A                     	;# 
  4141  091B                     	;# 
  4142  091C                     	;# 
  4143  091D                     	;# 
  4144  091E                     	;# 
  4145  091F                     	;# 
  4146  0E0F                     	;# 
  4147  0E10                     	;# 
  4148  0E11                     	;# 
  4149  0E12                     	;# 
  4150  0E13                     	;# 
  4151  0E14                     	;# 
  4152  0E15                     	;# 
  4153  0E16                     	;# 
  4154  0E17                     	;# 
  4155  0E18                     	;# 
  4156  0E19                     	;# 
  4157  0E1A                     	;# 
  4158  0E1B                     	;# 
  4159  0E1C                     	;# 
  4160  0E20                     	;# 
  4161  0E21                     	;# 
  4162  0E22                     	;# 
  4163  0E24                     	;# 
  4164  0E25                     	;# 
  4165  0E28                     	;# 
  4166  0E29                     	;# 
  4167  0E2A                     	;# 
  4168  0E2B                     	;# 
  4169  0E2C                     	;# 
  4170  0E2D                     	;# 
  4171  0E2E                     	;# 
  4172  0E2F                     	;# 
  4173  0E90                     	;# 
  4174  0E91                     	;# 
  4175  0E92                     	;# 
  4176  0E94                     	;# 
  4177  0E95                     	;# 
  4178  0E9C                     	;# 
  4179  0E9D                     	;# 
  4180  0E9E                     	;# 
  4181  0E9F                     	;# 
  4182  0EA0                     	;# 
  4183  0EA1                     	;# 
  4184  0EA2                     	;# 
  4185  0EA3                     	;# 
  4186  0EA4                     	;# 
  4187  0EA5                     	;# 
  4188  0EA6                     	;# 
  4189  0EA7                     	;# 
  4190  0F0F                     	;# 
  4191  0F10                     	;# 
  4192  0F11                     	;# 
  4193  0F12                     	;# 
  4194  0F13                     	;# 
  4195  0F14                     	;# 
  4196  0F15                     	;# 
  4197  0F16                     	;# 
  4198  0F17                     	;# 
  4199  0F18                     	;# 
  4200  0F19                     	;# 
  4201  0F1A                     	;# 
  4202  0F1B                     	;# 
  4203  0F1C                     	;# 
  4204  0F1D                     	;# 
  4205  0F1E                     	;# 
  4206  0F1F                     	;# 
  4207  0F20                     	;# 
  4208  0F21                     	;# 
  4209  0F22                     	;# 
  4210  0F23                     	;# 
  4211  0F24                     	;# 
  4212  0F25                     	;# 
  4213  0F26                     	;# 
  4214  0F27                     	;# 
  4215  0F28                     	;# 
  4216  0F29                     	;# 
  4217  0F2A                     	;# 
  4218  0F2B                     	;# 
  4219  0F2C                     	;# 
  4220  0F2D                     	;# 
  4221  0F2E                     	;# 
  4222  0F2F                     	;# 
  4223  0F30                     	;# 
  4224  0F31                     	;# 
  4225  0F32                     	;# 
  4226  0F33                     	;# 
  4227  0F34                     	;# 
  4228  0F35                     	;# 
  4229  0F36                     	;# 
  4230  0F37                     	;# 
  4231  0FE4                     	;# 
  4232  0FE5                     	;# 
  4233  0FE6                     	;# 
  4234  0FE7                     	;# 
  4235  0FE8                     	;# 
  4236  0FE9                     	;# 
  4237  0FEA                     	;# 
  4238  0FEB                     	;# 
  4239  0FED                     	;# 
  4240  0FEE                     	;# 
  4241  0FEF                     	;# 
  4242  0000                     	;# 
  4243  0001                     	;# 
  4244  0002                     	;# 
  4245  0003                     	;# 
  4246  0004                     	;# 
  4247  0005                     	;# 
  4248  0006                     	;# 
  4249  0007                     	;# 
  4250  0008                     	;# 
  4251  0009                     	;# 
  4252  000A                     	;# 
  4253  000B                     	;# 
  4254  000C                     	;# 
  4255  000D                     	;# 
  4256  000E                     	;# 
  4257  0010                     	;# 
  4258  0011                     	;# 
  4259  0012                     	;# 
  4260  0013                     	;# 
  4261  0014                     	;# 
  4262  0015                     	;# 
  4263  0015                     	;# 
  4264  0016                     	;# 
  4265  0016                     	;# 
  4266  0017                     	;# 
  4267  0018                     	;# 
  4268  0019                     	;# 
  4269  0019                     	;# 
  4270  001A                     	;# 
  4271  001B                     	;# 
  4272  001C                     	;# 
  4273  001D                     	;# 
  4274  001E                     	;# 
  4275  001F                     	;# 
  4276  008C                     	;# 
  4277  008D                     	;# 
  4278  008E                     	;# 
  4279  0090                     	;# 
  4280  0091                     	;# 
  4281  0092                     	;# 
  4282  0093                     	;# 
  4283  0094                     	;# 
  4284  0097                     	;# 
  4285  009B                     	;# 
  4286  009B                     	;# 
  4287  009C                     	;# 
  4288  009D                     	;# 
  4289  009E                     	;# 
  4290  009F                     	;# 
  4291  010C                     	;# 
  4292  010D                     	;# 
  4293  010E                     	;# 
  4294  0111                     	;# 
  4295  0112                     	;# 
  4296  0113                     	;# 
  4297  0114                     	;# 
  4298  0115                     	;# 
  4299  0116                     	;# 
  4300  0117                     	;# 
  4301  0118                     	;# 
  4302  0119                     	;# 
  4303  018C                     	;# 
  4304  018D                     	;# 
  4305  018E                     	;# 
  4306  0197                     	;# 
  4307  0199                     	;# 
  4308  0199                     	;# 
  4309  0199                     	;# 
  4310  019A                     	;# 
  4311  019A                     	;# 
  4312  019A                     	;# 
  4313  019B                     	;# 
  4314  019B                     	;# 
  4315  019B                     	;# 
  4316  019B                     	;# 
  4317  019B                     	;# 
  4318  019C                     	;# 
  4319  019C                     	;# 
  4320  019C                     	;# 
  4321  019D                     	;# 
  4322  019D                     	;# 
  4323  019D                     	;# 
  4324  019E                     	;# 
  4325  019E                     	;# 
  4326  019E                     	;# 
  4327  019F                     	;# 
  4328  019F                     	;# 
  4329  019F                     	;# 
  4330  019F                     	;# 
  4331  019F                     	;# 
  4332  020C                     	;# 
  4333  020D                     	;# 
  4334  020E                     	;# 
  4335  0211                     	;# 
  4336  0211                     	;# 
  4337  0212                     	;# 
  4338  0212                     	;# 
  4339  0213                     	;# 
  4340  0213                     	;# 
  4341  0214                     	;# 
  4342  0214                     	;# 
  4343  0215                     	;# 
  4344  0215                     	;# 
  4345  0215                     	;# 
  4346  0215                     	;# 
  4347  0216                     	;# 
  4348  0216                     	;# 
  4349  0217                     	;# 
  4350  0217                     	;# 
  4351  028C                     	;# 
  4352  028D                     	;# 
  4353  028E                     	;# 
  4354  0291                     	;# 
  4355  0291                     	;# 
  4356  0292                     	;# 
  4357  0293                     	;# 
  4358  0294                     	;# 
  4359  0295                     	;# 
  4360  0295                     	;# 
  4361  0296                     	;# 
  4362  0297                     	;# 
  4363  0298                     	;# 
  4364  029F                     	;# 
  4365  030C                     	;# 
  4366  030D                     	;# 
  4367  030E                     	;# 
  4368  0311                     	;# 
  4369  0311                     	;# 
  4370  0312                     	;# 
  4371  0313                     	;# 
  4372  0314                     	;# 
  4373  0315                     	;# 
  4374  0315                     	;# 
  4375  0316                     	;# 
  4376  0317                     	;# 
  4377  0318                     	;# 
  4378  038C                     	;# 
  4379  038D                     	;# 
  4380  038E                     	;# 
  4381  0391                     	;# 
  4382  0392                     	;# 
  4383  0393                     	;# 
  4384  0394                     	;# 
  4385  0395                     	;# 
  4386  0396                     	;# 
  4387  0397                     	;# 
  4388  0398                     	;# 
  4389  0399                     	;# 
  4390  039A                     	;# 
  4391  039C                     	;# 
  4392  039D                     	;# 
  4393  039E                     	;# 
  4394  039F                     	;# 
  4395  0411                     	;# 
  4396  0411                     	;# 
  4397  0412                     	;# 
  4398  0413                     	;# 
  4399  0414                     	;# 
  4400  0415                     	;# 
  4401  0416                     	;# 
  4402  0417                     	;# 
  4403  0418                     	;# 
  4404  0418                     	;# 
  4405  0419                     	;# 
  4406  041A                     	;# 
  4407  041B                     	;# 
  4408  041C                     	;# 
  4409  041D                     	;# 
  4410  041E                     	;# 
  4411  041F                     	;# 
  4412  0498                     	;# 
  4413  0498                     	;# 
  4414  0499                     	;# 
  4415  049A                     	;# 
  4416  049B                     	;# 
  4417  049B                     	;# 
  4418  049C                     	;# 
  4419  049D                     	;# 
  4420  049E                     	;# 
  4421  049F                     	;# 
  4422  0617                     	;# 
  4423  0618                     	;# 
  4424  0619                     	;# 
  4425  0619                     	;# 
  4426  061A                     	;# 
  4427  061B                     	;# 
  4428  061C                     	;# 
  4429  061C                     	;# 
  4430  061F                     	;# 
  4431  0691                     	;# 
  4432  0692                     	;# 
  4433  0693                     	;# 
  4434  0694                     	;# 
  4435  0695                     	;# 
  4436  0696                     	;# 
  4437  0697                     	;# 
  4438  0698                     	;# 
  4439  0699                     	;# 
  4440  0711                     	;# 
  4441  0712                     	;# 
  4442  0713                     	;# 
  4443  0714                     	;# 
  4444  0715                     	;# 
  4445  0716                     	;# 
  4446  0717                     	;# 
  4447  0718                     	;# 
  4448  0719                     	;# 
  4449  0891                     	;# 
  4450  0891                     	;# 
  4451  0891                     	;# 
  4452  0891                     	;# 
  4453  0891                     	;# 
  4454  0891                     	;# 
  4455  0892                     	;# 
  4456  0892                     	;# 
  4457  0892                     	;# 
  4458  0893                     	;# 
  4459  0893                     	;# 
  4460  0893                     	;# 
  4461  0893                     	;# 
  4462  0893                     	;# 
  4463  0893                     	;# 
  4464  0894                     	;# 
  4465  0894                     	;# 
  4466  0894                     	;# 
  4467  0895                     	;# 
  4468  0895                     	;# 
  4469  0895                     	;# 
  4470  0896                     	;# 
  4471  0896                     	;# 
  4472  0896                     	;# 
  4473  089B                     	;# 
  4474  0911                     	;# 
  4475  0912                     	;# 
  4476  0913                     	;# 
  4477  0914                     	;# 
  4478  0915                     	;# 
  4479  0916                     	;# 
  4480  0918                     	;# 
  4481  0919                     	;# 
  4482  091A                     	;# 
  4483  091B                     	;# 
  4484  091C                     	;# 
  4485  091D                     	;# 
  4486  091E                     	;# 
  4487  091F                     	;# 
  4488  0E0F                     	;# 
  4489  0E10                     	;# 
  4490  0E11                     	;# 
  4491  0E12                     	;# 
  4492  0E13                     	;# 
  4493  0E14                     	;# 
  4494  0E15                     	;# 
  4495  0E16                     	;# 
  4496  0E17                     	;# 
  4497  0E18                     	;# 
  4498  0E19                     	;# 
  4499  0E1A                     	;# 
  4500  0E1B                     	;# 
  4501  0E1C                     	;# 
  4502  0E20                     	;# 
  4503  0E21                     	;# 
  4504  0E22                     	;# 
  4505  0E24                     	;# 
  4506  0E25                     	;# 
  4507  0E28                     	;# 
  4508  0E29                     	;# 
  4509  0E2A                     	;# 
  4510  0E2B                     	;# 
  4511  0E2C                     	;# 
  4512  0E2D                     	;# 
  4513  0E2E                     	;# 
  4514  0E2F                     	;# 
  4515  0E90                     	;# 
  4516  0E91                     	;# 
  4517  0E92                     	;# 
  4518  0E94                     	;# 
  4519  0E95                     	;# 
  4520  0E9C                     	;# 
  4521  0E9D                     	;# 
  4522  0E9E                     	;# 
  4523  0E9F                     	;# 
  4524  0EA0                     	;# 
  4525  0EA1                     	;# 
  4526  0EA2                     	;# 
  4527  0EA3                     	;# 
  4528  0EA4                     	;# 
  4529  0EA5                     	;# 
  4530  0EA6                     	;# 
  4531  0EA7                     	;# 
  4532  0F0F                     	;# 
  4533  0F10                     	;# 
  4534  0F11                     	;# 
  4535  0F12                     	;# 
  4536  0F13                     	;# 
  4537  0F14                     	;# 
  4538  0F15                     	;# 
  4539  0F16                     	;# 
  4540  0F17                     	;# 
  4541  0F18                     	;# 
  4542  0F19                     	;# 
  4543  0F1A                     	;# 
  4544  0F1B                     	;# 
  4545  0F1C                     	;# 
  4546  0F1D                     	;# 
  4547  0F1E                     	;# 
  4548  0F1F                     	;# 
  4549  0F20                     	;# 
  4550  0F21                     	;# 
  4551  0F22                     	;# 
  4552  0F23                     	;# 
  4553  0F24                     	;# 
  4554  0F25                     	;# 
  4555  0F26                     	;# 
  4556  0F27                     	;# 
  4557  0F28                     	;# 
  4558  0F29                     	;# 
  4559  0F2A                     	;# 
  4560  0F2B                     	;# 
  4561  0F2C                     	;# 
  4562  0F2D                     	;# 
  4563  0F2E                     	;# 
  4564  0F2F                     	;# 
  4565  0F30                     	;# 
  4566  0F31                     	;# 
  4567  0F32                     	;# 
  4568  0F33                     	;# 
  4569  0F34                     	;# 
  4570  0F35                     	;# 
  4571  0F36                     	;# 
  4572  0F37                     	;# 
  4573  0FE4                     	;# 
  4574  0FE5                     	;# 
  4575  0FE6                     	;# 
  4576  0FE7                     	;# 
  4577  0FE8                     	;# 
  4578  0FE9                     	;# 
  4579  0FEA                     	;# 
  4580  0FEB                     	;# 
  4581  0FED                     	;# 
  4582  0FEE                     	;# 
  4583  0FEF                     	;# 
  4584  0000                     	;# 
  4585  0001                     	;# 
  4586  0002                     	;# 
  4587  0003                     	;# 
  4588  0004                     	;# 
  4589  0005                     	;# 
  4590  0006                     	;# 
  4591  0007                     	;# 
  4592  0008                     	;# 
  4593  0009                     	;# 
  4594  000A                     	;# 
  4595  000B                     	;# 
  4596  000C                     	;# 
  4597  000D                     	;# 
  4598  000E                     	;# 
  4599  0010                     	;# 
  4600  0011                     	;# 
  4601  0012                     	;# 
  4602  0013                     	;# 
  4603  0014                     	;# 
  4604  0015                     	;# 
  4605  0015                     	;# 
  4606  0016                     	;# 
  4607  0016                     	;# 
  4608  0017                     	;# 
  4609  0018                     	;# 
  4610  0019                     	;# 
  4611  0019                     	;# 
  4612  001A                     	;# 
  4613  001B                     	;# 
  4614  001C                     	;# 
  4615  001D                     	;# 
  4616  001E                     	;# 
  4617  001F                     	;# 
  4618  008C                     	;# 
  4619  008D                     	;# 
  4620  008E                     	;# 
  4621  0090                     	;# 
  4622  0091                     	;# 
  4623  0092                     	;# 
  4624  0093                     	;# 
  4625  0094                     	;# 
  4626  0097                     	;# 
  4627  009B                     	;# 
  4628  009B                     	;# 
  4629  009C                     	;# 
  4630  009D                     	;# 
  4631  009E                     	;# 
  4632  009F                     	;# 
  4633  010C                     	;# 
  4634  010D                     	;# 
  4635  010E                     	;# 
  4636  0111                     	;# 
  4637  0112                     	;# 
  4638  0113                     	;# 
  4639  0114                     	;# 
  4640  0115                     	;# 
  4641  0116                     	;# 
  4642  0117                     	;# 
  4643  0118                     	;# 
  4644  0119                     	;# 
  4645  018C                     	;# 
  4646  018D                     	;# 
  4647  018E                     	;# 
  4648  0197                     	;# 
  4649  0199                     	;# 
  4650  0199                     	;# 
  4651  0199                     	;# 
  4652  019A                     	;# 
  4653  019A                     	;# 
  4654  019A                     	;# 
  4655  019B                     	;# 
  4656  019B                     	;# 
  4657  019B                     	;# 
  4658  019B                     	;# 
  4659  019B                     	;# 
  4660  019C                     	;# 
  4661  019C                     	;# 
  4662  019C                     	;# 
  4663  019D                     	;# 
  4664  019D                     	;# 
  4665  019D                     	;# 
  4666  019E                     	;# 
  4667  019E                     	;# 
  4668  019E                     	;# 
  4669  019F                     	;# 
  4670  019F                     	;# 
  4671  019F                     	;# 
  4672  019F                     	;# 
  4673  019F                     	;# 
  4674  020C                     	;# 
  4675  020D                     	;# 
  4676  020E                     	;# 
  4677  0211                     	;# 
  4678  0211                     	;# 
  4679  0212                     	;# 
  4680  0212                     	;# 
  4681  0213                     	;# 
  4682  0213                     	;# 
  4683  0214                     	;# 
  4684  0214                     	;# 
  4685  0215                     	;# 
  4686  0215                     	;# 
  4687  0215                     	;# 
  4688  0215                     	;# 
  4689  0216                     	;# 
  4690  0216                     	;# 
  4691  0217                     	;# 
  4692  0217                     	;# 
  4693  028C                     	;# 
  4694  028D                     	;# 
  4695  028E                     	;# 
  4696  0291                     	;# 
  4697  0291                     	;# 
  4698  0292                     	;# 
  4699  0293                     	;# 
  4700  0294                     	;# 
  4701  0295                     	;# 
  4702  0295                     	;# 
  4703  0296                     	;# 
  4704  0297                     	;# 
  4705  0298                     	;# 
  4706  029F                     	;# 
  4707  030C                     	;# 
  4708  030D                     	;# 
  4709  030E                     	;# 
  4710  0311                     	;# 
  4711  0311                     	;# 
  4712  0312                     	;# 
  4713  0313                     	;# 
  4714  0314                     	;# 
  4715  0315                     	;# 
  4716  0315                     	;# 
  4717  0316                     	;# 
  4718  0317                     	;# 
  4719  0318                     	;# 
  4720  038C                     	;# 
  4721  038D                     	;# 
  4722  038E                     	;# 
  4723  0391                     	;# 
  4724  0392                     	;# 
  4725  0393                     	;# 
  4726  0394                     	;# 
  4727  0395                     	;# 
  4728  0396                     	;# 
  4729  0397                     	;# 
  4730  0398                     	;# 
  4731  0399                     	;# 
  4732  039A                     	;# 
  4733  039C                     	;# 
  4734  039D                     	;# 
  4735  039E                     	;# 
  4736  039F                     	;# 
  4737  0411                     	;# 
  4738  0411                     	;# 
  4739  0412                     	;# 
  4740  0413                     	;# 
  4741  0414                     	;# 
  4742  0415                     	;# 
  4743  0416                     	;# 
  4744  0417                     	;# 
  4745  0418                     	;# 
  4746  0418                     	;# 
  4747  0419                     	;# 
  4748  041A                     	;# 
  4749  041B                     	;# 
  4750  041C                     	;# 
  4751  041D                     	;# 
  4752  041E                     	;# 
  4753  041F                     	;# 
  4754  0498                     	;# 
  4755  0498                     	;# 
  4756  0499                     	;# 
  4757  049A                     	;# 
  4758  049B                     	;# 
  4759  049B                     	;# 
  4760  049C                     	;# 
  4761  049D                     	;# 
  4762  049E                     	;# 
  4763  049F                     	;# 
  4764  0617                     	;# 
  4765  0618                     	;# 
  4766  0619                     	;# 
  4767  0619                     	;# 
  4768  061A                     	;# 
  4769  061B                     	;# 
  4770  061C                     	;# 
  4771  061C                     	;# 
  4772  061F                     	;# 
  4773  0691                     	;# 
  4774  0692                     	;# 
  4775  0693                     	;# 
  4776  0694                     	;# 
  4777  0695                     	;# 
  4778  0696                     	;# 
  4779  0697                     	;# 
  4780  0698                     	;# 
  4781  0699                     	;# 
  4782  0711                     	;# 
  4783  0712                     	;# 
  4784  0713                     	;# 
  4785  0714                     	;# 
  4786  0715                     	;# 
  4787  0716                     	;# 
  4788  0717                     	;# 
  4789  0718                     	;# 
  4790  0719                     	;# 
  4791  0891                     	;# 
  4792  0891                     	;# 
  4793  0891                     	;# 
  4794  0891                     	;# 
  4795  0891                     	;# 
  4796  0891                     	;# 
  4797  0892                     	;# 
  4798  0892                     	;# 
  4799  0892                     	;# 
  4800  0893                     	;# 
  4801  0893                     	;# 
  4802  0893                     	;# 
  4803  0893                     	;# 
  4804  0893                     	;# 
  4805  0893                     	;# 
  4806  0894                     	;# 
  4807  0894                     	;# 
  4808  0894                     	;# 
  4809  0895                     	;# 
  4810  0895                     	;# 
  4811  0895                     	;# 
  4812  0896                     	;# 
  4813  0896                     	;# 
  4814  0896                     	;# 
  4815  089B                     	;# 
  4816  0911                     	;# 
  4817  0912                     	;# 
  4818  0913                     	;# 
  4819  0914                     	;# 
  4820  0915                     	;# 
  4821  0916                     	;# 
  4822  0918                     	;# 
  4823  0919                     	;# 
  4824  091A                     	;# 
  4825  091B                     	;# 
  4826  091C                     	;# 
  4827  091D                     	;# 
  4828  091E                     	;# 
  4829  091F                     	;# 
  4830  0E0F                     	;# 
  4831  0E10                     	;# 
  4832  0E11                     	;# 
  4833  0E12                     	;# 
  4834  0E13                     	;# 
  4835  0E14                     	;# 
  4836  0E15                     	;# 
  4837  0E16                     	;# 
  4838  0E17                     	;# 
  4839  0E18                     	;# 
  4840  0E19                     	;# 
  4841  0E1A                     	;# 
  4842  0E1B                     	;# 
  4843  0E1C                     	;# 
  4844  0E20                     	;# 
  4845  0E21                     	;# 
  4846  0E22                     	;# 
  4847  0E24                     	;# 
  4848  0E25                     	;# 
  4849  0E28                     	;# 
  4850  0E29                     	;# 
  4851  0E2A                     	;# 
  4852  0E2B                     	;# 
  4853  0E2C                     	;# 
  4854  0E2D                     	;# 
  4855  0E2E                     	;# 
  4856  0E2F                     	;# 
  4857  0E90                     	;# 
  4858  0E91                     	;# 
  4859  0E92                     	;# 
  4860  0E94                     	;# 
  4861  0E95                     	;# 
  4862  0E9C                     	;# 
  4863  0E9D                     	;# 
  4864  0E9E                     	;# 
  4865  0E9F                     	;# 
  4866  0EA0                     	;# 
  4867  0EA1                     	;# 
  4868  0EA2                     	;# 
  4869  0EA3                     	;# 
  4870  0EA4                     	;# 
  4871  0EA5                     	;# 
  4872  0EA6                     	;# 
  4873  0EA7                     	;# 
  4874  0F0F                     	;# 
  4875  0F10                     	;# 
  4876  0F11                     	;# 
  4877  0F12                     	;# 
  4878  0F13                     	;# 
  4879  0F14                     	;# 
  4880  0F15                     	;# 
  4881  0F16                     	;# 
  4882  0F17                     	;# 
  4883  0F18                     	;# 
  4884  0F19                     	;# 
  4885  0F1A                     	;# 
  4886  0F1B                     	;# 
  4887  0F1C                     	;# 
  4888  0F1D                     	;# 
  4889  0F1E                     	;# 
  4890  0F1F                     	;# 
  4891  0F20                     	;# 
  4892  0F21                     	;# 
  4893  0F22                     	;# 
  4894  0F23                     	;# 
  4895  0F24                     	;# 
  4896  0F25                     	;# 
  4897  0F26                     	;# 
  4898  0F27                     	;# 
  4899  0F28                     	;# 
  4900  0F29                     	;# 
  4901  0F2A                     	;# 
  4902  0F2B                     	;# 
  4903  0F2C                     	;# 
  4904  0F2D                     	;# 
  4905  0F2E                     	;# 
  4906  0F2F                     	;# 
  4907  0F30                     	;# 
  4908  0F31                     	;# 
  4909  0F32                     	;# 
  4910  0F33                     	;# 
  4911  0F34                     	;# 
  4912  0F35                     	;# 
  4913  0F36                     	;# 
  4914  0F37                     	;# 
  4915  0FE4                     	;# 
  4916  0FE5                     	;# 
  4917  0FE6                     	;# 
  4918  0FE7                     	;# 
  4919  0FE8                     	;# 
  4920  0FE9                     	;# 
  4921  0FEA                     	;# 
  4922  0FEB                     	;# 
  4923  0FED                     	;# 
  4924  0FEE                     	;# 
  4925  0FEF                     	;# 
  4926                           
  4927                           	psect	idataBANK0
  4928  0003                     __pidataBANK0:	
  4929                           
  4930                           ;initializer for _LED_Color
  4931  0003  3401               	retlw	1
  4932                           
  4933                           	psect	idataBANK1
  4934  0D87                     __pidataBANK1:	
  4935                           
  4936                           ;initializer for _EncSpdredFact
  4937  0D87  341E               	retlw	30
  4938  0D88  3400               	retlw	0
  4939  0D89  3400               	retlw	0
  4940  0D8A  3400               	retlw	0
  4941                           
  4942                           ;initializer for _EncEdgeMinTimeInterval
  4943  0D8B  34FF               	retlw	255
  4944  0D8C  34FF               	retlw	255
  4945  0D8D  34FF               	retlw	255
  4946  0D8E  34EF               	retlw	239
  4947                           
  4948                           	psect	stringtext
  4949  07FC                     __pstringtext:	
  4950  07FC                     _fctsupported:	
  4951  07FC  3401               	retlw	1
  4952  07FD  3402               	retlw	2
  4953  07FE  3403               	retlw	3
  4954  07FF  3404               	retlw	4
  4955  0800  3405               	retlw	5
  4956  0801  3406               	retlw	6
  4957  0802  340F               	retlw	15
  4958  0803  3410               	retlw	16
  4959  0804                     __end_of_fctsupported:	
  4960                           
  4961                           	psect	nvBANK0
  4962  006A                     __pnvBANK0:	
  4963  006A                     _timer3ReloadVal:	
  4964  006A                     	ds	2
  4965  006C                     _timer5ReloadVal:	
  4966  006C                     	ds	2
  4967  006E                     _eusartTxBufferRemaining:	
  4968  006E                     	ds	1
  4969                           
  4970                           	psect	nvBANK1
  4971  00EE                     __pnvBANK1:	
  4972  00EE                     _TMR5_InterruptHandler:	
  4973  00EE                     	ds	2
  4974                           
  4975                           	psect	nvBANK2
  4976  015A                     __pnvBANK2:	
  4977  015A                     _INT_InterruptHandler:	
  4978  015A                     	ds	2
  4979  015C                     _IOCCF5_InterruptHandler:	
  4980  015C                     	ds	2
  4981  015E                     _IOCCF4_InterruptHandler:	
  4982  015E                     	ds	2
  4983  0160                     _TMR0_InterruptHandler:	
  4984  0160                     	ds	2
  4985  0162                     _TMR3_InterruptHandler:	
  4986  0162                     	ds	2
  4987  000E                     _PORTCbits	set	14
  4988  0011                     _PIR1bits	set	17
  4989  000B                     _INTCONbits	set	11
  4990  0017                     _T0CON0bits	set	23
  4991  0010                     _PIR0bits	set	16
  4992  0015                     _TMR0L	set	21
  4993  0016                     _TMR0H	set	22
  4994  0018                     _T0CON1	set	24
  4995  0017                     _T0CON0	set	23
  4996  0013                     _PIR3bits	set	19
  4997  0014                     _PIR4bits	set	20
  4998  005F                     _GIE	set	95
  4999  0097                     _WDTCON	set	151
  5000  009D                     _ADCON0bits	set	157
  5001  009C                     _ADRESH	set	156
  5002  009B                     _ADRESL	set	155
  5003  009F                     _ADACT	set	159
  5004  009E                     _ADCON1	set	158
  5005  009D                     _ADCON0	set	157
  5006  008E                     _TRISC	set	142
  5007  008D                     _TRISB	set	141
  5008  008C                     _TRISA	set	140
  5009  0090                     _PIE0bits	set	144
  5010  0091                     _PIE1bits	set	145
  5011  0093                     _PIE3bits	set	147
  5012  0094                     _PIE4bits	set	148
  5013  010E                     _LATCbits	set	270
  5014  010D                     _LATBbits	set	269
  5015  010E                     _LATC	set	270
  5016  010D                     _LATB	set	269
  5017  010C                     _LATA	set	268
  5018  018C                     _ANSELA	set	396
  5019  018D                     _ANSELB	set	397
  5020  018E                     _ANSELC	set	398
  5021  0199                     _RC1REG	set	409
  5022  019D                     _RC1STAbits	set	413
  5023  019A                     _TX1REG	set	410
  5024  019C                     _SP1BRGH	set	412
  5025  019B                     _SP1BRGL	set	411
  5026  019E                     _TX1STA	set	414
  5027  019D                     _RC1STA	set	413
  5028  019F                     _BAUD1CON	set	415
  5029  020E                     _WPUC	set	526
  5030  020C                     _WPUA	set	524
  5031  020D                     _WPUB	set	525
  5032  0295                     _CCPR2L	set	661
  5033  0296                     _CCPR2H	set	662
  5034  0298                     _CCP2CAP	set	664
  5035  0297                     _CCP2CON	set	663
  5036  029F                     _CCPTMRSbits	set	671
  5037  0291                     _CCPR1L	set	657
  5038  0292                     _CCPR1H	set	658
  5039  0294                     _CCP1CAP	set	660
  5040  0293                     _CCP1CON	set	659
  5041  028E                     _ODCONC	set	654
  5042  028D                     _ODCONB	set	653
  5043  028C                     _ODCONA	set	652
  5044  038C                     _INLVLA	set	908
  5045  038E                     _INLVLC	set	910
  5046  0397                     _IOCCPbits	set	919
  5047  0398                     _IOCCNbits	set	920
  5048  0399                     _IOCCFbits	set	921
  5049  0414                     _T3GCONbits	set	1044
  5050  0413                     _T3CONbits	set	1043
  5051  0411                     _TMR3L	set	1041
  5052  0412                     _TMR3H	set	1042
  5053  0414                     _T3GCON	set	1044
  5054  0413                     _T3CON	set	1043
  5055  041B                     _T5GCONbits	set	1051
  5056  041A                     _T5CONbits	set	1050
  5057  0418                     _TMR5L	set	1048
  5058  0419                     _TMR5H	set	1049
  5059  041B                     _T5GCON	set	1051
  5060  041A                     _T5CON	set	1050
  5061  091E                     _OSCTUNE	set	2334
  5062  091F                     _OSCFRQ	set	2335
  5063  091D                     _OSCEN	set	2333
  5064  091B                     _OSCCON3	set	2331
  5065  0919                     _OSCCON1	set	2329
  5066  0E14                     _CCP1PPSbits	set	3604
  5067  0E10                     _INTPPSbits	set	3600
  5068  0E24                     _RXPPSbits	set	3620
  5069  0E15                     _CCP2PPSbits	set	3605
  5070  0E0F                     _PPSLOCKbits	set	3599
  5071  0E0F                     _PPSLOCK	set	3599
  5072  0E9D                     _RB5PPSbits	set	3741
  5073                           
  5074                           ; #config settings
  5075  0000                     
  5076                           	psect	cinit
  5077  0068                     start_initialization:	
  5078  0068                     __initialization:	
  5079                           
  5080                           ; Initialize objects allocated to BANK0
  5081  0068  3180  2003  3180   	fcall	__pidataBANK0	;fetch initializer
  5082  006B  00EF               	movwf	__pdataBANK0& (0+127)
  5083                           
  5084                           ; Initialize objects allocated to BANK1
  5085  006C  3087               	movlw	low __pidataBANK1
  5086  006D  0084               	movwf	4
  5087  006E  308D               	movlw	(high __pidataBANK1)| (0+128)
  5088  006F  0085               	movwf	5
  5089  0070  30E6               	movlw	low __pdataBANK1
  5090  0071  0086               	movwf	6
  5091  0072  3000               	movlw	high __pdataBANK1
  5092  0073  0087               	movwf	7
  5093  0074  3008               	movlw	8
  5094  0075  318D  257A  3180   	fcall	init_ram
  5095                           
  5096                           ; Clear objects allocated to COMMON
  5097  0078  01F8               	clrf	__pbssCOMMON& (0+127)
  5098  0079  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  5099  007A  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  5100  007B  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  5101  007C  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  5102  007D  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
  5103                           
  5104                           ; Clear objects allocated to BANK0
  5105  007E  304B               	movlw	low __pbssBANK0
  5106  007F  0084               	movwf	4
  5107  0080  3000               	movlw	high __pbssBANK0
  5108  0081  0085               	movwf	5
  5109  0082  301F               	movlw	31
  5110  0083  318D  2574  3180   	fcall	clear_ram0
  5111                           
  5112                           ; Clear objects allocated to BANK1
  5113  0086  30A0               	movlw	low __pbssBANK1
  5114  0087  0084               	movwf	4
  5115  0088  3000               	movlw	high __pbssBANK1
  5116  0089  0085               	movwf	5
  5117  008A  3046               	movlw	70
  5118  008B  318D  2574  3180   	fcall	clear_ram0
  5119                           
  5120                           ; Clear objects allocated to BANK2
  5121  008E  3020               	movlw	low __pbssBANK2
  5122  008F  0084               	movwf	4
  5123  0090  3001               	movlw	high __pbssBANK2
  5124  0091  0085               	movwf	5
  5125  0092  303A               	movlw	58
  5126  0093  318D  2574  3180   	fcall	clear_ram0
  5127                           
  5128                           ; Clear objects allocated to BANK3
  5129  0096  30A0               	movlw	low __pbssBANK3
  5130  0097  0084               	movwf	4
  5131  0098  3001               	movlw	high __pbssBANK3
  5132  0099  0085               	movwf	5
  5133  009A  3040               	movlw	64
  5134  009B  318D  2574         	fcall	clear_ram0
  5135  009D                     end_of_initialization:	
  5136                           ;End of C runtime variable initialization code
  5137                           
  5138  009D                     __end_of__initialization:	
  5139  009D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5140  009E  0020               	movlb	0
  5141  009F  3181  29DC         	ljmp	_main	;jump to C main() function
  5142                           
  5143                           	psect	bssCOMMON
  5144  0078                     __pbssCOMMON:	
  5145  0078                     _u8regsize:	
  5146  0078                     	ds	1
  5147  0079                     _flagForFirstRevolution:	
  5148  0079                     	ds	1
  5149  007A                     _EncPulseError:	
  5150  007A                     	ds	1
  5151  007B                     _eusartRxHead:	
  5152  007B                     	ds	1
  5153  007C                     _eusartTxTail:	
  5154  007C                     	ds	1
  5155  007D                     _eusartTxHead:	
  5156  007D                     	ds	1
  5157                           
  5158                           	psect	bssBANK0
  5159  004B                     __pbssBANK0:	
  5160  004B                     _EncEdgeTimeInterval:	
  5161  004B                     	ds	4
  5162  004F                     _LedON_Duration_msec:	
  5163  004F                     	ds	2
  5164  0051                     _EncoderPosition:	
  5165  0051                     	ds	2
  5166  0053                     _EncPulseOpState:	
  5167  0053                     	ds	2
  5168  0055                     _OldEncPulseOpState:	
  5169  0055                     	ds	2
  5170  0057                     _au16regs:	
  5171  0057                     	ds	1
  5172  0058                     _u8lastRec:	
  5173  0058                     	ds	1
  5174  0059                     _u8BufferSize:	
  5175  0059                     	ds	1
  5176  005A                     _u8lastError:	
  5177  005A                     	ds	1
  5178  005B                     _u8state:	
  5179  005B                     	ds	1
  5180  005C                     _u8id:	
  5181  005C                     	ds	1
  5182  005D                     _Led_ON:	
  5183  005D                     	ds	1
  5184  005E                     _toggle:	
  5185  005E                     	ds	1
  5186  005F                     _u8query:	
  5187  005F                     	ds	1
  5188  0060                     _u8state_t:	
  5189  0060                     	ds	1
  5190  0061                     _delayFlag:	
  5191  0061                     	ds	1
  5192  0062                     _NutRunstate:	
  5193  0062                     	ds	1
  5194  0063                     _ShutdownDetected:	
  5195  0063                     	ds	1
  5196  0064                     _EncEdgeGotFlag:	
  5197  0064                     	ds	1
  5198  0065                     _EncoderPositionOneCycle:	
  5199  0065                     	ds	1
  5200  0066                     _multipleTimecheck1:	
  5201  0066                     	ds	1
  5202  0067                     _multipleTimecheck0:	
  5203  0067                     	ds	1
  5204  0068                     _eusartRxCount:	
  5205  0068                     	ds	1
  5206  0069                     _eusartRxTail:	
  5207  0069                     	ds	1
  5208                           
  5209                           	psect	dataBANK0
  5210  006F                     __pdataBANK0:	
  5211  006F                     _LED_Color:	
  5212  006F                     	ds	1
  5213                           
  5214                           	psect	bssBANK1
  5215  00A0                     __pbssBANK1:	
  5216  00A0                     _au8Buffer:	
  5217  00A0                     	ds	32
  5218  00C0                     _u32time:	
  5219  00C0                     	ds	4
  5220  00C4                     _TimertickMsec:	
  5221  00C4                     	ds	4
  5222  00C8                     _IdleTimeOnShutOff:	
  5223  00C8                     	ds	4
  5224  00CC                     _EncEdgeMinTimeIntSumAvg:	
  5225  00CC                     	ds	4
  5226  00D0                     _u16timeOut:	
  5227  00D0                     	ds	2
  5228  00D2                     _u16errCnt:	
  5229  00D2                     	ds	2
  5230  00D4                     _u16OutCnt:	
  5231  00D4                     	ds	2
  5232  00D6                     _u16InCnt:	
  5233  00D6                     	ds	2
  5234  00D8                     _Blick_tickPoint:	
  5235  00D8                     	ds	2
  5236  00DA                     _Blick_tickPointMsec:	
  5237  00DA                     	ds	2
  5238  00DC                     _LED_msec_Cnt:	
  5239  00DC                     	ds	2
  5240  00DE                     _delayCount:	
  5241  00DE                     	ds	2
  5242  00E0                     _EncoderPositionAtIndex:	
  5243  00E0                     	ds	2
  5244  00E2                     _OldEncPos:	
  5245  00E2                     	ds	2
  5246  00E4                     _NutRunLength:	
  5247  00E4                     	ds	2
  5248                           
  5249                           	psect	dataBANK1
  5250  00E6                     __pdataBANK1:	
  5251  00E6                     _EncSpdredFact:	
  5252  00E6                     	ds	4
  5253  00EA                     _EncEdgeMinTimeInterval:	
  5254  00EA                     	ds	4
  5255                           
  5256                           	psect	bssBANK2
  5257  0120                     __pbssBANK2:	
  5258  0120                     _telegram:	
  5259  0120                     	ds	14
  5260  012E                     _u32timeOut:	
  5261  012E                     	ds	4
  5262  0132                     _u32wait:	
  5263  0132                     	ds	4
  5264  0136                     _EncEdgeTimeIntervalOld:	
  5265  0136                     	ds	4
  5266  013A                     _au16data:	
  5267  013A                     	ds	32
  5268                           
  5269                           	psect	bssBANK3
  5270  01A0                     __pbssBANK3:	
  5271  01A0                     _eusartRxBuffer:	
  5272  01A0                     	ds	32
  5273  01C0                     _eusartTxBuffer:	
  5274  01C0                     	ds	32
  5275                           
  5276                           	psect	inittext
  5277  0D7A                     init_ram:	
  5278  0D7A  00FE               	movwf	126
  5279  0D7B                     initloop:	
  5280  0D7B  0012               	moviw fsr0++
  5281  0D7C  001E               	movwi fsr1++
  5282  0D7D  0BFE               	decfsz	126,f
  5283  0D7E  2D7B               	goto	initloop
  5284  0D7F  3400               	retlw	0
  5285                           
  5286                           	psect	clrtext
  5287  0D74                     clear_ram0:	
  5288                           ;	Called with FSR0 containing the base address, and
  5289                           ;	WREG with the size to clear
  5290                           
  5291  0D74  0064               	clrwdt	;clear the watchdog before getting into this loop
  5292  0D75                     clrloop0:	
  5293  0D75  0180               	clrf	0	;clear RAM location pointed to by FSR
  5294  0D76  3101               	addfsr 0,1
  5295  0D77  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5296  0D78  2D75               	goto	clrloop0	;have we reached the end yet?
  5297  0D79  3400               	retlw	0	;all done for this memory range, return
  5298                           
  5299                           	psect	cstackCOMMON
  5300  0070                     __pcstackCOMMON:	
  5301  0070                     ?_TMR5_DefaultInterruptHandler:	
  5302  0070                     ??_TMR5_DefaultInterruptHandler:	
  5303                           ; 1 bytes @ 0x0
  5304                           
  5305  0070                     ?_TMR5_StartTimer:	
  5306                           ; 1 bytes @ 0x0
  5307                           
  5308  0070                     ?_Timer5_Overflow:	
  5309                           ; 1 bytes @ 0x0
  5310                           
  5311  0070                     ??_Timer5_Overflow:	
  5312                           ; 1 bytes @ 0x0
  5313                           
  5314  0070                     ?_TMR3_DefaultInterruptHandler:	
  5315                           ; 1 bytes @ 0x0
  5316                           
  5317  0070                     ?_TMR3_StartTimer:	
  5318                           ; 1 bytes @ 0x0
  5319                           
  5320  0070                     ?_Timer3_Overflow:	
  5321                           ; 1 bytes @ 0x0
  5322                           
  5323  0070                     ??_Timer3_Overflow:	
  5324                           ; 1 bytes @ 0x0
  5325                           
  5326  0070                     ?_TMR0_DefaultInterruptHandler:	
  5327                           ; 1 bytes @ 0x0
  5328                           
  5329  0070                     ??_TMR0_DefaultInterruptHandler:	
  5330                           ; 1 bytes @ 0x0
  5331                           
  5332  0070                     ?_TMR0_StartTimer:	
  5333                           ; 1 bytes @ 0x0
  5334                           
  5335  0070                     ?_TMR0_CallBack:	
  5336                           ; 1 bytes @ 0x0
  5337                           
  5338  0070                     ?_Timer0_tick10msecFunc:	
  5339                           ; 1 bytes @ 0x0
  5340                           
  5341  0070                     ??_Timer0_tick10msecFunc:	
  5342                           ; 1 bytes @ 0x0
  5343                           
  5344  0070                     ?_IOCCF4_DefaultInterruptHandler:	
  5345                           ; 1 bytes @ 0x0
  5346                           
  5347  0070                     ??_IOCCF4_DefaultInterruptHandler:	
  5348                           ; 1 bytes @ 0x0
  5349                           
  5350  0070                     ?_IOCCF5_DefaultInterruptHandler:	
  5351                           ; 1 bytes @ 0x0
  5352                           
  5353  0070                     ??_IOCCF5_DefaultInterruptHandler:	
  5354                           ; 1 bytes @ 0x0
  5355                           
  5356  0070                     ?_IOCCF4_ISR:	
  5357                           ; 1 bytes @ 0x0
  5358                           
  5359  0070                     ??_IOCCF4_ISR:	
  5360                           ; 1 bytes @ 0x0
  5361                           
  5362  0070                     ?_IOCCF5_ISR:	
  5363                           ; 1 bytes @ 0x0
  5364                           
  5365  0070                     ??_IOCCF5_ISR:	
  5366                           ; 1 bytes @ 0x0
  5367                           
  5368  0070                     ?_EncA_PulseEdgeEvent:	
  5369                           ; 1 bytes @ 0x0
  5370                           
  5371  0070                     ?_INT_ISR:	
  5372                           ; 1 bytes @ 0x0
  5373                           
  5374  0070                     ??_INT_ISR:	
  5375                           ; 1 bytes @ 0x0
  5376                           
  5377  0070                     ?_OSCILLATOR_Initialize:	
  5378                           ; 1 bytes @ 0x0
  5379                           
  5380  0070                     ?_WDT_Initialize:	
  5381                           ; 1 bytes @ 0x0
  5382                           
  5383  0070                     ?_EXT_INT_Initialize:	
  5384                           ; 1 bytes @ 0x0
  5385                           
  5386  0070                     ?_INT_CallBack:	
  5387                           ; 1 bytes @ 0x0
  5388                           
  5389  0070                     ??_INT_CallBack:	
  5390                           ; 1 bytes @ 0x0
  5391                           
  5392  0070                     ?_getEncoderState:	
  5393                           ; 1 bytes @ 0x0
  5394                           
  5395  0070                     ?_NutRunCycleStart:	
  5396                           ; 1 bytes @ 0x0
  5397                           
  5398  0070                     ?_LedONStatusBusy:	
  5399                           ; 1 bytes @ 0x0
  5400                           
  5401  0070                     ?_Modbusinit:	
  5402                           ; 1 bytes @ 0x0
  5403                           
  5404  0070                     ?_ModbuspollMaster:	
  5405                           ; 1 bytes @ 0x0
  5406                           
  5407  0070                     ?_ModbusgetState:	
  5408                           ; 1 bytes @ 0x0
  5409                           
  5410  0070                     ?_NutRunCycleReset:	
  5411                           ; 1 bytes @ 0x0
  5412                           
  5413  0070                     ?_LedON_Control_10msec:	
  5414                           ; 1 bytes @ 0x0
  5415                           
  5416  0070                     ??_LedON_Control_10msec:	
  5417                           ; 1 bytes @ 0x0
  5418                           
  5419  0070                     ?_sendTxBuffer:	
  5420                           ; 1 bytes @ 0x0
  5421                           
  5422  0070                     ?_getRxBuffer:	
  5423                           ; 1 bytes @ 0x0
  5424                           
  5425  0070                     ?_validateAnswer:	
  5426                           ; 1 bytes @ 0x0
  5427                           
  5428  0070                     ?_get_FC1:	
  5429                           ; 1 bytes @ 0x0
  5430                           
  5431  0070                     ?_get_FC3:	
  5432                           ; 1 bytes @ 0x0
  5433                           
  5434  0070                     ?_TMR5_Initialize:	
  5435                           ; 1 bytes @ 0x0
  5436                           
  5437  0070                     ?_TMR5_StopTimer:	
  5438                           ; 1 bytes @ 0x0
  5439                           
  5440  0070                     ?_TMR5_ISR:	
  5441                           ; 1 bytes @ 0x0
  5442                           
  5443  0070                     ??_TMR5_ISR:	
  5444                           ; 1 bytes @ 0x0
  5445                           
  5446  0070                     ?_TMR3_Initialize:	
  5447                           ; 1 bytes @ 0x0
  5448                           
  5449  0070                     ?_TMR3_StopTimer:	
  5450                           ; 1 bytes @ 0x0
  5451                           
  5452  0070                     ?_TMR3_ISR:	
  5453                           ; 1 bytes @ 0x0
  5454                           
  5455  0070                     ?_EUSART_Initialize:	
  5456                           ; 1 bytes @ 0x0
  5457                           
  5458  0070                     ?_EUSART_Read:	
  5459                           ; 1 bytes @ 0x0
  5460                           
  5461  0070                     ?_EUSART_Transmit_ISR:	
  5462                           ; 1 bytes @ 0x0
  5463                           
  5464  0070                     ??_EUSART_Transmit_ISR:	
  5465                           ; 1 bytes @ 0x0
  5466                           
  5467  0070                     ?_EUSART_Receive_ISR:	
  5468                           ; 1 bytes @ 0x0
  5469                           
  5470  0070                     ??_EUSART_Receive_ISR:	
  5471                           ; 1 bytes @ 0x0
  5472                           
  5473  0070                     ?_TMR0_Initialize:	
  5474                           ; 1 bytes @ 0x0
  5475                           
  5476  0070                     ?_TMR0_ISR:	
  5477                           ; 1 bytes @ 0x0
  5478                           
  5479  0070                     ?_PIN_MANAGER_Initialize:	
  5480                           ; 1 bytes @ 0x0
  5481                           
  5482  0070                     ?_PIN_MANAGER_IOC:	
  5483                           ; 1 bytes @ 0x0
  5484                           
  5485  0070                     ??_PIN_MANAGER_IOC:	
  5486                           ; 1 bytes @ 0x0
  5487                           
  5488  0070                     ?_CCP1_Initialize:	
  5489                           ; 1 bytes @ 0x0
  5490                           
  5491  0070                     ?_CCP1_CaptureISR:	
  5492                           ; 1 bytes @ 0x0
  5493                           
  5494  0070                     ?_CCP2_Initialize:	
  5495                           ; 1 bytes @ 0x0
  5496                           
  5497  0070                     ?_ADC_Initialize:	
  5498                           ; 1 bytes @ 0x0
  5499                           
  5500  0070                     ?_INTERRUPT_InterruptManager:	
  5501                           ; 1 bytes @ 0x0
  5502                           
  5503  0070                     ?_SYSTEM_Initialize:	
  5504                           ; 1 bytes @ 0x0
  5505                           
  5506  0070                     ?_INT_DefaultInterruptHandler:	
  5507                           ; 1 bytes @ 0x0
  5508                           
  5509  0070                     ??_INT_DefaultInterruptHandler:	
  5510                           ; 1 bytes @ 0x0
  5511                           
  5512  0070                     ?_main:	
  5513                           ; 1 bytes @ 0x0
  5514                           
  5515  0070                     ?_Serialavailable:	
  5516                           ; 1 bytes @ 0x0
  5517                           
  5518  0070                     ?_ClearSerialRxBuffer:	
  5519                           ; 1 bytes @ 0x0
  5520                           
  5521  0070                     ?_Serialread:	
  5522                           ; 1 bytes @ 0x0
  5523                           
  5524  0070                     ?_Serialwrite:	
  5525                           ; 1 bytes @ 0x0
  5526                           
  5527  0070                     Modbusinit@u8id:	
  5528                           ; 1 bytes @ 0x0
  5529                           
  5530  0070                     EncA_PulseEdgeEvent@capturedValue:	
  5531                           ; 1 bytes @ 0x0
  5532                           
  5533                           
  5534                           ; 2 bytes @ 0x0
  5535  0070                     	ds	2
  5536  0072                     ?_CCP1_CallBack:	
  5537  0072                     ??_EncA_PulseEdgeEvent:	
  5538                           ; 1 bytes @ 0x2
  5539                           
  5540  0072                     CCP1_CallBack@capturedValue:	
  5541                           ; 1 bytes @ 0x2
  5542                           
  5543                           
  5544                           ; 2 bytes @ 0x2
  5545  0072                     	ds	2
  5546  0074                     ??_TMR3_DefaultInterruptHandler:	
  5547  0074                     ??_TMR0_CallBack:	
  5548                           ; 1 bytes @ 0x4
  5549                           
  5550  0074                     ??_CCP1_CallBack:	
  5551                           ; 1 bytes @ 0x4
  5552                           
  5553  0074                     ??_TMR3_ISR:	
  5554                           ; 1 bytes @ 0x4
  5555                           
  5556  0074                     ??_TMR0_ISR:	
  5557                           ; 1 bytes @ 0x4
  5558                           
  5559  0074                     ??_CCP1_CaptureISR:	
  5560                           ; 1 bytes @ 0x4
  5561                           
  5562                           
  5563                           ; 1 bytes @ 0x4
  5564  0074                     	ds	1
  5565  0075                     CCP1_CaptureISR@module:	
  5566                           
  5567                           ; 2 bytes @ 0x5
  5568  0075                     	ds	2
  5569  0077                     ??_INTERRUPT_InterruptManager:	
  5570                           
  5571                           ; 1 bytes @ 0x7
  5572  0077                     	ds	1
  5573                           
  5574                           	psect	cstackBANK0
  5575  0020                     __pcstackBANK0:	
  5576  0020                     ?_TMR5_SetInterruptHandler:	
  5577  0020                     ??_TMR5_StartTimer:	
  5578                           ; 1 bytes @ 0x0
  5579                           
  5580  0020                     ?_TMR3_SetInterruptHandler:	
  5581                           ; 1 bytes @ 0x0
  5582                           
  5583  0020                     ??_TMR3_StartTimer:	
  5584                           ; 1 bytes @ 0x0
  5585                           
  5586  0020                     ?_TMR0_SetInterruptHandler:	
  5587                           ; 1 bytes @ 0x0
  5588                           
  5589  0020                     ??_TMR0_StartTimer:	
  5590                           ; 1 bytes @ 0x0
  5591                           
  5592  0020                     ?_IOCCF4_SetInterruptHandler:	
  5593                           ; 1 bytes @ 0x0
  5594                           
  5595  0020                     ?_IOCCF5_SetInterruptHandler:	
  5596                           ; 1 bytes @ 0x0
  5597                           
  5598  0020                     ??_OSCILLATOR_Initialize:	
  5599                           ; 1 bytes @ 0x0
  5600                           
  5601  0020                     ??_WDT_Initialize:	
  5602                           ; 1 bytes @ 0x0
  5603                           
  5604  0020                     ??_getEncoderState:	
  5605                           ; 1 bytes @ 0x0
  5606                           
  5607  0020                     ??_LedONStatusBusy:	
  5608                           ; 1 bytes @ 0x0
  5609                           
  5610  0020                     ?_ModbussetTimeOut:	
  5611                           ; 1 bytes @ 0x0
  5612                           
  5613  0020                     ??_ModbusgetState:	
  5614                           ; 1 bytes @ 0x0
  5615                           
  5616  0020                     ??_NutRunCycleReset:	
  5617                           ; 1 bytes @ 0x0
  5618                           
  5619  0020                     ??_TMR5_StopTimer:	
  5620                           ; 1 bytes @ 0x0
  5621                           
  5622  0020                     ?_TMR5_WriteTimer:	
  5623                           ; 1 bytes @ 0x0
  5624                           
  5625  0020                     ??_TMR3_StopTimer:	
  5626                           ; 1 bytes @ 0x0
  5627                           
  5628  0020                     ?_TMR3_WriteTimer:	
  5629                           ; 1 bytes @ 0x0
  5630                           
  5631  0020                     ??_EUSART_Initialize:	
  5632                           ; 1 bytes @ 0x0
  5633                           
  5634  0020                     ??_EUSART_Read:	
  5635                           ; 1 bytes @ 0x0
  5636                           
  5637  0020                     ??_CCP1_Initialize:	
  5638                           ; 1 bytes @ 0x0
  5639                           
  5640  0020                     ??_CCP2_Initialize:	
  5641                           ; 1 bytes @ 0x0
  5642                           
  5643  0020                     ??_ADC_Initialize:	
  5644                           ; 1 bytes @ 0x0
  5645                           
  5646  0020                     ?_INT_SetInterruptHandler:	
  5647                           ; 1 bytes @ 0x0
  5648                           
  5649  0020                     ?_delayMsec:	
  5650                           ; 1 bytes @ 0x0
  5651                           
  5652  0020                     ??_Serialavailable:	
  5653                           ; 1 bytes @ 0x0
  5654                           
  5655  0020                     ??_Serialwrite:	
  5656                           ; 1 bytes @ 0x0
  5657                           
  5658  0020                     ?___bmul:	
  5659                           ; 1 bytes @ 0x0
  5660                           
  5661  0020                     ?_calcCRC:	
  5662                           ; 1 bytes @ 0x0
  5663                           
  5664  0020                     ?_wordConvert:	
  5665                           ; 2 bytes @ 0x0
  5666                           
  5667  0020                     ?___wmul:	
  5668                           ; 2 bytes @ 0x0
  5669                           
  5670  0020                     ?___awdiv:	
  5671                           ; 2 bytes @ 0x0
  5672                           
  5673  0020                     ?___lwdiv:	
  5674                           ; 2 bytes @ 0x0
  5675                           
  5676  0020                     ?_millis:	
  5677                           ; 2 bytes @ 0x0
  5678                           
  5679  0020                     Serialwrite@temp:	
  5680                           ; 4 bytes @ 0x0
  5681                           
  5682  0020                     wordConvert@lByte:	
  5683                           ; 1 bytes @ 0x0
  5684                           
  5685  0020                     ___bmul@multiplicand:	
  5686                           ; 1 bytes @ 0x0
  5687                           
  5688  0020                     TMR5_WriteTimer@timerVal:	
  5689                           ; 1 bytes @ 0x0
  5690                           
  5691  0020                     TMR5_SetInterruptHandler@InterruptHandler:	
  5692                           ; 2 bytes @ 0x0
  5693                           
  5694  0020                     TMR3_WriteTimer@timerVal:	
  5695                           ; 2 bytes @ 0x0
  5696                           
  5697  0020                     TMR3_SetInterruptHandler@InterruptHandler:	
  5698                           ; 2 bytes @ 0x0
  5699                           
  5700  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  5701                           ; 2 bytes @ 0x0
  5702                           
  5703  0020                     IOCCF4_SetInterruptHandler@InterruptHandler:	
  5704                           ; 2 bytes @ 0x0
  5705                           
  5706  0020                     IOCCF5_SetInterruptHandler@InterruptHandler:	
  5707                           ; 2 bytes @ 0x0
  5708                           
  5709  0020                     INT_SetInterruptHandler@InterruptHandler:	
  5710                           ; 2 bytes @ 0x0
  5711                           
  5712  0020                     ModbussetTimeOut@u16timeOut:	
  5713                           ; 2 bytes @ 0x0
  5714                           
  5715  0020                     ___wmul@multiplier:	
  5716                           ; 2 bytes @ 0x0
  5717                           
  5718  0020                     ___awdiv@divisor:	
  5719                           ; 2 bytes @ 0x0
  5720                           
  5721  0020                     ___lwdiv@divisor:	
  5722                           ; 2 bytes @ 0x0
  5723                           
  5724  0020                     delayMsec@timems:	
  5725                           ; 2 bytes @ 0x0
  5726                           
  5727                           
  5728                           ; 4 bytes @ 0x0
  5729  0020                     	ds	1
  5730  0021                     ?_Serialbegin:	
  5731  0021                     ??___bmul:	
  5732                           ; 1 bytes @ 0x1
  5733                           
  5734  0021                     EUSART_Read@readValue:	
  5735                           ; 1 bytes @ 0x1
  5736                           
  5737  0021                     Serialbegin@baud:	
  5738                           ; 1 bytes @ 0x1
  5739                           
  5740                           
  5741                           ; 4 bytes @ 0x1
  5742  0021                     	ds	1
  5743  0022                     ??_TMR5_SetInterruptHandler:	
  5744  0022                     ??_TMR3_SetInterruptHandler:	
  5745                           ; 1 bytes @ 0x2
  5746                           
  5747  0022                     ??_TMR0_SetInterruptHandler:	
  5748                           ; 1 bytes @ 0x2
  5749                           
  5750  0022                     ??_IOCCF4_SetInterruptHandler:	
  5751                           ; 1 bytes @ 0x2
  5752                           
  5753  0022                     ??_IOCCF5_SetInterruptHandler:	
  5754                           ; 1 bytes @ 0x2
  5755                           
  5756  0022                     ??_EXT_INT_Initialize:	
  5757                           ; 1 bytes @ 0x2
  5758                           
  5759  0022                     ??_NutRunCycleStart:	
  5760                           ; 1 bytes @ 0x2
  5761                           
  5762  0022                     ??_ModbussetTimeOut:	
  5763                           ; 1 bytes @ 0x2
  5764                           
  5765  0022                     ??_getRxBuffer:	
  5766                           ; 1 bytes @ 0x2
  5767                           
  5768  0022                     ??_calcCRC:	
  5769                           ; 1 bytes @ 0x2
  5770                           
  5771  0022                     ??_wordConvert:	
  5772                           ; 1 bytes @ 0x2
  5773                           
  5774  0022                     ??_TMR5_Initialize:	
  5775                           ; 1 bytes @ 0x2
  5776                           
  5777  0022                     ??_TMR5_WriteTimer:	
  5778                           ; 1 bytes @ 0x2
  5779                           
  5780  0022                     ??_TMR3_Initialize:	
  5781                           ; 1 bytes @ 0x2
  5782                           
  5783  0022                     ??_TMR3_WriteTimer:	
  5784                           ; 1 bytes @ 0x2
  5785                           
  5786  0022                     ??_TMR0_Initialize:	
  5787                           ; 1 bytes @ 0x2
  5788                           
  5789  0022                     ??_PIN_MANAGER_Initialize:	
  5790                           ; 1 bytes @ 0x2
  5791                           
  5792  0022                     ??_INT_SetInterruptHandler:	
  5793                           ; 1 bytes @ 0x2
  5794                           
  5795  0022                     ??_ClearSerialRxBuffer:	
  5796                           ; 1 bytes @ 0x2
  5797                           
  5798  0022                     ??_Serialread:	
  5799                           ; 1 bytes @ 0x2
  5800                           
  5801  0022                     PIN_MANAGER_Initialize@state:	
  5802                           ; 1 bytes @ 0x2
  5803                           
  5804  0022                     ___bmul@product:	
  5805                           ; 1 bytes @ 0x2
  5806                           
  5807  0022                     ___wmul@multiplicand:	
  5808                           ; 1 bytes @ 0x2
  5809                           
  5810  0022                     ___awdiv@dividend:	
  5811                           ; 2 bytes @ 0x2
  5812                           
  5813  0022                     ___lwdiv@dividend:	
  5814                           ; 2 bytes @ 0x2
  5815                           
  5816                           
  5817                           ; 2 bytes @ 0x2
  5818  0022                     	ds	1
  5819  0023                     ??_SYSTEM_Initialize:	
  5820  0023                     ClearSerialRxBuffer@bdummy:	
  5821                           ; 1 bytes @ 0x3
  5822                           
  5823  0023                     getRxBuffer@bBuffOverflow:	
  5824                           ; 1 bytes @ 0x3
  5825                           
  5826  0023                     ___bmul@multiplier:	
  5827                           ; 1 bytes @ 0x3
  5828                           
  5829                           
  5830                           ; 1 bytes @ 0x3
  5831  0023                     	ds	1
  5832  0024                     ??_millis:	
  5833  0024                     ??_delayMsec:	
  5834                           ; 1 bytes @ 0x4
  5835                           
  5836  0024                     ??___wmul:	
  5837                           ; 1 bytes @ 0x4
  5838                           
  5839  0024                     ??___awdiv:	
  5840                           ; 1 bytes @ 0x4
  5841                           
  5842  0024                     ??___lwdiv:	
  5843                           ; 1 bytes @ 0x4
  5844                           
  5845  0024                     calcCRC@temp2:	
  5846                           ; 1 bytes @ 0x4
  5847                           
  5848  0024                     ___wmul@product:	
  5849                           ; 2 bytes @ 0x4
  5850                           
  5851                           
  5852                           ; 2 bytes @ 0x4
  5853  0024                     	ds	1
  5854  0025                     ??_Modbusinit:	
  5855  0025                     ??_Serialbegin:	
  5856                           ; 1 bytes @ 0x5
  5857                           
  5858  0025                     ___awdiv@counter:	
  5859                           ; 1 bytes @ 0x5
  5860                           
  5861  0025                     ___lwdiv@quotient:	
  5862                           ; 1 bytes @ 0x5
  5863                           
  5864                           
  5865                           ; 2 bytes @ 0x5
  5866  0025                     	ds	1
  5867  0026                     ___awdiv@sign:	
  5868  0026                     calcCRC@flag:	
  5869                           ; 1 bytes @ 0x6
  5870                           
  5871                           
  5872                           ; 2 bytes @ 0x6
  5873  0026                     	ds	1
  5874  0027                     wordConvert@hByte:	
  5875  0027                     ___lwdiv@counter:	
  5876                           ; 1 bytes @ 0x7
  5877                           
  5878  0027                     ___awdiv@quotient:	
  5879                           ; 1 bytes @ 0x7
  5880                           
  5881                           
  5882                           ; 2 bytes @ 0x7
  5883  0027                     	ds	1
  5884  0028                     ?_LedONStartConfig:	
  5885  0028                     LedONStartConfig@LedONDurationSec:	
  5886                           ; 1 bytes @ 0x8
  5887                           
  5888  0028                     calcCRC@u8length:	
  5889                           ; 1 bytes @ 0x8
  5890                           
  5891                           
  5892                           ; 1 bytes @ 0x8
  5893  0028                     	ds	1
  5894  0029                     ??_get_FC1:	
  5895  0029                     ??_get_FC3:	
  5896                           ; 1 bytes @ 0x9
  5897                           
  5898  0029                     LedONStartConfig@LedONNumBlink:	
  5899                           ; 1 bytes @ 0x9
  5900                           
  5901  0029                     calcCRC@i:	
  5902                           ; 1 bytes @ 0x9
  5903                           
  5904                           
  5905                           ; 1 bytes @ 0x9
  5906  0029                     	ds	1
  5907  002A                     ??_LedONStartConfig:	
  5908  002A                     calcCRC@j:	
  5909                           ; 1 bytes @ 0xA
  5910                           
  5911                           
  5912                           ; 1 bytes @ 0xA
  5913  002A                     	ds	1
  5914  002B                     get_FC1@u8byte:	
  5915  002B                     get_FC3@u8byte:	
  5916                           ; 1 bytes @ 0xB
  5917                           
  5918  002B                     calcCRC@temp:	
  5919                           ; 1 bytes @ 0xB
  5920                           
  5921                           
  5922                           ; 2 bytes @ 0xB
  5923  002B                     	ds	1
  5924  002C                     LedONStartConfig@LEDcolor:	
  5925  002C                     get_FC1@i:	
  5926                           ; 1 bytes @ 0xC
  5927                           
  5928  002C                     get_FC3@i:	
  5929                           ; 1 bytes @ 0xC
  5930                           
  5931                           
  5932                           ; 1 bytes @ 0xC
  5933  002C                     	ds	1
  5934  002D                     ??_sendTxBuffer:	
  5935  002D                     ??_validateAnswer:	
  5936                           ; 1 bytes @ 0xD
  5937                           
  5938                           
  5939                           ; 1 bytes @ 0xD
  5940  002D                     	ds	4
  5941  0031                     sendTxBuffer@i:	
  5942                           
  5943                           ; 1 bytes @ 0x11
  5944  0031                     	ds	1
  5945  0032                     sendTxBuffer@u16crc:	
  5946  0032                     validateAnswer@u16MsgCRC:	
  5947                           ; 2 bytes @ 0x12
  5948                           
  5949                           
  5950                           ; 2 bytes @ 0x12
  5951  0032                     	ds	2
  5952  0034                     sendTxBuffer@i_1782:	
  5953  0034                     validateAnswer@u16MsgCRCcalc:	
  5954                           ; 2 bytes @ 0x14
  5955                           
  5956                           
  5957                           ; 2 bytes @ 0x14
  5958  0034                     	ds	2
  5959  0036                     ?_Modbusquery:	
  5960  0036                     validateAnswer@isSupported:	
  5961                           ; 1 bytes @ 0x16
  5962                           
  5963  0036                     Modbusquery@telegram:	
  5964                           ; 1 bytes @ 0x16
  5965                           
  5966                           
  5967                           ; 7 bytes @ 0x16
  5968  0036                     	ds	1
  5969  0037                     validateAnswer@i:	
  5970                           
  5971                           ; 1 bytes @ 0x17
  5972  0037                     	ds	1
  5973  0038                     ??_ModbuspollMaster:	
  5974                           
  5975                           ; 1 bytes @ 0x18
  5976  0038                     	ds	1
  5977  0039                     ModbuspollMaster@i8state:	
  5978                           
  5979                           ; 1 bytes @ 0x19
  5980  0039                     	ds	1
  5981  003A                     ModbuspollMaster@u8exception:	
  5982                           
  5983                           ; 1 bytes @ 0x1A
  5984  003A                     	ds	1
  5985  003B                     ModbuspollMaster@u8current:	
  5986                           
  5987                           ; 1 bytes @ 0x1B
  5988  003B                     	ds	2
  5989  003D                     ??_Modbusquery:	
  5990                           
  5991                           ; 1 bytes @ 0x1D
  5992  003D                     	ds	4
  5993  0041                     _Modbusquery$1760:	
  5994                           
  5995                           ; 2 bytes @ 0x21
  5996  0041                     	ds	2
  5997  0043                     Modbusquery@i:	
  5998                           
  5999                           ; 2 bytes @ 0x23
  6000  0043                     	ds	2
  6001  0045                     Modbusquery@u8regsno:	
  6002                           
  6003                           ; 1 bytes @ 0x25
  6004  0045                     	ds	1
  6005  0046                     Modbusquery@u8bytesno:	
  6006                           
  6007                           ; 1 bytes @ 0x26
  6008  0046                     	ds	1
  6009  0047                     Modbusquery@i_1762:	
  6010                           
  6011                           ; 2 bytes @ 0x27
  6012  0047                     	ds	2
  6013  0049                     ??_main:	
  6014                           
  6015                           ; 1 bytes @ 0x29
  6016  0049                     	ds	2
  6017                           
  6018                           	psect	maintext
  6019  01DC                     __pmaintext:	
  6020 ;;
  6021 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  6022 ;;
  6023 ;; *************** function _main *****************
  6024 ;; Defined at:
  6025 ;;		line 116 in file "main.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;		None
  6028 ;; Auto vars:     Size  Location     Type
  6029 ;;		None
  6030 ;; Return value:  Size  Location     Type
  6031 ;;                  1    wreg      void 
  6032 ;; Registers used:
  6033 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6034 ;; Tracked objects:
  6035 ;;		On entry : B1F/0
  6036 ;;		On exit  : 0/0
  6037 ;;		Unchanged: 0/0
  6038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6039 ;;      Params:         0       0       0       0       0       0       0       0
  6040 ;;      Locals:         0       0       0       0       0       0       0       0
  6041 ;;      Temps:          0       2       0       0       0       0       0       0
  6042 ;;      Totals:         0       2       0       0       0       0       0       0
  6043 ;;Total ram usage:        2 bytes
  6044 ;; Hardware stack levels required when called:    9
  6045 ;; This function calls:
  6046 ;;		_LedONStartConfig
  6047 ;;		_LedONStatusBusy
  6048 ;;		_ModbusgetState
  6049 ;;		_Modbusinit
  6050 ;;		_ModbuspollMaster
  6051 ;;		_Modbusquery
  6052 ;;		_ModbussetTimeOut
  6053 ;;		_NutRunCycleStart
  6054 ;;		_SYSTEM_Initialize
  6055 ;;		_TMR3_StopTimer
  6056 ;;		_TMR3_WriteTimer
  6057 ;;		_TMR5_StopTimer
  6058 ;;		_TMR5_WriteTimer
  6059 ;;		___bmul
  6060 ;;		_getEncoderState
  6061 ;;		_millis
  6062 ;; This function is called by:
  6063 ;;		Startup code after reset
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           
  6068                           ;psect for function _main
  6069  01DC                     _main:	
  6070                           
  6071                           ;main.c: 119: SYSTEM_Initialize();
  6072                           
  6073                           ;incstack = 0
  6074                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6075  01DC  3187  27BB  3181   	fcall	_SYSTEM_Initialize
  6076                           
  6077                           ;main.c: 126: TMR3_WriteTimer(0);
  6078  01DF  3000               	movlw	0
  6079  01E0  0020               	movlb	0	; select bank0
  6080  01E1  00A0               	movwf	TMR3_WriteTimer@timerVal
  6081  01E2  00A1               	movwf	TMR3_WriteTimer@timerVal+1
  6082  01E3  318E  26F9  3181   	fcall	_TMR3_WriteTimer
  6083                           
  6084                           ;main.c: 127: TMR3_StopTimer();
  6085  01E6  318D  2560  3181   	fcall	_TMR3_StopTimer
  6086                           
  6087                           ;main.c: 128: TMR5_WriteTimer(0);
  6088  01E9  3000               	movlw	0
  6089  01EA  0020               	movlb	0	; select bank0
  6090  01EB  00A0               	movwf	TMR5_WriteTimer@timerVal
  6091  01EC  00A1               	movwf	TMR5_WriteTimer@timerVal+1
  6092  01ED  318F  2710  3181   	fcall	_TMR5_WriteTimer
  6093                           
  6094                           ;main.c: 129: TMR5_StopTimer();
  6095  01F0  318D  2563  3181   	fcall	_TMR5_StopTimer
  6096                           
  6097                           ;main.c: 134: INLVLC = 0xFF;
  6098  01F3  30FF               	movlw	255
  6099  01F4  0027               	movlb	7	; select bank7
  6100  01F5  008E               	movwf	14	;volatile
  6101                           
  6102                           ;main.c: 135: INLVLA = 0xFF;
  6103  01F6  30FF               	movlw	255
  6104  01F7  008C               	movwf	12	;volatile
  6105                           
  6106                           ;main.c: 137: getEncoderState();
  6107  01F8  318D  25FE  3181   	fcall	_getEncoderState
  6108                           
  6109                           ;main.c: 138: OldEncPulseOpState=EncPulseOpState;
  6110  01FB  0020               	movlb	0	; select bank0
  6111  01FC  0854               	movf	_EncPulseOpState+1,w
  6112  01FD  00D6               	movwf	_OldEncPulseOpState+1
  6113  01FE  0853               	movf	_EncPulseOpState,w
  6114  01FF  00D5               	movwf	_OldEncPulseOpState
  6115                           
  6116                           ;main.c: 139: NutRunCycleStart();
  6117  0200  318E  2657  3181   	fcall	_NutRunCycleStart
  6118                           
  6119                           ;main.c: 149: (INTCONbits.GIE = 1);
  6120  0203  178B               	bsf	11,7	;volatile
  6121                           
  6122                           ;main.c: 152: (INTCONbits.PEIE = 1);
  6123  0204  170B               	bsf	11,6	;volatile
  6124                           
  6125                           ;main.c: 154: LedONStartConfig(0, 1, 1);
  6126  0205  0020               	movlb	0	; select bank0
  6127  0206  01A8               	clrf	LedONStartConfig@LedONDurationSec
  6128  0207  0AA8               	incf	LedONStartConfig@LedONDurationSec,f
  6129  0208  01A9               	clrf	LedONStartConfig@LedONNumBlink
  6130  0209  0AA9               	incf	LedONStartConfig@LedONNumBlink,f
  6131  020A  3000               	movlw	0
  6132  020B  3184  24EC  3181   	fcall	_LedONStartConfig
  6133  020E                     l5076:	
  6134                           ;main.c: 155: while(LedONStatusBusy());
  6135                           
  6136  020E  318D  2548  3181   	fcall	_LedONStatusBusy
  6137  0211  3A00               	xorlw	0
  6138  0212  1D03               	skipz
  6139  0213  2A0E               	goto	l5076
  6140                           
  6141                           ;main.c: 161: do { LATBbits.LATB6 = 0; } while(0);
  6142  0214  0022               	movlb	2	; select bank2
  6143  0215  130D               	bcf	13,6	;volatile
  6144                           
  6145                           ;main.c: 170: telegram[0].u8id = 1;
  6146  0216  01A0               	clrf	_telegram^(0+256)
  6147  0217  0AA0               	incf	_telegram^(0+256),f
  6148                           
  6149                           ;main.c: 171: telegram[0].u8fct = 3;
  6150  0218  3003               	movlw	3
  6151  0219  0020               	movlb	0	; select bank0
  6152  021A  00C9               	movwf	??_main
  6153  021B  0849               	movf	??_main,w
  6154  021C  0022               	movlb	2	; select bank2
  6155  021D  00A1               	movwf	(_telegram^(0+256)+1)
  6156                           
  6157                           ;main.c: 172: telegram[0].u16RegAdd = 0;
  6158  021E  01A2               	clrf	(_telegram^(0+256)+2)
  6159  021F  01A3               	clrf	((_telegram+1)^(0+256)+2)
  6160                           
  6161                           ;main.c: 173: telegram[0].u16CoilsNo = 4;
  6162  0220  3004               	movlw	4
  6163  0221  00A4               	movwf	(_telegram^(0+256)+4)
  6164  0222  3000               	movlw	0
  6165  0223  00A5               	movwf	(_telegram^(0+256)+5)
  6166                           
  6167                           ;main.c: 174: telegram[0].au16reg = &(au16data[0]);
  6168  0224  303A               	movlw	(low (_au16data| (0+256)))& (0+255)
  6169  0225  0020               	movlb	0	; select bank0
  6170  0226  00C9               	movwf	??_main
  6171  0227  0849               	movf	??_main,w
  6172  0228  0022               	movlb	2	; select bank2
  6173  0229  00A6               	movwf	(low ((_telegram| (0+256)+6)))^0
  6174                           
  6175                           ;main.c: 177: telegram[1].u8id = 1;
  6176  022A  01A7               	clrf	(_telegram^(0+256)+7)
  6177  022B  0AA7               	incf	(_telegram^(0+256)+7),f
  6178                           
  6179                           ;main.c: 178: telegram[1].u8fct = 6;
  6180  022C  3006               	movlw	6
  6181  022D  0020               	movlb	0	; select bank0
  6182  022E  00C9               	movwf	??_main
  6183  022F  0849               	movf	??_main,w
  6184  0230  0022               	movlb	2	; select bank2
  6185  0231  00A8               	movwf	(_telegram^(0+256)+8)
  6186                           
  6187                           ;main.c: 179: telegram[1].u16RegAdd = 4;
  6188  0232  3004               	movlw	4
  6189  0233  00A9               	movwf	(_telegram^(0+256)+9)
  6190  0234  3000               	movlw	0
  6191  0235  00AA               	movwf	(_telegram^(0+256)+10)
  6192                           
  6193                           ;main.c: 180: telegram[1].u16CoilsNo = 1;
  6194  0236  3001               	movlw	1
  6195  0237  00AB               	movwf	(_telegram^(0+256)+11)
  6196  0238  3000               	movlw	0
  6197  0239  00AC               	movwf	(_telegram^(0+256)+12)
  6198                           
  6199                           ;main.c: 181: telegram[1].au16reg = &(au16data[4]);
  6200  023A  3042               	movlw	(low ((_au16data| (0+256)+8)))& (0+255)
  6201  023B  0020               	movlb	0	; select bank0
  6202  023C  00C9               	movwf	??_main
  6203  023D  0849               	movf	??_main,w
  6204  023E  0022               	movlb	2	; select bank2
  6205  023F  00AD               	movwf	(low ((_telegram| (0+256)+13)))^0
  6206                           
  6207                           ;main.c: 184: Modbusinit(0);
  6208  0240  3000               	movlw	0
  6209  0241  318F  2759  3181   	fcall	_Modbusinit
  6210                           
  6211                           ;main.c: 185: ModbussetTimeOut( 1000 );
  6212  0244  30E8               	movlw	232
  6213  0245  0020               	movlb	0	; select bank0
  6214  0246  00A0               	movwf	ModbussetTimeOut@u16timeOut
  6215  0247  3003               	movlw	3
  6216  0248  00A1               	movwf	ModbussetTimeOut@u16timeOut+1
  6217  0249  318D  2541  3181   	fcall	_ModbussetTimeOut
  6218                           
  6219                           ;main.c: 186: u32wait = millis() + 250;
  6220  024C  318E  2675  3181   	fcall	_millis
  6221  024F  30FA               	movlw	250
  6222  0250  0020               	movlb	0	; select bank0
  6223  0251  0720               	addwf	?_millis,w
  6224  0252  0022               	movlb	2	; select bank2
  6225  0253  00B2               	movwf	_u32wait^(0+256)
  6226  0254  3000               	movlw	0
  6227  0255  0020               	movlb	0	; select bank0
  6228  0256  3D21               	addwfc	?_millis+1,w
  6229  0257  0022               	movlb	2	; select bank2
  6230  0258  00B3               	movwf	(_u32wait+1)^(0+256)
  6231  0259  3000               	movlw	0
  6232  025A  0020               	movlb	0	; select bank0
  6233  025B  3D22               	addwfc	?_millis+2,w
  6234  025C  0022               	movlb	2	; select bank2
  6235  025D  00B4               	movwf	(_u32wait+2)^(0+256)
  6236  025E  3000               	movlw	0
  6237  025F  0020               	movlb	0	; select bank0
  6238  0260  3D23               	addwfc	?_millis+3,w
  6239  0261  0022               	movlb	2	; select bank2
  6240  0262  00B5               	movwf	(_u32wait+3)^(0+256)
  6241                           
  6242                           ;main.c: 187: u8state_t = 0;
  6243  0263  0020               	movlb	0	; select bank0
  6244  0264  01E0               	clrf	_u8state_t
  6245  0265  2AB6               	goto	l5120
  6246  0266                     l5106:	
  6247                           ;main.c: 193: case 0:
  6248                           
  6249                           ;main.c: 191: {
  6250                           ;main.c: 192: switch( u8state_t ) {
  6251                           
  6252                           ;main.c: 190: while (1)
  6253                           
  6254                           ;main.c: 188: u8query= 0;
  6255                           
  6256                           
  6257                           ;main.c: 194: if (millis() > u32wait) {u8state_t++; }
  6258  0266  318E  2675  3181   	fcall	_millis
  6259  0269  0020               	movlb	0	; select bank0
  6260  026A  0823               	movf	?_millis+3,w
  6261  026B  0022               	movlb	2	; select bank2
  6262  026C  0235               	subwf	(_u32wait+3)^(0+256),w
  6263  026D  1D03               	skipz
  6264  026E  2A7F               	goto	u3785
  6265  026F  0020               	movlb	0	; select bank0
  6266  0270  0822               	movf	?_millis+2,w
  6267  0271  0022               	movlb	2	; select bank2
  6268  0272  0234               	subwf	(_u32wait+2)^(0+256),w
  6269  0273  1D03               	skipz
  6270  0274  2A7F               	goto	u3785
  6271  0275  0020               	movlb	0	; select bank0
  6272  0276  0821               	movf	?_millis+1,w
  6273  0277  0022               	movlb	2	; select bank2
  6274  0278  0233               	subwf	(_u32wait+1)^(0+256),w
  6275  0279  1D03               	skipz
  6276  027A  2A7F               	goto	u3785
  6277  027B  0020               	movlb	0	; select bank0
  6278  027C  0820               	movf	?_millis,w
  6279  027D  0022               	movlb	2	; select bank2
  6280  027E  0232               	subwf	_u32wait^(0+256),w
  6281  027F                     u3785:	
  6282  027F  1803               	skipnc
  6283  0280  2ADF               	goto	l5134
  6284  0281  3001               	movlw	1
  6285  0282  0020               	movlb	0	; select bank0
  6286  0283  00C9               	movwf	??_main
  6287  0284  0849               	movf	??_main,w
  6288  0285  07E0               	addwf	_u8state_t,f
  6289                           
  6290                           ;main.c: 195: break;
  6291  0286  2ADF               	goto	l5134
  6292  0287                     l5110:	
  6293                           ;main.c: 196: case 1:
  6294                           
  6295                           
  6296                           ;main.c: 197: au16data[4]=au16data[4]+1;
  6297  0287  0022               	movlb	2	; select bank2
  6298  0288  0842               	movf	(_au16data^(0+256)+8),w
  6299  0289  3E01               	addlw	1
  6300  028A  00C2               	movwf	(_au16data^(0+256)+8)
  6301  028B  3000               	movlw	0
  6302  028C  3D43               	addwfc	((_au16data+1)^(0+256)+8),w
  6303  028D  00C3               	movwf	((_au16data+1)^(0+256)+8)
  6304                           
  6305                           ;main.c: 198: Modbusquery( telegram[u8query] );
  6306  028E  3007               	movlw	7
  6307  028F  0020               	movlb	0	; select bank0
  6308  0290  00C9               	movwf	??_main
  6309  0291  0849               	movf	??_main,w
  6310  0292  00A0               	movwf	___bmul@multiplicand
  6311  0293  085F               	movf	_u8query,w
  6312  0294  318E  26AA  3181   	fcall	___bmul
  6313  0297  3E20               	addlw	(low (_telegram| (0+256)))& (0+255)
  6314  0298  0086               	movwf	6
  6315  0299  3001               	movlw	1	; select bank2/3
  6316  029A  0087               	movwf	7
  6317  029B  3036               	movlw	low Modbusquery@telegram
  6318  029C  0084               	movwf	4
  6319  029D  3000               	movlw	high Modbusquery@telegram
  6320  029E  0085               	movwf	5
  6321  029F  3007               	movlw	7
  6322  02A0  0020               	movlb	0	; select bank0
  6323  02A1  00CA               	movwf	??_main+1
  6324  02A2                     u3790:	
  6325  02A2  0016               	moviw fsr1++
  6326  02A3  001A               	movwi fsr0++
  6327  02A4  0BCA               	decfsz	??_main+1,f
  6328  02A5  2AA2               	goto	u3790
  6329  02A6  3180  20A1  3181   	fcall	_Modbusquery
  6330                           
  6331                           ;main.c: 199: u8state_t++;
  6332  02A9  3001               	movlw	1
  6333  02AA  0020               	movlb	0	; select bank0
  6334  02AB  00C9               	movwf	??_main
  6335  02AC  0849               	movf	??_main,w
  6336  02AD  07E0               	addwf	_u8state_t,f
  6337                           
  6338                           ;main.c: 200: u8query++;
  6339  02AE  3001               	movlw	1
  6340  02AF  00C9               	movwf	??_main
  6341  02B0  0849               	movf	??_main,w
  6342  02B1  07DF               	addwf	_u8query,f
  6343                           
  6344                           ;main.c: 201: if (u8query > 1) u8query = 0;
  6345  02B2  3002               	movlw	2
  6346  02B3  025F               	subwf	_u8query,w
  6347  02B4  1C03               	skipc
  6348  02B5  2ADF               	goto	l5134
  6349  02B6                     l5120:	
  6350  02B6  01DF               	clrf	_u8query
  6351                           
  6352                           ;main.c: 202: break;
  6353  02B7  2ADF               	goto	l5134
  6354  02B8                     l5122:	
  6355                           ;main.c: 203: case 2:
  6356                           
  6357                           
  6358                           ;main.c: 204: ModbuspollMaster();
  6359  02B8  3182  22EC  3181   	fcall	_ModbuspollMaster
  6360                           
  6361                           ;main.c: 205: if (ModbusgetState() == COM_IDLE) {
  6362  02BB  318D  254B  3181   	fcall	_ModbusgetState
  6363  02BE  3A00               	xorlw	0
  6364  02BF  1D03               	skipz
  6365  02C0  2ADA               	goto	l5130
  6366                           
  6367                           ;main.c: 206: u8state_t = 0;
  6368  02C1  0020               	movlb	0	; select bank0
  6369  02C2  01E0               	clrf	_u8state_t
  6370                           
  6371                           ;main.c: 207: u32wait = millis() + 250;
  6372  02C3  318E  2675  3181   	fcall	_millis
  6373  02C6  30FA               	movlw	250
  6374  02C7  0020               	movlb	0	; select bank0
  6375  02C8  0720               	addwf	?_millis,w
  6376  02C9  0022               	movlb	2	; select bank2
  6377  02CA  00B2               	movwf	_u32wait^(0+256)
  6378  02CB  3000               	movlw	0
  6379  02CC  0020               	movlb	0	; select bank0
  6380  02CD  3D21               	addwfc	?_millis+1,w
  6381  02CE  0022               	movlb	2	; select bank2
  6382  02CF  00B3               	movwf	(_u32wait+1)^(0+256)
  6383  02D0  3000               	movlw	0
  6384  02D1  0020               	movlb	0	; select bank0
  6385  02D2  3D22               	addwfc	?_millis+2,w
  6386  02D3  0022               	movlb	2	; select bank2
  6387  02D4  00B4               	movwf	(_u32wait+2)^(0+256)
  6388  02D5  3000               	movlw	0
  6389  02D6  0020               	movlb	0	; select bank0
  6390  02D7  3D23               	addwfc	?_millis+3,w
  6391  02D8  0022               	movlb	2	; select bank2
  6392  02D9  00B5               	movwf	(_u32wait+3)^(0+256)
  6393  02DA                     l5130:	
  6394                           
  6395                           ;main.c: 209: }
  6396                           ;main.c: 210: au16data[4]=au16data[3];
  6397  02DA  0022               	movlb	2	; select bank2
  6398  02DB  0841               	movf	((_au16data+1)^(0+256)+6),w
  6399  02DC  00C3               	movwf	((_au16data+1)^(0+256)+8)
  6400  02DD  0840               	movf	(_au16data^(0+256)+6),w
  6401  02DE  00C2               	movwf	(_au16data^(0+256)+8)
  6402  02DF                     l5134:	
  6403                           ;main.c: 212: }
  6404                           
  6405                           ;main.c: 211: break;
  6406                           
  6407  02DF  0020               	movlb	0	; select bank0
  6408  02E0  0860               	movf	_u8state_t,w
  6409                           
  6410                           ; Switch size 1, requested type "space"
  6411                           ; Number of cases is 3, Range of values is 0 to 2
  6412                           ; switch strategies available:
  6413                           ; Name         Instructions Cycles
  6414                           ; simple_byte           10     6 (average)
  6415                           ; direct_byte           12     6 (fixed)
  6416                           ; jumptable            260     6 (fixed)
  6417                           ;	Chosen strategy is simple_byte
  6418  02E1  3A00               	xorlw	0	; case 0
  6419  02E2  1903               	skipnz
  6420  02E3  2A66               	goto	l5106
  6421  02E4  3A01               	xorlw	1	; case 1
  6422  02E5  1903               	skipnz
  6423  02E6  2A87               	goto	l5110
  6424  02E7  3A03               	xorlw	3	; case 2
  6425  02E8  1903               	skipnz
  6426  02E9  2AB8               	goto	l5122
  6427  02EA  2ADF               	goto	l5134
  6428  02EB  2ADF               	goto	l5134
  6429  02EC                     __end_of_main:	
  6430                           
  6431                           	psect	text1
  6432  0DFE                     __ptext1:	
  6433 ;; *************** function _getEncoderState *****************
  6434 ;; Defined at:
  6435 ;;		line 599 in file "main.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;		None
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;		None
  6440 ;; Return value:  Size  Location     Type
  6441 ;;                  1    wreg      void 
  6442 ;; Registers used:
  6443 ;;		wreg, status,2
  6444 ;; Tracked objects:
  6445 ;;		On entry : 0/0
  6446 ;;		On exit  : 0/0
  6447 ;;		Unchanged: 0/0
  6448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6449 ;;      Params:         0       0       0       0       0       0       0       0
  6450 ;;      Locals:         0       0       0       0       0       0       0       0
  6451 ;;      Temps:          0       0       0       0       0       0       0       0
  6452 ;;      Totals:         0       0       0       0       0       0       0       0
  6453 ;;Total ram usage:        0 bytes
  6454 ;; Hardware stack levels used:    1
  6455 ;; Hardware stack levels required when called:    5
  6456 ;; This function calls:
  6457 ;;		Nothing
  6458 ;; This function is called by:
  6459 ;;		_main
  6460 ;;		_OnEncPulseEdgeEvent
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           
  6465                           ;psect for function _getEncoderState
  6466  0DFE                     _getEncoderState:	
  6467                           
  6468                           ;main.c: 601: if(PORTCbits.RC5)
  6469                           
  6470                           ;incstack = 0
  6471                           ; Regs used in _getEncoderState: [wreg+status,2]
  6472  0DFE  0020               	movlb	0	; select bank0
  6473  0DFF  1E8E               	btfss	14,5	;volatile
  6474  0E00  2E06               	goto	l4104
  6475                           
  6476                           ;main.c: 602: {
  6477                           ;main.c: 604: EncPulseOpState= 1;
  6478  0E01  3001               	movlw	1
  6479  0E02  00D3               	movwf	_EncPulseOpState
  6480  0E03  3000               	movlw	0
  6481  0E04  00D4               	movwf	_EncPulseOpState+1
  6482                           
  6483                           ;main.c: 607: }
  6484  0E05  0008               	return
  6485  0E06                     l4104:	
  6486                           
  6487                           ;main.c: 608: else
  6488                           ;main.c: 609: {
  6489                           ;main.c: 611: EncPulseOpState= 0;
  6490  0E06  01D3               	clrf	_EncPulseOpState
  6491  0E07  01D4               	clrf	_EncPulseOpState+1
  6492  0E08  0008               	return
  6493  0E09                     __end_of_getEncoderState:	
  6494                           
  6495                           	psect	text2
  6496  0EAA                     __ptext2:	
  6497 ;; *************** function ___bmul *****************
  6498 ;; Defined at:
  6499 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  6500 ;; Parameters:    Size  Location     Type
  6501 ;;  multiplier      1    wreg     unsigned char 
  6502 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  6503 ;; Auto vars:     Size  Location     Type
  6504 ;;  multiplier      1    3[BANK0 ] unsigned char 
  6505 ;;  product         1    2[BANK0 ] unsigned char 
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  1    wreg      unsigned char 
  6508 ;; Registers used:
  6509 ;;		wreg, status,2, status,0
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6515 ;;      Params:         0       1       0       0       0       0       0       0
  6516 ;;      Locals:         0       2       0       0       0       0       0       0
  6517 ;;      Temps:          0       1       0       0       0       0       0       0
  6518 ;;      Totals:         0       4       0       0       0       0       0       0
  6519 ;;Total ram usage:        4 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; Hardware stack levels required when called:    5
  6522 ;; This function calls:
  6523 ;;		Nothing
  6524 ;; This function is called by:
  6525 ;;		_main
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           
  6530                           ;psect for function ___bmul
  6531  0EAA                     ___bmul:	
  6532                           
  6533                           ;incstack = 0
  6534                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6535                           ;___bmul@multiplier stored from wreg
  6536  0EAA  0020               	movlb	0	; select bank0
  6537  0EAB  00A3               	movwf	___bmul@multiplier
  6538  0EAC  01A2               	clrf	___bmul@product
  6539  0EAD                     l5044:	
  6540  0EAD  1C23               	btfss	___bmul@multiplier,0
  6541  0EAE  2EB3               	goto	l5048
  6542  0EAF  0820               	movf	___bmul@multiplicand,w
  6543  0EB0  00A1               	movwf	??___bmul
  6544  0EB1  0821               	movf	??___bmul,w
  6545  0EB2  07A2               	addwf	___bmul@product,f
  6546  0EB3                     l5048:	
  6547  0EB3  1003               	clrc
  6548  0EB4  0DA0               	rlf	___bmul@multiplicand,f
  6549  0EB5  1003               	clrc
  6550  0EB6  0CA3               	rrf	___bmul@multiplier,f
  6551  0EB7  0823               	movf	___bmul@multiplier,w
  6552  0EB8  1D03               	btfss	3,2
  6553  0EB9  2EAD               	goto	l5044
  6554  0EBA  0822               	movf	___bmul@product,w
  6555  0EBB  0008               	return
  6556  0EBC                     __end_of___bmul:	
  6557                           
  6558                           	psect	text3
  6559  0F10                     __ptext3:	
  6560 ;; *************** function _TMR5_WriteTimer *****************
  6561 ;; Defined at:
  6562 ;;		line 117 in file "mcc_generated_files/tmr5.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;  timerVal        2    0[BANK0 ] unsigned int 
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;		None
  6567 ;; Return value:  Size  Location     Type
  6568 ;;                  1    wreg      void 
  6569 ;; Registers used:
  6570 ;;		wreg, status,2
  6571 ;; Tracked objects:
  6572 ;;		On entry : 0/0
  6573 ;;		On exit  : 0/0
  6574 ;;		Unchanged: 0/0
  6575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6576 ;;      Params:         0       2       0       0       0       0       0       0
  6577 ;;      Locals:         0       0       0       0       0       0       0       0
  6578 ;;      Temps:          0       0       0       0       0       0       0       0
  6579 ;;      Totals:         0       2       0       0       0       0       0       0
  6580 ;;Total ram usage:        2 bytes
  6581 ;; Hardware stack levels used:    1
  6582 ;; Hardware stack levels required when called:    5
  6583 ;; This function calls:
  6584 ;;		Nothing
  6585 ;; This function is called by:
  6586 ;;		_main
  6587 ;;		_NutRunCycleStop
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           
  6592                           ;psect for function _TMR5_WriteTimer
  6593  0F10                     _TMR5_WriteTimer:	
  6594                           
  6595                           ;tmr5.c: 119: if (T5CONbits.T5SYNC == 1)
  6596                           
  6597                           ;incstack = 0
  6598                           ; Regs used in _TMR5_WriteTimer: [wreg+status,2]
  6599  0F10  0028               	movlb	8	; select bank8
  6600  0F11  1D1A               	btfss	26,2	;volatile
  6601  0F12  2F1E               	goto	l4006
  6602                           
  6603                           ;tmr5.c: 120: {
  6604                           ;tmr5.c: 122: T5CONbits.TMR5ON = 0;
  6605  0F13  101A               	bcf	26,0	;volatile
  6606                           
  6607                           ;tmr5.c: 125: TMR5H = (timerVal >> 8);
  6608  0F14  0020               	movlb	0	; select bank0
  6609  0F15  0821               	movf	TMR5_WriteTimer@timerVal+1,w
  6610  0F16  0028               	movlb	8	; select bank8
  6611  0F17  0099               	movwf	25	;volatile
  6612                           
  6613                           ;tmr5.c: 126: TMR5L = timerVal;
  6614  0F18  0020               	movlb	0	; select bank0
  6615  0F19  0820               	movf	TMR5_WriteTimer@timerVal,w
  6616  0F1A  0028               	movlb	8	; select bank8
  6617  0F1B  0098               	movwf	24	;volatile
  6618                           
  6619                           ;tmr5.c: 129: T5CONbits.TMR5ON =1;
  6620  0F1C  141A               	bsf	26,0	;volatile
  6621                           
  6622                           ;tmr5.c: 130: }
  6623  0F1D  0008               	return
  6624  0F1E                     l4006:	
  6625                           
  6626                           ;tmr5.c: 131: else
  6627                           ;tmr5.c: 132: {
  6628                           ;tmr5.c: 134: TMR5H = (timerVal >> 8);
  6629  0F1E  0020               	movlb	0	; select bank0
  6630  0F1F  0821               	movf	TMR5_WriteTimer@timerVal+1,w
  6631  0F20  0028               	movlb	8	; select bank8
  6632  0F21  0099               	movwf	25	;volatile
  6633                           
  6634                           ;tmr5.c: 135: TMR5L = timerVal;
  6635  0F22  0020               	movlb	0	; select bank0
  6636  0F23  0820               	movf	TMR5_WriteTimer@timerVal,w
  6637  0F24  0028               	movlb	8	; select bank8
  6638  0F25  0098               	movwf	24	;volatile
  6639  0F26  0008               	return
  6640  0F27                     __end_of_TMR5_WriteTimer:	
  6641                           
  6642                           	psect	text4
  6643  0D63                     __ptext4:	
  6644 ;; *************** function _TMR5_StopTimer *****************
  6645 ;; Defined at:
  6646 ;;		line 102 in file "mcc_generated_files/tmr5.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;		None
  6649 ;; Auto vars:     Size  Location     Type
  6650 ;;		None
  6651 ;; Return value:  Size  Location     Type
  6652 ;;                  1    wreg      void 
  6653 ;; Registers used:
  6654 ;;		None
  6655 ;; Tracked objects:
  6656 ;;		On entry : 0/0
  6657 ;;		On exit  : 0/0
  6658 ;;		Unchanged: 0/0
  6659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6660 ;;      Params:         0       0       0       0       0       0       0       0
  6661 ;;      Locals:         0       0       0       0       0       0       0       0
  6662 ;;      Temps:          0       0       0       0       0       0       0       0
  6663 ;;      Totals:         0       0       0       0       0       0       0       0
  6664 ;;Total ram usage:        0 bytes
  6665 ;; Hardware stack levels used:    1
  6666 ;; Hardware stack levels required when called:    5
  6667 ;; This function calls:
  6668 ;;		Nothing
  6669 ;; This function is called by:
  6670 ;;		_main
  6671 ;;		_NutRunCycleStop
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           
  6676                           ;psect for function _TMR5_StopTimer
  6677  0D63                     _TMR5_StopTimer:	
  6678                           
  6679                           ;tmr5.c: 105: T5CONbits.TMR5ON = 0;
  6680                           
  6681                           ;incstack = 0
  6682                           ; Regs used in _TMR5_StopTimer: []
  6683  0D63  0028               	movlb	8	; select bank8
  6684  0D64  101A               	bcf	26,0	;volatile
  6685  0D65  0008               	return
  6686  0D66                     __end_of_TMR5_StopTimer:	
  6687                           
  6688                           	psect	text5
  6689  0D60                     __ptext5:	
  6690 ;; *************** function _TMR3_StopTimer *****************
  6691 ;; Defined at:
  6692 ;;		line 102 in file "mcc_generated_files/tmr3.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;		None
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;		None
  6697 ;; Return value:  Size  Location     Type
  6698 ;;                  1    wreg      void 
  6699 ;; Registers used:
  6700 ;;		None
  6701 ;; Tracked objects:
  6702 ;;		On entry : 0/0
  6703 ;;		On exit  : 0/0
  6704 ;;		Unchanged: 0/0
  6705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6706 ;;      Params:         0       0       0       0       0       0       0       0
  6707 ;;      Locals:         0       0       0       0       0       0       0       0
  6708 ;;      Temps:          0       0       0       0       0       0       0       0
  6709 ;;      Totals:         0       0       0       0       0       0       0       0
  6710 ;;Total ram usage:        0 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:    5
  6713 ;; This function calls:
  6714 ;;		Nothing
  6715 ;; This function is called by:
  6716 ;;		_main
  6717 ;;		_NutRunCycleStop
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           
  6722                           ;psect for function _TMR3_StopTimer
  6723  0D60                     _TMR3_StopTimer:	
  6724                           
  6725                           ;tmr3.c: 105: T3CONbits.TMR3ON = 0;
  6726                           
  6727                           ;incstack = 0
  6728                           ; Regs used in _TMR3_StopTimer: []
  6729  0D60  0028               	movlb	8	; select bank8
  6730  0D61  1013               	bcf	19,0	;volatile
  6731  0D62  0008               	return
  6732  0D63                     __end_of_TMR3_StopTimer:	
  6733                           
  6734                           	psect	text6
  6735  07BB                     __ptext6:	
  6736 ;; *************** function _SYSTEM_Initialize *****************
  6737 ;; Defined at:
  6738 ;;		line 76 in file "mcc_generated_files/mcc.c"
  6739 ;; Parameters:    Size  Location     Type
  6740 ;;		None
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;		None
  6743 ;; Return value:  Size  Location     Type
  6744 ;;                  1    wreg      void 
  6745 ;; Registers used:
  6746 ;;		wreg, status,2, status,0, pclath, cstack
  6747 ;; Tracked objects:
  6748 ;;		On entry : 0/0
  6749 ;;		On exit  : 0/0
  6750 ;;		Unchanged: 0/0
  6751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6752 ;;      Params:         0       0       0       0       0       0       0       0
  6753 ;;      Locals:         0       0       0       0       0       0       0       0
  6754 ;;      Temps:          0       0       0       0       0       0       0       0
  6755 ;;      Totals:         0       0       0       0       0       0       0       0
  6756 ;;Total ram usage:        0 bytes
  6757 ;; Hardware stack levels used:    1
  6758 ;; Hardware stack levels required when called:    7
  6759 ;; This function calls:
  6760 ;;		_ADC_Initialize
  6761 ;;		_CCP1_Initialize
  6762 ;;		_CCP2_Initialize
  6763 ;;		_EUSART_Initialize
  6764 ;;		_EXT_INT_Initialize
  6765 ;;		_OSCILLATOR_Initialize
  6766 ;;		_PIN_MANAGER_Initialize
  6767 ;;		_TMR0_Initialize
  6768 ;;		_TMR3_Initialize
  6769 ;;		_TMR5_Initialize
  6770 ;;		_WDT_Initialize
  6771 ;; This function is called by:
  6772 ;;		_main
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           
  6777                           ;psect for function _SYSTEM_Initialize
  6778  07BB                     _SYSTEM_Initialize:	
  6779                           
  6780                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  6781                           
  6782                           ;incstack = 0
  6783                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6784  07BB  3185  2555  3187   	fcall	_PIN_MANAGER_Initialize
  6785                           
  6786                           ;mcc.c: 80: OSCILLATOR_Initialize();
  6787  07BE  318D  25B3  3187   	fcall	_OSCILLATOR_Initialize
  6788                           
  6789                           ;mcc.c: 81: WDT_Initialize();
  6790  07C1  318D  2566  3187   	fcall	_WDT_Initialize
  6791                           
  6792                           ;mcc.c: 82: CCP2_Initialize();
  6793  07C4  318D  25A1  3187   	fcall	_CCP2_Initialize
  6794                           
  6795                           ;mcc.c: 83: ADC_Initialize();
  6796  07C7  318D  2598  3187   	fcall	_ADC_Initialize
  6797                           
  6798                           ;mcc.c: 84: CCP1_Initialize();
  6799  07CA  318E  2666  3187   	fcall	_CCP1_Initialize
  6800                           
  6801                           ;mcc.c: 85: TMR3_Initialize();
  6802  07CD  318F  2774  3187   	fcall	_TMR3_Initialize
  6803                           
  6804                           ;mcc.c: 86: TMR5_Initialize();
  6805  07D0  318F  278F  3187   	fcall	_TMR5_Initialize
  6806                           
  6807                           ;mcc.c: 87: EXT_INT_Initialize();
  6808  07D3  318E  2615  3187   	fcall	_EXT_INT_Initialize
  6809                           
  6810                           ;mcc.c: 88: TMR0_Initialize();
  6811  07D6  318E  26E4  3187   	fcall	_TMR0_Initialize
  6812                           
  6813                           ;mcc.c: 89: EUSART_Initialize();
  6814  07D9  318F  273F         	fcall	_EUSART_Initialize
  6815  07DB  0008               	return
  6816  07DC                     __end_of_SYSTEM_Initialize:	
  6817                           
  6818                           	psect	text7
  6819  0D66                     __ptext7:	
  6820 ;; *************** function _WDT_Initialize *****************
  6821 ;; Defined at:
  6822 ;;		line 108 in file "mcc_generated_files/mcc.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;		None
  6825 ;; Auto vars:     Size  Location     Type
  6826 ;;		None
  6827 ;; Return value:  Size  Location     Type
  6828 ;;                  1    wreg      void 
  6829 ;; Registers used:
  6830 ;;		wreg
  6831 ;; Tracked objects:
  6832 ;;		On entry : 0/0
  6833 ;;		On exit  : 0/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6836 ;;      Params:         0       0       0       0       0       0       0       0
  6837 ;;      Locals:         0       0       0       0       0       0       0       0
  6838 ;;      Temps:          0       0       0       0       0       0       0       0
  6839 ;;      Totals:         0       0       0       0       0       0       0       0
  6840 ;;Total ram usage:        0 bytes
  6841 ;; Hardware stack levels used:    1
  6842 ;; Hardware stack levels required when called:    5
  6843 ;; This function calls:
  6844 ;;		Nothing
  6845 ;; This function is called by:
  6846 ;;		_SYSTEM_Initialize
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           
  6851                           ;psect for function _WDT_Initialize
  6852  0D66                     _WDT_Initialize:	
  6853                           
  6854                           ;mcc.c: 111: WDTCON = 0x16;
  6855                           
  6856                           ;incstack = 0
  6857                           ; Regs used in _WDT_Initialize: [wreg]
  6858  0D66  3016               	movlw	22
  6859  0D67  0021               	movlb	1	; select bank1
  6860  0D68  0097               	movwf	23	;volatile
  6861  0D69  0008               	return
  6862  0D6A                     __end_of_WDT_Initialize:	
  6863                           
  6864                           	psect	text8
  6865  0F8F                     __ptext8:	
  6866 ;; *************** function _TMR5_Initialize *****************
  6867 ;; Defined at:
  6868 ;;		line 64 in file "mcc_generated_files/tmr5.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;		None
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;		None
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  1    wreg      void 
  6875 ;; Registers used:
  6876 ;;		wreg, status,2, status,0, pclath, cstack
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6882 ;;      Params:         0       0       0       0       0       0       0       0
  6883 ;;      Locals:         0       0       0       0       0       0       0       0
  6884 ;;      Temps:          0       0       0       0       0       0       0       0
  6885 ;;      Totals:         0       0       0       0       0       0       0       0
  6886 ;;Total ram usage:        0 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; Hardware stack levels required when called:    6
  6889 ;; This function calls:
  6890 ;;		_TMR5_SetInterruptHandler
  6891 ;;		_TMR5_StartTimer
  6892 ;; This function is called by:
  6893 ;;		_SYSTEM_Initialize
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           
  6898                           ;psect for function _TMR5_Initialize
  6899  0F8F                     _TMR5_Initialize:	
  6900                           
  6901                           ;tmr5.c: 69: T5CON = 0x30;
  6902                           
  6903                           ;incstack = 0
  6904                           ; Regs used in _TMR5_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6905  0F8F  3030               	movlw	48
  6906  0F90  0028               	movlb	8	; select bank8
  6907  0F91  009A               	movwf	26	;volatile
  6908                           
  6909                           ;tmr5.c: 72: T5GCON = 0x00;
  6910  0F92  019B               	clrf	27	;volatile
  6911                           
  6912                           ;tmr5.c: 75: TMR5H = 0x00;
  6913  0F93  0199               	clrf	25	;volatile
  6914                           
  6915                           ;tmr5.c: 78: TMR5L = 0x00;
  6916  0F94  0198               	clrf	24	;volatile
  6917                           
  6918                           ;tmr5.c: 81: timer5ReloadVal=(TMR5H << 8) | TMR5L;
  6919  0F95  0819               	movf	25,w	;volatile
  6920  0F96  0020               	movlb	0	; select bank0
  6921  0F97  00ED               	movwf	_timer5ReloadVal+1	;volatile
  6922  0F98  0028               	movlb	8	; select bank8
  6923  0F99  0818               	movf	24,w	;volatile
  6924  0F9A  0020               	movlb	0	; select bank0
  6925  0F9B  00EC               	movwf	_timer5ReloadVal	;volatile
  6926                           
  6927                           ;tmr5.c: 84: PIR4bits.TMR5IF = 0;
  6928  0F9C  1214               	bcf	20,4	;volatile
  6929                           
  6930                           ;tmr5.c: 87: PIE4bits.TMR5IE = 1;
  6931  0F9D  0021               	movlb	1	; select bank1
  6932  0F9E  1614               	bsf	20,4	;volatile
  6933                           
  6934                           ;tmr5.c: 90: TMR5_SetInterruptHandler(TMR5_DefaultInterruptHandler);
  6935  0F9F  3045               	movlw	low _TMR5_DefaultInterruptHandler
  6936  0FA0  0020               	movlb	0	; select bank0
  6937  0FA1  00A0               	movwf	TMR5_SetInterruptHandler@InterruptHandler
  6938  0FA2  300D               	movlw	high _TMR5_DefaultInterruptHandler
  6939  0FA3  00A1               	movwf	TMR5_SetInterruptHandler@InterruptHandler+1
  6940  0FA4  318D  25E0  318F   	fcall	_TMR5_SetInterruptHandler
  6941                           
  6942                           ;tmr5.c: 93: TMR5_StartTimer();
  6943  0FA7  318D  255D         	fcall	_TMR5_StartTimer
  6944  0FA9  0008               	return
  6945  0FAA                     __end_of_TMR5_Initialize:	
  6946                           
  6947                           	psect	text9
  6948  0D5D                     __ptext9:	
  6949 ;; *************** function _TMR5_StartTimer *****************
  6950 ;; Defined at:
  6951 ;;		line 96 in file "mcc_generated_files/tmr5.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;		None
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;		None
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  1    wreg      void 
  6958 ;; Registers used:
  6959 ;;		None
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6965 ;;      Params:         0       0       0       0       0       0       0       0
  6966 ;;      Locals:         0       0       0       0       0       0       0       0
  6967 ;;      Temps:          0       0       0       0       0       0       0       0
  6968 ;;      Totals:         0       0       0       0       0       0       0       0
  6969 ;;Total ram usage:        0 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    5
  6972 ;; This function calls:
  6973 ;;		Nothing
  6974 ;; This function is called by:
  6975 ;;		_TMR5_Initialize
  6976 ;; This function uses a non-reentrant model
  6977 ;;
  6978                           
  6979                           
  6980                           ;psect for function _TMR5_StartTimer
  6981  0D5D                     _TMR5_StartTimer:	
  6982                           
  6983                           ;tmr5.c: 99: T5CONbits.TMR5ON = 1;
  6984                           
  6985                           ;incstack = 0
  6986                           ; Regs used in _TMR5_StartTimer: []
  6987  0D5D  0028               	movlb	8	; select bank8
  6988  0D5E  141A               	bsf	26,0	;volatile
  6989  0D5F  0008               	return
  6990  0D60                     __end_of_TMR5_StartTimer:	
  6991                           
  6992                           	psect	text10
  6993  0DE0                     __ptext10:	
  6994 ;; *************** function _TMR5_SetInterruptHandler *****************
  6995 ;; Defined at:
  6996 ;;		line 172 in file "mcc_generated_files/tmr5.c"
  6997 ;; Parameters:    Size  Location     Type
  6998 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  6999 ;;		 -> TMR5_DefaultInterruptHandler(1), 
  7000 ;; Auto vars:     Size  Location     Type
  7001 ;;		None
  7002 ;; Return value:  Size  Location     Type
  7003 ;;                  1    wreg      void 
  7004 ;; Registers used:
  7005 ;;		wreg
  7006 ;; Tracked objects:
  7007 ;;		On entry : 0/0
  7008 ;;		On exit  : 0/0
  7009 ;;		Unchanged: 0/0
  7010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7011 ;;      Params:         0       2       0       0       0       0       0       0
  7012 ;;      Locals:         0       0       0       0       0       0       0       0
  7013 ;;      Temps:          0       0       0       0       0       0       0       0
  7014 ;;      Totals:         0       2       0       0       0       0       0       0
  7015 ;;Total ram usage:        2 bytes
  7016 ;; Hardware stack levels used:    1
  7017 ;; Hardware stack levels required when called:    5
  7018 ;; This function calls:
  7019 ;;		Nothing
  7020 ;; This function is called by:
  7021 ;;		_TMR5_Initialize
  7022 ;; This function uses a non-reentrant model
  7023 ;;
  7024                           
  7025                           
  7026                           ;psect for function _TMR5_SetInterruptHandler
  7027  0DE0                     _TMR5_SetInterruptHandler:	
  7028                           
  7029                           ;tmr5.c: 173: TMR5_InterruptHandler = InterruptHandler;
  7030                           
  7031                           ;incstack = 0
  7032                           ; Regs used in _TMR5_SetInterruptHandler: [wreg]
  7033  0DE0  0020               	movlb	0	; select bank0
  7034  0DE1  0821               	movf	TMR5_SetInterruptHandler@InterruptHandler+1,w
  7035  0DE2  0021               	movlb	1	; select bank1
  7036  0DE3  00EF               	movwf	(_TMR5_InterruptHandler+1)^(0+128)
  7037  0DE4  0020               	movlb	0	; select bank0
  7038  0DE5  0820               	movf	TMR5_SetInterruptHandler@InterruptHandler,w
  7039  0DE6  0021               	movlb	1	; select bank1
  7040  0DE7  00EE               	movwf	_TMR5_InterruptHandler^(0+128)
  7041  0DE8  0008               	return
  7042  0DE9                     __end_of_TMR5_SetInterruptHandler:	
  7043                           
  7044                           	psect	text11
  7045  0F74                     __ptext11:	
  7046 ;; *************** function _TMR3_Initialize *****************
  7047 ;; Defined at:
  7048 ;;		line 64 in file "mcc_generated_files/tmr3.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;		None
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;		None
  7053 ;; Return value:  Size  Location     Type
  7054 ;;                  1    wreg      void 
  7055 ;; Registers used:
  7056 ;;		wreg, status,2, status,0, pclath, cstack
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7062 ;;      Params:         0       0       0       0       0       0       0       0
  7063 ;;      Locals:         0       0       0       0       0       0       0       0
  7064 ;;      Temps:          0       0       0       0       0       0       0       0
  7065 ;;      Totals:         0       0       0       0       0       0       0       0
  7066 ;;Total ram usage:        0 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:    6
  7069 ;; This function calls:
  7070 ;;		_TMR3_SetInterruptHandler
  7071 ;;		_TMR3_StartTimer
  7072 ;; This function is called by:
  7073 ;;		_SYSTEM_Initialize
  7074 ;; This function uses a non-reentrant model
  7075 ;;
  7076                           
  7077                           
  7078                           ;psect for function _TMR3_Initialize
  7079  0F74                     _TMR3_Initialize:	
  7080                           
  7081                           ;tmr3.c: 69: T3CON = 0x30;
  7082                           
  7083                           ;incstack = 0
  7084                           ; Regs used in _TMR3_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7085  0F74  3030               	movlw	48
  7086  0F75  0028               	movlb	8	; select bank8
  7087  0F76  0093               	movwf	19	;volatile
  7088                           
  7089                           ;tmr3.c: 72: T3GCON = 0x00;
  7090  0F77  0194               	clrf	20	;volatile
  7091                           
  7092                           ;tmr3.c: 75: TMR3H = 0x00;
  7093  0F78  0192               	clrf	18	;volatile
  7094                           
  7095                           ;tmr3.c: 78: TMR3L = 0x00;
  7096  0F79  0191               	clrf	17	;volatile
  7097                           
  7098                           ;tmr3.c: 81: timer3ReloadVal=(TMR3H << 8) | TMR3L;
  7099  0F7A  0812               	movf	18,w	;volatile
  7100  0F7B  0020               	movlb	0	; select bank0
  7101  0F7C  00EB               	movwf	_timer3ReloadVal+1	;volatile
  7102  0F7D  0028               	movlb	8	; select bank8
  7103  0F7E  0811               	movf	17,w	;volatile
  7104  0F7F  0020               	movlb	0	; select bank0
  7105  0F80  00EA               	movwf	_timer3ReloadVal	;volatile
  7106                           
  7107                           ;tmr3.c: 84: PIR3bits.TMR3IF = 0;
  7108  0F81  1213               	bcf	19,4	;volatile
  7109                           
  7110                           ;tmr3.c: 87: PIE3bits.TMR3IE = 1;
  7111  0F82  0021               	movlb	1	; select bank1
  7112  0F83  1613               	bsf	19,4	;volatile
  7113                           
  7114                           ;tmr3.c: 90: TMR3_SetInterruptHandler(TMR3_DefaultInterruptHandler);
  7115  0F84  3042               	movlw	low _TMR3_DefaultInterruptHandler
  7116  0F85  0020               	movlb	0	; select bank0
  7117  0F86  00A0               	movwf	TMR3_SetInterruptHandler@InterruptHandler
  7118  0F87  300D               	movlw	high _TMR3_DefaultInterruptHandler
  7119  0F88  00A1               	movwf	TMR3_SetInterruptHandler@InterruptHandler+1
  7120  0F89  318D  25D7  318F   	fcall	_TMR3_SetInterruptHandler
  7121                           
  7122                           ;tmr3.c: 93: TMR3_StartTimer();
  7123  0F8C  318D  2557         	fcall	_TMR3_StartTimer
  7124  0F8E  0008               	return
  7125  0F8F                     __end_of_TMR3_Initialize:	
  7126                           
  7127                           	psect	text12
  7128  0DD7                     __ptext12:	
  7129 ;; *************** function _TMR3_SetInterruptHandler *****************
  7130 ;; Defined at:
  7131 ;;		line 172 in file "mcc_generated_files/tmr3.c"
  7132 ;; Parameters:    Size  Location     Type
  7133 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  7134 ;;		 -> TMR3_DefaultInterruptHandler(1), 
  7135 ;; Auto vars:     Size  Location     Type
  7136 ;;		None
  7137 ;; Return value:  Size  Location     Type
  7138 ;;                  1    wreg      void 
  7139 ;; Registers used:
  7140 ;;		wreg
  7141 ;; Tracked objects:
  7142 ;;		On entry : 0/0
  7143 ;;		On exit  : 0/0
  7144 ;;		Unchanged: 0/0
  7145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7146 ;;      Params:         0       2       0       0       0       0       0       0
  7147 ;;      Locals:         0       0       0       0       0       0       0       0
  7148 ;;      Temps:          0       0       0       0       0       0       0       0
  7149 ;;      Totals:         0       2       0       0       0       0       0       0
  7150 ;;Total ram usage:        2 bytes
  7151 ;; Hardware stack levels used:    1
  7152 ;; Hardware stack levels required when called:    5
  7153 ;; This function calls:
  7154 ;;		Nothing
  7155 ;; This function is called by:
  7156 ;;		_TMR3_Initialize
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           
  7161                           ;psect for function _TMR3_SetInterruptHandler
  7162  0DD7                     _TMR3_SetInterruptHandler:	
  7163                           
  7164                           ;tmr3.c: 173: TMR3_InterruptHandler = InterruptHandler;
  7165                           
  7166                           ;incstack = 0
  7167                           ; Regs used in _TMR3_SetInterruptHandler: [wreg]
  7168  0DD7  0020               	movlb	0	; select bank0
  7169  0DD8  0821               	movf	TMR3_SetInterruptHandler@InterruptHandler+1,w
  7170  0DD9  0022               	movlb	2	; select bank2
  7171  0DDA  00E3               	movwf	(_TMR3_InterruptHandler+1)^(0+256)
  7172  0DDB  0020               	movlb	0	; select bank0
  7173  0DDC  0820               	movf	TMR3_SetInterruptHandler@InterruptHandler,w
  7174  0DDD  0022               	movlb	2	; select bank2
  7175  0DDE  00E2               	movwf	_TMR3_InterruptHandler^(0+256)
  7176  0DDF  0008               	return
  7177  0DE0                     __end_of_TMR3_SetInterruptHandler:	
  7178                           
  7179                           	psect	text13
  7180  0EE4                     __ptext13:	
  7181 ;; *************** function _TMR0_Initialize *****************
  7182 ;; Defined at:
  7183 ;;		line 60 in file "mcc_generated_files/tmr0.c"
  7184 ;; Parameters:    Size  Location     Type
  7185 ;;		None
  7186 ;; Auto vars:     Size  Location     Type
  7187 ;;		None
  7188 ;; Return value:  Size  Location     Type
  7189 ;;                  1    wreg      void 
  7190 ;; Registers used:
  7191 ;;		wreg, status,2, status,0, pclath, cstack
  7192 ;; Tracked objects:
  7193 ;;		On entry : 0/0
  7194 ;;		On exit  : 0/0
  7195 ;;		Unchanged: 0/0
  7196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7197 ;;      Params:         0       0       0       0       0       0       0       0
  7198 ;;      Locals:         0       0       0       0       0       0       0       0
  7199 ;;      Temps:          0       0       0       0       0       0       0       0
  7200 ;;      Totals:         0       0       0       0       0       0       0       0
  7201 ;;Total ram usage:        0 bytes
  7202 ;; Hardware stack levels used:    1
  7203 ;; Hardware stack levels required when called:    6
  7204 ;; This function calls:
  7205 ;;		_TMR0_SetInterruptHandler
  7206 ;;		_TMR0_StartTimer
  7207 ;; This function is called by:
  7208 ;;		_SYSTEM_Initialize
  7209 ;; This function uses a non-reentrant model
  7210 ;;
  7211                           
  7212                           
  7213                           ;psect for function _TMR0_Initialize
  7214  0EE4                     _TMR0_Initialize:	
  7215                           
  7216                           ;tmr0.c: 65: T0CON0 = 0x00;
  7217                           
  7218                           ;incstack = 0
  7219                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7220  0EE4  0020               	movlb	0	; select bank0
  7221  0EE5  0197               	clrf	23	;volatile
  7222                           
  7223                           ;tmr0.c: 68: T0CON1 = 0x49;
  7224  0EE6  3049               	movlw	73
  7225  0EE7  0098               	movwf	24	;volatile
  7226                           
  7227                           ;tmr0.c: 71: TMR0H = 0x26;
  7228  0EE8  3026               	movlw	38
  7229  0EE9  0096               	movwf	22	;volatile
  7230                           
  7231                           ;tmr0.c: 74: TMR0L = 0x00;
  7232  0EEA  0195               	clrf	21	;volatile
  7233                           
  7234                           ;tmr0.c: 77: PIR0bits.TMR0IF = 0;
  7235  0EEB  1290               	bcf	16,5	;volatile
  7236                           
  7237                           ;tmr0.c: 80: PIE0bits.TMR0IE = 1;
  7238  0EEC  0021               	movlb	1	; select bank1
  7239  0EED  1690               	bsf	16,5	;volatile
  7240                           
  7241                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7242  0EEE  303F               	movlw	low _TMR0_DefaultInterruptHandler
  7243  0EEF  0020               	movlb	0	; select bank0
  7244  0EF0  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  7245  0EF1  300D               	movlw	high _TMR0_DefaultInterruptHandler
  7246  0EF2  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  7247  0EF3  318D  25CE  318E   	fcall	_TMR0_SetInterruptHandler
  7248                           
  7249                           ;tmr0.c: 86: TMR0_StartTimer();
  7250  0EF6  318D  255A         	fcall	_TMR0_StartTimer
  7251  0EF8  0008               	return
  7252  0EF9                     __end_of_TMR0_Initialize:	
  7253                           
  7254                           	psect	text14
  7255  0D5A                     __ptext14:	
  7256 ;; *************** function _TMR0_StartTimer *****************
  7257 ;; Defined at:
  7258 ;;		line 89 in file "mcc_generated_files/tmr0.c"
  7259 ;; Parameters:    Size  Location     Type
  7260 ;;		None
  7261 ;; Auto vars:     Size  Location     Type
  7262 ;;		None
  7263 ;; Return value:  Size  Location     Type
  7264 ;;                  1    wreg      void 
  7265 ;; Registers used:
  7266 ;;		None
  7267 ;; Tracked objects:
  7268 ;;		On entry : 0/0
  7269 ;;		On exit  : 0/0
  7270 ;;		Unchanged: 0/0
  7271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7272 ;;      Params:         0       0       0       0       0       0       0       0
  7273 ;;      Locals:         0       0       0       0       0       0       0       0
  7274 ;;      Temps:          0       0       0       0       0       0       0       0
  7275 ;;      Totals:         0       0       0       0       0       0       0       0
  7276 ;;Total ram usage:        0 bytes
  7277 ;; Hardware stack levels used:    1
  7278 ;; Hardware stack levels required when called:    5
  7279 ;; This function calls:
  7280 ;;		Nothing
  7281 ;; This function is called by:
  7282 ;;		_TMR0_Initialize
  7283 ;; This function uses a non-reentrant model
  7284 ;;
  7285                           
  7286                           
  7287                           ;psect for function _TMR0_StartTimer
  7288  0D5A                     _TMR0_StartTimer:	
  7289                           
  7290                           ;tmr0.c: 92: T0CON0bits.T0EN = 1;
  7291                           
  7292                           ;incstack = 0
  7293                           ; Regs used in _TMR0_StartTimer: []
  7294  0D5A  0020               	movlb	0	; select bank0
  7295  0D5B  1797               	bsf	23,7	;volatile
  7296  0D5C  0008               	return
  7297  0D5D                     __end_of_TMR0_StartTimer:	
  7298                           
  7299                           	psect	text15
  7300  0DCE                     __ptext15:	
  7301 ;; *************** function _TMR0_SetInterruptHandler *****************
  7302 ;; Defined at:
  7303 ;;		line 145 in file "mcc_generated_files/tmr0.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  7306 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;		None
  7309 ;; Return value:  Size  Location     Type
  7310 ;;                  1    wreg      void 
  7311 ;; Registers used:
  7312 ;;		wreg
  7313 ;; Tracked objects:
  7314 ;;		On entry : 0/0
  7315 ;;		On exit  : 0/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7318 ;;      Params:         0       2       0       0       0       0       0       0
  7319 ;;      Locals:         0       0       0       0       0       0       0       0
  7320 ;;      Temps:          0       0       0       0       0       0       0       0
  7321 ;;      Totals:         0       2       0       0       0       0       0       0
  7322 ;;Total ram usage:        2 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; Hardware stack levels required when called:    5
  7325 ;; This function calls:
  7326 ;;		Nothing
  7327 ;; This function is called by:
  7328 ;;		_TMR0_Initialize
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331                           
  7332                           
  7333                           ;psect for function _TMR0_SetInterruptHandler
  7334  0DCE                     _TMR0_SetInterruptHandler:	
  7335                           
  7336                           ;tmr0.c: 146: TMR0_InterruptHandler = InterruptHandler;
  7337                           
  7338                           ;incstack = 0
  7339                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  7340  0DCE  0020               	movlb	0	; select bank0
  7341  0DCF  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  7342  0DD0  0022               	movlb	2	; select bank2
  7343  0DD1  00E1               	movwf	(_TMR0_InterruptHandler+1)^(0+256)
  7344  0DD2  0020               	movlb	0	; select bank0
  7345  0DD3  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  7346  0DD4  0022               	movlb	2	; select bank2
  7347  0DD5  00E0               	movwf	_TMR0_InterruptHandler^(0+256)
  7348  0DD6  0008               	return
  7349  0DD7                     __end_of_TMR0_SetInterruptHandler:	
  7350                           
  7351                           	psect	text16
  7352  0555                     __ptext16:	
  7353 ;; *************** function _PIN_MANAGER_Initialize *****************
  7354 ;; Defined at:
  7355 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;		None
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;  state           1    2[BANK0 ] unsigned char 
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1    wreg      void 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0, pclath, cstack
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7369 ;;      Params:         0       0       0       0       0       0       0       0
  7370 ;;      Locals:         0       1       0       0       0       0       0       0
  7371 ;;      Temps:          0       0       0       0       0       0       0       0
  7372 ;;      Totals:         0       1       0       0       0       0       0       0
  7373 ;;Total ram usage:        1 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    6
  7376 ;; This function calls:
  7377 ;;		_IOCCF4_SetInterruptHandler
  7378 ;;		_IOCCF5_SetInterruptHandler
  7379 ;; This function is called by:
  7380 ;;		_SYSTEM_Initialize
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           
  7385                           ;psect for function _PIN_MANAGER_Initialize
  7386  0555                     _PIN_MANAGER_Initialize:	
  7387                           
  7388                           ;pin_manager.c: 59: LATA = 0x00;
  7389                           
  7390                           ;incstack = 0
  7391                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7392  0555  0022               	movlb	2	; select bank2
  7393  0556  018C               	clrf	12	;volatile
  7394                           
  7395                           ;pin_manager.c: 60: LATB = 0x00;
  7396  0557  018D               	clrf	13	;volatile
  7397                           
  7398                           ;pin_manager.c: 61: LATC = 0x00;
  7399  0558  018E               	clrf	14	;volatile
  7400                           
  7401                           ;pin_manager.c: 66: TRISA = 0x37;
  7402  0559  3037               	movlw	55
  7403  055A  0021               	movlb	1	; select bank1
  7404  055B  008C               	movwf	12	;volatile
  7405                           
  7406                           ;pin_manager.c: 67: TRISB = 0x90;
  7407  055C  3090               	movlw	144
  7408  055D  008D               	movwf	13	;volatile
  7409                           
  7410                           ;pin_manager.c: 68: TRISC = 0x30;
  7411  055E  3030               	movlw	48
  7412  055F  008E               	movwf	14	;volatile
  7413                           
  7414                           ;pin_manager.c: 73: ANSELC = 0x80;
  7415  0560  3080               	movlw	128
  7416  0561  0023               	movlb	3	; select bank3
  7417  0562  008E               	movwf	14	;volatile
  7418                           
  7419                           ;pin_manager.c: 74: ANSELB = 0x00;
  7420  0563  018D               	clrf	13	;volatile
  7421                           
  7422                           ;pin_manager.c: 75: ANSELA = 0x17;
  7423  0564  3017               	movlw	23
  7424  0565  008C               	movwf	12	;volatile
  7425                           
  7426                           ;pin_manager.c: 80: WPUB = 0x80;
  7427  0566  3080               	movlw	128
  7428  0567  0024               	movlb	4	; select bank4
  7429  0568  008D               	movwf	13	;volatile
  7430                           
  7431                           ;pin_manager.c: 81: WPUA = 0x00;
  7432  0569  018C               	clrf	12	;volatile
  7433                           
  7434                           ;pin_manager.c: 82: WPUC = 0x00;
  7435  056A  018E               	clrf	14	;volatile
  7436                           
  7437                           ;pin_manager.c: 87: ODCONA = 0x00;
  7438  056B  0025               	movlb	5	; select bank5
  7439  056C  018C               	clrf	12	;volatile
  7440                           
  7441                           ;pin_manager.c: 88: ODCONB = 0x00;
  7442  056D  018D               	clrf	13	;volatile
  7443                           
  7444                           ;pin_manager.c: 89: ODCONC = 0x00;
  7445  056E  018E               	clrf	14	;volatile
  7446                           
  7447                           ;pin_manager.c: 96: IOCCFbits.IOCCF4 = 0;
  7448  056F  0027               	movlb	7	; select bank7
  7449  0570  1219               	bcf	25,4	;volatile
  7450                           
  7451                           ;pin_manager.c: 97: IOCCFbits.IOCCF5 = 0;
  7452  0571  1299               	bcf	25,5	;volatile
  7453                           
  7454                           ;pin_manager.c: 99: IOCCNbits.IOCCN4 = 1;
  7455  0572  1618               	bsf	24,4	;volatile
  7456                           
  7457                           ;pin_manager.c: 100: IOCCNbits.IOCCN5 = 1;
  7458  0573  1698               	bsf	24,5	;volatile
  7459                           
  7460                           ;pin_manager.c: 102: IOCCPbits.IOCCP4 = 1;
  7461  0574  1617               	bsf	23,4	;volatile
  7462                           
  7463                           ;pin_manager.c: 103: IOCCPbits.IOCCP5 = 1;
  7464  0575  1697               	bsf	23,5	;volatile
  7465                           
  7466                           ;pin_manager.c: 106: IOCCF4_SetInterruptHandler(IOCCF4_DefaultInterruptHandler);
  7467  0576  303D               	movlw	low _IOCCF4_DefaultInterruptHandler
  7468  0577  0020               	movlb	0	; select bank0
  7469  0578  00A0               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
  7470  0579  300D               	movlw	high _IOCCF4_DefaultInterruptHandler
  7471  057A  00A1               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
  7472  057B  318D  25BC  3185   	fcall	_IOCCF4_SetInterruptHandler
  7473                           
  7474                           ;pin_manager.c: 107: IOCCF5_SetInterruptHandler(IOCCF5_DefaultInterruptHandler);
  7475  057E  303E               	movlw	low _IOCCF5_DefaultInterruptHandler
  7476  057F  0020               	movlb	0	; select bank0
  7477  0580  00A0               	movwf	IOCCF5_SetInterruptHandler@InterruptHandler
  7478  0581  300D               	movlw	high _IOCCF5_DefaultInterruptHandler
  7479  0582  00A1               	movwf	IOCCF5_SetInterruptHandler@InterruptHandler+1
  7480  0583  318D  25C5  3185   	fcall	_IOCCF5_SetInterruptHandler
  7481                           
  7482                           ;pin_manager.c: 110: PIE0bits.IOCIE = 1;
  7483  0586  0021               	movlb	1	; select bank1
  7484  0587  1610               	bsf	16,4	;volatile
  7485                           
  7486                           ;pin_manager.c: 113: bool state = GIE;
  7487  0588  3000               	movlw	0
  7488  0589  1B8B               	btfsc	11,7	;volatile
  7489  058A  3001               	movlw	1
  7490  058B  0020               	movlb	0	; select bank0
  7491  058C  00A2               	movwf	PIN_MANAGER_Initialize@state
  7492                           
  7493                           ;pin_manager.c: 114: GIE = 0;
  7494  058D  138B               	bcf	11,7	;volatile
  7495                           
  7496                           ;pin_manager.c: 115: PPSLOCK = 0x55;
  7497  058E  3055               	movlw	85
  7498  058F  003C               	movlb	28	; select bank28
  7499  0590  008F               	movwf	15	;volatile
  7500                           
  7501                           ;pin_manager.c: 116: PPSLOCK = 0xAA;
  7502  0591  30AA               	movlw	170
  7503  0592  008F               	movwf	15	;volatile
  7504                           
  7505                           ;pin_manager.c: 117: PPSLOCKbits.PPSLOCKED = 0x00;
  7506  0593  100F               	bcf	15,0	;volatile
  7507                           
  7508                           ;pin_manager.c: 119: CCP2PPSbits.CCP2PPS = 0x14;
  7509  0594  0815               	movf	21,w	;volatile
  7510  0595  39E0               	andlw	-32
  7511  0596  3814               	iorlw	20
  7512  0597  0095               	movwf	21	;volatile
  7513                           
  7514                           ;pin_manager.c: 120: RXPPSbits.RXPPS = 0x0C;
  7515  0598  0824               	movf	36,w	;volatile
  7516  0599  39E0               	andlw	-32
  7517  059A  380C               	iorlw	12
  7518  059B  00A4               	movwf	36	;volatile
  7519                           
  7520                           ;pin_manager.c: 121: INTPPSbits.INTPPS = 0x05;
  7521  059C  0810               	movf	16,w	;volatile
  7522  059D  39E0               	andlw	-32
  7523  059E  3805               	iorlw	5
  7524  059F  0090               	movwf	16	;volatile
  7525                           
  7526                           ;pin_manager.c: 122: CCP1PPSbits.CCP1PPS = 0x15;
  7527  05A0  0814               	movf	20,w	;volatile
  7528  05A1  39E0               	andlw	-32
  7529  05A2  3815               	iorlw	21
  7530  05A3  0094               	movwf	20	;volatile
  7531                           
  7532                           ;pin_manager.c: 123: RB5PPSbits.RB5PPS = 0x14;
  7533  05A4  003D               	movlb	29	; select bank29
  7534  05A5  081D               	movf	29,w	;volatile
  7535  05A6  39E0               	andlw	-32
  7536  05A7  3814               	iorlw	20
  7537  05A8  009D               	movwf	29	;volatile
  7538                           
  7539                           ;pin_manager.c: 125: PPSLOCK = 0x55;
  7540  05A9  3055               	movlw	85
  7541  05AA  003C               	movlb	28	; select bank28
  7542  05AB  008F               	movwf	15	;volatile
  7543                           
  7544                           ;pin_manager.c: 126: PPSLOCK = 0xAA;
  7545  05AC  30AA               	movlw	170
  7546  05AD  008F               	movwf	15	;volatile
  7547                           
  7548                           ;pin_manager.c: 127: PPSLOCKbits.PPSLOCKED = 0x01;
  7549  05AE  140F               	bsf	15,0	;volatile
  7550                           
  7551                           ;pin_manager.c: 129: GIE = state;
  7552  05AF  0020               	movlb	0	; select bank0
  7553  05B0  1C22               	btfss	PIN_MANAGER_Initialize@state,0
  7554  05B1  2DB4               	goto	u2140
  7555  05B2  178B               	bsf	11,7	;volatile
  7556  05B3  0008               	return
  7557  05B4                     u2140:	
  7558  05B4  138B               	bcf	11,7	;volatile
  7559  05B5  0008               	return
  7560  05B6                     __end_of_PIN_MANAGER_Initialize:	
  7561                           
  7562                           	psect	text17
  7563  0DC5                     __ptext17:	
  7564 ;; *************** function _IOCCF5_SetInterruptHandler *****************
  7565 ;; Defined at:
  7566 ;;		line 197 in file "mcc_generated_files/pin_manager.c"
  7567 ;; Parameters:    Size  Location     Type
  7568 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  7569 ;;		 -> IOCCF5_DefaultInterruptHandler(1), 
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;		None
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  1    wreg      void 
  7574 ;; Registers used:
  7575 ;;		wreg
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7581 ;;      Params:         0       2       0       0       0       0       0       0
  7582 ;;      Locals:         0       0       0       0       0       0       0       0
  7583 ;;      Temps:          0       0       0       0       0       0       0       0
  7584 ;;      Totals:         0       2       0       0       0       0       0       0
  7585 ;;Total ram usage:        2 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    5
  7588 ;; This function calls:
  7589 ;;		Nothing
  7590 ;; This function is called by:
  7591 ;;		_PIN_MANAGER_Initialize
  7592 ;; This function uses a non-reentrant model
  7593 ;;
  7594                           
  7595                           
  7596                           ;psect for function _IOCCF5_SetInterruptHandler
  7597  0DC5                     _IOCCF5_SetInterruptHandler:	
  7598                           
  7599                           ;pin_manager.c: 198: IOCCF5_InterruptHandler = InterruptHandler;
  7600                           
  7601                           ;incstack = 0
  7602                           ; Regs used in _IOCCF5_SetInterruptHandler: [wreg]
  7603  0DC5  0020               	movlb	0	; select bank0
  7604  0DC6  0821               	movf	IOCCF5_SetInterruptHandler@InterruptHandler+1,w
  7605  0DC7  0022               	movlb	2	; select bank2
  7606  0DC8  00DD               	movwf	(_IOCCF5_InterruptHandler+1)^(0+256)
  7607  0DC9  0020               	movlb	0	; select bank0
  7608  0DCA  0820               	movf	IOCCF5_SetInterruptHandler@InterruptHandler,w
  7609  0DCB  0022               	movlb	2	; select bank2
  7610  0DCC  00DC               	movwf	_IOCCF5_InterruptHandler^(0+256)
  7611  0DCD  0008               	return
  7612  0DCE                     __end_of_IOCCF5_SetInterruptHandler:	
  7613                           
  7614                           	psect	text18
  7615  0DBC                     __ptext18:	
  7616 ;; *************** function _IOCCF4_SetInterruptHandler *****************
  7617 ;; Defined at:
  7618 ;;		line 167 in file "mcc_generated_files/pin_manager.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  7621 ;;		 -> IOCCF4_DefaultInterruptHandler(1), 
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;		None
  7624 ;; Return value:  Size  Location     Type
  7625 ;;                  1    wreg      void 
  7626 ;; Registers used:
  7627 ;;		wreg
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7633 ;;      Params:         0       2       0       0       0       0       0       0
  7634 ;;      Locals:         0       0       0       0       0       0       0       0
  7635 ;;      Temps:          0       0       0       0       0       0       0       0
  7636 ;;      Totals:         0       2       0       0       0       0       0       0
  7637 ;;Total ram usage:        2 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:    5
  7640 ;; This function calls:
  7641 ;;		Nothing
  7642 ;; This function is called by:
  7643 ;;		_PIN_MANAGER_Initialize
  7644 ;; This function uses a non-reentrant model
  7645 ;;
  7646                           
  7647                           
  7648                           ;psect for function _IOCCF4_SetInterruptHandler
  7649  0DBC                     _IOCCF4_SetInterruptHandler:	
  7650                           
  7651                           ;pin_manager.c: 168: IOCCF4_InterruptHandler = InterruptHandler;
  7652                           
  7653                           ;incstack = 0
  7654                           ; Regs used in _IOCCF4_SetInterruptHandler: [wreg]
  7655  0DBC  0020               	movlb	0	; select bank0
  7656  0DBD  0821               	movf	IOCCF4_SetInterruptHandler@InterruptHandler+1,w
  7657  0DBE  0022               	movlb	2	; select bank2
  7658  0DBF  00DF               	movwf	(_IOCCF4_InterruptHandler+1)^(0+256)
  7659  0DC0  0020               	movlb	0	; select bank0
  7660  0DC1  0820               	movf	IOCCF4_SetInterruptHandler@InterruptHandler,w
  7661  0DC2  0022               	movlb	2	; select bank2
  7662  0DC3  00DE               	movwf	_IOCCF4_InterruptHandler^(0+256)
  7663  0DC4  0008               	return
  7664  0DC5                     __end_of_IOCCF4_SetInterruptHandler:	
  7665                           
  7666                           	psect	text19
  7667  0DB3                     __ptext19:	
  7668 ;; *************** function _OSCILLATOR_Initialize *****************
  7669 ;; Defined at:
  7670 ;;		line 92 in file "mcc_generated_files/mcc.c"
  7671 ;; Parameters:    Size  Location     Type
  7672 ;;		None
  7673 ;; Auto vars:     Size  Location     Type
  7674 ;;		None
  7675 ;; Return value:  Size  Location     Type
  7676 ;;                  1    wreg      void 
  7677 ;; Registers used:
  7678 ;;		wreg, status,2
  7679 ;; Tracked objects:
  7680 ;;		On entry : 0/0
  7681 ;;		On exit  : 0/0
  7682 ;;		Unchanged: 0/0
  7683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7684 ;;      Params:         0       0       0       0       0       0       0       0
  7685 ;;      Locals:         0       0       0       0       0       0       0       0
  7686 ;;      Temps:          0       0       0       0       0       0       0       0
  7687 ;;      Totals:         0       0       0       0       0       0       0       0
  7688 ;;Total ram usage:        0 bytes
  7689 ;; Hardware stack levels used:    1
  7690 ;; Hardware stack levels required when called:    5
  7691 ;; This function calls:
  7692 ;;		Nothing
  7693 ;; This function is called by:
  7694 ;;		_SYSTEM_Initialize
  7695 ;; This function uses a non-reentrant model
  7696 ;;
  7697                           
  7698                           
  7699                           ;psect for function _OSCILLATOR_Initialize
  7700  0DB3                     _OSCILLATOR_Initialize:	
  7701                           
  7702                           ;mcc.c: 95: OSCCON1 = 0x02;
  7703                           
  7704                           ;incstack = 0
  7705                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7706  0DB3  3002               	movlw	2
  7707  0DB4  0032               	movlb	18	; select bank18
  7708  0DB5  0099               	movwf	25	;volatile
  7709                           
  7710                           ;mcc.c: 97: OSCCON3 = 0x00;
  7711  0DB6  019B               	clrf	27	;volatile
  7712                           
  7713                           ;mcc.c: 99: OSCEN = 0x00;
  7714  0DB7  019D               	clrf	29	;volatile
  7715                           
  7716                           ;mcc.c: 101: OSCFRQ = 0x07;
  7717  0DB8  3007               	movlw	7
  7718  0DB9  009F               	movwf	31	;volatile
  7719                           
  7720                           ;mcc.c: 103: OSCTUNE = 0x00;
  7721  0DBA  019E               	clrf	30	;volatile
  7722  0DBB  0008               	return
  7723  0DBC                     __end_of_OSCILLATOR_Initialize:	
  7724                           
  7725                           	psect	text20
  7726  0E15                     __ptext20:	
  7727 ;; *************** function _EXT_INT_Initialize *****************
  7728 ;; Defined at:
  7729 ;;		line 90 in file "mcc_generated_files/ext_int.c"
  7730 ;; Parameters:    Size  Location     Type
  7731 ;;		None
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;		None
  7734 ;; Return value:  Size  Location     Type
  7735 ;;                  1    wreg      void 
  7736 ;; Registers used:
  7737 ;;		wreg, status,2, status,0, pclath, cstack
  7738 ;; Tracked objects:
  7739 ;;		On entry : 0/0
  7740 ;;		On exit  : 0/0
  7741 ;;		Unchanged: 0/0
  7742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7743 ;;      Params:         0       0       0       0       0       0       0       0
  7744 ;;      Locals:         0       0       0       0       0       0       0       0
  7745 ;;      Temps:          0       0       0       0       0       0       0       0
  7746 ;;      Totals:         0       0       0       0       0       0       0       0
  7747 ;;Total ram usage:        0 bytes
  7748 ;; Hardware stack levels used:    1
  7749 ;; Hardware stack levels required when called:    6
  7750 ;; This function calls:
  7751 ;;		_INT_SetInterruptHandler
  7752 ;; This function is called by:
  7753 ;;		_SYSTEM_Initialize
  7754 ;; This function uses a non-reentrant model
  7755 ;;
  7756                           
  7757                           
  7758                           ;psect for function _EXT_INT_Initialize
  7759  0E15                     _EXT_INT_Initialize:	
  7760                           
  7761                           ;ext_int.c: 99: (PIR0bits.INTF = 0);
  7762                           
  7763                           ;incstack = 0
  7764                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7765  0E15  0020               	movlb	0	; select bank0
  7766  0E16  1010               	bcf	16,0	;volatile
  7767                           
  7768                           ;ext_int.c: 100: (INTCONbits.INTEDG = 1);
  7769  0E17  140B               	bsf	11,0	;volatile
  7770                           
  7771                           ;ext_int.c: 102: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  7772  0E18  303C               	movlw	low _INT_DefaultInterruptHandler
  7773  0E19  00A0               	movwf	INT_SetInterruptHandler@InterruptHandler
  7774  0E1A  300D               	movlw	high _INT_DefaultInterruptHandler
  7775  0E1B  00A1               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  7776  0E1C  318D  25AA         	fcall	_INT_SetInterruptHandler
  7777                           
  7778                           ;ext_int.c: 103: (PIE0bits.INTE = 1);
  7779  0E1E  0021               	movlb	1	; select bank1
  7780  0E1F  1410               	bsf	16,0	;volatile
  7781  0E20  0008               	return
  7782  0E21                     __end_of_EXT_INT_Initialize:	
  7783                           
  7784                           	psect	text21
  7785  0DAA                     __ptext21:	
  7786 ;; *************** function _INT_SetInterruptHandler *****************
  7787 ;; Defined at:
  7788 ;;		line 70 in file "mcc_generated_files/ext_int.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  7791 ;;		 -> INT_DefaultInterruptHandler(1), 
  7792 ;; Auto vars:     Size  Location     Type
  7793 ;;		None
  7794 ;; Return value:  Size  Location     Type
  7795 ;;                  1    wreg      void 
  7796 ;; Registers used:
  7797 ;;		wreg
  7798 ;; Tracked objects:
  7799 ;;		On entry : 0/0
  7800 ;;		On exit  : 0/0
  7801 ;;		Unchanged: 0/0
  7802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7803 ;;      Params:         0       2       0       0       0       0       0       0
  7804 ;;      Locals:         0       0       0       0       0       0       0       0
  7805 ;;      Temps:          0       0       0       0       0       0       0       0
  7806 ;;      Totals:         0       2       0       0       0       0       0       0
  7807 ;;Total ram usage:        2 bytes
  7808 ;; Hardware stack levels used:    1
  7809 ;; Hardware stack levels required when called:    5
  7810 ;; This function calls:
  7811 ;;		Nothing
  7812 ;; This function is called by:
  7813 ;;		_EXT_INT_Initialize
  7814 ;; This function uses a non-reentrant model
  7815 ;;
  7816                           
  7817                           
  7818                           ;psect for function _INT_SetInterruptHandler
  7819  0DAA                     _INT_SetInterruptHandler:	
  7820                           
  7821                           ;ext_int.c: 71: INT_InterruptHandler = InterruptHandler;
  7822                           
  7823                           ;incstack = 0
  7824                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  7825  0DAA  0020               	movlb	0	; select bank0
  7826  0DAB  0821               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  7827  0DAC  0022               	movlb	2	; select bank2
  7828  0DAD  00DB               	movwf	(_INT_InterruptHandler+1)^(0+256)
  7829  0DAE  0020               	movlb	0	; select bank0
  7830  0DAF  0820               	movf	INT_SetInterruptHandler@InterruptHandler,w
  7831  0DB0  0022               	movlb	2	; select bank2
  7832  0DB1  00DA               	movwf	_INT_InterruptHandler^(0+256)
  7833  0DB2  0008               	return
  7834  0DB3                     __end_of_INT_SetInterruptHandler:	
  7835                           
  7836                           	psect	text22
  7837  0DA1                     __ptext22:	
  7838 ;; *************** function _CCP2_Initialize *****************
  7839 ;; Defined at:
  7840 ;;		line 57 in file "mcc_generated_files/ccp2.c"
  7841 ;; Parameters:    Size  Location     Type
  7842 ;;		None
  7843 ;; Auto vars:     Size  Location     Type
  7844 ;;		None
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  1    wreg      void 
  7847 ;; Registers used:
  7848 ;;		wreg, status,2, status,0
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7854 ;;      Params:         0       0       0       0       0       0       0       0
  7855 ;;      Locals:         0       0       0       0       0       0       0       0
  7856 ;;      Temps:          0       0       0       0       0       0       0       0
  7857 ;;      Totals:         0       0       0       0       0       0       0       0
  7858 ;;Total ram usage:        0 bytes
  7859 ;; Hardware stack levels used:    1
  7860 ;; Hardware stack levels required when called:    5
  7861 ;; This function calls:
  7862 ;;		Nothing
  7863 ;; This function is called by:
  7864 ;;		_SYSTEM_Initialize
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           
  7869                           ;psect for function _CCP2_Initialize
  7870  0DA1                     _CCP2_Initialize:	
  7871                           
  7872                           ;ccp2.c: 62: CCP2CON = 0x03;
  7873                           
  7874                           ;incstack = 0
  7875                           ; Regs used in _CCP2_Initialize: [wreg+status,2+status,0]
  7876  0DA1  3003               	movlw	3
  7877  0DA2  0025               	movlb	5	; select bank5
  7878  0DA3  0097               	movwf	23	;volatile
  7879                           
  7880                           ;ccp2.c: 65: CCP2CAP = 0x00;
  7881  0DA4  0198               	clrf	24	;volatile
  7882                           
  7883                           ;ccp2.c: 68: CCPR2H = 0x00;
  7884  0DA5  0196               	clrf	22	;volatile
  7885                           
  7886                           ;ccp2.c: 71: CCPR2L = 0x00;
  7887  0DA6  0195               	clrf	21	;volatile
  7888                           
  7889                           ;ccp2.c: 74: CCPTMRSbits.C2TSEL = 0x3;
  7890  0DA7  300C               	movlw	12
  7891  0DA8  049F               	iorwf	31,f	;volatile
  7892  0DA9  0008               	return
  7893  0DAA                     __end_of_CCP2_Initialize:	
  7894                           
  7895                           	psect	text23
  7896  0E66                     __ptext23:	
  7897 ;; *************** function _CCP1_Initialize *****************
  7898 ;; Defined at:
  7899 ;;		line 58 in file "mcc_generated_files/ccp1.c"
  7900 ;; Parameters:    Size  Location     Type
  7901 ;;		None
  7902 ;; Auto vars:     Size  Location     Type
  7903 ;;		None
  7904 ;; Return value:  Size  Location     Type
  7905 ;;                  1    wreg      void 
  7906 ;; Registers used:
  7907 ;;		wreg, status,2, status,0
  7908 ;; Tracked objects:
  7909 ;;		On entry : 0/0
  7910 ;;		On exit  : 0/0
  7911 ;;		Unchanged: 0/0
  7912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7913 ;;      Params:         0       0       0       0       0       0       0       0
  7914 ;;      Locals:         0       0       0       0       0       0       0       0
  7915 ;;      Temps:          0       0       0       0       0       0       0       0
  7916 ;;      Totals:         0       0       0       0       0       0       0       0
  7917 ;;Total ram usage:        0 bytes
  7918 ;; Hardware stack levels used:    1
  7919 ;; Hardware stack levels required when called:    5
  7920 ;; This function calls:
  7921 ;;		Nothing
  7922 ;; This function is called by:
  7923 ;;		_SYSTEM_Initialize
  7924 ;; This function uses a non-reentrant model
  7925 ;;
  7926                           
  7927                           
  7928                           ;psect for function _CCP1_Initialize
  7929  0E66                     _CCP1_Initialize:	
  7930                           
  7931                           ;ccp1.c: 63: CCP1CON = 0x83;
  7932                           
  7933                           ;incstack = 0
  7934                           ; Regs used in _CCP1_Initialize: [wreg+status,2+status,0]
  7935  0E66  3083               	movlw	131
  7936  0E67  0025               	movlb	5	; select bank5
  7937  0E68  0093               	movwf	19	;volatile
  7938                           
  7939                           ;ccp1.c: 66: CCP1CAP = 0x00;
  7940  0E69  0194               	clrf	20	;volatile
  7941                           
  7942                           ;ccp1.c: 69: CCPR1H = 0x00;
  7943  0E6A  0192               	clrf	18	;volatile
  7944                           
  7945                           ;ccp1.c: 72: CCPR1L = 0x00;
  7946  0E6B  0191               	clrf	17	;volatile
  7947                           
  7948                           ;ccp1.c: 75: CCPTMRSbits.C1TSEL = 0x2;
  7949  0E6C  081F               	movf	31,w	;volatile
  7950  0E6D  39FC               	andlw	-4
  7951  0E6E  3802               	iorlw	2
  7952  0E6F  009F               	movwf	31	;volatile
  7953                           
  7954                           ;ccp1.c: 78: PIR4bits.CCP1IF = 0;
  7955  0E70  0020               	movlb	0	; select bank0
  7956  0E71  1014               	bcf	20,0	;volatile
  7957                           
  7958                           ;ccp1.c: 81: PIE4bits.CCP1IE = 1;
  7959  0E72  0021               	movlb	1	; select bank1
  7960  0E73  1414               	bsf	20,0	;volatile
  7961  0E74  0008               	return
  7962  0E75                     __end_of_CCP1_Initialize:	
  7963                           
  7964                           	psect	text24
  7965  0D98                     __ptext24:	
  7966 ;; *************** function _ADC_Initialize *****************
  7967 ;; Defined at:
  7968 ;;		line 64 in file "mcc_generated_files/adc.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;		None
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;		None
  7973 ;; Return value:  Size  Location     Type
  7974 ;;                  1    wreg      void 
  7975 ;; Registers used:
  7976 ;;		wreg, status,2
  7977 ;; Tracked objects:
  7978 ;;		On entry : 0/0
  7979 ;;		On exit  : 0/0
  7980 ;;		Unchanged: 0/0
  7981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7982 ;;      Params:         0       0       0       0       0       0       0       0
  7983 ;;      Locals:         0       0       0       0       0       0       0       0
  7984 ;;      Temps:          0       0       0       0       0       0       0       0
  7985 ;;      Totals:         0       0       0       0       0       0       0       0
  7986 ;;Total ram usage:        0 bytes
  7987 ;; Hardware stack levels used:    1
  7988 ;; Hardware stack levels required when called:    5
  7989 ;; This function calls:
  7990 ;;		Nothing
  7991 ;; This function is called by:
  7992 ;;		_SYSTEM_Initialize
  7993 ;; This function uses a non-reentrant model
  7994 ;;
  7995                           
  7996                           
  7997                           ;psect for function _ADC_Initialize
  7998  0D98                     _ADC_Initialize:	
  7999                           
  8000                           ;adc.c: 69: ADCON0 = 0x01;
  8001                           
  8002                           ;incstack = 0
  8003                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  8004  0D98  3001               	movlw	1
  8005  0D99  0021               	movlb	1	; select bank1
  8006  0D9A  009D               	movwf	29	;volatile
  8007                           
  8008                           ;adc.c: 72: ADCON1 = 0xE0;
  8009  0D9B  30E0               	movlw	224
  8010  0D9C  009E               	movwf	30	;volatile
  8011                           
  8012                           ;adc.c: 75: ADACT = 0x00;
  8013  0D9D  019F               	clrf	31	;volatile
  8014                           
  8015                           ;adc.c: 78: ADRESL = 0x00;
  8016  0D9E  019B               	clrf	27	;volatile
  8017                           
  8018                           ;adc.c: 81: ADRESH = 0x00;
  8019  0D9F  019C               	clrf	28	;volatile
  8020  0DA0  0008               	return
  8021  0DA1                     __end_of_ADC_Initialize:	
  8022                           
  8023                           	psect	text25
  8024  0E57                     __ptext25:	
  8025 ;; *************** function _NutRunCycleStart *****************
  8026 ;; Defined at:
  8027 ;;		line 576 in file "main.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;		None
  8030 ;; Auto vars:     Size  Location     Type
  8031 ;;		None
  8032 ;; Return value:  Size  Location     Type
  8033 ;;                  1    wreg      void 
  8034 ;; Registers used:
  8035 ;;		wreg, status,2, status,0, pclath, cstack
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8041 ;;      Params:         0       0       0       0       0       0       0       0
  8042 ;;      Locals:         0       0       0       0       0       0       0       0
  8043 ;;      Temps:          0       0       0       0       0       0       0       0
  8044 ;;      Totals:         0       0       0       0       0       0       0       0
  8045 ;;Total ram usage:        0 bytes
  8046 ;; Hardware stack levels used:    1
  8047 ;; Hardware stack levels required when called:    6
  8048 ;; This function calls:
  8049 ;;		_NutRunCycleReset
  8050 ;;		_TMR3_StartTimer
  8051 ;;		_TMR3_WriteTimer
  8052 ;; This function is called by:
  8053 ;;		_main
  8054 ;;		_OnEncPulseEdgeEvent
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           
  8059                           ;psect for function _NutRunCycleStart
  8060  0E57                     _NutRunCycleStart:	
  8061                           
  8062                           ;main.c: 578: NutRunCycleReset();
  8063                           
  8064                           ;incstack = 0
  8065                           ; Regs used in _NutRunCycleStart: [wreg+status,2+status,0+pclath+cstack]
  8066  0E57  318F  2727  318E   	fcall	_NutRunCycleReset
  8067                           
  8068                           ;main.c: 580: TMR3_WriteTimer(0);
  8069  0E5A  3000               	movlw	0
  8070  0E5B  0020               	movlb	0	; select bank0
  8071  0E5C  00A0               	movwf	TMR3_WriteTimer@timerVal
  8072  0E5D  00A1               	movwf	TMR3_WriteTimer@timerVal+1
  8073  0E5E  318E  26F9  318E   	fcall	_TMR3_WriteTimer
  8074                           
  8075                           ;main.c: 581: TMR3_StartTimer();
  8076  0E61  318D  2557         	fcall	_TMR3_StartTimer
  8077                           
  8078                           ;main.c: 582: PIE3bits.TMR3IE = 1;
  8079  0E63  0021               	movlb	1	; select bank1
  8080  0E64  1613               	bsf	19,4	;volatile
  8081  0E65  0008               	return
  8082  0E66                     __end_of_NutRunCycleStart:	
  8083                           
  8084                           	psect	text26
  8085  0EF9                     __ptext26:	
  8086 ;; *************** function _TMR3_WriteTimer *****************
  8087 ;; Defined at:
  8088 ;;		line 117 in file "mcc_generated_files/tmr3.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  timerVal        2    0[BANK0 ] unsigned int 
  8091 ;; Auto vars:     Size  Location     Type
  8092 ;;		None
  8093 ;; Return value:  Size  Location     Type
  8094 ;;                  1    wreg      void 
  8095 ;; Registers used:
  8096 ;;		wreg, status,2
  8097 ;; Tracked objects:
  8098 ;;		On entry : 0/0
  8099 ;;		On exit  : 0/0
  8100 ;;		Unchanged: 0/0
  8101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8102 ;;      Params:         0       2       0       0       0       0       0       0
  8103 ;;      Locals:         0       0       0       0       0       0       0       0
  8104 ;;      Temps:          0       0       0       0       0       0       0       0
  8105 ;;      Totals:         0       2       0       0       0       0       0       0
  8106 ;;Total ram usage:        2 bytes
  8107 ;; Hardware stack levels used:    1
  8108 ;; Hardware stack levels required when called:    5
  8109 ;; This function calls:
  8110 ;;		Nothing
  8111 ;; This function is called by:
  8112 ;;		_main
  8113 ;;		_NutRunCycleStart
  8114 ;;		_OnEncPulseEdgeEvent
  8115 ;;		_NutRunCycleStop
  8116 ;; This function uses a non-reentrant model
  8117 ;;
  8118                           
  8119                           
  8120                           ;psect for function _TMR3_WriteTimer
  8121  0EF9                     _TMR3_WriteTimer:	
  8122                           
  8123                           ;tmr3.c: 119: if (T3CONbits.T3SYNC == 1)
  8124                           
  8125                           ;incstack = 0
  8126                           ; Regs used in _TMR3_WriteTimer: [wreg+status,2]
  8127  0EF9  0028               	movlb	8	; select bank8
  8128  0EFA  1D13               	btfss	19,2	;volatile
  8129  0EFB  2F07               	goto	l3664
  8130                           
  8131                           ;tmr3.c: 120: {
  8132                           ;tmr3.c: 122: T3CONbits.TMR3ON = 0;
  8133  0EFC  1013               	bcf	19,0	;volatile
  8134                           
  8135                           ;tmr3.c: 125: TMR3H = (timerVal >> 8);
  8136  0EFD  0020               	movlb	0	; select bank0
  8137  0EFE  0821               	movf	TMR3_WriteTimer@timerVal+1,w
  8138  0EFF  0028               	movlb	8	; select bank8
  8139  0F00  0092               	movwf	18	;volatile
  8140                           
  8141                           ;tmr3.c: 126: TMR3L = timerVal;
  8142  0F01  0020               	movlb	0	; select bank0
  8143  0F02  0820               	movf	TMR3_WriteTimer@timerVal,w
  8144  0F03  0028               	movlb	8	; select bank8
  8145  0F04  0091               	movwf	17	;volatile
  8146                           
  8147                           ;tmr3.c: 129: T3CONbits.TMR3ON =1;
  8148  0F05  1413               	bsf	19,0	;volatile
  8149                           
  8150                           ;tmr3.c: 130: }
  8151  0F06  0008               	return
  8152  0F07                     l3664:	
  8153                           
  8154                           ;tmr3.c: 131: else
  8155                           ;tmr3.c: 132: {
  8156                           ;tmr3.c: 134: TMR3H = (timerVal >> 8);
  8157  0F07  0020               	movlb	0	; select bank0
  8158  0F08  0821               	movf	TMR3_WriteTimer@timerVal+1,w
  8159  0F09  0028               	movlb	8	; select bank8
  8160  0F0A  0092               	movwf	18	;volatile
  8161                           
  8162                           ;tmr3.c: 135: TMR3L = timerVal;
  8163  0F0B  0020               	movlb	0	; select bank0
  8164  0F0C  0820               	movf	TMR3_WriteTimer@timerVal,w
  8165  0F0D  0028               	movlb	8	; select bank8
  8166  0F0E  0091               	movwf	17	;volatile
  8167  0F0F  0008               	return
  8168  0F10                     __end_of_TMR3_WriteTimer:	
  8169                           
  8170                           	psect	text27
  8171  0D57                     __ptext27:	
  8172 ;; *************** function _TMR3_StartTimer *****************
  8173 ;; Defined at:
  8174 ;;		line 96 in file "mcc_generated_files/tmr3.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;		None
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;		None
  8179 ;; Return value:  Size  Location     Type
  8180 ;;                  1    wreg      void 
  8181 ;; Registers used:
  8182 ;;		None
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8188 ;;      Params:         0       0       0       0       0       0       0       0
  8189 ;;      Locals:         0       0       0       0       0       0       0       0
  8190 ;;      Temps:          0       0       0       0       0       0       0       0
  8191 ;;      Totals:         0       0       0       0       0       0       0       0
  8192 ;;Total ram usage:        0 bytes
  8193 ;; Hardware stack levels used:    1
  8194 ;; Hardware stack levels required when called:    5
  8195 ;; This function calls:
  8196 ;;		Nothing
  8197 ;; This function is called by:
  8198 ;;		_TMR3_Initialize
  8199 ;;		_NutRunCycleStart
  8200 ;;		_OnEncPulseEdgeEvent
  8201 ;; This function uses a non-reentrant model
  8202 ;;
  8203                           
  8204                           
  8205                           ;psect for function _TMR3_StartTimer
  8206  0D57                     _TMR3_StartTimer:	
  8207                           
  8208                           ;tmr3.c: 99: T3CONbits.TMR3ON = 1;
  8209                           
  8210                           ;incstack = 0
  8211                           ; Regs used in _TMR3_StartTimer: []
  8212  0D57  0028               	movlb	8	; select bank8
  8213  0D58  1413               	bsf	19,0	;volatile
  8214  0D59  0008               	return
  8215  0D5A                     __end_of_TMR3_StartTimer:	
  8216                           
  8217                           	psect	text28
  8218  0F27                     __ptext28:	
  8219 ;; *************** function _NutRunCycleReset *****************
  8220 ;; Defined at:
  8221 ;;		line 564 in file "main.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;		None
  8224 ;; Auto vars:     Size  Location     Type
  8225 ;;		None
  8226 ;; Return value:  Size  Location     Type
  8227 ;;                  1    wreg      void 
  8228 ;; Registers used:
  8229 ;;		wreg, status,2
  8230 ;; Tracked objects:
  8231 ;;		On entry : 0/0
  8232 ;;		On exit  : 0/0
  8233 ;;		Unchanged: 0/0
  8234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8235 ;;      Params:         0       0       0       0       0       0       0       0
  8236 ;;      Locals:         0       0       0       0       0       0       0       0
  8237 ;;      Temps:          0       0       0       0       0       0       0       0
  8238 ;;      Totals:         0       0       0       0       0       0       0       0
  8239 ;;Total ram usage:        0 bytes
  8240 ;; Hardware stack levels used:    1
  8241 ;; Hardware stack levels required when called:    5
  8242 ;; This function calls:
  8243 ;;		Nothing
  8244 ;; This function is called by:
  8245 ;;		_NutRunCycleStart
  8246 ;;		_EPC_StateMachineControlLoop
  8247 ;; This function uses a non-reentrant model
  8248 ;;
  8249                           
  8250                           
  8251                           ;psect for function _NutRunCycleReset
  8252  0F27                     _NutRunCycleReset:	
  8253                           
  8254                           ;main.c: 566: EncEdgeMinTimeInterval= 0xEFFFFFFF;
  8255                           
  8256                           ;incstack = 0
  8257                           ; Regs used in _NutRunCycleReset: [wreg+status,2]
  8258  0F27  30EF               	movlw	239
  8259  0F28  0021               	movlb	1	; select bank1
  8260  0F29  00ED               	movwf	(_EncEdgeMinTimeInterval+3)^(0+128)
  8261  0F2A  30FF               	movlw	255
  8262  0F2B  00EC               	movwf	(_EncEdgeMinTimeInterval+2)^(0+128)
  8263  0F2C  30FF               	movlw	255
  8264  0F2D  00EB               	movwf	(_EncEdgeMinTimeInterval+1)^(0+128)
  8265  0F2E  30FF               	movlw	255
  8266  0F2F  00EA               	movwf	_EncEdgeMinTimeInterval^(0+128)
  8267                           
  8268                           ;main.c: 567: EncEdgeTimeInterval= 0x00000000;
  8269  0F30  3000               	movlw	0
  8270  0F31  0020               	movlb	0	; select bank0
  8271  0F32  00CE               	movwf	_EncEdgeTimeInterval+3
  8272  0F33  3000               	movlw	0
  8273  0F34  00CD               	movwf	_EncEdgeTimeInterval+2
  8274  0F35  3000               	movlw	0
  8275  0F36  00CC               	movwf	_EncEdgeTimeInterval+1
  8276  0F37  3000               	movlw	0
  8277  0F38  00CB               	movwf	_EncEdgeTimeInterval
  8278                           
  8279                           ;main.c: 569: EncoderPosition= 0;
  8280  0F39  01D1               	clrf	_EncoderPosition
  8281  0F3A  01D2               	clrf	_EncoderPosition+1
  8282                           
  8283                           ;main.c: 572: NutRunLength = 0;
  8284  0F3B  0021               	movlb	1	; select bank1
  8285  0F3C  01E4               	clrf	_NutRunLength^(0+128)
  8286  0F3D  01E5               	clrf	(_NutRunLength+1)^(0+128)
  8287  0F3E  0008               	return
  8288  0F3F                     __end_of_NutRunCycleReset:	
  8289                           
  8290                           	psect	text29
  8291  0D41                     __ptext29:	
  8292 ;; *************** function _ModbussetTimeOut *****************
  8293 ;; Defined at:
  8294 ;;		line 960 in file "modbusMS.c"
  8295 ;; Parameters:    Size  Location     Type
  8296 ;;  u16timeOut      2    0[BANK0 ] unsigned int 
  8297 ;; Auto vars:     Size  Location     Type
  8298 ;;		None
  8299 ;; Return value:  Size  Location     Type
  8300 ;;                  1    wreg      void 
  8301 ;; Registers used:
  8302 ;;		None
  8303 ;; Tracked objects:
  8304 ;;		On entry : 0/0
  8305 ;;		On exit  : 0/0
  8306 ;;		Unchanged: 0/0
  8307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8308 ;;      Params:         0       2       0       0       0       0       0       0
  8309 ;;      Locals:         0       0       0       0       0       0       0       0
  8310 ;;      Temps:          0       0       0       0       0       0       0       0
  8311 ;;      Totals:         0       2       0       0       0       0       0       0
  8312 ;;Total ram usage:        2 bytes
  8313 ;; Hardware stack levels used:    1
  8314 ;; Hardware stack levels required when called:    5
  8315 ;; This function calls:
  8316 ;;		Nothing
  8317 ;; This function is called by:
  8318 ;;		_main
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           
  8323                           ;psect for function _ModbussetTimeOut
  8324  0D41                     _ModbussetTimeOut:	
  8325                           
  8326                           ;incstack = 0
  8327                           ; Regs used in _ModbussetTimeOut: []
  8328  0D41  0008               	return
  8329  0D42                     __end_of_ModbussetTimeOut:	
  8330                           
  8331                           	psect	text30
  8332  00A1                     __ptext30:	
  8333 ;; *************** function _Modbusquery *****************
  8334 ;; Defined at:
  8335 ;;		line 83 in file "modbusMS.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;  telegram        7   22[BANK0 ] struct .
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;  i               2   39[BANK0 ] unsigned int 
  8340 ;;  i               2   35[BANK0 ] unsigned int 
  8341 ;;  u8bytesno       1   38[BANK0 ] unsigned char 
  8342 ;;  u8regsno        1   37[BANK0 ] unsigned char 
  8343 ;; Return value:  Size  Location     Type
  8344 ;;                  1    wreg      char 
  8345 ;; Registers used:
  8346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8347 ;; Tracked objects:
  8348 ;;		On entry : 0/0
  8349 ;;		On exit  : 0/0
  8350 ;;		Unchanged: 0/0
  8351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8352 ;;      Params:         0       7       0       0       0       0       0       0
  8353 ;;      Locals:         0       8       0       0       0       0       0       0
  8354 ;;      Temps:          0       4       0       0       0       0       0       0
  8355 ;;      Totals:         0      19       0       0       0       0       0       0
  8356 ;;Total ram usage:       19 bytes
  8357 ;; Hardware stack levels used:    1
  8358 ;; Hardware stack levels required when called:    7
  8359 ;; This function calls:
  8360 ;;		_ClearSerialRxBuffer
  8361 ;;		_delayMsec
  8362 ;;		_sendTxBuffer
  8363 ;; This function is called by:
  8364 ;;		_main
  8365 ;; This function uses a non-reentrant model
  8366 ;;
  8367                           
  8368                           
  8369                           ;psect for function _Modbusquery
  8370  00A1                     _Modbusquery:	
  8371                           
  8372                           ;modbusMS.c: 85: unsigned char u8regsno, u8bytesno;
  8373                           ;modbusMS.c: 87: if (u8id!=0)
  8374                           
  8375                           ;incstack = 0
  8376                           ; Regs used in _Modbusquery: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8377  00A1  0020               	movlb	0	; select bank0
  8378  00A2  085C               	movf	_u8id,w
  8379  00A3  1D03               	btfss	3,2
  8380  00A4  0008               	return
  8381                           
  8382                           ;modbusMS.c: 91: }
  8383                           ;modbusMS.c: 92: if (u8state != COM_IDLE)
  8384                           
  8385                           ;modbusMS.c: 88: {
  8386                           ;modbusMS.c: 90: return -2;
  8387                           ;	Return value of _Modbusquery is never used
  8388  00A5  085B               	movf	_u8state,w
  8389  00A6  1D03               	btfss	3,2
  8390  00A7  0008               	return
  8391                           
  8392                           ;modbusMS.c: 96: }
  8393                           ;modbusMS.c: 98: if ((telegram.u8id==0) || (telegram.u8id>247)) return -3;
  8394                           
  8395                           ;modbusMS.c: 93: {
  8396                           ;modbusMS.c: 95: return -1;
  8397                           ;	Return value of _Modbusquery is never used
  8398  00A8  0836               	movf	Modbusquery@telegram,w
  8399  00A9  1903               	btfsc	3,2
  8400  00AA  0008               	return
  8401  00AB  30F8               	movlw	248
  8402  00AC  0236               	subwf	Modbusquery@telegram,w
  8403  00AD  1803               	btfsc	3,0
  8404  00AE  0008               	return
  8405                           
  8406                           ;modbusMS.c: 100: au16regs = telegram.au16reg;
  8407                           
  8408                           ;	Return value of _Modbusquery is never used
  8409  00AF  083C               	movf	low ((Modbusquery@telegram| 0+6)),w
  8410  00B0  00BD               	movwf	??_Modbusquery
  8411  00B1  083D               	movf	??_Modbusquery,w
  8412  00B2  00D7               	movwf	_au16regs
  8413                           
  8414                           ;modbusMS.c: 104: au8Buffer[ ID ] = telegram.u8id;
  8415  00B3  0836               	movf	Modbusquery@telegram,w
  8416  00B4  00BD               	movwf	??_Modbusquery
  8417  00B5  083D               	movf	??_Modbusquery,w
  8418  00B6  0021               	movlb	1	; select bank1
  8419  00B7  00A0               	movwf	_au8Buffer^(0+128)
  8420                           
  8421                           ;modbusMS.c: 105: au8Buffer[ FUNC ] = telegram.u8fct;
  8422  00B8  0020               	movlb	0	; select bank0
  8423  00B9  0837               	movf	Modbusquery@telegram+1,w
  8424  00BA  00BD               	movwf	??_Modbusquery
  8425  00BB  083D               	movf	??_Modbusquery,w
  8426  00BC  0021               	movlb	1	; select bank1
  8427  00BD  00A1               	movwf	(_au8Buffer^(0+128)+1)
  8428                           
  8429                           ;modbusMS.c: 106: au8Buffer[ ADD_HI ] = ((unsigned char) ((telegram.u16RegAdd) >> 8));
  8430  00BE  0020               	movlb	0	; select bank0
  8431  00BF  0839               	movf	Modbusquery@telegram+3,w
  8432  00C0  00BD               	movwf	??_Modbusquery
  8433  00C1  083D               	movf	??_Modbusquery,w
  8434  00C2  0021               	movlb	1	; select bank1
  8435  00C3  00A2               	movwf	(_au8Buffer^(0+128)+2)
  8436                           
  8437                           ;modbusMS.c: 107: au8Buffer[ ADD_LO ] = ((unsigned char) ((telegram.u16RegAdd) & 0xff));
  8438  00C4  0020               	movlb	0	; select bank0
  8439  00C5  0838               	movf	Modbusquery@telegram+2,w
  8440  00C6  00BD               	movwf	??_Modbusquery
  8441  00C7  083D               	movf	??_Modbusquery,w
  8442  00C8  0021               	movlb	1	; select bank1
  8443  00C9  00A3               	movwf	(_au8Buffer^(0+128)+3)
  8444                           
  8445                           ;modbusMS.c: 109: switch( telegram.u8fct )
  8446  00CA  29A4               	goto	l4236
  8447  00CB                     l4170:	
  8448                           ;modbusMS.c: 110: {
  8449                           ;modbusMS.c: 111: case MB_FC_READ_COILS:
  8450                           
  8451                           
  8452                           ;modbusMS.c: 112: case MB_FC_READ_DISCRETE_INPUT:
  8453                           ;modbusMS.c: 113: case MB_FC_READ_REGISTERS:
  8454                           ;modbusMS.c: 114: case MB_FC_READ_INPUT_REGISTER:
  8455                           ;modbusMS.c: 115: au8Buffer[ NB_HI ] = ((unsigned char) ((telegram.u16CoilsNo) >> 8));
  8456  00CB  0020               	movlb	0	; select bank0
  8457  00CC  083B               	movf	Modbusquery@telegram+5,w
  8458  00CD  00BD               	movwf	??_Modbusquery
  8459  00CE  083D               	movf	??_Modbusquery,w
  8460  00CF  0021               	movlb	1	; select bank1
  8461  00D0  00A4               	movwf	(_au8Buffer^(0+128)+4)
  8462                           
  8463                           ;modbusMS.c: 116: au8Buffer[ NB_LO ] = ((unsigned char) ((telegram.u16CoilsNo) & 0xff));
  8464  00D1  0020               	movlb	0	; select bank0
  8465  00D2  083A               	movf	Modbusquery@telegram+4,w
  8466  00D3  28FD               	goto	L1
  8467  00D4                     l4176:	
  8468                           ;modbusMS.c: 119: case MB_FC_WRITE_COIL:
  8469                           
  8470                           ;modbusMS.c: 118: break;
  8471                           
  8472                           ;modbusMS.c: 117: u8BufferSize = 6;
  8473                           
  8474                           
  8475                           ;modbusMS.c: 120: au8Buffer[ NB_HI ] = ((au16regs[0] > 0) ? 0xff : 0);
  8476  00D4  0857               	movf	_au16regs,w
  8477  00D5  0086               	movwf	6
  8478  00D6  3001               	movlw	1	; select bank2/3
  8479  00D7  0087               	movwf	7
  8480  00D8  0016               	moviw fsr1++
  8481  00D9  0401               	iorwf	1,w
  8482  00DA  1D03               	btfss	3,2
  8483  00DB  28DF               	goto	l4180
  8484  00DC  01C1               	clrf	_Modbusquery$1760
  8485  00DD  01C2               	clrf	_Modbusquery$1760+1
  8486  00DE  28E3               	goto	l1042
  8487  00DF                     l4180:	
  8488  00DF  30FF               	movlw	255
  8489  00E0  00C1               	movwf	_Modbusquery$1760
  8490  00E1  3000               	movlw	0
  8491  00E2  00C2               	movwf	_Modbusquery$1760+1
  8492  00E3                     l1042:	
  8493  00E3  0841               	movf	_Modbusquery$1760,w
  8494  00E4  00BD               	movwf	??_Modbusquery
  8495  00E5  083D               	movf	??_Modbusquery,w
  8496  00E6  0021               	movlb	1	; select bank1
  8497  00E7  00A4               	movwf	(_au8Buffer^(0+128)+4)
  8498                           
  8499                           ;modbusMS.c: 121: au8Buffer[ NB_LO ] = 0;
  8500  00E8  01A5               	clrf	(_au8Buffer^(0+128)+5)
  8501  00E9  2901               	goto	l4190
  8502  00EA                     l4186:	
  8503                           ;modbusMS.c: 124: case MB_FC_WRITE_REGISTER:
  8504                           
  8505                           ;modbusMS.c: 123: break;
  8506                           
  8507                           ;modbusMS.c: 122: u8BufferSize = 6;
  8508                           
  8509                           
  8510                           ;modbusMS.c: 125: au8Buffer[ NB_HI ] = ((unsigned char) ((au16regs[0]) >> 8));
  8511  00EA  0857               	movf	_au16regs,w
  8512  00EB  0086               	movwf	6
  8513  00EC  3001               	movlw	1	; select bank2/3
  8514  00ED  0087               	movwf	7
  8515  00EE  3F40               	moviw [0]fsr1
  8516  00EF  00BD               	movwf	??_Modbusquery
  8517  00F0  3F41               	moviw [1]fsr1
  8518  00F1  00BE               	movwf	??_Modbusquery+1
  8519  00F2  083E               	movf	??_Modbusquery+1,w
  8520  00F3  00BF               	movwf	??_Modbusquery+2
  8521  00F4  083F               	movf	??_Modbusquery+2,w
  8522  00F5  0021               	movlb	1	; select bank1
  8523  00F6  00A4               	movwf	(_au8Buffer^(0+128)+4)
  8524                           
  8525                           ;modbusMS.c: 126: au8Buffer[ NB_LO ] = ((unsigned char) ((au16regs[0]) & 0xff));
  8526  00F7  0020               	movlb	0	; select bank0
  8527  00F8  0857               	movf	_au16regs,w
  8528  00F9  0086               	movwf	6
  8529  00FA  3001               	movlw	1	; select bank2/3
  8530  00FB  0087               	movwf	7
  8531  00FC  0801               	movf	1,w
  8532  00FD                     L1:	
  8533  00FD  00BD               	movwf	??_Modbusquery
  8534  00FE  083D               	movf	??_Modbusquery,w
  8535  00FF  0021               	movlb	1	; select bank1
  8536  0100  00A5               	movwf	(_au8Buffer^(0+128)+5)
  8537  0101                     l4190:	
  8538                           
  8539                           ;modbusMS.c: 127: u8BufferSize = 6;
  8540  0101  3006               	movlw	6
  8541  0102  0020               	movlb	0	; select bank0
  8542  0103  00BD               	movwf	??_Modbusquery
  8543  0104  083D               	movf	??_Modbusquery,w
  8544  0105  00D9               	movwf	_u8BufferSize
  8545                           
  8546                           ;modbusMS.c: 128: break;
  8547  0106  29BF               	goto	l1037
  8548  0107                     l4192:	
  8549                           ;modbusMS.c: 129: case MB_FC_WRITE_MULTIPLE_COILS:
  8550                           
  8551                           
  8552                           ;modbusMS.c: 130: u8regsno = telegram.u16CoilsNo / 16;
  8553  0107  3004               	movlw	4
  8554  0108  3E36               	addlw	(low (Modbusquery@telegram| 0))& (0+255)
  8555  0109  0086               	movwf	6
  8556  010A  0187               	clrf	7
  8557  010B  3F40               	moviw [0]fsr1
  8558  010C  00BD               	movwf	??_Modbusquery
  8559  010D  3F41               	moviw [1]fsr1
  8560  010E  00BE               	movwf	??_Modbusquery+1
  8561  010F  3004               	movlw	4
  8562  0110                     u2665:	
  8563  0110  36BE               	lsrf	??_Modbusquery+1,f
  8564  0111  0CBD               	rrf	??_Modbusquery,f
  8565  0112  0B89               	decfsz	9,f
  8566  0113  2910               	goto	u2665
  8567  0114  083D               	movf	??_Modbusquery,w
  8568  0115  00BF               	movwf	??_Modbusquery+2
  8569  0116  083F               	movf	??_Modbusquery+2,w
  8570  0117  00C5               	movwf	Modbusquery@u8regsno
  8571                           
  8572                           ;modbusMS.c: 131: u8bytesno = u8regsno * 2;
  8573  0118  3545               	lslf	Modbusquery@u8regsno,w
  8574  0119  00BD               	movwf	??_Modbusquery
  8575  011A  083D               	movf	??_Modbusquery,w
  8576  011B  00C6               	movwf	Modbusquery@u8bytesno
  8577                           
  8578                           ;modbusMS.c: 132: if ((telegram.u16CoilsNo % 16) != 0)
  8579  011C  300F               	movlw	15
  8580  011D  053A               	andwf	Modbusquery@telegram+4,w
  8581  011E  00BD               	movwf	??_Modbusquery
  8582  011F  3000               	movlw	0
  8583  0120  053B               	andwf	Modbusquery@telegram+5,w
  8584  0121  00BE               	movwf	??_Modbusquery+1
  8585  0122  083D               	movf	??_Modbusquery,w
  8586  0123  043E               	iorwf	??_Modbusquery+1,w
  8587  0124  1903               	btfsc	3,2
  8588  0125  292E               	goto	l4200
  8589                           
  8590                           ;modbusMS.c: 133: {
  8591                           ;modbusMS.c: 134: u8bytesno++;
  8592  0126  3001               	movlw	1
  8593  0127  00BD               	movwf	??_Modbusquery
  8594  0128  083D               	movf	??_Modbusquery,w
  8595  0129  07C6               	addwf	Modbusquery@u8bytesno,f
  8596                           
  8597                           ;modbusMS.c: 135: u8regsno++;
  8598  012A  3001               	movlw	1
  8599  012B  00BD               	movwf	??_Modbusquery
  8600  012C  083D               	movf	??_Modbusquery,w
  8601  012D  07C5               	addwf	Modbusquery@u8regsno,f
  8602  012E                     l4200:	
  8603                           
  8604                           ;modbusMS.c: 136: }
  8605                           ;modbusMS.c: 138: au8Buffer[ NB_HI ] = ((unsigned char) ((telegram.u16CoilsNo) >> 8));
  8606  012E  083B               	movf	Modbusquery@telegram+5,w
  8607  012F  00BD               	movwf	??_Modbusquery
  8608  0130  083D               	movf	??_Modbusquery,w
  8609  0131  0021               	movlb	1	; select bank1
  8610  0132  00A4               	movwf	(_au8Buffer^(0+128)+4)
  8611                           
  8612                           ;modbusMS.c: 139: au8Buffer[ NB_LO ] = ((unsigned char) ((telegram.u16CoilsNo) & 0xff));
  8613  0133  0020               	movlb	0	; select bank0
  8614  0134  083A               	movf	Modbusquery@telegram+4,w
  8615  0135  00BD               	movwf	??_Modbusquery
  8616  0136  083D               	movf	??_Modbusquery,w
  8617  0137  0021               	movlb	1	; select bank1
  8618  0138  00A5               	movwf	(_au8Buffer^(0+128)+5)
  8619                           
  8620                           ;modbusMS.c: 140: au8Buffer[ NB_LO+1 ] = u8bytesno;
  8621  0139  0020               	movlb	0	; select bank0
  8622  013A  0846               	movf	Modbusquery@u8bytesno,w
  8623  013B  00BD               	movwf	??_Modbusquery
  8624  013C  083D               	movf	??_Modbusquery,w
  8625  013D  0021               	movlb	1	; select bank1
  8626  013E  00A6               	movwf	(_au8Buffer^(0+128)+6)
  8627                           
  8628                           ;modbusMS.c: 141: u8BufferSize = 7;
  8629  013F  3007               	movlw	7
  8630  0140  0020               	movlb	0	; select bank0
  8631  0141  00BD               	movwf	??_Modbusquery
  8632  0142  083D               	movf	??_Modbusquery,w
  8633  0143  00D9               	movwf	_u8BufferSize
  8634                           
  8635                           ;modbusMS.c: 143: u8regsno = u8bytesno = 0;
  8636  0144  01C6               	clrf	Modbusquery@u8bytesno
  8637  0145  01C5               	clrf	Modbusquery@u8regsno
  8638                           
  8639                           ;modbusMS.c: 144: for (unsigned int i = 0; i < telegram.u16CoilsNo; i++)
  8640  0146  01C3               	clrf	Modbusquery@i
  8641  0147  01C4               	clrf	Modbusquery@i+1
  8642  0148                     l1046:	
  8643  0148  083B               	movf	Modbusquery@telegram+5,w
  8644  0149  0244               	subwf	Modbusquery@i+1,w
  8645  014A  1D03               	skipz
  8646  014B  294E               	goto	u2685
  8647  014C  083A               	movf	Modbusquery@telegram+4,w
  8648  014D  0243               	subwf	Modbusquery@i,w
  8649  014E                     u2685:	
  8650  014E  1803               	btfsc	3,0
  8651  014F  29BF               	goto	l1037
  8652                           
  8653                           ;modbusMS.c: 145: {
  8654  0150  3001               	movlw	1
  8655  0151  07C3               	addwf	Modbusquery@i,f
  8656  0152  3000               	movlw	0
  8657  0153  3DC4               	addwfc	Modbusquery@i+1,f
  8658  0154  2948               	goto	l1046
  8659  0155                     l4214:	
  8660                           ;modbusMS.c: 151: case MB_FC_WRITE_MULTIPLE_REGISTERS:
  8661                           
  8662                           ;modbusMS.c: 148: }
  8663                           ;modbusMS.c: 149: break;
  8664                           
  8665                           
  8666                           ;modbusMS.c: 152: au8Buffer[ NB_HI ] = ((unsigned char) ((telegram.u16CoilsNo) >> 8));
  8667  0155  083B               	movf	Modbusquery@telegram+5,w
  8668  0156  00BD               	movwf	??_Modbusquery
  8669  0157  083D               	movf	??_Modbusquery,w
  8670  0158  0021               	movlb	1	; select bank1
  8671  0159  00A4               	movwf	(_au8Buffer^(0+128)+4)
  8672                           
  8673                           ;modbusMS.c: 153: au8Buffer[ NB_LO ] = ((unsigned char) ((telegram.u16CoilsNo) & 0xff));
  8674  015A  0020               	movlb	0	; select bank0
  8675  015B  083A               	movf	Modbusquery@telegram+4,w
  8676  015C  00BD               	movwf	??_Modbusquery
  8677  015D  083D               	movf	??_Modbusquery,w
  8678  015E  0021               	movlb	1	; select bank1
  8679  015F  00A5               	movwf	(_au8Buffer^(0+128)+5)
  8680                           
  8681                           ;modbusMS.c: 154: au8Buffer[ NB_LO+1 ] = (unsigned char) ( telegram.u16CoilsNo * 2 );
  8682  0160  0020               	movlb	0	; select bank0
  8683  0161  353A               	lslf	Modbusquery@telegram+4,w
  8684  0162  00BD               	movwf	??_Modbusquery
  8685  0163  083D               	movf	??_Modbusquery,w
  8686  0164  0021               	movlb	1	; select bank1
  8687  0165  00A6               	movwf	(_au8Buffer^(0+128)+6)
  8688                           
  8689                           ;modbusMS.c: 155: u8BufferSize = 7;
  8690  0166  3007               	movlw	7
  8691  0167  0020               	movlb	0	; select bank0
  8692  0168  00BD               	movwf	??_Modbusquery
  8693  0169  083D               	movf	??_Modbusquery,w
  8694  016A  00D9               	movwf	_u8BufferSize
  8695                           
  8696                           ;modbusMS.c: 157: for (unsigned int i=0; i< telegram.u16CoilsNo; i++)
  8697  016B  01C7               	clrf	Modbusquery@i_1762
  8698  016C  01C8               	clrf	Modbusquery@i_1762+1
  8699  016D                     l4232:	
  8700  016D  083B               	movf	Modbusquery@telegram+5,w
  8701  016E  0248               	subwf	Modbusquery@i_1762+1,w
  8702  016F  1D03               	skipz
  8703  0170  2973               	goto	u2695
  8704  0171  083A               	movf	Modbusquery@telegram+4,w
  8705  0172  0247               	subwf	Modbusquery@i_1762,w
  8706  0173                     u2695:	
  8707  0173  1803               	btfsc	3,0
  8708  0174  29BF               	goto	l1037
  8709                           
  8710                           ;modbusMS.c: 158: {
  8711                           ;modbusMS.c: 159: au8Buffer[ u8BufferSize ] = ((unsigned char) ((au16regs[ i ]) >> 8));
  8712  0175  3547               	lslf	Modbusquery@i_1762,w
  8713  0176  0757               	addwf	_au16regs,w
  8714  0177  00BD               	movwf	??_Modbusquery
  8715  0178  083D               	movf	??_Modbusquery,w
  8716  0179  0086               	movwf	6
  8717  017A  3001               	movlw	1	; select bank2/3
  8718  017B  0087               	movwf	7
  8719  017C  3F40               	moviw [0]fsr1
  8720  017D  00BE               	movwf	??_Modbusquery+1
  8721  017E  3F41               	moviw [1]fsr1
  8722  017F  00BF               	movwf	??_Modbusquery+2
  8723  0180  083F               	movf	??_Modbusquery+2,w
  8724  0181  00C0               	movwf	??_Modbusquery+3
  8725  0182  0859               	movf	_u8BufferSize,w
  8726  0183  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  8727  0184  0086               	movwf	6
  8728  0185  0187               	clrf	7
  8729  0186  0840               	movf	??_Modbusquery+3,w
  8730  0187  0081               	movwf	1
  8731                           
  8732                           ;modbusMS.c: 160: u8BufferSize++;
  8733  0188  3001               	movlw	1
  8734  0189  00BD               	movwf	??_Modbusquery
  8735  018A  083D               	movf	??_Modbusquery,w
  8736  018B  07D9               	addwf	_u8BufferSize,f
  8737                           
  8738                           ;modbusMS.c: 161: au8Buffer[ u8BufferSize ] = ((unsigned char) ((au16regs[ i ]) & 0xff))
      +                          ;
  8739  018C  3547               	lslf	Modbusquery@i_1762,w
  8740  018D  0757               	addwf	_au16regs,w
  8741  018E  00BD               	movwf	??_Modbusquery
  8742  018F  083D               	movf	??_Modbusquery,w
  8743  0190  0086               	movwf	6
  8744  0191  3001               	movlw	1	; select bank2/3
  8745  0192  0087               	movwf	7
  8746  0193  0801               	movf	1,w
  8747  0194  00BE               	movwf	??_Modbusquery+1
  8748  0195  0859               	movf	_u8BufferSize,w
  8749  0196  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  8750  0197  0086               	movwf	6
  8751  0198  0187               	clrf	7
  8752  0199  083E               	movf	??_Modbusquery+1,w
  8753  019A  0081               	movwf	1
  8754                           
  8755                           ;modbusMS.c: 162: u8BufferSize++;
  8756  019B  3001               	movlw	1
  8757  019C  00BD               	movwf	??_Modbusquery
  8758  019D  083D               	movf	??_Modbusquery,w
  8759  019E  07D9               	addwf	_u8BufferSize,f
  8760  019F  3001               	movlw	1
  8761  01A0  07C7               	addwf	Modbusquery@i_1762,f
  8762  01A1  3000               	movlw	0
  8763  01A2  3DC8               	addwfc	Modbusquery@i_1762+1,f
  8764  01A3  296D               	goto	l4232
  8765  01A4                     l4236:	
  8766                           ;modbusMS.c: 165: }
  8767                           
  8768                           ;modbusMS.c: 163: }
  8769                           ;modbusMS.c: 164: break;
  8770                           
  8771  01A4  0020               	movlb	0	; select bank0
  8772  01A5  0837               	movf	Modbusquery@telegram+1,w
  8773                           
  8774                           ; Switch size 1, requested type "space"
  8775                           ; Number of cases is 8, Range of values is 1 to 16
  8776                           ; switch strategies available:
  8777                           ; Name         Instructions Cycles
  8778                           ; simple_byte           25    13 (average)
  8779                           ; direct_byte           41     9 (fixed)
  8780                           ; jumptable            263     9 (fixed)
  8781                           ;	Chosen strategy is simple_byte
  8782  01A6  3A01               	xorlw	1	; case 1
  8783  01A7  1903               	skipnz
  8784  01A8  28CB               	goto	l4170
  8785  01A9  3A03               	xorlw	3	; case 2
  8786  01AA  1903               	skipnz
  8787  01AB  28CB               	goto	l4170
  8788  01AC  3A01               	xorlw	1	; case 3
  8789  01AD  1903               	skipnz
  8790  01AE  28CB               	goto	l4170
  8791  01AF  3A07               	xorlw	7	; case 4
  8792  01B0  1903               	skipnz
  8793  01B1  28CB               	goto	l4170
  8794  01B2  3A01               	xorlw	1	; case 5
  8795  01B3  1903               	skipnz
  8796  01B4  28D4               	goto	l4176
  8797  01B5  3A03               	xorlw	3	; case 6
  8798  01B6  1903               	skipnz
  8799  01B7  28EA               	goto	l4186
  8800  01B8  3A09               	xorlw	9	; case 15
  8801  01B9  1903               	skipnz
  8802  01BA  2907               	goto	l4192
  8803  01BB  3A1F               	xorlw	31	; case 16
  8804  01BC  1903               	skipnz
  8805  01BD  2955               	goto	l4214
  8806  01BE  29BF               	goto	l1037
  8807  01BF                     l1037:	
  8808                           
  8809                           ;modbusMS.c: 166: PIE1bits.RCIE = 0;
  8810  01BF  0021               	movlb	1	; select bank1
  8811  01C0  1291               	bcf	17,5	;volatile
  8812                           
  8813                           ;modbusMS.c: 168: sendTxBuffer();
  8814  01C1  3183  239E  3180   	fcall	_sendTxBuffer
  8815                           
  8816                           ;modbusMS.c: 170: u8state = COM_WAITING;
  8817  01C4  0020               	movlb	0	; select bank0
  8818  01C5  01DB               	clrf	_u8state
  8819  01C6  0ADB               	incf	_u8state,f
  8820  01C7                     l1053:	
  8821                           ;modbusMS.c: 173: {
  8822                           
  8823                           ;modbusMS.c: 172: while(0 == PIR1bits.TXIF)
  8824                           
  8825  01C7  1E11               	btfss	17,4	;volatile
  8826  01C8  29C7               	goto	l1053
  8827                           
  8828                           ;modbusMS.c: 174: }
  8829                           ;modbusMS.c: 175: PIR1bits.TXIF=0;
  8830  01C9  1211               	bcf	17,4	;volatile
  8831                           
  8832                           ;modbusMS.c: 181: delayMsec(1);
  8833  01CA  3000               	movlw	0
  8834  01CB  00A3               	movwf	delayMsec@timems+3
  8835  01CC  3000               	movlw	0
  8836  01CD  00A2               	movwf	delayMsec@timems+2
  8837  01CE  3000               	movlw	0
  8838  01CF  00A1               	movwf	delayMsec@timems+1
  8839  01D0  3001               	movlw	1
  8840  01D1  00A0               	movwf	delayMsec@timems
  8841  01D2  3187  2799  3180   	fcall	_delayMsec
  8842                           
  8843                           ;modbusMS.c: 183: PIE1bits.RCIE = 1;
  8844  01D5  0021               	movlb	1	; select bank1
  8845  01D6  1691               	bsf	17,5	;volatile
  8846                           
  8847                           ;modbusMS.c: 185: do { LATBbits.LATB6 = 0; } while(0);
  8848  01D7  0022               	movlb	2	; select bank2
  8849  01D8  130D               	bcf	13,6	;volatile
  8850                           
  8851                           ;modbusMS.c: 187: ClearSerialRxBuffer();
  8852  01D9  318E  2649         	fcall	_ClearSerialRxBuffer
  8853  01DB  0008               	return
  8854  01DC                     __end_of_Modbusquery:	
  8855                           ;modbusMS.c: 190: return 0;
  8856                           ;	Return value of _Modbusquery is never used
  8857                           
  8858                           
  8859                           	psect	text31
  8860  039E                     __ptext31:	
  8861 ;; *************** function _sendTxBuffer *****************
  8862 ;; Defined at:
  8863 ;;		line 444 in file "modbusMS.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;		None
  8866 ;; Auto vars:     Size  Location     Type
  8867 ;;  i               2   20[BANK0 ] int 
  8868 ;;  u16crc          2   18[BANK0 ] unsigned int 
  8869 ;;  i               1   17[BANK0 ] unsigned char 
  8870 ;; Return value:  Size  Location     Type
  8871 ;;                  1    wreg      void 
  8872 ;; Registers used:
  8873 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8874 ;; Tracked objects:
  8875 ;;		On entry : 0/0
  8876 ;;		On exit  : 0/0
  8877 ;;		Unchanged: 0/0
  8878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8879 ;;      Params:         0       0       0       0       0       0       0       0
  8880 ;;      Locals:         0       5       0       0       0       0       0       0
  8881 ;;      Temps:          0       4       0       0       0       0       0       0
  8882 ;;      Totals:         0       9       0       0       0       0       0       0
  8883 ;;Total ram usage:        9 bytes
  8884 ;; Hardware stack levels used:    1
  8885 ;; Hardware stack levels required when called:    6
  8886 ;; This function calls:
  8887 ;;		_Serialwrite
  8888 ;;		_calcCRC
  8889 ;;		_millis
  8890 ;; This function is called by:
  8891 ;;		_Modbusquery
  8892 ;;		_ModbuspollSlave
  8893 ;;		_process_FC1
  8894 ;;		_process_FC3
  8895 ;;		_process_FC5
  8896 ;;		_process_FC6
  8897 ;;		_process_FC15
  8898 ;;		_process_FC16
  8899 ;; This function uses a non-reentrant model
  8900 ;;
  8901                           
  8902                           
  8903                           ;psect for function _sendTxBuffer
  8904  039E                     _sendTxBuffer:	
  8905                           
  8906                           ;modbusMS.c: 446: unsigned char i = 0;
  8907                           
  8908                           ;incstack = 0
  8909                           ; Regs used in _sendTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8910  039E  0020               	movlb	0	; select bank0
  8911  039F  01B1               	clrf	sendTxBuffer@i
  8912                           
  8913                           ;modbusMS.c: 449: PIR1bits.RCIF=0;
  8914  03A0  1291               	bcf	17,5	;volatile
  8915                           
  8916                           ;modbusMS.c: 450: PIE1bits.RCIE = 0;
  8917  03A1  0021               	movlb	1	; select bank1
  8918  03A2  1291               	bcf	17,5	;volatile
  8919                           
  8920                           ;modbusMS.c: 451: do { LATBbits.LATB6 = 1; } while(0);
  8921  03A3  0022               	movlb	2	; select bank2
  8922  03A4  170D               	bsf	13,6	;volatile
  8923                           
  8924                           ;modbusMS.c: 453: unsigned int u16crc = calcCRC( u8BufferSize );
  8925  03A5  0020               	movlb	0	; select bank0
  8926  03A6  0859               	movf	_u8BufferSize,w
  8927  03A7  3185  25B6  3183   	fcall	_calcCRC
  8928  03AA  0020               	movlb	0	; select bank0
  8929  03AB  0821               	movf	?_calcCRC+1,w
  8930  03AC  00B3               	movwf	sendTxBuffer@u16crc+1
  8931  03AD  0820               	movf	?_calcCRC,w
  8932  03AE  00B2               	movwf	sendTxBuffer@u16crc
  8933                           
  8934                           ;modbusMS.c: 454: au8Buffer[ u8BufferSize ] = u16crc >> 8;
  8935  03AF  0833               	movf	sendTxBuffer@u16crc+1,w
  8936  03B0  00AD               	movwf	??_sendTxBuffer
  8937  03B1  0859               	movf	_u8BufferSize,w
  8938  03B2  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  8939  03B3  0086               	movwf	6
  8940  03B4  0187               	clrf	7
  8941  03B5  082D               	movf	??_sendTxBuffer,w
  8942  03B6  0081               	movwf	1
  8943                           
  8944                           ;modbusMS.c: 455: u8BufferSize++;
  8945  03B7  3001               	movlw	1
  8946  03B8  00AD               	movwf	??_sendTxBuffer
  8947  03B9  082D               	movf	??_sendTxBuffer,w
  8948  03BA  07D9               	addwf	_u8BufferSize,f
  8949                           
  8950                           ;modbusMS.c: 456: au8Buffer[ u8BufferSize ] = u16crc & 0x00ff;
  8951  03BB  0832               	movf	sendTxBuffer@u16crc,w
  8952  03BC  00AD               	movwf	??_sendTxBuffer
  8953  03BD  0859               	movf	_u8BufferSize,w
  8954  03BE  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  8955  03BF  0086               	movwf	6
  8956  03C0  0187               	clrf	7
  8957  03C1  082D               	movf	??_sendTxBuffer,w
  8958  03C2  0081               	movwf	1
  8959                           
  8960                           ;modbusMS.c: 457: u8BufferSize++;
  8961  03C3  3001               	movlw	1
  8962  03C4  00AD               	movwf	??_sendTxBuffer
  8963  03C5  082D               	movf	??_sendTxBuffer,w
  8964  03C6  07D9               	addwf	_u8BufferSize,f
  8965                           
  8966                           ;modbusMS.c: 468: for(int i=0;i<u8BufferSize;i++)
  8967  03C7  01B4               	clrf	sendTxBuffer@i_1782
  8968  03C8  01B5               	clrf	sendTxBuffer@i_1782+1
  8969  03C9                     l3860:	
  8970  03C9  0835               	movf	sendTxBuffer@i_1782+1,w
  8971  03CA  3A80               	xorlw	128
  8972  03CB  00AD               	movwf	??_sendTxBuffer
  8973  03CC  3080               	movlw	128
  8974  03CD  022D               	subwf	??_sendTxBuffer,w
  8975  03CE  1D03               	skipz
  8976  03CF  2BD2               	goto	u2215
  8977  03D0  0859               	movf	_u8BufferSize,w
  8978  03D1  0234               	subwf	sendTxBuffer@i_1782,w
  8979  03D2                     u2215:	
  8980  03D2  1803               	btfsc	3,0
  8981  03D3  2BE3               	goto	l3862
  8982                           
  8983                           ;modbusMS.c: 469: Serialwrite(au8Buffer[i]);
  8984  03D4  0020               	movlb	0	; select bank0
  8985  03D5  0834               	movf	sendTxBuffer@i_1782,w
  8986  03D6  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  8987  03D7  0086               	movwf	6
  8988  03D8  0187               	clrf	7
  8989  03D9  0801               	movf	1,w
  8990  03DA  318D  25E9  3183   	fcall	_Serialwrite
  8991  03DD  3001               	movlw	1
  8992  03DE  0020               	movlb	0	; select bank0
  8993  03DF  07B4               	addwf	sendTxBuffer@i_1782,f
  8994  03E0  3000               	movlw	0
  8995  03E1  3DB5               	addwfc	sendTxBuffer@i_1782+1,f
  8996  03E2  2BC9               	goto	l3860
  8997  03E3                     l3862:	
  8998                           
  8999                           ;modbusMS.c: 479: u8BufferSize = 0;
  9000  03E3  0020               	movlb	0	; select bank0
  9001  03E4  01D9               	clrf	_u8BufferSize
  9002                           
  9003                           ;modbusMS.c: 482: u32timeOut = millis() + (unsigned long) u16timeOut;
  9004  03E5  0021               	movlb	1	; select bank1
  9005  03E6  0850               	movf	_u16timeOut^(0+128),w
  9006  03E7  0020               	movlb	0	; select bank0
  9007  03E8  00AD               	movwf	??_sendTxBuffer
  9008  03E9  0021               	movlb	1	; select bank1
  9009  03EA  0851               	movf	(_u16timeOut+1)^(0+128),w
  9010  03EB  0020               	movlb	0	; select bank0
  9011  03EC  00AE               	movwf	??_sendTxBuffer+1
  9012  03ED  01AF               	clrf	??_sendTxBuffer+2
  9013  03EE  01B0               	clrf	??_sendTxBuffer+3
  9014  03EF  318E  2675         	fcall	_millis
  9015  03F1  0020               	movlb	0	; select bank0
  9016  03F2  0820               	movf	?_millis,w
  9017  03F3  07AD               	addwf	??_sendTxBuffer,f
  9018  03F4  0821               	movf	?_millis+1,w
  9019  03F5  3DAE               	addwfc	??_sendTxBuffer+1,f
  9020  03F6  0822               	movf	?_millis+2,w
  9021  03F7  3DAF               	addwfc	??_sendTxBuffer+2,f
  9022  03F8  0823               	movf	?_millis+3,w
  9023  03F9  3DB0               	addwfc	??_sendTxBuffer+3,f
  9024  03FA  0830               	movf	??_sendTxBuffer+3,w
  9025  03FB  0022               	movlb	2	; select bank2
  9026  03FC  00B1               	movwf	(_u32timeOut+3)^(0+256)
  9027  03FD  0020               	movlb	0	; select bank0
  9028  03FE  082F               	movf	??_sendTxBuffer+2,w
  9029  03FF  0022               	movlb	2	; select bank2
  9030  0400  00B0               	movwf	(_u32timeOut+2)^(0+256)
  9031  0401  0020               	movlb	0	; select bank0
  9032  0402  082E               	movf	??_sendTxBuffer+1,w
  9033  0403  0022               	movlb	2	; select bank2
  9034  0404  00AF               	movwf	(_u32timeOut+1)^(0+256)
  9035  0405  0020               	movlb	0	; select bank0
  9036  0406  082D               	movf	??_sendTxBuffer,w
  9037  0407  0022               	movlb	2	; select bank2
  9038  0408  00AE               	movwf	_u32timeOut^(0+256)
  9039                           
  9040                           ;modbusMS.c: 485: u16OutCnt++;
  9041  0409  3001               	movlw	1
  9042  040A  0021               	movlb	1	; select bank1
  9043  040B  07D4               	addwf	_u16OutCnt^(0+128),f
  9044  040C  3000               	movlw	0
  9045  040D  3DD5               	addwfc	(_u16OutCnt+1)^(0+128),f
  9046  040E  0008               	return
  9047  040F                     __end_of_sendTxBuffer:	
  9048                           
  9049                           	psect	text32
  9050  0DE9                     __ptext32:	
  9051 ;; *************** function _Serialwrite *****************
  9052 ;; Defined at:
  9053 ;;		line 811 in file "main.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;  temp            1    wreg     unsigned char 
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;  temp            1    0[BANK0 ] unsigned char 
  9058 ;; Return value:  Size  Location     Type
  9059 ;;                  1    wreg      void 
  9060 ;; Registers used:
  9061 ;;		wreg
  9062 ;; Tracked objects:
  9063 ;;		On entry : 0/0
  9064 ;;		On exit  : 0/0
  9065 ;;		Unchanged: 0/0
  9066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9067 ;;      Params:         0       0       0       0       0       0       0       0
  9068 ;;      Locals:         0       1       0       0       0       0       0       0
  9069 ;;      Temps:          0       0       0       0       0       0       0       0
  9070 ;;      Totals:         0       1       0       0       0       0       0       0
  9071 ;;Total ram usage:        1 bytes
  9072 ;; Hardware stack levels used:    1
  9073 ;; Hardware stack levels required when called:    5
  9074 ;; This function calls:
  9075 ;;		Nothing
  9076 ;; This function is called by:
  9077 ;;		_sendTxBuffer
  9078 ;; This function uses a non-reentrant model
  9079 ;;
  9080                           
  9081                           
  9082                           ;psect for function _Serialwrite
  9083  0DE9                     _Serialwrite:	
  9084                           
  9085                           ;incstack = 0
  9086                           ; Regs used in _Serialwrite: [wreg]
  9087                           ;Serialwrite@temp stored from wreg
  9088  0DE9  0020               	movlb	0	; select bank0
  9089  0DEA  00A0               	movwf	Serialwrite@temp
  9090                           
  9091                           ;main.c: 814: PIR1bits.TXIF=0;
  9092  0DEB  1211               	bcf	17,4	;volatile
  9093                           
  9094                           ;main.c: 815: TX1REG = temp;
  9095  0DEC  0820               	movf	Serialwrite@temp,w
  9096  0DED  0023               	movlb	3	; select bank3
  9097  0DEE  009A               	movwf	26	;volatile
  9098  0DEF                     l871:	
  9099                           ;main.c: 817: {
  9100                           
  9101                           ;main.c: 816: while(0 == PIR1bits.TXIF)
  9102                           
  9103  0DEF  0020               	movlb	0	; select bank0
  9104  0DF0  1A11               	btfsc	17,4	;volatile
  9105  0DF1  0008               	return
  9106  0DF2  2DEF               	goto	l871
  9107  0DF3                     __end_of_Serialwrite:	
  9108                           
  9109                           	psect	text33
  9110  0799                     __ptext33:	
  9111 ;; *************** function _delayMsec *****************
  9112 ;; Defined at:
  9113 ;;		line 724 in file "main.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;  timems          4    0[BANK0 ] unsigned long 
  9116 ;; Auto vars:     Size  Location     Type
  9117 ;;		None
  9118 ;; Return value:  Size  Location     Type
  9119 ;;                  1    wreg      void 
  9120 ;; Registers used:
  9121 ;;		wreg, status,2
  9122 ;; Tracked objects:
  9123 ;;		On entry : 0/0
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9127 ;;      Params:         0       4       0       0       0       0       0       0
  9128 ;;      Locals:         0       0       0       0       0       0       0       0
  9129 ;;      Temps:          0       4       0       0       0       0       0       0
  9130 ;;      Totals:         0       8       0       0       0       0       0       0
  9131 ;;Total ram usage:        8 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; Hardware stack levels required when called:    5
  9134 ;; This function calls:
  9135 ;;		Nothing
  9136 ;; This function is called by:
  9137 ;;		_Modbusquery
  9138 ;; This function uses a non-reentrant model
  9139 ;;
  9140                           
  9141                           
  9142                           ;psect for function _delayMsec
  9143  0799                     _delayMsec:	
  9144                           
  9145                           ;main.c: 726: delayCount=0;
  9146                           
  9147                           ;incstack = 0
  9148                           ; Regs used in _delayMsec: [wreg+status,2]
  9149  0799  0021               	movlb	1	; select bank1
  9150  079A  01DE               	clrf	_delayCount^(0+128)
  9151  079B  01DF               	clrf	(_delayCount+1)^(0+128)
  9152                           
  9153                           ;main.c: 727: delayFlag=1;
  9154  079C  0020               	movlb	0	; select bank0
  9155  079D  01E1               	clrf	_delayFlag
  9156  079E  0AE1               	incf	_delayFlag,f
  9157  079F                     l3822:	
  9158                           ;main.c: 728: while(delayCount < timems);
  9159                           
  9160  079F  0021               	movlb	1	; select bank1
  9161  07A0  085E               	movf	_delayCount^(0+128),w
  9162  07A1  0020               	movlb	0	; select bank0
  9163  07A2  00A4               	movwf	??_delayMsec
  9164  07A3  0021               	movlb	1	; select bank1
  9165  07A4  085F               	movf	(_delayCount+1)^(0+128),w
  9166  07A5  0020               	movlb	0	; select bank0
  9167  07A6  00A5               	movwf	??_delayMsec+1
  9168  07A7  01A6               	clrf	??_delayMsec+2
  9169  07A8  01A7               	clrf	??_delayMsec+3
  9170  07A9  0823               	movf	delayMsec@timems+3,w
  9171  07AA  0227               	subwf	??_delayMsec+3,w
  9172  07AB  1D03               	skipz
  9173  07AC  2FB7               	goto	u2195
  9174  07AD  0822               	movf	delayMsec@timems+2,w
  9175  07AE  0226               	subwf	??_delayMsec+2,w
  9176  07AF  1D03               	skipz
  9177  07B0  2FB7               	goto	u2195
  9178  07B1  0821               	movf	delayMsec@timems+1,w
  9179  07B2  0225               	subwf	??_delayMsec+1,w
  9180  07B3  1D03               	skipz
  9181  07B4  2FB7               	goto	u2195
  9182  07B5  0820               	movf	delayMsec@timems,w
  9183  07B6  0224               	subwf	??_delayMsec,w
  9184  07B7                     u2195:	
  9185  07B7  1C03               	skipc
  9186  07B8  2F9F               	goto	l3822
  9187                           
  9188                           ;main.c: 729: delayFlag=0;
  9189  07B9  01E1               	clrf	_delayFlag
  9190  07BA  0008               	return
  9191  07BB                     __end_of_delayMsec:	
  9192                           
  9193                           	psect	text34
  9194  0E49                     __ptext34:	
  9195 ;; *************** function _ClearSerialRxBuffer *****************
  9196 ;; Defined at:
  9197 ;;		line 795 in file "main.c"
  9198 ;; Parameters:    Size  Location     Type
  9199 ;;		None
  9200 ;; Auto vars:     Size  Location     Type
  9201 ;;  bdummy          1    3[BANK0 ] unsigned char 
  9202 ;; Return value:  Size  Location     Type
  9203 ;;                  1    wreg      void 
  9204 ;; Registers used:
  9205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9206 ;; Tracked objects:
  9207 ;;		On entry : 0/0
  9208 ;;		On exit  : 0/0
  9209 ;;		Unchanged: 0/0
  9210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9211 ;;      Params:         0       0       0       0       0       0       0       0
  9212 ;;      Locals:         0       1       0       0       0       0       0       0
  9213 ;;      Temps:          0       1       0       0       0       0       0       0
  9214 ;;      Totals:         0       2       0       0       0       0       0       0
  9215 ;;Total ram usage:        2 bytes
  9216 ;; Hardware stack levels used:    1
  9217 ;; Hardware stack levels required when called:    6
  9218 ;; This function calls:
  9219 ;;		_EUSART_Read
  9220 ;; This function is called by:
  9221 ;;		_Modbusquery
  9222 ;; This function uses a non-reentrant model
  9223 ;;
  9224                           
  9225                           
  9226                           ;psect for function _ClearSerialRxBuffer
  9227  0E49                     _ClearSerialRxBuffer:	
  9228  0E49                     l3832:	
  9229                           ;main.c: 797: unsigned char bdummy;
  9230                           ;main.c: 798: while(eusartRxCount)
  9231                           
  9232                           ;incstack = 0
  9233                           ; Regs used in _ClearSerialRxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9234                           
  9235  0E49  0020               	movlb	0	; select bank0
  9236  0E4A  0868               	movf	_eusartRxCount,w	;volatile
  9237  0E4B  1903               	btfsc	3,2
  9238  0E4C  2E55               	goto	l3834
  9239                           
  9240                           ;main.c: 799: {
  9241                           ;main.c: 800: bdummy=EUSART_Read();
  9242  0E4D  3187  27DC  318E   	fcall	_EUSART_Read
  9243  0E50  0020               	movlb	0	; select bank0
  9244  0E51  00A2               	movwf	??_ClearSerialRxBuffer
  9245  0E52  0822               	movf	??_ClearSerialRxBuffer,w
  9246  0E53  00A3               	movwf	ClearSerialRxBuffer@bdummy
  9247  0E54  2E49               	goto	l3832
  9248  0E55                     l3834:	
  9249                           
  9250                           ;main.c: 801: }
  9251                           ;main.c: 802: eusartRxCount=0;
  9252  0E55  01E8               	clrf	_eusartRxCount	;volatile
  9253  0E56  0008               	return
  9254  0E57                     __end_of_ClearSerialRxBuffer:	
  9255                           
  9256                           	psect	text35
  9257  02EC                     __ptext35:	
  9258 ;; *************** function _ModbuspollMaster *****************
  9259 ;; Defined at:
  9260 ;;		line 208 in file "modbusMS.c"
  9261 ;; Parameters:    Size  Location     Type
  9262 ;;		None
  9263 ;; Auto vars:     Size  Location     Type
  9264 ;;  u8current       1   27[BANK0 ] unsigned char 
  9265 ;;  u8exception     1   26[BANK0 ] unsigned char 
  9266 ;;  i8state         1   25[BANK0 ] char 
  9267 ;; Return value:  Size  Location     Type
  9268 ;;                  1    wreg      char 
  9269 ;; Registers used:
  9270 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9271 ;; Tracked objects:
  9272 ;;		On entry : 0/0
  9273 ;;		On exit  : 0/0
  9274 ;;		Unchanged: 0/0
  9275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9276 ;;      Params:         0       0       0       0       0       0       0       0
  9277 ;;      Locals:         0       3       0       0       0       0       0       0
  9278 ;;      Temps:          0       1       0       0       0       0       0       0
  9279 ;;      Totals:         0       4       0       0       0       0       0       0
  9280 ;;Total ram usage:        4 bytes
  9281 ;; Hardware stack levels used:    1
  9282 ;; Hardware stack levels required when called:    8
  9283 ;; This function calls:
  9284 ;;		_Serialavailable
  9285 ;;		_getRxBuffer
  9286 ;;		_get_FC1
  9287 ;;		_get_FC3
  9288 ;;		_millis
  9289 ;;		_validateAnswer
  9290 ;; This function is called by:
  9291 ;;		_main
  9292 ;; This function uses a non-reentrant model
  9293 ;;
  9294                           
  9295                           
  9296                           ;psect for function _ModbuspollMaster
  9297  02EC                     _ModbuspollMaster:	
  9298                           
  9299                           ;modbusMS.c: 214: unsigned char u8current;
  9300                           ;modbusMS.c: 217: u8current = Serialavailable();
  9301                           
  9302                           ;incstack = 0
  9303                           ; Regs used in _ModbuspollMaster: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9304  02EC  318D  2551  3182   	fcall	_Serialavailable
  9305  02EF  0020               	movlb	0	; select bank0
  9306  02F0  00B8               	movwf	??_ModbuspollMaster
  9307  02F1  0838               	movf	??_ModbuspollMaster,w
  9308  02F2  00BB               	movwf	ModbuspollMaster@u8current
  9309                           
  9310                           ;modbusMS.c: 219: if (millis() > u32timeOut)
  9311  02F3  318E  2675  3182   	fcall	_millis
  9312  02F6  0020               	movlb	0	; select bank0
  9313  02F7  0823               	movf	?_millis+3,w
  9314  02F8  0022               	movlb	2	; select bank2
  9315  02F9  0231               	subwf	(_u32timeOut+3)^(0+256),w
  9316  02FA  1D03               	skipz
  9317  02FB  2B0C               	goto	u2715
  9318  02FC  0020               	movlb	0	; select bank0
  9319  02FD  0822               	movf	?_millis+2,w
  9320  02FE  0022               	movlb	2	; select bank2
  9321  02FF  0230               	subwf	(_u32timeOut+2)^(0+256),w
  9322  0300  1D03               	skipz
  9323  0301  2B0C               	goto	u2715
  9324  0302  0020               	movlb	0	; select bank0
  9325  0303  0821               	movf	?_millis+1,w
  9326  0304  0022               	movlb	2	; select bank2
  9327  0305  022F               	subwf	(_u32timeOut+1)^(0+256),w
  9328  0306  1D03               	skipz
  9329  0307  2B0C               	goto	u2715
  9330  0308  0020               	movlb	0	; select bank0
  9331  0309  0820               	movf	?_millis,w
  9332  030A  0022               	movlb	2	; select bank2
  9333  030B  022E               	subwf	_u32timeOut^(0+256),w
  9334  030C                     u2715:	
  9335  030C  1803               	skipnc
  9336  030D  2B1A               	goto	l4262
  9337                           
  9338                           ;modbusMS.c: 220: {
  9339                           ;modbusMS.c: 221: u8state = COM_IDLE;
  9340  030E  0020               	movlb	0	; select bank0
  9341  030F  01DB               	clrf	_u8state
  9342                           
  9343                           ;modbusMS.c: 222: u8lastError = NO_REPLY;
  9344  0310  30FF               	movlw	255
  9345  0311  00B8               	movwf	??_ModbuspollMaster
  9346  0312  0838               	movf	??_ModbuspollMaster,w
  9347  0313  00DA               	movwf	_u8lastError
  9348                           
  9349                           ;modbusMS.c: 223: u16errCnt++;
  9350  0314  3001               	movlw	1
  9351  0315  0021               	movlb	1	; select bank1
  9352  0316  07D2               	addwf	_u16errCnt^(0+128),f
  9353  0317  3000               	movlw	0
  9354  0318  3DD3               	addwfc	(_u16errCnt+1)^(0+128),f
  9355                           
  9356                           ;modbusMS.c: 225: return 0;
  9357                           ;	Return value of _ModbuspollMaster is never used
  9358  0319  0008               	return
  9359  031A                     l4262:	
  9360                           
  9361                           ;modbusMS.c: 226: }
  9362                           ;modbusMS.c: 228: if (u8current == 0) return 0;
  9363  031A  0020               	movlb	0	; select bank0
  9364  031B  083B               	movf	ModbuspollMaster@u8current,w
  9365  031C  1903               	btfsc	3,2
  9366  031D  0008               	return
  9367                           
  9368                           ;modbusMS.c: 231: if (u8current != u8lastRec)
  9369                           
  9370                           ;	Return value of _ModbuspollMaster is never used
  9371  031E  083B               	movf	ModbuspollMaster@u8current,w
  9372  031F  0658               	xorwf	_u8lastRec,w
  9373  0320  1903               	skipnz
  9374  0321  2B3D               	goto	l4274
  9375                           
  9376                           ;modbusMS.c: 232: {
  9377                           ;modbusMS.c: 233: u8lastRec = u8current;
  9378  0322  083B               	movf	ModbuspollMaster@u8current,w
  9379  0323  00B8               	movwf	??_ModbuspollMaster
  9380  0324  0838               	movf	??_ModbuspollMaster,w
  9381  0325  00D8               	movwf	_u8lastRec
  9382                           
  9383                           ;modbusMS.c: 234: u32time = millis() + 50;
  9384  0326  318E  2675         	fcall	_millis
  9385  0328  3032               	movlw	50
  9386  0329  0020               	movlb	0	; select bank0
  9387  032A  0720               	addwf	?_millis,w
  9388  032B  0021               	movlb	1	; select bank1
  9389  032C  00C0               	movwf	_u32time^(0+128)
  9390  032D  3000               	movlw	0
  9391  032E  0020               	movlb	0	; select bank0
  9392  032F  3D21               	addwfc	?_millis+1,w
  9393  0330  0021               	movlb	1	; select bank1
  9394  0331  00C1               	movwf	(_u32time+1)^(0+128)
  9395  0332  3000               	movlw	0
  9396  0333  0020               	movlb	0	; select bank0
  9397  0334  3D22               	addwfc	?_millis+2,w
  9398  0335  0021               	movlb	1	; select bank1
  9399  0336  00C2               	movwf	(_u32time+2)^(0+128)
  9400  0337  3000               	movlw	0
  9401  0338  0020               	movlb	0	; select bank0
  9402  0339  3D23               	addwfc	?_millis+3,w
  9403  033A  0021               	movlb	1	; select bank1
  9404  033B  00C3               	movwf	(_u32time+3)^(0+128)
  9405                           
  9406                           ;modbusMS.c: 236: return 0;
  9407                           ;	Return value of _ModbuspollMaster is never used
  9408  033C  0008               	return
  9409  033D                     l4274:	
  9410                           
  9411                           ;modbusMS.c: 237: }
  9412                           ;modbusMS.c: 238: if (millis() < u32time)
  9413  033D  318E  2675  3182   	fcall	_millis
  9414  0340  0021               	movlb	1	; select bank1
  9415  0341  0843               	movf	(_u32time+3)^(0+128),w
  9416  0342  0020               	movlb	0	; select bank0
  9417  0343  0223               	subwf	?_millis+3,w
  9418  0344  1D03               	skipz
  9419  0345  2B56               	goto	u2745
  9420  0346  0021               	movlb	1	; select bank1
  9421  0347  0842               	movf	(_u32time+2)^(0+128),w
  9422  0348  0020               	movlb	0	; select bank0
  9423  0349  0222               	subwf	?_millis+2,w
  9424  034A  1D03               	skipz
  9425  034B  2B56               	goto	u2745
  9426  034C  0021               	movlb	1	; select bank1
  9427  034D  0841               	movf	(_u32time+1)^(0+128),w
  9428  034E  0020               	movlb	0	; select bank0
  9429  034F  0221               	subwf	?_millis+1,w
  9430  0350  1D03               	skipz
  9431  0351  2B56               	goto	u2745
  9432  0352  0021               	movlb	1	; select bank1
  9433  0353  0840               	movf	_u32time^(0+128),w
  9434  0354  0020               	movlb	0	; select bank0
  9435  0355  0220               	subwf	?_millis,w
  9436  0356                     u2745:	
  9437  0356  1C03               	btfss	3,0
  9438  0357  0008               	return
  9439                           
  9440                           ;modbusMS.c: 242: }
  9441                           ;modbusMS.c: 245: u8lastRec = 0;
  9442                           
  9443                           ;modbusMS.c: 239: {
  9444                           ;modbusMS.c: 241: return 0;
  9445                           ;	Return value of _ModbuspollMaster is never used
  9446  0358  01D8               	clrf	_u8lastRec
  9447                           
  9448                           ;modbusMS.c: 246: signed char i8state = getRxBuffer();
  9449  0359  3187  271B  3182   	fcall	_getRxBuffer
  9450  035C  0020               	movlb	0	; select bank0
  9451  035D  00B8               	movwf	??_ModbuspollMaster
  9452  035E  0838               	movf	??_ModbuspollMaster,w
  9453  035F  00B9               	movwf	ModbuspollMaster@i8state
  9454                           
  9455                           ;modbusMS.c: 247: if (i8state < 7)
  9456  0360  0839               	movf	ModbuspollMaster@i8state,w
  9457  0361  3A80               	xorlw	128
  9458  0362  3E79               	addlw	-135
  9459  0363  1803               	skipnc
  9460  0364  2B6C               	goto	l4290
  9461                           
  9462                           ;modbusMS.c: 248: {
  9463                           ;modbusMS.c: 249: u8state = COM_IDLE;
  9464  0365  01DB               	clrf	_u8state
  9465                           
  9466                           ;modbusMS.c: 250: u16errCnt++;
  9467  0366  3001               	movlw	1
  9468  0367  0021               	movlb	1	; select bank1
  9469  0368  07D2               	addwf	_u16errCnt^(0+128),f
  9470  0369  3000               	movlw	0
  9471  036A  3DD3               	addwfc	(_u16errCnt+1)^(0+128),f
  9472                           
  9473                           ;modbusMS.c: 252: return i8state;
  9474                           ;	Return value of _ModbuspollMaster is never used
  9475  036B  0008               	return
  9476  036C                     l4290:	
  9477                           
  9478                           ;modbusMS.c: 253: }
  9479                           ;modbusMS.c: 256: unsigned char u8exception = validateAnswer();
  9480  036C  3184  2480  3182   	fcall	_validateAnswer
  9481  036F  0020               	movlb	0	; select bank0
  9482  0370  00B8               	movwf	??_ModbuspollMaster
  9483  0371  0838               	movf	??_ModbuspollMaster,w
  9484  0372  00BA               	movwf	ModbuspollMaster@u8exception
  9485                           
  9486                           ;modbusMS.c: 257: if (u8exception != 0)
  9487  0373  083A               	movf	ModbuspollMaster@u8exception,w
  9488  0374  1903               	btfsc	3,2
  9489  0375  2B80               	goto	l4304
  9490                           
  9491                           ;modbusMS.c: 258: {
  9492                           ;modbusMS.c: 259: u8state = COM_IDLE;
  9493  0376  01DB               	clrf	_u8state
  9494                           
  9495                           ;modbusMS.c: 261: return u8exception;
  9496                           ;	Return value of _ModbuspollMaster is never used
  9497  0377  0008               	return
  9498  0378                     l4298:	
  9499                           ;modbusMS.c: 267: {
  9500                           ;modbusMS.c: 268: case MB_FC_READ_COILS:
  9501                           
  9502                           ;modbusMS.c: 262: }
  9503                           ;modbusMS.c: 266: switch( au8Buffer[ FUNC ] )
  9504                           
  9505                           
  9506                           ;modbusMS.c: 269: case MB_FC_READ_DISCRETE_INPUT:
  9507                           ;modbusMS.c: 271: get_FC1( );
  9508  0378  3186  26A2  3182   	fcall	_get_FC1
  9509                           
  9510                           ;modbusMS.c: 272: break;
  9511  037B  2B9B               	goto	l4306
  9512  037C                     l4300:	
  9513                           ;modbusMS.c: 273: case MB_FC_READ_INPUT_REGISTER:
  9514                           
  9515                           
  9516                           ;modbusMS.c: 274: case MB_FC_READ_REGISTERS :
  9517                           ;modbusMS.c: 276: get_FC3( );
  9518  037C  3186  265B  3182   	fcall	_get_FC3
  9519                           
  9520                           ;modbusMS.c: 300: }
  9521                           
  9522                           ;modbusMS.c: 299: break;
  9523                           
  9524                           ;modbusMS.c: 298: default:
  9525                           
  9526                           ;modbusMS.c: 280: case MB_FC_WRITE_REGISTER :
  9527                           ;modbusMS.c: 281: case MB_FC_WRITE_MULTIPLE_COILS:
  9528                           ;modbusMS.c: 282: case MB_FC_WRITE_MULTIPLE_REGISTERS :
  9529                           ;modbusMS.c: 285: break;
  9530                           
  9531                           ;modbusMS.c: 279: case MB_FC_WRITE_COIL:
  9532                           
  9533                           ;modbusMS.c: 278: break;
  9534  037F  2B9B               	goto	l4306
  9535  0380                     l4304:	
  9536  0380  0021               	movlb	1	; select bank1
  9537  0381  0821               	movf	(_au8Buffer^(0+128)+1),w
  9538                           
  9539                           ; Switch size 1, requested type "space"
  9540                           ; Number of cases is 8, Range of values is 1 to 16
  9541                           ; switch strategies available:
  9542                           ; Name         Instructions Cycles
  9543                           ; simple_byte           25    13 (average)
  9544                           ; direct_byte           41     9 (fixed)
  9545                           ; jumptable            263     9 (fixed)
  9546                           ;	Chosen strategy is simple_byte
  9547  0382  3A01               	xorlw	1	; case 1
  9548  0383  1903               	skipnz
  9549  0384  2B78               	goto	l4298
  9550  0385  3A03               	xorlw	3	; case 2
  9551  0386  1903               	skipnz
  9552  0387  2B78               	goto	l4298
  9553  0388  3A01               	xorlw	1	; case 3
  9554  0389  1903               	skipnz
  9555  038A  2B7C               	goto	l4300
  9556  038B  3A07               	xorlw	7	; case 4
  9557  038C  1903               	skipnz
  9558  038D  2B7C               	goto	l4300
  9559  038E  3A01               	xorlw	1	; case 5
  9560  038F  1903               	skipnz
  9561  0390  2B9B               	goto	l4306
  9562  0391  3A03               	xorlw	3	; case 6
  9563  0392  1903               	skipnz
  9564  0393  2B9B               	goto	l4306
  9565  0394  3A09               	xorlw	9	; case 15
  9566  0395  1903               	skipnz
  9567  0396  2B9B               	goto	l4306
  9568  0397  3A1F               	xorlw	31	; case 16
  9569  0398  1903               	skipnz
  9570  0399  2B9B               	goto	l4306
  9571  039A  2B9B               	goto	l4306
  9572  039B                     l4306:	
  9573                           
  9574                           ;modbusMS.c: 301: u8state = COM_IDLE;
  9575  039B  0020               	movlb	0	; select bank0
  9576  039C  01DB               	clrf	_u8state
  9577  039D  0008               	return
  9578  039E                     __end_of_ModbuspollMaster:	
  9579                           ;modbusMS.c: 302: return u8BufferSize;
  9580                           ;	Return value of _ModbuspollMaster is never used
  9581                           
  9582                           
  9583                           	psect	text36
  9584  0480                     __ptext36:	
  9585 ;; *************** function _validateAnswer *****************
  9586 ;; Defined at:
  9587 ;;		line 596 in file "modbusMS.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;		None
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;  i               1   23[BANK0 ] unsigned char 
  9592 ;;  u16MsgCRCcal    2   20[BANK0 ] unsigned int 
  9593 ;;  u16MsgCRC       2   18[BANK0 ] unsigned int 
  9594 ;;  isSupported     1   22[BANK0 ] unsigned char 
  9595 ;; Return value:  Size  Location     Type
  9596 ;;                  1    wreg      unsigned char 
  9597 ;; Registers used:
  9598 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9599 ;; Tracked objects:
  9600 ;;		On entry : 0/0
  9601 ;;		On exit  : 0/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9604 ;;      Params:         0       0       0       0       0       0       0       0
  9605 ;;      Locals:         0       6       0       0       0       0       0       0
  9606 ;;      Temps:          0       5       0       0       0       0       0       0
  9607 ;;      Totals:         0      11       0       0       0       0       0       0
  9608 ;;Total ram usage:       11 bytes
  9609 ;; Hardware stack levels used:    1
  9610 ;; Hardware stack levels required when called:    6
  9611 ;; This function calls:
  9612 ;;		_calcCRC
  9613 ;; This function is called by:
  9614 ;;		_ModbuspollMaster
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           
  9619                           ;psect for function _validateAnswer
  9620  0480                     _validateAnswer:	
  9621                           
  9622                           ;modbusMS.c: 599: unsigned int u16MsgCRC=0,u16MsgCRCcalc=0;
  9623                           
  9624                           ;incstack = 0
  9625                           ; Regs used in _validateAnswer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9626  0480  0020               	movlb	0	; select bank0
  9627  0481  01B2               	clrf	validateAnswer@u16MsgCRC
  9628  0482  01B3               	clrf	validateAnswer@u16MsgCRC+1
  9629  0483  01B4               	clrf	validateAnswer@u16MsgCRCcalc
  9630  0484  01B5               	clrf	validateAnswer@u16MsgCRCcalc+1
  9631                           
  9632                           ;modbusMS.c: 600: u16MsgCRC =((au8Buffer[u8BufferSize - 2] << 8) | au8Buffer[u8BufferSiz
      +                          e - 1]);
  9633  0485  0859               	movf	_u8BufferSize,w
  9634  0486  3EFF               	addlw	255
  9635  0487  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  9636  0488  0086               	movwf	6
  9637  0489  0187               	clrf	7
  9638  048A  0801               	movf	1,w
  9639  048B  00AD               	movwf	??_validateAnswer
  9640  048C  01AE               	clrf	??_validateAnswer+1
  9641  048D  0859               	movf	_u8BufferSize,w
  9642  048E  3EFE               	addlw	254
  9643  048F  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  9644  0490  0086               	movwf	6
  9645  0491  0187               	clrf	7
  9646  0492  0801               	movf	1,w
  9647  0493  00AF               	movwf	??_validateAnswer+2
  9648  0494  01B0               	clrf	??_validateAnswer+3
  9649  0495  082F               	movf	??_validateAnswer+2,w
  9650  0496  00B0               	movwf	??_validateAnswer+3
  9651  0497  01AF               	clrf	??_validateAnswer+2
  9652  0498  082D               	movf	??_validateAnswer,w
  9653  0499  042F               	iorwf	??_validateAnswer+2,w
  9654  049A  00B2               	movwf	validateAnswer@u16MsgCRC
  9655  049B  082E               	movf	??_validateAnswer+1,w
  9656  049C  0430               	iorwf	??_validateAnswer+3,w
  9657  049D  00B3               	movwf	validateAnswer@u16MsgCRC+1
  9658                           
  9659                           ;modbusMS.c: 601: u16MsgCRCcalc=calcCRC( u8BufferSize-2 );
  9660  049E  0859               	movf	_u8BufferSize,w
  9661  049F  3EFE               	addlw	254
  9662  04A0  3185  25B6  3184   	fcall	_calcCRC
  9663  04A3  0020               	movlb	0	; select bank0
  9664  04A4  0821               	movf	?_calcCRC+1,w
  9665  04A5  00B5               	movwf	validateAnswer@u16MsgCRCcalc+1
  9666  04A6  0820               	movf	?_calcCRC,w
  9667  04A7  00B4               	movwf	validateAnswer@u16MsgCRCcalc
  9668                           
  9669                           ;modbusMS.c: 602: if ( u16MsgCRCcalc != u16MsgCRC )
  9670  04A8  0833               	movf	validateAnswer@u16MsgCRC+1,w
  9671  04A9  0635               	xorwf	validateAnswer@u16MsgCRCcalc+1,w
  9672  04AA  1D03               	skipz
  9673  04AB  2CAE               	goto	u2255
  9674  04AC  0832               	movf	validateAnswer@u16MsgCRC,w
  9675  04AD  0634               	xorwf	validateAnswer@u16MsgCRCcalc,w
  9676  04AE                     u2255:	
  9677  04AE  1903               	skipnz
  9678  04AF  2CB7               	goto	l1148
  9679                           
  9680                           ;modbusMS.c: 603: {
  9681                           ;modbusMS.c: 604: u16errCnt ++;
  9682  04B0  3001               	movlw	1
  9683  04B1  0021               	movlb	1	; select bank1
  9684  04B2  07D2               	addwf	_u16errCnt^(0+128),f
  9685  04B3  3000               	movlw	0
  9686  04B4  3DD3               	addwfc	(_u16errCnt+1)^(0+128),f
  9687                           
  9688                           ;modbusMS.c: 605: return NO_REPLY;
  9689  04B5  30FF               	movlw	255
  9690  04B6  0008               	return
  9691  04B7                     l1148:	
  9692                           
  9693                           ;modbusMS.c: 606: }
  9694                           ;modbusMS.c: 609: if ((au8Buffer[ FUNC ] & 0x80) != 0)
  9695  04B7  0021               	movlb	1	; select bank1
  9696  04B8  1FA1               	btfss	(_au8Buffer^(0+128)+1),7
  9697  04B9  2CC0               	goto	l3908
  9698                           
  9699                           ;modbusMS.c: 610: {
  9700                           ;modbusMS.c: 611: u16errCnt ++;
  9701  04BA  3001               	movlw	1
  9702  04BB  07D2               	addwf	_u16errCnt^(0+128),f
  9703  04BC  3000               	movlw	0
  9704  04BD  3DD3               	addwfc	(_u16errCnt+1)^(0+128),f
  9705                           
  9706                           ;modbusMS.c: 612: return ERR_EXCEPTION;
  9707  04BE  30FB               	movlw	251
  9708  04BF  0008               	return
  9709  04C0                     l3908:	
  9710                           
  9711                           ;modbusMS.c: 613: }
  9712                           ;modbusMS.c: 616: bool isSupported = 0;
  9713  04C0  0020               	movlb	0	; select bank0
  9714  04C1  01B6               	clrf	validateAnswer@isSupported
  9715                           
  9716                           ;modbusMS.c: 617: for (unsigned char i = 0; i< sizeof( fctsupported ); i++)
  9717  04C2  01B7               	clrf	validateAnswer@i
  9718  04C3  3008               	movlw	8
  9719  04C4  0237               	subwf	validateAnswer@i,w
  9720  04C5  1803               	btfsc	3,0
  9721  04C6  2CE0               	goto	l3922
  9722  04C7                     l3914:	
  9723                           
  9724                           ;modbusMS.c: 618: {
  9725                           ;modbusMS.c: 619: if (fctsupported[i] == au8Buffer[FUNC])
  9726  04C7  0837               	movf	validateAnswer@i,w
  9727  04C8  3EFC               	addlw	low (_fctsupported| (0+32768))
  9728  04C9  0084               	movwf	4
  9729  04CA  3087               	movlw	high (_fctsupported| (0+32768))
  9730  04CB  1803               	skipnc
  9731  04CC  3E01               	addlw	1
  9732  04CD  0085               	movwf	5
  9733  04CE  0800               	movf	0,w	;code access
  9734  04CF  0021               	movlb	1	; select bank1
  9735  04D0  0621               	xorwf	(_au8Buffer^(0+128)+1),w
  9736  04D1  1D03               	skipz
  9737  04D2  2CD7               	goto	l3918
  9738                           
  9739                           ;modbusMS.c: 620: {
  9740                           ;modbusMS.c: 621: isSupported = 1;
  9741  04D3  0020               	movlb	0	; select bank0
  9742  04D4  01B6               	clrf	validateAnswer@isSupported
  9743  04D5  0AB6               	incf	validateAnswer@isSupported,f
  9744                           
  9745                           ;modbusMS.c: 622: break;
  9746  04D6  2CE0               	goto	l3922
  9747  04D7                     l3918:	
  9748  04D7  3001               	movlw	1
  9749  04D8  0020               	movlb	0	; select bank0
  9750  04D9  00AD               	movwf	??_validateAnswer
  9751  04DA  082D               	movf	??_validateAnswer,w
  9752  04DB  07B7               	addwf	validateAnswer@i,f
  9753  04DC  3008               	movlw	8
  9754  04DD  0237               	subwf	validateAnswer@i,w
  9755  04DE  1C03               	skipc
  9756  04DF  2CC7               	goto	l3914
  9757  04E0                     l3922:	
  9758                           
  9759                           ;modbusMS.c: 623: }
  9760                           ;modbusMS.c: 624: }
  9761                           ;modbusMS.c: 625: if (!isSupported)
  9762  04E0  0836               	movf	validateAnswer@isSupported,w
  9763  04E1  1D03               	btfss	3,2
  9764  04E2  2CEA               	goto	l3928
  9765                           
  9766                           ;modbusMS.c: 626: {
  9767                           ;modbusMS.c: 627: u16errCnt ++;
  9768  04E3  3001               	movlw	1
  9769  04E4  0021               	movlb	1	; select bank1
  9770  04E5  07D2               	addwf	_u16errCnt^(0+128),f
  9771  04E6  3000               	movlw	0
  9772  04E7  3DD3               	addwfc	(_u16errCnt+1)^(0+128),f
  9773                           
  9774                           ;modbusMS.c: 628: return EXC_FUNC_CODE;
  9775  04E8  3001               	movlw	1
  9776  04E9  0008               	return
  9777  04EA                     l3928:	
  9778                           
  9779                           ;modbusMS.c: 629: }
  9780                           ;modbusMS.c: 631: return 0;
  9781  04EA  3000               	movlw	0
  9782  04EB  0008               	return
  9783  04EC                     __end_of_validateAnswer:	
  9784                           
  9785                           	psect	text37
  9786  05B6                     __ptext37:	
  9787 ;; *************** function _calcCRC *****************
  9788 ;; Defined at:
  9789 ;;		line 495 in file "modbusMS.c"
  9790 ;; Parameters:    Size  Location     Type
  9791 ;;  u8length        1    wreg     unsigned char 
  9792 ;; Auto vars:     Size  Location     Type
  9793 ;;  u8length        1    8[BANK0 ] unsigned char 
  9794 ;;  j               1   10[BANK0 ] unsigned char 
  9795 ;;  i               1    9[BANK0 ] unsigned char 
  9796 ;;  temp            2   11[BANK0 ] unsigned int 
  9797 ;;  flag            2    6[BANK0 ] unsigned int 
  9798 ;;  temp2           2    4[BANK0 ] unsigned int 
  9799 ;; Return value:  Size  Location     Type
  9800 ;;                  2    0[BANK0 ] unsigned int 
  9801 ;; Registers used:
  9802 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9803 ;; Tracked objects:
  9804 ;;		On entry : 0/0
  9805 ;;		On exit  : 0/0
  9806 ;;		Unchanged: 0/0
  9807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9808 ;;      Params:         0       2       0       0       0       0       0       0
  9809 ;;      Locals:         0       9       0       0       0       0       0       0
  9810 ;;      Temps:          0       2       0       0       0       0       0       0
  9811 ;;      Totals:         0      13       0       0       0       0       0       0
  9812 ;;Total ram usage:       13 bytes
  9813 ;; Hardware stack levels used:    1
  9814 ;; Hardware stack levels required when called:    5
  9815 ;; This function calls:
  9816 ;;		Nothing
  9817 ;; This function is called by:
  9818 ;;		_sendTxBuffer
  9819 ;;		_validateAnswer
  9820 ;;		_validateRequest
  9821 ;; This function uses a non-reentrant model
  9822 ;;
  9823                           
  9824                           
  9825                           ;psect for function _calcCRC
  9826  05B6                     _calcCRC:	
  9827                           
  9828                           ;incstack = 0
  9829                           ; Regs used in _calcCRC: [wreg+fsr1l+fsr1h+status,2+status,0]
  9830                           ;calcCRC@u8length stored from wreg
  9831  05B6  0020               	movlb	0	; select bank0
  9832  05B7  00A8               	movwf	calcCRC@u8length
  9833                           
  9834                           ;modbusMS.c: 497: unsigned int temp, temp2, flag;
  9835                           ;modbusMS.c: 498: temp = 0xFFFF;
  9836  05B8  30FF               	movlw	255
  9837  05B9  00AB               	movwf	calcCRC@temp
  9838  05BA  30FF               	movlw	255
  9839  05BB  00AC               	movwf	calcCRC@temp+1
  9840                           
  9841                           ;modbusMS.c: 499: for (unsigned char i = 0; i < u8length; i++)
  9842  05BC  01A9               	clrf	calcCRC@i
  9843  05BD                     l3558:	
  9844  05BD  0828               	movf	calcCRC@u8length,w
  9845  05BE  0229               	subwf	calcCRC@i,w
  9846  05BF  1803               	btfsc	3,0
  9847  05C0  2DF0               	goto	l3560
  9848                           
  9849                           ;modbusMS.c: 500: {
  9850                           ;modbusMS.c: 501: temp = temp ^ au8Buffer[i];
  9851  05C1  0829               	movf	calcCRC@i,w
  9852  05C2  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  9853  05C3  0086               	movwf	6
  9854  05C4  0187               	clrf	7
  9855  05C5  082B               	movf	calcCRC@temp,w
  9856  05C6  0601               	xorwf	1,w
  9857  05C7  00AB               	movwf	calcCRC@temp
  9858  05C8  082C               	movf	calcCRC@temp+1,w
  9859  05C9  00AC               	movwf	calcCRC@temp+1
  9860                           
  9861                           ;modbusMS.c: 502: for (unsigned char j = 1; j <= 8; j++)
  9862  05CA  01AA               	clrf	calcCRC@j
  9863  05CB  0AAA               	incf	calcCRC@j,f
  9864  05CC  3009               	movlw	9
  9865  05CD  022A               	subwf	calcCRC@j,w
  9866  05CE  1803               	btfsc	3,0
  9867  05CF  2DEB               	goto	l3556
  9868  05D0                     l3544:	
  9869                           
  9870                           ;modbusMS.c: 503: {
  9871                           ;modbusMS.c: 504: flag = temp & 0x0001;
  9872  05D0  3001               	movlw	1
  9873  05D1  052B               	andwf	calcCRC@temp,w
  9874  05D2  00A6               	movwf	calcCRC@flag
  9875  05D3  3000               	movlw	0
  9876  05D4  052C               	andwf	calcCRC@temp+1,w
  9877  05D5  00A7               	movwf	calcCRC@flag+1
  9878                           
  9879                           ;modbusMS.c: 505: temp >>=1;
  9880  05D6  3001               	movlw	1
  9881  05D7                     u1985:	
  9882  05D7  36AC               	lsrf	calcCRC@temp+1,f
  9883  05D8  0CAB               	rrf	calcCRC@temp,f
  9884  05D9  0B89               	decfsz	9,f
  9885  05DA  2DD7               	goto	u1985
  9886                           
  9887                           ;modbusMS.c: 506: if (flag)
  9888  05DB  0826               	movf	calcCRC@flag,w
  9889  05DC  0427               	iorwf	calcCRC@flag+1,w
  9890  05DD  1903               	btfsc	3,2
  9891  05DE  2DE3               	goto	l3552
  9892                           
  9893                           ;modbusMS.c: 507: temp ^= 0xA001;
  9894  05DF  3001               	movlw	1
  9895  05E0  06AB               	xorwf	calcCRC@temp,f
  9896  05E1  30A0               	movlw	160
  9897  05E2  06AC               	xorwf	calcCRC@temp+1,f
  9898  05E3                     l3552:	
  9899  05E3  3001               	movlw	1
  9900  05E4  00A2               	movwf	??_calcCRC
  9901  05E5  0822               	movf	??_calcCRC,w
  9902  05E6  07AA               	addwf	calcCRC@j,f
  9903  05E7  3009               	movlw	9
  9904  05E8  022A               	subwf	calcCRC@j,w
  9905  05E9  1C03               	skipc
  9906  05EA  2DD0               	goto	l3544
  9907  05EB                     l3556:	
  9908  05EB  3001               	movlw	1
  9909  05EC  00A2               	movwf	??_calcCRC
  9910  05ED  0822               	movf	??_calcCRC,w
  9911  05EE  07A9               	addwf	calcCRC@i,f
  9912  05EF  2DBD               	goto	l3558
  9913  05F0                     l3560:	
  9914                           
  9915                           ;modbusMS.c: 508: }
  9916                           ;modbusMS.c: 509: }
  9917                           ;modbusMS.c: 511: temp2 = temp >> 8;
  9918  05F0  082C               	movf	calcCRC@temp+1,w
  9919  05F1  00A3               	movwf	??_calcCRC+1
  9920  05F2  082B               	movf	calcCRC@temp,w
  9921  05F3  00A2               	movwf	??_calcCRC
  9922  05F4  0823               	movf	??_calcCRC+1,w
  9923  05F5  00A2               	movwf	??_calcCRC
  9924  05F6  01A3               	clrf	??_calcCRC+1
  9925  05F7  0822               	movf	??_calcCRC,w
  9926  05F8  00A4               	movwf	calcCRC@temp2
  9927  05F9  0823               	movf	??_calcCRC+1,w
  9928  05FA  00A5               	movwf	calcCRC@temp2+1
  9929                           
  9930                           ;modbusMS.c: 512: temp = (temp << 8) | temp2;
  9931  05FB  082B               	movf	calcCRC@temp,w
  9932  05FC  00A3               	movwf	??_calcCRC+1
  9933  05FD  01A2               	clrf	??_calcCRC
  9934  05FE  0824               	movf	calcCRC@temp2,w
  9935  05FF  0422               	iorwf	??_calcCRC,w
  9936  0600  00AB               	movwf	calcCRC@temp
  9937  0601  0825               	movf	calcCRC@temp2+1,w
  9938  0602  0423               	iorwf	??_calcCRC+1,w
  9939  0603  00AC               	movwf	calcCRC@temp+1
  9940                           
  9941                           ;modbusMS.c: 516: return temp;
  9942  0604  082C               	movf	calcCRC@temp+1,w
  9943  0605  00A1               	movwf	?_calcCRC+1
  9944  0606  082B               	movf	calcCRC@temp,w
  9945  0607  00A0               	movwf	?_calcCRC
  9946  0608  0008               	return
  9947  0609                     __end_of_calcCRC:	
  9948                           
  9949                           	psect	text38
  9950  0E75                     __ptext38:	
  9951 ;; *************** function _millis *****************
  9952 ;; Defined at:
  9953 ;;		line 714 in file "main.c"
  9954 ;; Parameters:    Size  Location     Type
  9955 ;;		None
  9956 ;; Auto vars:     Size  Location     Type
  9957 ;;		None
  9958 ;; Return value:  Size  Location     Type
  9959 ;;                  4    0[BANK0 ] unsigned long 
  9960 ;; Registers used:
  9961 ;;		wreg
  9962 ;; Tracked objects:
  9963 ;;		On entry : 0/0
  9964 ;;		On exit  : 0/0
  9965 ;;		Unchanged: 0/0
  9966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9967 ;;      Params:         0       4       0       0       0       0       0       0
  9968 ;;      Locals:         0       0       0       0       0       0       0       0
  9969 ;;      Temps:          0       0       0       0       0       0       0       0
  9970 ;;      Totals:         0       4       0       0       0       0       0       0
  9971 ;;Total ram usage:        4 bytes
  9972 ;; Hardware stack levels used:    1
  9973 ;; Hardware stack levels required when called:    5
  9974 ;; This function calls:
  9975 ;;		Nothing
  9976 ;; This function is called by:
  9977 ;;		_main
  9978 ;;		_ModbuspollMaster
  9979 ;;		_sendTxBuffer
  9980 ;;		_OnEncPulseEdgeEvent
  9981 ;;		_ModbuspollSlave
  9982 ;;		_ModbusgetTimeOutState
  9983 ;; This function uses a non-reentrant model
  9984 ;;
  9985                           
  9986                           
  9987                           ;psect for function _millis
  9988  0E75                     _millis:	
  9989                           
  9990                           ;main.c: 716: return TimertickMsec;
  9991                           
  9992                           ;incstack = 0
  9993                           ; Regs used in _millis: [wreg]
  9994  0E75  0021               	movlb	1	; select bank1
  9995  0E76  0847               	movf	(_TimertickMsec+3)^(0+128),w
  9996  0E77  0020               	movlb	0	; select bank0
  9997  0E78  00A3               	movwf	?_millis+3
  9998  0E79  0021               	movlb	1	; select bank1
  9999  0E7A  0846               	movf	(_TimertickMsec+2)^(0+128),w
 10000  0E7B  0020               	movlb	0	; select bank0
 10001  0E7C  00A2               	movwf	?_millis+2
 10002  0E7D  0021               	movlb	1	; select bank1
 10003  0E7E  0845               	movf	(_TimertickMsec+1)^(0+128),w
 10004  0E7F  0020               	movlb	0	; select bank0
 10005  0E80  00A1               	movwf	?_millis+1
 10006  0E81  0021               	movlb	1	; select bank1
 10007  0E82  0844               	movf	_TimertickMsec^(0+128),w
 10008  0E83  0020               	movlb	0	; select bank0
 10009  0E84  00A0               	movwf	?_millis
 10010  0E85  0008               	return
 10011  0E86                     __end_of_millis:	
 10012                           
 10013                           	psect	text39
 10014  065B                     __ptext39:	
 10015 ;; *************** function _get_FC3 *****************
 10016 ;; Defined at:
 10017 ;;		line 675 in file "modbusMS.c"
 10018 ;; Parameters:    Size  Location     Type
 10019 ;;		None
 10020 ;; Auto vars:     Size  Location     Type
 10021 ;;  i               1   12[BANK0 ] unsigned char 
 10022 ;;  u8byte          1   11[BANK0 ] unsigned char 
 10023 ;; Return value:  Size  Location     Type
 10024 ;;                  1    wreg      void 
 10025 ;; Registers used:
 10026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10027 ;; Tracked objects:
 10028 ;;		On entry : 0/0
 10029 ;;		On exit  : 0/0
 10030 ;;		Unchanged: 0/0
 10031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10032 ;;      Params:         0       0       0       0       0       0       0       0
 10033 ;;      Locals:         0       2       0       0       0       0       0       0
 10034 ;;      Temps:          0       2       0       0       0       0       0       0
 10035 ;;      Totals:         0       4       0       0       0       0       0       0
 10036 ;;Total ram usage:        4 bytes
 10037 ;; Hardware stack levels used:    1
 10038 ;; Hardware stack levels required when called:    6
 10039 ;; This function calls:
 10040 ;;		___awdiv
 10041 ;;		_wordConvert
 10042 ;; This function is called by:
 10043 ;;		_ModbuspollMaster
 10044 ;; This function uses a non-reentrant model
 10045 ;;
 10046                           
 10047                           
 10048                           ;psect for function _get_FC3
 10049  065B                     _get_FC3:	
 10050                           
 10051                           ;modbusMS.c: 677: unsigned char u8byte, i;
 10052                           ;modbusMS.c: 678: u8byte = 3;
 10053                           
 10054                           ;incstack = 0
 10055                           ; Regs used in _get_FC3: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10056  065B  3003               	movlw	3
 10057  065C  0020               	movlb	0	; select bank0
 10058  065D  00A9               	movwf	??_get_FC3
 10059  065E  0829               	movf	??_get_FC3,w
 10060  065F  00AB               	movwf	get_FC3@u8byte
 10061                           
 10062                           ;modbusMS.c: 680: for (i=0; i< (au8Buffer[2]/2); i++)
 10063  0660  01AC               	clrf	get_FC3@i
 10064  0661                     l3952:	
 10065  0661  3002               	movlw	2
 10066  0662  00A0               	movwf	___awdiv@divisor
 10067  0663  3000               	movlw	0
 10068  0664  00A1               	movwf	___awdiv@divisor+1
 10069  0665  0021               	movlb	1	; select bank1
 10070  0666  0822               	movf	(_au8Buffer^(0+128)+2),w
 10071  0667  0020               	movlb	0	; select bank0
 10072  0668  00A9               	movwf	??_get_FC3
 10073  0669  01AA               	clrf	??_get_FC3+1
 10074  066A  0829               	movf	??_get_FC3,w
 10075  066B  00A2               	movwf	___awdiv@dividend
 10076  066C  082A               	movf	??_get_FC3+1,w
 10077  066D  00A3               	movwf	___awdiv@dividend+1
 10078  066E  3186  2609  3186   	fcall	___awdiv
 10079  0671  0020               	movlb	0	; select bank0
 10080  0672  0821               	movf	?___awdiv+1,w
 10081  0673  3A80               	xorlw	128
 10082  0674  3C80               	sublw	128
 10083  0675  1D03               	skipz
 10084  0676  2E79               	goto	u2325
 10085  0677  0820               	movf	?___awdiv,w
 10086  0678  022C               	subwf	get_FC3@i,w
 10087  0679                     u2325:	
 10088  0679  1803               	btfsc	3,0
 10089  067A  0008               	return
 10090                           
 10091                           ;modbusMS.c: 681: {
 10092                           ;modbusMS.c: 682: au16regs[ i ] = wordConvert(au8Buffer[u8byte],au8Buffer[u8byte+1]);
 10093  067B  0020               	movlb	0	; select bank0
 10094  067C  082B               	movf	get_FC3@u8byte,w
 10095  067D  3E01               	addlw	1
 10096  067E  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
 10097  067F  0086               	movwf	6
 10098  0680  0187               	clrf	7
 10099  0681  0801               	movf	1,w
 10100  0682  00A9               	movwf	??_get_FC3
 10101  0683  0829               	movf	??_get_FC3,w
 10102  0684  00A0               	movwf	wordConvert@lByte
 10103  0685  082B               	movf	get_FC3@u8byte,w
 10104  0686  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
 10105  0687  0086               	movwf	6
 10106  0688  0187               	clrf	7
 10107  0689  0801               	movf	1,w
 10108  068A  318E  2698  3186   	fcall	_wordConvert
 10109  068D  0020               	movlb	0	; select bank0
 10110  068E  352C               	lslf	get_FC3@i,w
 10111  068F  0757               	addwf	_au16regs,w
 10112  0690  00AA               	movwf	??_get_FC3+1
 10113  0691  082A               	movf	??_get_FC3+1,w
 10114  0692  0086               	movwf	6
 10115  0693  3001               	movlw	1	; select bank2/3
 10116  0694  0087               	movwf	7
 10117  0695  0820               	movf	?_wordConvert,w
 10118  0696  3FC0               	movwi [0]fsr1
 10119  0697  0821               	movf	?_wordConvert+1,w
 10120  0698  3FC1               	movwi [1]fsr1
 10121                           
 10122                           ;modbusMS.c: 685: u8byte += 2;
 10123  0699  3002               	movlw	2
 10124  069A  00A9               	movwf	??_get_FC3
 10125  069B  0829               	movf	??_get_FC3,w
 10126  069C  07AB               	addwf	get_FC3@u8byte,f
 10127  069D  3001               	movlw	1
 10128  069E  00A9               	movwf	??_get_FC3
 10129  069F  0829               	movf	??_get_FC3,w
 10130  06A0  07AC               	addwf	get_FC3@i,f
 10131  06A1  2E61               	goto	l3952
 10132  06A2                     __end_of_get_FC3:	
 10133                           
 10134                           	psect	text40
 10135  06A2                     __ptext40:	
 10136 ;; *************** function _get_FC1 *****************
 10137 ;; Defined at:
 10138 ;;		line 657 in file "modbusMS.c"
 10139 ;; Parameters:    Size  Location     Type
 10140 ;;		None
 10141 ;; Auto vars:     Size  Location     Type
 10142 ;;  i               1   12[BANK0 ] unsigned char 
 10143 ;;  u8byte          1   11[BANK0 ] unsigned char 
 10144 ;; Return value:  Size  Location     Type
 10145 ;;                  1    wreg      void 
 10146 ;; Registers used:
 10147 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10148 ;; Tracked objects:
 10149 ;;		On entry : 0/0
 10150 ;;		On exit  : 0/0
 10151 ;;		Unchanged: 0/0
 10152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10153 ;;      Params:         0       0       0       0       0       0       0       0
 10154 ;;      Locals:         0       2       0       0       0       0       0       0
 10155 ;;      Temps:          0       2       0       0       0       0       0       0
 10156 ;;      Totals:         0       4       0       0       0       0       0       0
 10157 ;;Total ram usage:        4 bytes
 10158 ;; Hardware stack levels used:    1
 10159 ;; Hardware stack levels required when called:    6
 10160 ;; This function calls:
 10161 ;;		___awdiv
 10162 ;;		_wordConvert
 10163 ;; This function is called by:
 10164 ;;		_ModbuspollMaster
 10165 ;; This function uses a non-reentrant model
 10166 ;;
 10167                           
 10168                           
 10169                           ;psect for function _get_FC1
 10170  06A2                     _get_FC1:	
 10171                           
 10172                           ;modbusMS.c: 659: unsigned char u8byte, i;
 10173                           ;modbusMS.c: 660: u8byte = 0;
 10174                           
 10175                           ;incstack = 0
 10176                           ; Regs used in _get_FC1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10177  06A2  0020               	movlb	0	; select bank0
 10178  06A3  01AB               	clrf	get_FC1@u8byte
 10179                           
 10180                           ;modbusMS.c: 662: for (i=0; i< (au8Buffer[2]/2); i++)
 10181  06A4  01AC               	clrf	get_FC1@i
 10182  06A5                     l3940:	
 10183  06A5  3002               	movlw	2
 10184  06A6  00A0               	movwf	___awdiv@divisor
 10185  06A7  3000               	movlw	0
 10186  06A8  00A1               	movwf	___awdiv@divisor+1
 10187  06A9  0021               	movlb	1	; select bank1
 10188  06AA  0822               	movf	(_au8Buffer^(0+128)+2),w
 10189  06AB  0020               	movlb	0	; select bank0
 10190  06AC  00A9               	movwf	??_get_FC1
 10191  06AD  01AA               	clrf	??_get_FC1+1
 10192  06AE  0829               	movf	??_get_FC1,w
 10193  06AF  00A2               	movwf	___awdiv@dividend
 10194  06B0  082A               	movf	??_get_FC1+1,w
 10195  06B1  00A3               	movwf	___awdiv@dividend+1
 10196  06B2  3186  2609  3186   	fcall	___awdiv
 10197  06B5  0020               	movlb	0	; select bank0
 10198  06B6  0821               	movf	?___awdiv+1,w
 10199  06B7  3A80               	xorlw	128
 10200  06B8  3C80               	sublw	128
 10201  06B9  1D03               	skipz
 10202  06BA  2EBD               	goto	u2315
 10203  06BB  0820               	movf	?___awdiv,w
 10204  06BC  022C               	subwf	get_FC1@i,w
 10205  06BD                     u2315:	
 10206  06BD  1803               	btfsc	3,0
 10207  06BE  0008               	return
 10208                           
 10209                           ;modbusMS.c: 663: {
 10210                           ;modbusMS.c: 664: au16regs[ i ] = wordConvert(au8Buffer[u8byte],au8Buffer[u8byte+1]);
 10211  06BF  0020               	movlb	0	; select bank0
 10212  06C0  082B               	movf	get_FC1@u8byte,w
 10213  06C1  3E01               	addlw	1
 10214  06C2  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
 10215  06C3  0086               	movwf	6
 10216  06C4  0187               	clrf	7
 10217  06C5  0801               	movf	1,w
 10218  06C6  00A9               	movwf	??_get_FC1
 10219  06C7  0829               	movf	??_get_FC1,w
 10220  06C8  00A0               	movwf	wordConvert@lByte
 10221  06C9  082B               	movf	get_FC1@u8byte,w
 10222  06CA  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
 10223  06CB  0086               	movwf	6
 10224  06CC  0187               	clrf	7
 10225  06CD  0801               	movf	1,w
 10226  06CE  318E  2698  3186   	fcall	_wordConvert
 10227  06D1  0020               	movlb	0	; select bank0
 10228  06D2  352C               	lslf	get_FC1@i,w
 10229  06D3  0757               	addwf	_au16regs,w
 10230  06D4  00AA               	movwf	??_get_FC1+1
 10231  06D5  082A               	movf	??_get_FC1+1,w
 10232  06D6  0086               	movwf	6
 10233  06D7  3001               	movlw	1	; select bank2/3
 10234  06D8  0087               	movwf	7
 10235  06D9  0820               	movf	?_wordConvert,w
 10236  06DA  3FC0               	movwi [0]fsr1
 10237  06DB  0821               	movf	?_wordConvert+1,w
 10238  06DC  3FC1               	movwi [1]fsr1
 10239                           
 10240                           ;modbusMS.c: 665: u8byte += 2;
 10241  06DD  3002               	movlw	2
 10242  06DE  00A9               	movwf	??_get_FC1
 10243  06DF  0829               	movf	??_get_FC1,w
 10244  06E0  07AB               	addwf	get_FC1@u8byte,f
 10245  06E1  3001               	movlw	1
 10246  06E2  00A9               	movwf	??_get_FC1
 10247  06E3  0829               	movf	??_get_FC1,w
 10248  06E4  07AC               	addwf	get_FC1@i,f
 10249  06E5  2EA5               	goto	l3940
 10250  06E6                     __end_of_get_FC1:	
 10251                           
 10252                           	psect	text41
 10253  0E98                     __ptext41:	
 10254 ;; *************** function _wordConvert *****************
 10255 ;; Defined at:
 10256 ;;		line 1042 in file "modbusMS.c"
 10257 ;; Parameters:    Size  Location     Type
 10258 ;;  hByte           1    wreg     unsigned char 
 10259 ;;  lByte           1    0[BANK0 ] unsigned char 
 10260 ;; Auto vars:     Size  Location     Type
 10261 ;;  hByte           1    7[BANK0 ] unsigned char 
 10262 ;; Return value:  Size  Location     Type
 10263 ;;                  2    0[BANK0 ] unsigned int 
 10264 ;; Registers used:
 10265 ;;		wreg, status,2, status,0
 10266 ;; Tracked objects:
 10267 ;;		On entry : 0/0
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10271 ;;      Params:         0       2       0       0       0       0       0       0
 10272 ;;      Locals:         0       1       0       0       0       0       0       0
 10273 ;;      Temps:          0       5       0       0       0       0       0       0
 10274 ;;      Totals:         0       8       0       0       0       0       0       0
 10275 ;;Total ram usage:        8 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; Hardware stack levels required when called:    5
 10278 ;; This function calls:
 10279 ;;		Nothing
 10280 ;; This function is called by:
 10281 ;;		_get_FC1
 10282 ;;		_get_FC3
 10283 ;;		_validateRequest
 10284 ;;		_process_FC1
 10285 ;;		_process_FC3
 10286 ;;		_process_FC5
 10287 ;;		_process_FC6
 10288 ;;		_process_FC15
 10289 ;;		_process_FC16
 10290 ;; This function uses a non-reentrant model
 10291 ;;
 10292                           
 10293                           
 10294                           ;psect for function _wordConvert
 10295  0E98                     _wordConvert:	
 10296                           
 10297                           ;incstack = 0
 10298                           ; Regs used in _wordConvert: [wreg+status,2+status,0]
 10299                           ;wordConvert@hByte stored from wreg
 10300  0E98  0020               	movlb	0	; select bank0
 10301  0E99  00A7               	movwf	wordConvert@hByte
 10302                           
 10303                           ;modbusMS.c: 1044: return (((unsigned int)hByte) << 8 )+ (unsigned int)lByte;
 10304  0E9A  0820               	movf	wordConvert@lByte,w
 10305  0E9B  00A2               	movwf	??_wordConvert
 10306  0E9C  01A3               	clrf	??_wordConvert+1
 10307  0E9D  0827               	movf	wordConvert@hByte,w
 10308  0E9E  00A4               	movwf	??_wordConvert+2
 10309  0E9F  01A5               	clrf	??_wordConvert+3
 10310  0EA0  0824               	movf	??_wordConvert+2,w
 10311  0EA1  00A5               	movwf	??_wordConvert+3
 10312  0EA2  01A4               	clrf	??_wordConvert+2
 10313  0EA3  0822               	movf	??_wordConvert,w
 10314  0EA4  0724               	addwf	??_wordConvert+2,w
 10315  0EA5  00A0               	movwf	?_wordConvert
 10316  0EA6  0823               	movf	??_wordConvert+1,w
 10317  0EA7  3D25               	addwfc	??_wordConvert+3,w
 10318  0EA8  00A1               	movwf	?_wordConvert+1
 10319  0EA9  0008               	return
 10320  0EAA                     __end_of_wordConvert:	
 10321                           
 10322                           	psect	text42
 10323  0609                     __ptext42:	
 10324 ;; *************** function ___awdiv *****************
 10325 ;; Defined at:
 10326 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;  divisor         2    0[BANK0 ] int 
 10329 ;;  dividend        2    2[BANK0 ] int 
 10330 ;; Auto vars:     Size  Location     Type
 10331 ;;  quotient        2    7[BANK0 ] int 
 10332 ;;  sign            1    6[BANK0 ] unsigned char 
 10333 ;;  counter         1    5[BANK0 ] unsigned char 
 10334 ;; Return value:  Size  Location     Type
 10335 ;;                  2    0[BANK0 ] int 
 10336 ;; Registers used:
 10337 ;;		wreg, status,2, status,0
 10338 ;; Tracked objects:
 10339 ;;		On entry : 0/0
 10340 ;;		On exit  : 0/0
 10341 ;;		Unchanged: 0/0
 10342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10343 ;;      Params:         0       4       0       0       0       0       0       0
 10344 ;;      Locals:         0       4       0       0       0       0       0       0
 10345 ;;      Temps:          0       1       0       0       0       0       0       0
 10346 ;;      Totals:         0       9       0       0       0       0       0       0
 10347 ;;Total ram usage:        9 bytes
 10348 ;; Hardware stack levels used:    1
 10349 ;; Hardware stack levels required when called:    5
 10350 ;; This function calls:
 10351 ;;		Nothing
 10352 ;; This function is called by:
 10353 ;;		_get_FC1
 10354 ;;		_get_FC3
 10355 ;; This function uses a non-reentrant model
 10356 ;;
 10357                           
 10358                           
 10359                           ;psect for function ___awdiv
 10360  0609                     ___awdiv:	
 10361                           
 10362                           ;incstack = 0
 10363                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10364  0609  0020               	movlb	0	; select bank0
 10365  060A  01A6               	clrf	___awdiv@sign
 10366  060B  1FA1               	btfss	___awdiv@divisor+1,7
 10367  060C  2E14               	goto	l3580
 10368  060D  09A0               	comf	___awdiv@divisor,f
 10369  060E  09A1               	comf	___awdiv@divisor+1,f
 10370  060F  0AA0               	incf	___awdiv@divisor,f
 10371  0610  1903               	skipnz
 10372  0611  0AA1               	incf	___awdiv@divisor+1,f
 10373  0612  01A6               	clrf	___awdiv@sign
 10374  0613  0AA6               	incf	___awdiv@sign,f
 10375  0614                     l3580:	
 10376  0614  1FA3               	btfss	___awdiv@dividend+1,7
 10377  0615  2E1F               	goto	l3586
 10378  0616  09A2               	comf	___awdiv@dividend,f
 10379  0617  09A3               	comf	___awdiv@dividend+1,f
 10380  0618  0AA2               	incf	___awdiv@dividend,f
 10381  0619  1903               	skipnz
 10382  061A  0AA3               	incf	___awdiv@dividend+1,f
 10383  061B  3001               	movlw	1
 10384  061C  00A4               	movwf	??___awdiv
 10385  061D  0824               	movf	??___awdiv,w
 10386  061E  06A6               	xorwf	___awdiv@sign,f
 10387  061F                     l3586:	
 10388  061F  01A7               	clrf	___awdiv@quotient
 10389  0620  01A8               	clrf	___awdiv@quotient+1
 10390  0621  0820               	movf	___awdiv@divisor,w
 10391  0622  0421               	iorwf	___awdiv@divisor+1,w
 10392  0623  1903               	btfsc	3,2
 10393  0624  2E4E               	goto	l3608
 10394  0625  01A5               	clrf	___awdiv@counter
 10395  0626  0AA5               	incf	___awdiv@counter,f
 10396  0627                     l3596:	
 10397  0627  1BA1               	btfsc	___awdiv@divisor+1,7
 10398  0628  2E33               	goto	l3598
 10399  0629  3001               	movlw	1
 10400  062A                     u2055:	
 10401  062A  35A0               	lslf	___awdiv@divisor,f
 10402  062B  0DA1               	rlf	___awdiv@divisor+1,f
 10403  062C  0B89               	decfsz	9,f
 10404  062D  2E2A               	goto	u2055
 10405  062E  3001               	movlw	1
 10406  062F  00A4               	movwf	??___awdiv
 10407  0630  0824               	movf	??___awdiv,w
 10408  0631  07A5               	addwf	___awdiv@counter,f
 10409  0632  2E27               	goto	l3596
 10410  0633                     l3598:	
 10411  0633  3001               	movlw	1
 10412  0634                     u2075:	
 10413  0634  35A7               	lslf	___awdiv@quotient,f
 10414  0635  0DA8               	rlf	___awdiv@quotient+1,f
 10415  0636  0B89               	decfsz	9,f
 10416  0637  2E34               	goto	u2075
 10417  0638  0821               	movf	___awdiv@divisor+1,w
 10418  0639  0223               	subwf	___awdiv@dividend+1,w
 10419  063A  1D03               	skipz
 10420  063B  2E3E               	goto	u2085
 10421  063C  0820               	movf	___awdiv@divisor,w
 10422  063D  0222               	subwf	___awdiv@dividend,w
 10423  063E                     u2085:	
 10424  063E  1C03               	skipc
 10425  063F  2E45               	goto	l3604
 10426  0640  0820               	movf	___awdiv@divisor,w
 10427  0641  02A2               	subwf	___awdiv@dividend,f
 10428  0642  0821               	movf	___awdiv@divisor+1,w
 10429  0643  3BA3               	subwfb	___awdiv@dividend+1,f
 10430  0644  1427               	bsf	___awdiv@quotient,0
 10431  0645                     l3604:	
 10432  0645  3001               	movlw	1
 10433  0646                     u2095:	
 10434  0646  36A1               	lsrf	___awdiv@divisor+1,f
 10435  0647  0CA0               	rrf	___awdiv@divisor,f
 10436  0648  0B89               	decfsz	9,f
 10437  0649  2E46               	goto	u2095
 10438  064A  3001               	movlw	1
 10439  064B  02A5               	subwf	___awdiv@counter,f
 10440  064C  1D03               	btfss	3,2
 10441  064D  2E33               	goto	l3598
 10442  064E                     l3608:	
 10443  064E  0826               	movf	___awdiv@sign,w
 10444  064F  1903               	btfsc	3,2
 10445  0650  2E56               	goto	l3612
 10446  0651  09A7               	comf	___awdiv@quotient,f
 10447  0652  09A8               	comf	___awdiv@quotient+1,f
 10448  0653  0AA7               	incf	___awdiv@quotient,f
 10449  0654  1903               	skipnz
 10450  0655  0AA8               	incf	___awdiv@quotient+1,f
 10451  0656                     l3612:	
 10452  0656  0828               	movf	___awdiv@quotient+1,w
 10453  0657  00A1               	movwf	?___awdiv+1
 10454  0658  0827               	movf	___awdiv@quotient,w
 10455  0659  00A0               	movwf	?___awdiv
 10456  065A  0008               	return
 10457  065B                     __end_of___awdiv:	
 10458                           
 10459                           	psect	text43
 10460  071B                     __ptext43:	
 10461 ;; *************** function _getRxBuffer *****************
 10462 ;; Defined at:
 10463 ;;		line 403 in file "modbusMS.c"
 10464 ;; Parameters:    Size  Location     Type
 10465 ;;		None
 10466 ;; Auto vars:     Size  Location     Type
 10467 ;;  bBuffOverflo    1    3[BANK0 ] unsigned char 
 10468 ;; Return value:  Size  Location     Type
 10469 ;;                  1    wreg      char 
 10470 ;; Registers used:
 10471 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10472 ;; Tracked objects:
 10473 ;;		On entry : 0/0
 10474 ;;		On exit  : 0/0
 10475 ;;		Unchanged: 0/0
 10476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10477 ;;      Params:         0       0       0       0       0       0       0       0
 10478 ;;      Locals:         0       1       0       0       0       0       0       0
 10479 ;;      Temps:          0       1       0       0       0       0       0       0
 10480 ;;      Totals:         0       2       0       0       0       0       0       0
 10481 ;;Total ram usage:        2 bytes
 10482 ;; Hardware stack levels used:    1
 10483 ;; Hardware stack levels required when called:    7
 10484 ;; This function calls:
 10485 ;;		_Serialavailable
 10486 ;;		_Serialread
 10487 ;; This function is called by:
 10488 ;;		_ModbuspollMaster
 10489 ;;		_ModbuspollSlave
 10490 ;; This function uses a non-reentrant model
 10491 ;;
 10492                           
 10493                           
 10494                           ;psect for function _getRxBuffer
 10495  071B                     _getRxBuffer:	
 10496                           
 10497                           ;modbusMS.c: 405: bool bBuffOverflow = 0;
 10498                           
 10499                           ;incstack = 0
 10500                           ; Regs used in _getRxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10501  071B  0020               	movlb	0	; select bank0
 10502  071C  01A3               	clrf	getRxBuffer@bBuffOverflow
 10503                           
 10504                           ;modbusMS.c: 409: u8BufferSize = 0;
 10505  071D  01D9               	clrf	_u8BufferSize
 10506  071E                     l3878:	
 10507                           ;modbusMS.c: 411: while ( Serialavailable())
 10508                           
 10509  071E  318D  2551  3187   	fcall	_Serialavailable
 10510  0721  3A00               	xorlw	0
 10511  0722  1903               	btfsc	3,2
 10512  0723  2F3A               	goto	l3880
 10513                           
 10514                           ;modbusMS.c: 412: {
 10515                           ;modbusMS.c: 413: au8Buffer[ u8BufferSize ] = Serialread();
 10516  0724  318D  2554  3187   	fcall	_Serialread
 10517  0727  0020               	movlb	0	; select bank0
 10518  0728  00A2               	movwf	??_getRxBuffer
 10519  0729  0859               	movf	_u8BufferSize,w
 10520  072A  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
 10521  072B  0086               	movwf	6
 10522  072C  0187               	clrf	7
 10523  072D  0822               	movf	??_getRxBuffer,w
 10524  072E  0081               	movwf	1
 10525                           
 10526                           ;modbusMS.c: 417: u8BufferSize ++;
 10527  072F  3001               	movlw	1
 10528  0730  00A2               	movwf	??_getRxBuffer
 10529  0731  0822               	movf	??_getRxBuffer,w
 10530  0732  07D9               	addwf	_u8BufferSize,f
 10531                           
 10532                           ;modbusMS.c: 419: if (u8BufferSize >= 32) bBuffOverflow = 1;
 10533  0733  3020               	movlw	32
 10534  0734  0259               	subwf	_u8BufferSize,w
 10535  0735  1C03               	skipc
 10536  0736  2F1E               	goto	l3878
 10537  0737  01A3               	clrf	getRxBuffer@bBuffOverflow
 10538  0738  0AA3               	incf	getRxBuffer@bBuffOverflow,f
 10539  0739  2F1E               	goto	l3878
 10540  073A                     l3880:	
 10541                           
 10542                           ;modbusMS.c: 420: }
 10543                           ;modbusMS.c: 422: u16InCnt++;
 10544  073A  3001               	movlw	1
 10545  073B  0021               	movlb	1	; select bank1
 10546  073C  07D6               	addwf	_u16InCnt^(0+128),f
 10547  073D  3000               	movlw	0
 10548  073E  3DD7               	addwfc	(_u16InCnt+1)^(0+128),f
 10549                           
 10550                           ;modbusMS.c: 424: if (bBuffOverflow)
 10551  073F  0020               	movlb	0	; select bank0
 10552  0740  0823               	movf	getRxBuffer@bBuffOverflow,w
 10553  0741  1903               	btfsc	3,2
 10554  0742  2F4A               	goto	l3888
 10555                           
 10556                           ;modbusMS.c: 425: {
 10557                           ;modbusMS.c: 426: u16errCnt++;
 10558  0743  3001               	movlw	1
 10559  0744  0021               	movlb	1	; select bank1
 10560  0745  07D2               	addwf	_u16errCnt^(0+128),f
 10561  0746  3000               	movlw	0
 10562  0747  3DD3               	addwfc	(_u16errCnt+1)^(0+128),f
 10563                           
 10564                           ;modbusMS.c: 427: return ERR_BUFF_OVERFLOW;
 10565  0748  30FD               	movlw	253
 10566  0749  0008               	return
 10567  074A                     l3888:	
 10568                           
 10569                           ;modbusMS.c: 428: }
 10570                           ;modbusMS.c: 429: return u8BufferSize;
 10571  074A  0020               	movlb	0	; select bank0
 10572  074B  0859               	movf	_u8BufferSize,w
 10573  074C  0008               	return
 10574  074D                     __end_of_getRxBuffer:	
 10575                           
 10576                           	psect	text44
 10577  0D54                     __ptext44:	
 10578 ;; *************** function _Serialread *****************
 10579 ;; Defined at:
 10580 ;;		line 807 in file "main.c"
 10581 ;; Parameters:    Size  Location     Type
 10582 ;;		None
 10583 ;; Auto vars:     Size  Location     Type
 10584 ;;		None
 10585 ;; Return value:  Size  Location     Type
 10586 ;;                  1    wreg      unsigned char 
 10587 ;; Registers used:
 10588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10589 ;; Tracked objects:
 10590 ;;		On entry : 0/0
 10591 ;;		On exit  : 0/0
 10592 ;;		Unchanged: 0/0
 10593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10594 ;;      Params:         0       0       0       0       0       0       0       0
 10595 ;;      Locals:         0       0       0       0       0       0       0       0
 10596 ;;      Temps:          0       0       0       0       0       0       0       0
 10597 ;;      Totals:         0       0       0       0       0       0       0       0
 10598 ;;Total ram usage:        0 bytes
 10599 ;; Hardware stack levels used:    1
 10600 ;; Hardware stack levels required when called:    6
 10601 ;; This function calls:
 10602 ;;		_EUSART_Read
 10603 ;; This function is called by:
 10604 ;;		_getRxBuffer
 10605 ;; This function uses a non-reentrant model
 10606 ;;
 10607                           
 10608                           
 10609                           ;psect for function _Serialread
 10610  0D54                     _Serialread:	
 10611                           
 10612                           ;main.c: 809: return EUSART_Read();
 10613                           
 10614                           ;incstack = 0
 10615                           ; Regs used in _Serialread: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10616  0D54  3187  27DC         	fcall	_EUSART_Read
 10617  0D56  0008               	return
 10618  0D57                     __end_of_Serialread:	
 10619                           
 10620                           	psect	text45
 10621  07DC                     __ptext45:	
 10622 ;; *************** function _EUSART_Read *****************
 10623 ;; Defined at:
 10624 ;;		line 112 in file "mcc_generated_files/eusart.c"
 10625 ;; Parameters:    Size  Location     Type
 10626 ;;		None
 10627 ;; Auto vars:     Size  Location     Type
 10628 ;;  readValue       1    1[BANK0 ] unsigned char 
 10629 ;; Return value:  Size  Location     Type
 10630 ;;                  1    wreg      unsigned char 
 10631 ;; Registers used:
 10632 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10633 ;; Tracked objects:
 10634 ;;		On entry : 0/0
 10635 ;;		On exit  : 0/0
 10636 ;;		Unchanged: 0/0
 10637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10638 ;;      Params:         0       0       0       0       0       0       0       0
 10639 ;;      Locals:         0       1       0       0       0       0       0       0
 10640 ;;      Temps:          0       1       0       0       0       0       0       0
 10641 ;;      Totals:         0       2       0       0       0       0       0       0
 10642 ;;Total ram usage:        2 bytes
 10643 ;; Hardware stack levels used:    1
 10644 ;; Hardware stack levels required when called:    5
 10645 ;; This function calls:
 10646 ;;		Nothing
 10647 ;; This function is called by:
 10648 ;;		_ClearSerialRxBuffer
 10649 ;;		_Serialread
 10650 ;; This function uses a non-reentrant model
 10651 ;;
 10652                           
 10653                           
 10654                           ;psect for function _EUSART_Read
 10655  07DC                     _EUSART_Read:	
 10656                           
 10657                           ;eusart.c: 114: uint8_t readValue = 0;
 10658                           
 10659                           ;incstack = 0
 10660                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 10661  07DC  0020               	movlb	0	; select bank0
 10662  07DD  01A1               	clrf	EUSART_Read@readValue
 10663  07DE                     l3420:	
 10664                           ;eusart.c: 117: {
 10665                           
 10666                           ;eusart.c: 116: while(0 == eusartRxCount)
 10667                           
 10668  07DE  0868               	movf	_eusartRxCount,w	;volatile
 10669  07DF  1903               	btfsc	3,2
 10670  07E0  2FDE               	goto	l3420
 10671                           
 10672                           ;eusart.c: 118: }
 10673                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
 10674  07E1  0869               	movf	_eusartRxTail,w
 10675  07E2  3EA0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 10676  07E3  0086               	movwf	6
 10677  07E4  3001               	movlw	1	; select bank3/4
 10678  07E5  0087               	movwf	7
 10679  07E6  0801               	movf	1,w
 10680  07E7  00A0               	movwf	??_EUSART_Read
 10681  07E8  0820               	movf	??_EUSART_Read,w
 10682  07E9  00A1               	movwf	EUSART_Read@readValue
 10683  07EA  3001               	movlw	1
 10684  07EB  00A0               	movwf	??_EUSART_Read
 10685  07EC  0820               	movf	??_EUSART_Read,w
 10686  07ED  07E9               	addwf	_eusartRxTail,f
 10687                           
 10688                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 10689  07EE  3020               	movlw	32
 10690  07EF  0269               	subwf	_eusartRxTail,w
 10691  07F0  1803               	btfsc	3,0
 10692                           
 10693                           ;eusart.c: 122: {
 10694                           ;eusart.c: 123: eusartRxTail = 0;
 10695  07F1  01E9               	clrf	_eusartRxTail
 10696                           
 10697                           ;eusart.c: 124: }
 10698                           ;eusart.c: 125: PIE1bits.RCIE = 0;
 10699  07F2  0021               	movlb	1	; select bank1
 10700  07F3  1291               	bcf	17,5	;volatile
 10701                           
 10702                           ;eusart.c: 126: eusartRxCount--;
 10703  07F4  3001               	movlw	1
 10704  07F5  0020               	movlb	0	; select bank0
 10705  07F6  02E8               	subwf	_eusartRxCount,f	;volatile
 10706                           
 10707                           ;eusart.c: 127: PIE1bits.RCIE = 1;
 10708  07F7  0021               	movlb	1	; select bank1
 10709  07F8  1691               	bsf	17,5	;volatile
 10710                           
 10711                           ;eusart.c: 129: return readValue;
 10712  07F9  0020               	movlb	0	; select bank0
 10713  07FA  0821               	movf	EUSART_Read@readValue,w
 10714  07FB  0008               	return
 10715  07FC                     __end_of_EUSART_Read:	
 10716                           
 10717                           	psect	text46
 10718  0D51                     __ptext46:	
 10719 ;; *************** function _Serialavailable *****************
 10720 ;; Defined at:
 10721 ;;		line 790 in file "main.c"
 10722 ;; Parameters:    Size  Location     Type
 10723 ;;		None
 10724 ;; Auto vars:     Size  Location     Type
 10725 ;;		None
 10726 ;; Return value:  Size  Location     Type
 10727 ;;                  1    wreg      unsigned char 
 10728 ;; Registers used:
 10729 ;;		wreg
 10730 ;; Tracked objects:
 10731 ;;		On entry : 0/0
 10732 ;;		On exit  : 0/0
 10733 ;;		Unchanged: 0/0
 10734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10735 ;;      Params:         0       0       0       0       0       0       0       0
 10736 ;;      Locals:         0       0       0       0       0       0       0       0
 10737 ;;      Temps:          0       0       0       0       0       0       0       0
 10738 ;;      Totals:         0       0       0       0       0       0       0       0
 10739 ;;Total ram usage:        0 bytes
 10740 ;; Hardware stack levels used:    1
 10741 ;; Hardware stack levels required when called:    5
 10742 ;; This function calls:
 10743 ;;		Nothing
 10744 ;; This function is called by:
 10745 ;;		_ModbuspollMaster
 10746 ;;		_getRxBuffer
 10747 ;;		_ModbuspollSlave
 10748 ;; This function uses a non-reentrant model
 10749 ;;
 10750                           
 10751                           
 10752                           ;psect for function _Serialavailable
 10753  0D51                     _Serialavailable:	
 10754                           
 10755                           ;main.c: 792: return eusartRxCount;
 10756                           
 10757                           ;incstack = 0
 10758                           ; Regs used in _Serialavailable: [wreg]
 10759  0D51  0020               	movlb	0	; select bank0
 10760  0D52  0868               	movf	_eusartRxCount,w	;volatile
 10761  0D53  0008               	return
 10762  0D54                     __end_of_Serialavailable:	
 10763                           
 10764                           	psect	text47
 10765  0F59                     __ptext47:	
 10766 ;; *************** function _Modbusinit *****************
 10767 ;; Defined at:
 10768 ;;		line 53 in file "modbusMS.c"
 10769 ;; Parameters:    Size  Location     Type
 10770 ;;  u8id            1    wreg     unsigned char 
 10771 ;; Auto vars:     Size  Location     Type
 10772 ;;  u8id            1    0[COMMON] unsigned char 
 10773 ;; Return value:  Size  Location     Type
 10774 ;;                  1    wreg      void 
 10775 ;; Registers used:
 10776 ;;		wreg, status,2, status,0, pclath, cstack
 10777 ;; Tracked objects:
 10778 ;;		On entry : 0/0
 10779 ;;		On exit  : 0/0
 10780 ;;		Unchanged: 0/0
 10781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10782 ;;      Params:         0       0       0       0       0       0       0       0
 10783 ;;      Locals:         0       0       0       0       0       0       0       0
 10784 ;;      Temps:          0       0       0       0       0       0       0       0
 10785 ;;      Totals:         0       0       0       0       0       0       0       0
 10786 ;;Total ram usage:        0 bytes
 10787 ;; Hardware stack levels used:    1
 10788 ;; Hardware stack levels required when called:    7
 10789 ;; This function calls:
 10790 ;;		_Serialbegin
 10791 ;; This function is called by:
 10792 ;;		_main
 10793 ;; This function uses a non-reentrant model
 10794 ;;
 10795                           
 10796                           
 10797                           ;psect for function _Modbusinit
 10798  0F59                     _Modbusinit:	
 10799                           
 10800                           ;modbusMS.c: 58: u16timeOut = 1000;
 10801                           
 10802                           ;incstack = 0
 10803                           ; Regs used in _Modbusinit: [wreg+status,2+status,0+pclath+cstack]
 10804  0F59  30E8               	movlw	232
 10805  0F5A  0021               	movlb	1	; select bank1
 10806  0F5B  00D0               	movwf	_u16timeOut^(0+128)
 10807  0F5C  3003               	movlw	3
 10808  0F5D  00D1               	movwf	(_u16timeOut^(0+128)+1)
 10809                           
 10810                           ;modbusMS.c: 60: Serialbegin(9600);
 10811  0F5E  3000               	movlw	0
 10812  0F5F  0020               	movlb	0	; select bank0
 10813  0F60  00A4               	movwf	Serialbegin@baud+3
 10814  0F61  3000               	movlw	0
 10815  0F62  00A3               	movwf	Serialbegin@baud+2
 10816  0F63  3025               	movlw	37
 10817  0F64  00A2               	movwf	Serialbegin@baud+1
 10818  0F65  3080               	movlw	128
 10819  0F66  00A1               	movwf	Serialbegin@baud
 10820  0F67  318D  254E         	fcall	_Serialbegin
 10821                           
 10822                           ;modbusMS.c: 63: u8lastRec = u8BufferSize = 0;
 10823  0F69  0020               	movlb	0	; select bank0
 10824  0F6A  01D9               	clrf	_u8BufferSize
 10825  0F6B  01D8               	clrf	_u8lastRec
 10826                           
 10827                           ;modbusMS.c: 64: u16InCnt = u16OutCnt = u16errCnt = 0;
 10828  0F6C  0021               	movlb	1	; select bank1
 10829  0F6D  01D2               	clrf	_u16errCnt^(0+128)
 10830  0F6E  01D3               	clrf	(_u16errCnt+1)^(0+128)
 10831  0F6F  01D4               	clrf	_u16OutCnt^(0+128)
 10832  0F70  01D5               	clrf	(_u16OutCnt+1)^(0+128)
 10833  0F71  01D6               	clrf	_u16InCnt^(0+128)
 10834  0F72  01D7               	clrf	(_u16InCnt+1)^(0+128)
 10835  0F73  0008               	return
 10836  0F74                     __end_of_Modbusinit:	
 10837                           
 10838                           	psect	text48
 10839  0D4E                     __ptext48:	
 10840 ;; *************** function _Serialbegin *****************
 10841 ;; Defined at:
 10842 ;;		line 786 in file "main.c"
 10843 ;; Parameters:    Size  Location     Type
 10844 ;;  baud            4    1[BANK0 ] unsigned long 
 10845 ;; Auto vars:     Size  Location     Type
 10846 ;;		None
 10847 ;; Return value:  Size  Location     Type
 10848 ;;                  1    wreg      void 
 10849 ;; Registers used:
 10850 ;;		wreg, status,2, status,0, pclath, cstack
 10851 ;; Tracked objects:
 10852 ;;		On entry : 0/0
 10853 ;;		On exit  : 0/0
 10854 ;;		Unchanged: 0/0
 10855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10856 ;;      Params:         0       4       0       0       0       0       0       0
 10857 ;;      Locals:         0       0       0       0       0       0       0       0
 10858 ;;      Temps:          0       0       0       0       0       0       0       0
 10859 ;;      Totals:         0       4       0       0       0       0       0       0
 10860 ;;Total ram usage:        4 bytes
 10861 ;; Hardware stack levels used:    1
 10862 ;; Hardware stack levels required when called:    6
 10863 ;; This function calls:
 10864 ;;		_EUSART_Initialize
 10865 ;; This function is called by:
 10866 ;;		_Modbusinit
 10867 ;; This function uses a non-reentrant model
 10868 ;;
 10869                           
 10870                           
 10871                           ;psect for function _Serialbegin
 10872  0D4E                     _Serialbegin:	
 10873                           
 10874                           ;main.c: 788: EUSART_Initialize();
 10875                           
 10876                           ;incstack = 0
 10877                           ; Regs used in _Serialbegin: [wreg+status,2+status,0+pclath+cstack]
 10878  0D4E  318F  273F         	fcall	_EUSART_Initialize
 10879  0D50  0008               	return
 10880  0D51                     __end_of_Serialbegin:	
 10881                           
 10882                           	psect	text49
 10883  0F3F                     __ptext49:	
 10884 ;; *************** function _EUSART_Initialize *****************
 10885 ;; Defined at:
 10886 ;;		line 75 in file "mcc_generated_files/eusart.c"
 10887 ;; Parameters:    Size  Location     Type
 10888 ;;		None
 10889 ;; Auto vars:     Size  Location     Type
 10890 ;;		None
 10891 ;; Return value:  Size  Location     Type
 10892 ;;                  1    wreg      void 
 10893 ;; Registers used:
 10894 ;;		wreg, status,2
 10895 ;; Tracked objects:
 10896 ;;		On entry : 0/0
 10897 ;;		On exit  : 0/0
 10898 ;;		Unchanged: 0/0
 10899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10900 ;;      Params:         0       0       0       0       0       0       0       0
 10901 ;;      Locals:         0       0       0       0       0       0       0       0
 10902 ;;      Temps:          0       1       0       0       0       0       0       0
 10903 ;;      Totals:         0       1       0       0       0       0       0       0
 10904 ;;Total ram usage:        1 bytes
 10905 ;; Hardware stack levels used:    1
 10906 ;; Hardware stack levels required when called:    5
 10907 ;; This function calls:
 10908 ;;		Nothing
 10909 ;; This function is called by:
 10910 ;;		_SYSTEM_Initialize
 10911 ;;		_Serialbegin
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           
 10916                           ;psect for function _EUSART_Initialize
 10917  0F3F                     _EUSART_Initialize:	
 10918                           
 10919                           ;eusart.c: 78: PIE1bits.RCIE = 0;
 10920                           
 10921                           ;incstack = 0
 10922                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
 10923  0F3F  0021               	movlb	1	; select bank1
 10924  0F40  1291               	bcf	17,5	;volatile
 10925                           
 10926                           ;eusart.c: 79: PIE1bits.TXIE = 0;
 10927  0F41  1211               	bcf	17,4	;volatile
 10928                           
 10929                           ;eusart.c: 84: BAUD1CON = 0x08;
 10930  0F42  3008               	movlw	8
 10931  0F43  0023               	movlb	3	; select bank3
 10932  0F44  009F               	movwf	31	;volatile
 10933                           
 10934                           ;eusart.c: 87: RC1STA = 0x90;
 10935  0F45  3090               	movlw	144
 10936  0F46  009D               	movwf	29	;volatile
 10937                           
 10938                           ;eusart.c: 90: TX1STA = 0x24;
 10939  0F47  3024               	movlw	36
 10940  0F48  009E               	movwf	30	;volatile
 10941                           
 10942                           ;eusart.c: 93: SP1BRGL = 0xCF;
 10943  0F49  30CF               	movlw	207
 10944  0F4A  009B               	movwf	27	;volatile
 10945                           
 10946                           ;eusart.c: 96: SP1BRGH = 0x00;
 10947  0F4B  019C               	clrf	28	;volatile
 10948                           
 10949                           ;eusart.c: 100: eusartTxHead = 0;
 10950  0F4C  01FD               	clrf	_eusartTxHead
 10951                           
 10952                           ;eusart.c: 101: eusartTxTail = 0;
 10953  0F4D  01FC               	clrf	_eusartTxTail
 10954                           
 10955                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
 10956  0F4E  3020               	movlw	32
 10957  0F4F  0020               	movlb	0	; select bank0
 10958  0F50  00A0               	movwf	??_EUSART_Initialize
 10959  0F51  0820               	movf	??_EUSART_Initialize,w
 10960  0F52  00EE               	movwf	_eusartTxBufferRemaining	;volatile
 10961                           
 10962                           ;eusart.c: 104: eusartRxHead = 0;
 10963  0F53  01FB               	clrf	_eusartRxHead
 10964                           
 10965                           ;eusart.c: 105: eusartRxTail = 0;
 10966  0F54  01E9               	clrf	_eusartRxTail
 10967                           
 10968                           ;eusart.c: 106: eusartRxCount = 0;
 10969  0F55  01E8               	clrf	_eusartRxCount	;volatile
 10970                           
 10971                           ;eusart.c: 109: PIE1bits.RCIE = 1;
 10972  0F56  0021               	movlb	1	; select bank1
 10973  0F57  1691               	bsf	17,5	;volatile
 10974  0F58  0008               	return
 10975  0F59                     __end_of_EUSART_Initialize:	
 10976                           
 10977                           	psect	text50
 10978  0D4B                     __ptext50:	
 10979 ;; *************** function _ModbusgetState *****************
 10980 ;; Defined at:
 10981 ;;		line 1023 in file "modbusMS.c"
 10982 ;; Parameters:    Size  Location     Type
 10983 ;;		None
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;		None
 10986 ;; Return value:  Size  Location     Type
 10987 ;;                  1    wreg      unsigned char 
 10988 ;; Registers used:
 10989 ;;		wreg
 10990 ;; Tracked objects:
 10991 ;;		On entry : 0/0
 10992 ;;		On exit  : 0/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10995 ;;      Params:         0       0       0       0       0       0       0       0
 10996 ;;      Locals:         0       0       0       0       0       0       0       0
 10997 ;;      Temps:          0       0       0       0       0       0       0       0
 10998 ;;      Totals:         0       0       0       0       0       0       0       0
 10999 ;;Total ram usage:        0 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; Hardware stack levels required when called:    5
 11002 ;; This function calls:
 11003 ;;		Nothing
 11004 ;; This function is called by:
 11005 ;;		_main
 11006 ;; This function uses a non-reentrant model
 11007 ;;
 11008                           
 11009                           
 11010                           ;psect for function _ModbusgetState
 11011  0D4B                     _ModbusgetState:	
 11012                           
 11013                           ;modbusMS.c: 1025: return u8state;
 11014                           
 11015                           ;incstack = 0
 11016                           ; Regs used in _ModbusgetState: [wreg]
 11017  0D4B  0020               	movlb	0	; select bank0
 11018  0D4C  085B               	movf	_u8state,w
 11019  0D4D  0008               	return
 11020  0D4E                     __end_of_ModbusgetState:	
 11021                           
 11022                           	psect	text51
 11023  0D48                     __ptext51:	
 11024 ;; *************** function _LedONStatusBusy *****************
 11025 ;; Defined at:
 11026 ;;		line 12 in file "LED_Ctrl.c"
 11027 ;; Parameters:    Size  Location     Type
 11028 ;;		None
 11029 ;; Auto vars:     Size  Location     Type
 11030 ;;		None
 11031 ;; Return value:  Size  Location     Type
 11032 ;;                  1    wreg      unsigned char 
 11033 ;; Registers used:
 11034 ;;		wreg
 11035 ;; Tracked objects:
 11036 ;;		On entry : 0/0
 11037 ;;		On exit  : 0/0
 11038 ;;		Unchanged: 0/0
 11039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11040 ;;      Params:         0       0       0       0       0       0       0       0
 11041 ;;      Locals:         0       0       0       0       0       0       0       0
 11042 ;;      Temps:          0       0       0       0       0       0       0       0
 11043 ;;      Totals:         0       0       0       0       0       0       0       0
 11044 ;;Total ram usage:        0 bytes
 11045 ;; Hardware stack levels used:    1
 11046 ;; Hardware stack levels required when called:    5
 11047 ;; This function calls:
 11048 ;;		Nothing
 11049 ;; This function is called by:
 11050 ;;		_main
 11051 ;; This function uses a non-reentrant model
 11052 ;;
 11053                           
 11054                           
 11055                           ;psect for function _LedONStatusBusy
 11056  0D48                     _LedONStatusBusy:	
 11057                           
 11058                           ;LED_Ctrl.c: 14: return Led_ON;
 11059                           
 11060                           ;incstack = 0
 11061                           ; Regs used in _LedONStatusBusy: [wreg]
 11062  0D48  0020               	movlb	0	; select bank0
 11063  0D49  085D               	movf	_Led_ON,w
 11064  0D4A  0008               	return
 11065  0D4B                     __end_of_LedONStatusBusy:	
 11066                           
 11067                           	psect	text52
 11068  04EC                     __ptext52:	
 11069 ;; *************** function _LedONStartConfig *****************
 11070 ;; Defined at:
 11071 ;;		line 18 in file "LED_Ctrl.c"
 11072 ;; Parameters:    Size  Location     Type
 11073 ;;  LEDcolor        1    wreg     unsigned char 
 11074 ;;  LedONDuratio    1    8[BANK0 ] unsigned char 
 11075 ;;  LedONNumBlin    1    9[BANK0 ] unsigned char 
 11076 ;; Auto vars:     Size  Location     Type
 11077 ;;  LEDcolor        1   12[BANK0 ] unsigned char 
 11078 ;; Return value:  Size  Location     Type
 11079 ;;                  1    wreg      unsigned char 
 11080 ;; Registers used:
 11081 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11082 ;; Tracked objects:
 11083 ;;		On entry : 0/0
 11084 ;;		On exit  : 0/0
 11085 ;;		Unchanged: 0/0
 11086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11087 ;;      Params:         0       2       0       0       0       0       0       0
 11088 ;;      Locals:         0       1       0       0       0       0       0       0
 11089 ;;      Temps:          0       2       0       0       0       0       0       0
 11090 ;;      Totals:         0       5       0       0       0       0       0       0
 11091 ;;Total ram usage:        5 bytes
 11092 ;; Hardware stack levels used:    1
 11093 ;; Hardware stack levels required when called:    6
 11094 ;; This function calls:
 11095 ;;		___lwdiv
 11096 ;;		___wmul
 11097 ;; This function is called by:
 11098 ;;		_main
 11099 ;;		_EPC_StateMachineControlLoop
 11100 ;; This function uses a non-reentrant model
 11101 ;;
 11102                           
 11103                           
 11104                           ;psect for function _LedONStartConfig
 11105  04EC                     _LedONStartConfig:	
 11106                           
 11107                           ;incstack = 0
 11108                           ; Regs used in _LedONStartConfig: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11109                           ;LedONStartConfig@LEDcolor stored from wreg
 11110  04EC  0020               	movlb	0	; select bank0
 11111  04ED  00AC               	movwf	LedONStartConfig@LEDcolor
 11112                           
 11113                           ;LED_Ctrl.c: 20: if(Led_ON!=1 && (LedONDurationSec!=0)&& (LedONDurationSec <= 60))
 11114  04EE  035D               	decf	_Led_ON,w
 11115  04EF  1903               	btfsc	3,2
 11116  04F0  0008               	return
 11117  04F1  0828               	movf	LedONStartConfig@LedONDurationSec,w
 11118  04F2  1903               	btfsc	3,2
 11119  04F3  0008               	return
 11120  04F4  303D               	movlw	61
 11121  04F5  0228               	subwf	LedONStartConfig@LedONDurationSec,w
 11122  04F6  1803               	skipnc
 11123  04F7  0008               	return
 11124                           
 11125                           ;LED_Ctrl.c: 21: {
 11126                           ;LED_Ctrl.c: 22: Led_ON=1;
 11127  04F8  01DD               	clrf	_Led_ON
 11128  04F9  0ADD               	incf	_Led_ON,f
 11129                           
 11130                           ;LED_Ctrl.c: 23: LED_Color=LEDcolor;
 11131  04FA  082C               	movf	LedONStartConfig@LEDcolor,w
 11132  04FB  00AA               	movwf	??_LedONStartConfig
 11133  04FC  082A               	movf	??_LedONStartConfig,w
 11134  04FD  00EF               	movwf	_LED_Color
 11135                           
 11136                           ;LED_Ctrl.c: 25: switch(LED_Color)
 11137  04FE  2D08               	goto	l4124
 11138  04FF                     l897:	
 11139                           ;LED_Ctrl.c: 26: {
 11140                           ;LED_Ctrl.c: 27: case 0 : do { LATCbits.LATC0 = 1; } while(0);
 11141                           
 11142  04FF  0022               	movlb	2	; select bank2
 11143  0500  140E               	bsf	14,0	;volatile
 11144                           
 11145                           ;LED_Ctrl.c: 28: break;
 11146  0501  2D14               	goto	l4126
 11147  0502                     l901:	
 11148                           ;LED_Ctrl.c: 29: case 1 : do { LATCbits.LATC1 = 1; } while(0);
 11149                           
 11150  0502  0022               	movlb	2	; select bank2
 11151  0503  148E               	bsf	14,1	;volatile
 11152                           
 11153                           ;LED_Ctrl.c: 30: break;
 11154  0504  2D14               	goto	l4126
 11155  0505                     l904:	
 11156                           ;LED_Ctrl.c: 31: case 2 : do { LATCbits.LATC2 = 1; } while(0);
 11157                           
 11158  0505  0022               	movlb	2	; select bank2
 11159  0506  150E               	bsf	14,2	;volatile
 11160                           
 11161                           ;LED_Ctrl.c: 34: }
 11162                           
 11163                           ;LED_Ctrl.c: 33: default : break;
 11164                           
 11165                           ;LED_Ctrl.c: 32: break;
 11166  0507  2D14               	goto	l4126
 11167  0508                     l4124:	
 11168  0508  0020               	movlb	0	; select bank0
 11169  0509  086F               	movf	_LED_Color,w
 11170                           
 11171                           ; Switch size 1, requested type "space"
 11172                           ; Number of cases is 3, Range of values is 0 to 2
 11173                           ; switch strategies available:
 11174                           ; Name         Instructions Cycles
 11175                           ; simple_byte           10     6 (average)
 11176                           ; direct_byte           12     6 (fixed)
 11177                           ; jumptable            260     6 (fixed)
 11178                           ;	Chosen strategy is simple_byte
 11179  050A  3A00               	xorlw	0	; case 0
 11180  050B  1903               	skipnz
 11181  050C  2CFF               	goto	l897
 11182  050D  3A01               	xorlw	1	; case 1
 11183  050E  1903               	skipnz
 11184  050F  2D02               	goto	l901
 11185  0510  3A03               	xorlw	3	; case 2
 11186  0511  1903               	skipnz
 11187  0512  2D05               	goto	l904
 11188  0513  2D14               	goto	l4126
 11189  0514                     l4126:	
 11190                           
 11191                           ;LED_Ctrl.c: 36: LED_msec_Cnt=0;
 11192  0514  0021               	movlb	1	; select bank1
 11193  0515  01DC               	clrf	_LED_msec_Cnt^(0+128)
 11194  0516  01DD               	clrf	(_LED_msec_Cnt+1)^(0+128)
 11195                           
 11196                           ;LED_Ctrl.c: 37: LedON_Duration_msec=((unsigned int)LedONDurationSec)*1000;
 11197  0517  0020               	movlb	0	; select bank0
 11198  0518  0828               	movf	LedONStartConfig@LedONDurationSec,w
 11199  0519  00AA               	movwf	??_LedONStartConfig
 11200  051A  01AB               	clrf	??_LedONStartConfig+1
 11201  051B  082A               	movf	??_LedONStartConfig,w
 11202  051C  00A0               	movwf	___wmul@multiplier
 11203  051D  082B               	movf	??_LedONStartConfig+1,w
 11204  051E  00A1               	movwf	___wmul@multiplier+1
 11205  051F  30E8               	movlw	232
 11206  0520  00A2               	movwf	___wmul@multiplicand
 11207  0521  3003               	movlw	3
 11208  0522  00A3               	movwf	___wmul@multiplicand+1
 11209  0523  318F  27C6  3184   	fcall	___wmul
 11210  0526  0020               	movlb	0	; select bank0
 11211  0527  0821               	movf	?___wmul+1,w
 11212  0528  00D0               	movwf	_LedON_Duration_msec+1
 11213  0529  0820               	movf	?___wmul,w
 11214  052A  00CF               	movwf	_LedON_Duration_msec
 11215                           
 11216                           ;LED_Ctrl.c: 38: if(LedONNumBlink > 1)
 11217  052B  3002               	movlw	2
 11218  052C  0229               	subwf	LedONStartConfig@LedONNumBlink,w
 11219  052D  1C03               	skipc
 11220  052E  2D48               	goto	l4134
 11221                           
 11222                           ;LED_Ctrl.c: 39: Blick_tickPointMsec=(LedON_Duration_msec/(((LedONNumBlink-1)*2)+1));
 11223  052F  0829               	movf	LedONStartConfig@LedONNumBlink,w
 11224  0530  00AA               	movwf	??_LedONStartConfig
 11225  0531  01AB               	clrf	??_LedONStartConfig+1
 11226  0532  35AA               	lslf	??_LedONStartConfig,f
 11227  0533  0DAB               	rlf	??_LedONStartConfig+1,f
 11228  0534  082A               	movf	??_LedONStartConfig,w
 11229  0535  3EFF               	addlw	255
 11230  0536  00A0               	movwf	___lwdiv@divisor
 11231  0537  30FF               	movlw	255
 11232  0538  3D2B               	addwfc	??_LedONStartConfig+1,w
 11233  0539  00A1               	movwf	___lwdiv@divisor+1
 11234  053A  0850               	movf	_LedON_Duration_msec+1,w
 11235  053B  00A3               	movwf	___lwdiv@dividend+1
 11236  053C  084F               	movf	_LedON_Duration_msec,w
 11237  053D  00A2               	movwf	___lwdiv@dividend
 11238  053E  3186  26E6  3184   	fcall	___lwdiv
 11239  0541  0020               	movlb	0	; select bank0
 11240  0542  0821               	movf	?___lwdiv+1,w
 11241  0543  0021               	movlb	1	; select bank1
 11242  0544  00DB               	movwf	(_Blick_tickPointMsec+1)^(0+128)
 11243  0545  0020               	movlb	0	; select bank0
 11244  0546  0820               	movf	?___lwdiv,w
 11245  0547  2D4E               	goto	L2
 11246  0548                     l4134:	
 11247                           
 11248                           ;LED_Ctrl.c: 40: else
 11249                           ;LED_Ctrl.c: 41: Blick_tickPointMsec=LedON_Duration_msec;
 11250  0548  0020               	movlb	0	; select bank0
 11251  0549  0850               	movf	_LedON_Duration_msec+1,w
 11252  054A  0021               	movlb	1	; select bank1
 11253  054B  00DB               	movwf	(_Blick_tickPointMsec+1)^(0+128)
 11254  054C  0020               	movlb	0	; select bank0
 11255  054D  084F               	movf	_LedON_Duration_msec,w
 11256  054E                     L2:	
 11257  054E  0021               	movlb	1	; select bank1
 11258  054F  00DA               	movwf	_Blick_tickPointMsec^(0+128)
 11259                           
 11260                           ;LED_Ctrl.c: 43: Blick_tickPoint=Blick_tickPointMsec;
 11261  0550  085B               	movf	(_Blick_tickPointMsec+1)^(0+128),w
 11262  0551  00D9               	movwf	(_Blick_tickPoint+1)^(0+128)
 11263  0552  085A               	movf	_Blick_tickPointMsec^(0+128),w
 11264  0553  00D8               	movwf	_Blick_tickPoint^(0+128)
 11265                           
 11266                           ;LED_Ctrl.c: 46: else
 11267                           ;LED_Ctrl.c: 47: {
 11268                           ;LED_Ctrl.c: 48: return 0;
 11269                           ;	Return value of _LedONStartConfig is never used
 11270                           
 11271                           ;LED_Ctrl.c: 45: }
 11272                           
 11273                           ;LED_Ctrl.c: 44: return 1;
 11274                           ;	Return value of _LedONStartConfig is never used
 11275  0554  0008               	return
 11276  0555                     __end_of_LedONStartConfig:	
 11277                           
 11278                           	psect	text53
 11279  0FC6                     __ptext53:	
 11280 ;; *************** function ___wmul *****************
 11281 ;; Defined at:
 11282 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11285 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11286 ;; Auto vars:     Size  Location     Type
 11287 ;;  product         2    4[BANK0 ] unsigned int 
 11288 ;; Return value:  Size  Location     Type
 11289 ;;                  2    0[BANK0 ] unsigned int 
 11290 ;; Registers used:
 11291 ;;		wreg, status,2, status,0
 11292 ;; Tracked objects:
 11293 ;;		On entry : 0/0
 11294 ;;		On exit  : 0/0
 11295 ;;		Unchanged: 0/0
 11296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11297 ;;      Params:         0       4       0       0       0       0       0       0
 11298 ;;      Locals:         0       2       0       0       0       0       0       0
 11299 ;;      Temps:          0       0       0       0       0       0       0       0
 11300 ;;      Totals:         0       6       0       0       0       0       0       0
 11301 ;;Total ram usage:        6 bytes
 11302 ;; Hardware stack levels used:    1
 11303 ;; Hardware stack levels required when called:    5
 11304 ;; This function calls:
 11305 ;;		Nothing
 11306 ;; This function is called by:
 11307 ;;		_LedONStartConfig
 11308 ;; This function uses a non-reentrant model
 11309 ;;
 11310                           
 11311                           
 11312                           ;psect for function ___wmul
 11313  0FC6                     ___wmul:	
 11314                           
 11315                           ;incstack = 0
 11316                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11317  0FC6  0020               	movlb	0	; select bank0
 11318  0FC7  01A4               	clrf	___wmul@product
 11319  0FC8  01A5               	clrf	___wmul@product+1
 11320  0FC9                     l3956:	
 11321  0FC9  1C20               	btfss	___wmul@multiplier,0
 11322  0FCA  2FCF               	goto	l1328
 11323  0FCB  0822               	movf	___wmul@multiplicand,w
 11324  0FCC  07A4               	addwf	___wmul@product,f
 11325  0FCD  0823               	movf	___wmul@multiplicand+1,w
 11326  0FCE  3DA5               	addwfc	___wmul@product+1,f
 11327  0FCF                     l1328:	
 11328  0FCF  3001               	movlw	1
 11329  0FD0                     u2345:	
 11330  0FD0  35A2               	lslf	___wmul@multiplicand,f
 11331  0FD1  0DA3               	rlf	___wmul@multiplicand+1,f
 11332  0FD2  0B89               	decfsz	9,f
 11333  0FD3  2FD0               	goto	u2345
 11334  0FD4  3001               	movlw	1
 11335  0FD5                     u2355:	
 11336  0FD5  36A1               	lsrf	___wmul@multiplier+1,f
 11337  0FD6  0CA0               	rrf	___wmul@multiplier,f
 11338  0FD7  0B89               	decfsz	9,f
 11339  0FD8  2FD5               	goto	u2355
 11340  0FD9  0820               	movf	___wmul@multiplier,w
 11341  0FDA  0421               	iorwf	___wmul@multiplier+1,w
 11342  0FDB  1D03               	btfss	3,2
 11343  0FDC  2FC9               	goto	l3956
 11344  0FDD  0825               	movf	___wmul@product+1,w
 11345  0FDE  00A1               	movwf	?___wmul+1
 11346  0FDF  0824               	movf	___wmul@product,w
 11347  0FE0  00A0               	movwf	?___wmul
 11348  0FE1  0008               	return
 11349  0FE2                     __end_of___wmul:	
 11350                           
 11351                           	psect	text54
 11352  06E6                     __ptext54:	
 11353 ;; *************** function ___lwdiv *****************
 11354 ;; Defined at:
 11355 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;  divisor         2    0[BANK0 ] unsigned int 
 11358 ;;  dividend        2    2[BANK0 ] unsigned int 
 11359 ;; Auto vars:     Size  Location     Type
 11360 ;;  quotient        2    5[BANK0 ] unsigned int 
 11361 ;;  counter         1    7[BANK0 ] unsigned char 
 11362 ;; Return value:  Size  Location     Type
 11363 ;;                  2    0[BANK0 ] unsigned int 
 11364 ;; Registers used:
 11365 ;;		wreg, status,2, status,0
 11366 ;; Tracked objects:
 11367 ;;		On entry : 0/0
 11368 ;;		On exit  : 0/0
 11369 ;;		Unchanged: 0/0
 11370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11371 ;;      Params:         0       4       0       0       0       0       0       0
 11372 ;;      Locals:         0       3       0       0       0       0       0       0
 11373 ;;      Temps:          0       1       0       0       0       0       0       0
 11374 ;;      Totals:         0       8       0       0       0       0       0       0
 11375 ;;Total ram usage:        8 bytes
 11376 ;; Hardware stack levels used:    1
 11377 ;; Hardware stack levels required when called:    5
 11378 ;; This function calls:
 11379 ;;		Nothing
 11380 ;; This function is called by:
 11381 ;;		_LedONStartConfig
 11382 ;; This function uses a non-reentrant model
 11383 ;;
 11384                           
 11385                           
 11386                           ;psect for function ___lwdiv
 11387  06E6                     ___lwdiv:	
 11388                           
 11389                           ;incstack = 0
 11390                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11391  06E6  0020               	movlb	0	; select bank0
 11392  06E7  01A5               	clrf	___lwdiv@quotient
 11393  06E8  01A6               	clrf	___lwdiv@quotient+1
 11394  06E9  0820               	movf	___lwdiv@divisor,w
 11395  06EA  0421               	iorwf	___lwdiv@divisor+1,w
 11396  06EB  1903               	btfsc	3,2
 11397  06EC  2F16               	goto	l3990
 11398  06ED  01A7               	clrf	___lwdiv@counter
 11399  06EE  0AA7               	incf	___lwdiv@counter,f
 11400  06EF                     l3978:	
 11401  06EF  1BA1               	btfsc	___lwdiv@divisor+1,7
 11402  06F0  2EFB               	goto	l3980
 11403  06F1  3001               	movlw	1
 11404  06F2                     u2385:	
 11405  06F2  35A0               	lslf	___lwdiv@divisor,f
 11406  06F3  0DA1               	rlf	___lwdiv@divisor+1,f
 11407  06F4  0B89               	decfsz	9,f
 11408  06F5  2EF2               	goto	u2385
 11409  06F6  3001               	movlw	1
 11410  06F7  00A4               	movwf	??___lwdiv
 11411  06F8  0824               	movf	??___lwdiv,w
 11412  06F9  07A7               	addwf	___lwdiv@counter,f
 11413  06FA  2EEF               	goto	l3978
 11414  06FB                     l3980:	
 11415  06FB  3001               	movlw	1
 11416  06FC                     u2405:	
 11417  06FC  35A5               	lslf	___lwdiv@quotient,f
 11418  06FD  0DA6               	rlf	___lwdiv@quotient+1,f
 11419  06FE  0B89               	decfsz	9,f
 11420  06FF  2EFC               	goto	u2405
 11421  0700  0821               	movf	___lwdiv@divisor+1,w
 11422  0701  0223               	subwf	___lwdiv@dividend+1,w
 11423  0702  1D03               	skipz
 11424  0703  2F06               	goto	u2415
 11425  0704  0820               	movf	___lwdiv@divisor,w
 11426  0705  0222               	subwf	___lwdiv@dividend,w
 11427  0706                     u2415:	
 11428  0706  1C03               	skipc
 11429  0707  2F0D               	goto	l3986
 11430  0708  0820               	movf	___lwdiv@divisor,w
 11431  0709  02A2               	subwf	___lwdiv@dividend,f
 11432  070A  0821               	movf	___lwdiv@divisor+1,w
 11433  070B  3BA3               	subwfb	___lwdiv@dividend+1,f
 11434  070C  1425               	bsf	___lwdiv@quotient,0
 11435  070D                     l3986:	
 11436  070D  3001               	movlw	1
 11437  070E                     u2425:	
 11438  070E  36A1               	lsrf	___lwdiv@divisor+1,f
 11439  070F  0CA0               	rrf	___lwdiv@divisor,f
 11440  0710  0B89               	decfsz	9,f
 11441  0711  2F0E               	goto	u2425
 11442  0712  3001               	movlw	1
 11443  0713  02A7               	subwf	___lwdiv@counter,f
 11444  0714  1D03               	btfss	3,2
 11445  0715  2EFB               	goto	l3980
 11446  0716                     l3990:	
 11447  0716  0826               	movf	___lwdiv@quotient+1,w
 11448  0717  00A1               	movwf	?___lwdiv+1
 11449  0718  0825               	movf	___lwdiv@quotient,w
 11450  0719  00A0               	movwf	?___lwdiv
 11451  071A  0008               	return
 11452  071B                     __end_of___lwdiv:	
 11453                           
 11454                           	psect	intentry
 11455  0004                     __pintentry:	
 11456 ;; *************** function _INTERRUPT_InterruptManager *****************
 11457 ;; Defined at:
 11458 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 11459 ;; Parameters:    Size  Location     Type
 11460 ;;		None
 11461 ;; Auto vars:     Size  Location     Type
 11462 ;;		None
 11463 ;; Return value:  Size  Location     Type
 11464 ;;                  1    wreg      void 
 11465 ;; Registers used:
 11466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11467 ;; Tracked objects:
 11468 ;;		On entry : 0/0
 11469 ;;		On exit  : 0/0
 11470 ;;		Unchanged: 0/0
 11471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11472 ;;      Params:         0       0       0       0       0       0       0       0
 11473 ;;      Locals:         0       0       0       0       0       0       0       0
 11474 ;;      Temps:          1       0       0       0       0       0       0       0
 11475 ;;      Totals:         1       0       0       0       0       0       0       0
 11476 ;;Total ram usage:        1 bytes
 11477 ;; Hardware stack levels used:    1
 11478 ;; Hardware stack levels required when called:    4
 11479 ;; This function calls:
 11480 ;;		_CCP1_CaptureISR
 11481 ;;		_EUSART_Receive_ISR
 11482 ;;		_EUSART_Transmit_ISR
 11483 ;;		_INT_ISR
 11484 ;;		_PIN_MANAGER_IOC
 11485 ;;		_TMR0_ISR
 11486 ;;		_TMR3_ISR
 11487 ;;		_TMR5_ISR
 11488 ;; This function is called by:
 11489 ;;		Interrupt level 1
 11490 ;; This function uses a non-reentrant model
 11491 ;;
 11492                           
 11493  0004                     _INTERRUPT_InterruptManager:	
 11494                           
 11495                           ;incstack = 0
 11496  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11497                           
 11498                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11499  0005  3180               	pagesel	$
 11500  0006  0020               	movlb	0	; select bank0
 11501  0007  087F               	movf	127,w
 11502  0008  00F7               	movwf	??_INTERRUPT_InterruptManager
 11503                           
 11504                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 11505  0009  0021               	movlb	1	; select bank1
 11506  000A  1E90               	btfss	16,5	;volatile
 11507  000B  2813               	goto	i1l468
 11508  000C  0020               	movlb	0	; select bank0
 11509  000D  1E90               	btfss	16,5	;volatile
 11510  000E  2813               	goto	i1l468
 11511                           
 11512                           ;interrupt_manager.c: 55: {
 11513                           ;interrupt_manager.c: 56: TMR0_ISR();
 11514  000F  318D  256F  3180   	fcall	_TMR0_ISR
 11515                           
 11516                           ;interrupt_manager.c: 57: }
 11517  0012  2861               	goto	i1l484
 11518  0013                     i1l468:	
 11519                           
 11520                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits
      +                          .TXIF == 1)
 11521  0013  1F0B               	btfss	11,6	;volatile
 11522  0014  281F               	goto	i1l470
 11523  0015  0021               	movlb	1	; select bank1
 11524  0016  1E11               	btfss	17,4	;volatile
 11525  0017  281F               	goto	i1l470
 11526  0018  0020               	movlb	0	; select bank0
 11527  0019  1E11               	btfss	17,4	;volatile
 11528  001A  281F               	goto	i1l470
 11529                           
 11530                           ;interrupt_manager.c: 59: {
 11531                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
 11532  001B  318F  27E2  3180   	fcall	_EUSART_Transmit_ISR
 11533                           
 11534                           ;interrupt_manager.c: 61: }
 11535  001E  2861               	goto	i1l484
 11536  001F                     i1l470:	
 11537                           
 11538                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
 11539  001F  1F0B               	btfss	11,6	;volatile
 11540  0020  282B               	goto	i1l472
 11541  0021  0021               	movlb	1	; select bank1
 11542  0022  1E91               	btfss	17,5	;volatile
 11543  0023  282B               	goto	i1l472
 11544  0024  0020               	movlb	0	; select bank0
 11545  0025  1E91               	btfss	17,5	;volatile
 11546  0026  282B               	goto	i1l472
 11547                           
 11548                           ;interrupt_manager.c: 63: {
 11549                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
 11550  0027  318F  27AA  3180   	fcall	_EUSART_Receive_ISR
 11551                           
 11552                           ;interrupt_manager.c: 65: }
 11553  002A  2861               	goto	i1l484
 11554  002B                     i1l472:	
 11555                           
 11556                           ;interrupt_manager.c: 66: else if(PIE0bits.INTE == 1 && PIR0bits.INTF == 1)
 11557  002B  0021               	movlb	1	; select bank1
 11558  002C  1C10               	btfss	16,0	;volatile
 11559  002D  2835               	goto	i1l474
 11560  002E  0020               	movlb	0	; select bank0
 11561  002F  1C10               	btfss	16,0	;volatile
 11562  0030  2835               	goto	i1l474
 11563                           
 11564                           ;interrupt_manager.c: 67: {
 11565                           ;interrupt_manager.c: 68: INT_ISR();
 11566  0031  318D  256A  3180   	fcall	_INT_ISR
 11567                           
 11568                           ;interrupt_manager.c: 69: }
 11569  0034  2861               	goto	i1l484
 11570  0035                     i1l474:	
 11571                           
 11572                           ;interrupt_manager.c: 70: else if(INTCONbits.PEIE == 1 && PIE4bits.TMR5IE == 1 && PIR4bi
      +                          ts.TMR5IF == 1)
 11573  0035  1F0B               	btfss	11,6	;volatile
 11574  0036  2841               	goto	i1l476
 11575  0037  0021               	movlb	1	; select bank1
 11576  0038  1E14               	btfss	20,4	;volatile
 11577  0039  2841               	goto	i1l476
 11578  003A  0020               	movlb	0	; select bank0
 11579  003B  1E14               	btfss	20,4	;volatile
 11580  003C  2841               	goto	i1l476
 11581                           
 11582                           ;interrupt_manager.c: 71: {
 11583                           ;interrupt_manager.c: 72: TMR5_ISR();
 11584  003D  318E  26D0  3180   	fcall	_TMR5_ISR
 11585                           
 11586                           ;interrupt_manager.c: 73: }
 11587  0040  2861               	goto	i1l484
 11588  0041                     i1l476:	
 11589                           
 11590                           ;interrupt_manager.c: 74: else if(INTCONbits.PEIE == 1 && PIE3bits.TMR3IE == 1 && PIR3bi
      +                          ts.TMR3IF == 1)
 11591  0041  1F0B               	btfss	11,6	;volatile
 11592  0042  284D               	goto	i1l478
 11593  0043  0021               	movlb	1	; select bank1
 11594  0044  1E13               	btfss	19,4	;volatile
 11595  0045  284D               	goto	i1l478
 11596  0046  0020               	movlb	0	; select bank0
 11597  0047  1E13               	btfss	19,4	;volatile
 11598  0048  284D               	goto	i1l478
 11599                           
 11600                           ;interrupt_manager.c: 75: {
 11601                           ;interrupt_manager.c: 76: TMR3_ISR();
 11602  0049  318E  26BC  3180   	fcall	_TMR3_ISR
 11603                           
 11604                           ;interrupt_manager.c: 77: }
 11605  004C  2861               	goto	i1l484
 11606  004D                     i1l478:	
 11607                           
 11608                           ;interrupt_manager.c: 78: else if(INTCONbits.PEIE == 1 && PIE4bits.CCP1IE == 1 && PIR4bi
      +                          ts.CCP1IF == 1)
 11609  004D  1F0B               	btfss	11,6	;volatile
 11610  004E  2859               	goto	i1l480
 11611  004F  0021               	movlb	1	; select bank1
 11612  0050  1C14               	btfss	20,0	;volatile
 11613  0051  2859               	goto	i1l480
 11614  0052  0020               	movlb	0	; select bank0
 11615  0053  1C14               	btfss	20,0	;volatile
 11616  0054  2859               	goto	i1l480
 11617                           
 11618                           ;interrupt_manager.c: 79: {
 11619                           ;interrupt_manager.c: 80: CCP1_CaptureISR();
 11620  0055  318E  2686  3180   	fcall	_CCP1_CaptureISR
 11621                           
 11622                           ;interrupt_manager.c: 81: }
 11623  0058  2861               	goto	i1l484
 11624  0059                     i1l480:	
 11625                           
 11626                           ;interrupt_manager.c: 82: else if(PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1)
 11627  0059  0021               	movlb	1	; select bank1
 11628  005A  1E10               	btfss	16,4	;volatile
 11629  005B  2861               	goto	i1l484
 11630  005C  0020               	movlb	0	; select bank0
 11631  005D  1E10               	btfss	16,4	;volatile
 11632  005E  2861               	goto	i1l484
 11633                           
 11634                           ;interrupt_manager.c: 83: {
 11635                           ;interrupt_manager.c: 84: PIN_MANAGER_IOC();
 11636  005F  318E  2609         	fcall	_PIN_MANAGER_IOC
 11637  0061                     i1l484:	
 11638                           ;interrupt_manager.c: 86: else
 11639                           ;interrupt_manager.c: 87: {
 11640                           
 11641                           ;interrupt_manager.c: 85: }
 11642                           
 11643  0061  0877               	movf	??_INTERRUPT_InterruptManager,w
 11644  0062  0020               	movlb	0	; select bank0
 11645  0063  00FF               	movwf	127
 11646  0064  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11647  0065  0009               	retfie
 11648  0066                     __end_of_INTERRUPT_InterruptManager:	
 11649                           
 11650                           	psect	text56
 11651  0ED0                     __ptext56:	
 11652 ;; *************** function _TMR5_ISR *****************
 11653 ;; Defined at:
 11654 ;;		line 156 in file "mcc_generated_files/tmr5.c"
 11655 ;; Parameters:    Size  Location     Type
 11656 ;;		None
 11657 ;; Auto vars:     Size  Location     Type
 11658 ;;		None
 11659 ;; Return value:  Size  Location     Type
 11660 ;;                  1    wreg      void 
 11661 ;; Registers used:
 11662 ;;		wreg, status,2, status,0, pclath, cstack
 11663 ;; Tracked objects:
 11664 ;;		On entry : 0/0
 11665 ;;		On exit  : 0/0
 11666 ;;		Unchanged: 0/0
 11667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11668 ;;      Params:         0       0       0       0       0       0       0       0
 11669 ;;      Locals:         0       0       0       0       0       0       0       0
 11670 ;;      Temps:          0       0       0       0       0       0       0       0
 11671 ;;      Totals:         0       0       0       0       0       0       0       0
 11672 ;;Total ram usage:        0 bytes
 11673 ;; Hardware stack levels used:    1
 11674 ;; Hardware stack levels required when called:    2
 11675 ;; This function calls:
 11676 ;;		Absolute function
 11677 ;;		_TMR5_DefaultInterruptHandler
 11678 ;; This function is called by:
 11679 ;;		_INTERRUPT_InterruptManager
 11680 ;; This function uses a non-reentrant model
 11681 ;;
 11682                           
 11683                           
 11684                           ;psect for function _TMR5_ISR
 11685  0ED0                     _TMR5_ISR:	
 11686                           
 11687                           ;tmr5.c: 160: PIR4bits.TMR5IF = 0;
 11688                           
 11689                           ;incstack = 0
 11690                           ; Regs used in _TMR5_ISR: [wreg+status,2+status,0+pclath+cstack]
 11691  0ED0  0020               	movlb	0	; select bank0
 11692  0ED1  1214               	bcf	20,4	;volatile
 11693                           
 11694                           ;tmr5.c: 162: TMR5H = (timer5ReloadVal >> 8);
 11695  0ED2  086D               	movf	_timer5ReloadVal+1,w	;volatile
 11696  0ED3  0028               	movlb	8	; select bank8
 11697  0ED4  0099               	movwf	25	;volatile
 11698                           
 11699                           ;tmr5.c: 163: TMR5L = timer5ReloadVal;
 11700  0ED5  0020               	movlb	0	; select bank0
 11701  0ED6  086C               	movf	_timer5ReloadVal,w	;volatile
 11702  0ED7  0028               	movlb	8	; select bank8
 11703  0ED8  0098               	movwf	24	;volatile
 11704                           
 11705                           ;tmr5.c: 165: if(TMR5_InterruptHandler)
 11706  0ED9  0021               	movlb	1	; select bank1
 11707  0EDA  086E               	movf	_TMR5_InterruptHandler^(0+128),w
 11708  0EDB  046F               	iorwf	(_TMR5_InterruptHandler+1)^(0+128),w
 11709  0EDC  1903               	btfsc	3,2
 11710  0EDD  0008               	return
 11711                           
 11712                           ;tmr5.c: 166: {
 11713                           ;tmr5.c: 167: TMR5_InterruptHandler();
 11714  0EDE  086F               	movf	(_TMR5_InterruptHandler+1)^(0+128),w
 11715  0EDF  008A               	movwf	10
 11716  0EE0  086E               	movf	_TMR5_InterruptHandler^(0+128),w
 11717  0EE1  000A               	callw
 11718  0EE2  318E               	pagesel	$
 11719  0EE3  0008               	return
 11720  0EE4                     __end_of_TMR5_ISR:	
 11721                           
 11722                           	psect	text57
 11723  0D45                     __ptext57:	
 11724 ;; *************** function _TMR5_DefaultInterruptHandler *****************
 11725 ;; Defined at:
 11726 ;;		line 176 in file "mcc_generated_files/tmr5.c"
 11727 ;; Parameters:    Size  Location     Type
 11728 ;;		None
 11729 ;; Auto vars:     Size  Location     Type
 11730 ;;		None
 11731 ;; Return value:  Size  Location     Type
 11732 ;;                  1    wreg      void 
 11733 ;; Registers used:
 11734 ;;		status,2, status,0, pclath, cstack
 11735 ;; Tracked objects:
 11736 ;;		On entry : 0/0
 11737 ;;		On exit  : 0/0
 11738 ;;		Unchanged: 0/0
 11739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11740 ;;      Params:         0       0       0       0       0       0       0       0
 11741 ;;      Locals:         0       0       0       0       0       0       0       0
 11742 ;;      Temps:          0       0       0       0       0       0       0       0
 11743 ;;      Totals:         0       0       0       0       0       0       0       0
 11744 ;;Total ram usage:        0 bytes
 11745 ;; Hardware stack levels used:    1
 11746 ;; Hardware stack levels required when called:    1
 11747 ;; This function calls:
 11748 ;;		_Timer5_Overflow
 11749 ;; This function is called by:
 11750 ;;		_TMR5_Initialize
 11751 ;;		_TMR5_ISR
 11752 ;; This function uses a non-reentrant model
 11753 ;;
 11754                           
 11755                           
 11756                           ;psect for function _TMR5_DefaultInterruptHandler
 11757  0D45                     _TMR5_DefaultInterruptHandler:	
 11758                           
 11759                           ;tmr5.c: 178: Timer5_Overflow();
 11760                           
 11761                           ;incstack = 0
 11762                           ; Regs used in _TMR5_DefaultInterruptHandler: [status,2+status,0+pclath+cstack]
 11763  0D45  318D  2540         	fcall	_Timer5_Overflow
 11764  0D47  0008               	return
 11765  0D48                     __end_of_TMR5_DefaultInterruptHandler:	
 11766                           
 11767                           	psect	text58
 11768  0D40                     __ptext58:	
 11769 ;; *************** function _Timer5_Overflow *****************
 11770 ;; Defined at:
 11771 ;;		line 699 in file "main.c"
 11772 ;; Parameters:    Size  Location     Type
 11773 ;;		None
 11774 ;; Auto vars:     Size  Location     Type
 11775 ;;		None
 11776 ;; Return value:  Size  Location     Type
 11777 ;;                  1    wreg      void 
 11778 ;; Registers used:
 11779 ;;		None
 11780 ;; Tracked objects:
 11781 ;;		On entry : 0/0
 11782 ;;		On exit  : 0/0
 11783 ;;		Unchanged: 0/0
 11784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11785 ;;      Params:         0       0       0       0       0       0       0       0
 11786 ;;      Locals:         0       0       0       0       0       0       0       0
 11787 ;;      Temps:          0       0       0       0       0       0       0       0
 11788 ;;      Totals:         0       0       0       0       0       0       0       0
 11789 ;;Total ram usage:        0 bytes
 11790 ;; Hardware stack levels used:    1
 11791 ;; This function calls:
 11792 ;;		Nothing
 11793 ;; This function is called by:
 11794 ;;		_TMR5_DefaultInterruptHandler
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           
 11799                           ;psect for function _Timer5_Overflow
 11800  0D40                     _Timer5_Overflow:	
 11801                           
 11802                           ;incstack = 0
 11803                           ; Regs used in _Timer5_Overflow: []
 11804  0D40  0008               	return
 11805  0D41                     __end_of_Timer5_Overflow:	
 11806                           
 11807                           	psect	text59
 11808  0EBC                     __ptext59:	
 11809 ;; *************** function _TMR3_ISR *****************
 11810 ;; Defined at:
 11811 ;;		line 156 in file "mcc_generated_files/tmr3.c"
 11812 ;; Parameters:    Size  Location     Type
 11813 ;;		None
 11814 ;; Auto vars:     Size  Location     Type
 11815 ;;		None
 11816 ;; Return value:  Size  Location     Type
 11817 ;;                  1    wreg      void 
 11818 ;; Registers used:
 11819 ;;		wreg, status,2, status,0, pclath, cstack
 11820 ;; Tracked objects:
 11821 ;;		On entry : 0/0
 11822 ;;		On exit  : 0/0
 11823 ;;		Unchanged: 0/0
 11824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11825 ;;      Params:         0       0       0       0       0       0       0       0
 11826 ;;      Locals:         0       0       0       0       0       0       0       0
 11827 ;;      Temps:          0       0       0       0       0       0       0       0
 11828 ;;      Totals:         0       0       0       0       0       0       0       0
 11829 ;;Total ram usage:        0 bytes
 11830 ;; Hardware stack levels used:    1
 11831 ;; Hardware stack levels required when called:    2
 11832 ;; This function calls:
 11833 ;;		Absolute function
 11834 ;;		_TMR3_DefaultInterruptHandler
 11835 ;; This function is called by:
 11836 ;;		_INTERRUPT_InterruptManager
 11837 ;; This function uses a non-reentrant model
 11838 ;;
 11839                           
 11840                           
 11841                           ;psect for function _TMR3_ISR
 11842  0EBC                     _TMR3_ISR:	
 11843                           
 11844                           ;tmr3.c: 160: PIR3bits.TMR3IF = 0;
 11845                           
 11846                           ;incstack = 0
 11847                           ; Regs used in _TMR3_ISR: [wreg+status,2+status,0+pclath+cstack]
 11848  0EBC  0020               	movlb	0	; select bank0
 11849  0EBD  1213               	bcf	19,4	;volatile
 11850                           
 11851                           ;tmr3.c: 162: TMR3H = (timer3ReloadVal >> 8);
 11852  0EBE  086B               	movf	_timer3ReloadVal+1,w	;volatile
 11853  0EBF  0028               	movlb	8	; select bank8
 11854  0EC0  0092               	movwf	18	;volatile
 11855                           
 11856                           ;tmr3.c: 163: TMR3L = timer3ReloadVal;
 11857  0EC1  0020               	movlb	0	; select bank0
 11858  0EC2  086A               	movf	_timer3ReloadVal,w	;volatile
 11859  0EC3  0028               	movlb	8	; select bank8
 11860  0EC4  0091               	movwf	17	;volatile
 11861                           
 11862                           ;tmr3.c: 165: if(TMR3_InterruptHandler)
 11863  0EC5  0022               	movlb	2	; select bank2
 11864  0EC6  0862               	movf	_TMR3_InterruptHandler^(0+256),w
 11865  0EC7  0463               	iorwf	(_TMR3_InterruptHandler+1)^(0+256),w
 11866  0EC8  1903               	btfsc	3,2
 11867  0EC9  0008               	return
 11868                           
 11869                           ;tmr3.c: 166: {
 11870                           ;tmr3.c: 167: TMR3_InterruptHandler();
 11871  0ECA  0863               	movf	(_TMR3_InterruptHandler+1)^(0+256),w
 11872  0ECB  008A               	movwf	10
 11873  0ECC  0862               	movf	_TMR3_InterruptHandler^(0+256),w
 11874  0ECD  000A               	callw
 11875  0ECE  318E               	pagesel	$
 11876  0ECF  0008               	return
 11877  0ED0                     __end_of_TMR3_ISR:	
 11878                           
 11879                           	psect	text60
 11880  0D42                     __ptext60:	
 11881 ;; *************** function _TMR3_DefaultInterruptHandler *****************
 11882 ;; Defined at:
 11883 ;;		line 176 in file "mcc_generated_files/tmr3.c"
 11884 ;; Parameters:    Size  Location     Type
 11885 ;;		None
 11886 ;; Auto vars:     Size  Location     Type
 11887 ;;		None
 11888 ;; Return value:  Size  Location     Type
 11889 ;;                  1    wreg      void 
 11890 ;; Registers used:
 11891 ;;		wreg, status,2, status,0, pclath, cstack
 11892 ;; Tracked objects:
 11893 ;;		On entry : 0/0
 11894 ;;		On exit  : 0/0
 11895 ;;		Unchanged: 0/0
 11896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11897 ;;      Params:         0       0       0       0       0       0       0       0
 11898 ;;      Locals:         0       0       0       0       0       0       0       0
 11899 ;;      Temps:          0       0       0       0       0       0       0       0
 11900 ;;      Totals:         0       0       0       0       0       0       0       0
 11901 ;;Total ram usage:        0 bytes
 11902 ;; Hardware stack levels used:    1
 11903 ;; Hardware stack levels required when called:    1
 11904 ;; This function calls:
 11905 ;;		_Timer3_Overflow
 11906 ;; This function is called by:
 11907 ;;		_TMR3_Initialize
 11908 ;;		_TMR3_ISR
 11909 ;; This function uses a non-reentrant model
 11910 ;;
 11911                           
 11912                           
 11913                           ;psect for function _TMR3_DefaultInterruptHandler
 11914  0D42                     _TMR3_DefaultInterruptHandler:	
 11915                           
 11916                           ;tmr3.c: 178: Timer3_Overflow();
 11917                           
 11918                           ;incstack = 0
 11919                           ; Regs used in _TMR3_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 11920  0D42  3187  274D         	fcall	_Timer3_Overflow
 11921  0D44  0008               	return
 11922  0D45                     __end_of_TMR3_DefaultInterruptHandler:	
 11923                           
 11924                           	psect	text61
 11925  074D                     __ptext61:	
 11926 ;; *************** function _Timer3_Overflow *****************
 11927 ;; Defined at:
 11928 ;;		line 692 in file "main.c"
 11929 ;; Parameters:    Size  Location     Type
 11930 ;;		None
 11931 ;; Auto vars:     Size  Location     Type
 11932 ;;		None
 11933 ;; Return value:  Size  Location     Type
 11934 ;;                  1    wreg      void 
 11935 ;; Registers used:
 11936 ;;		wreg, status,2, status,0
 11937 ;; Tracked objects:
 11938 ;;		On entry : 0/0
 11939 ;;		On exit  : 0/0
 11940 ;;		Unchanged: 0/0
 11941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11942 ;;      Params:         0       0       0       0       0       0       0       0
 11943 ;;      Locals:         0       0       0       0       0       0       0       0
 11944 ;;      Temps:          4       0       0       0       0       0       0       0
 11945 ;;      Totals:         4       0       0       0       0       0       0       0
 11946 ;;Total ram usage:        4 bytes
 11947 ;; Hardware stack levels used:    1
 11948 ;; This function calls:
 11949 ;;		Nothing
 11950 ;; This function is called by:
 11951 ;;		_TMR3_DefaultInterruptHandler
 11952 ;; This function uses a non-reentrant model
 11953 ;;
 11954                           
 11955                           
 11956                           ;psect for function _Timer3_Overflow
 11957  074D                     _Timer3_Overflow:	
 11958                           
 11959                           ;main.c: 694: EncEdgeTimeInterval= EncEdgeTimeInterval + 0x0000FFFF;
 11960                           
 11961                           ;incstack = 0
 11962                           ; Regs used in _Timer3_Overflow: [wreg+status,2+status,0]
 11963  074D  30FF               	movlw	255
 11964  074E  00F0               	movwf	??_Timer3_Overflow
 11965  074F  30FF               	movlw	255
 11966  0750  00F1               	movwf	??_Timer3_Overflow+1
 11967  0751  3000               	movlw	0
 11968  0752  00F2               	movwf	??_Timer3_Overflow+2
 11969  0753  3000               	movlw	0
 11970  0754  00F3               	movwf	??_Timer3_Overflow+3
 11971  0755  0020               	movlb	0	; select bank0
 11972  0756  084B               	movf	_EncEdgeTimeInterval,w
 11973  0757  07F0               	addwf	??_Timer3_Overflow,f
 11974  0758  084C               	movf	_EncEdgeTimeInterval+1,w
 11975  0759  3DF1               	addwfc	??_Timer3_Overflow+1,f
 11976  075A  084D               	movf	_EncEdgeTimeInterval+2,w
 11977  075B  3DF2               	addwfc	??_Timer3_Overflow+2,f
 11978  075C  084E               	movf	_EncEdgeTimeInterval+3,w
 11979  075D  3DF3               	addwfc	??_Timer3_Overflow+3,f
 11980  075E  0873               	movf	??_Timer3_Overflow+3,w
 11981  075F  00CE               	movwf	_EncEdgeTimeInterval+3
 11982  0760  0872               	movf	??_Timer3_Overflow+2,w
 11983  0761  00CD               	movwf	_EncEdgeTimeInterval+2
 11984  0762  0871               	movf	??_Timer3_Overflow+1,w
 11985  0763  00CC               	movwf	_EncEdgeTimeInterval+1
 11986  0764  0870               	movf	??_Timer3_Overflow,w
 11987  0765  00CB               	movwf	_EncEdgeTimeInterval
 11988                           
 11989                           ;main.c: 695: if(EncEdgeTimeInterval >0xEFFFFFFF)
 11990  0766  30F0               	movlw	240
 11991  0767  024E               	subwf	_EncEdgeTimeInterval+3,w
 11992  0768  1C03               	btfss	3,0
 11993  0769  0008               	return
 11994                           
 11995                           ;main.c: 696: EncEdgeTimeInterval=0xEFFFFFFF;
 11996  076A  30EF               	movlw	239
 11997  076B  00CE               	movwf	_EncEdgeTimeInterval+3
 11998  076C  30FF               	movlw	255
 11999  076D  00CD               	movwf	_EncEdgeTimeInterval+2
 12000  076E  30FF               	movlw	255
 12001  076F  00CC               	movwf	_EncEdgeTimeInterval+1
 12002  0770  30FF               	movlw	255
 12003  0771  00CB               	movwf	_EncEdgeTimeInterval
 12004  0772  0008               	return
 12005  0773                     __end_of_Timer3_Overflow:	
 12006                           
 12007                           	psect	text62
 12008  0D6F                     __ptext62:	
 12009 ;; *************** function _TMR0_ISR *****************
 12010 ;; Defined at:
 12011 ;;		line 123 in file "mcc_generated_files/tmr0.c"
 12012 ;; Parameters:    Size  Location     Type
 12013 ;;		None
 12014 ;; Auto vars:     Size  Location     Type
 12015 ;;		None
 12016 ;; Return value:  Size  Location     Type
 12017 ;;                  1    wreg      void 
 12018 ;; Registers used:
 12019 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12020 ;; Tracked objects:
 12021 ;;		On entry : 0/0
 12022 ;;		On exit  : 0/0
 12023 ;;		Unchanged: 0/0
 12024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12025 ;;      Params:         0       0       0       0       0       0       0       0
 12026 ;;      Locals:         0       0       0       0       0       0       0       0
 12027 ;;      Temps:          0       0       0       0       0       0       0       0
 12028 ;;      Totals:         0       0       0       0       0       0       0       0
 12029 ;;Total ram usage:        0 bytes
 12030 ;; Hardware stack levels used:    1
 12031 ;; Hardware stack levels required when called:    3
 12032 ;; This function calls:
 12033 ;;		_TMR0_CallBack
 12034 ;; This function is called by:
 12035 ;;		_INTERRUPT_InterruptManager
 12036 ;; This function uses a non-reentrant model
 12037 ;;
 12038                           
 12039                           
 12040                           ;psect for function _TMR0_ISR
 12041  0D6F                     _TMR0_ISR:	
 12042                           
 12043                           ;tmr0.c: 126: PIR0bits.TMR0IF = 0;
 12044                           
 12045                           ;incstack = 0
 12046                           ; Regs used in _TMR0_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12047  0D6F  0020               	movlb	0	; select bank0
 12048  0D70  1290               	bcf	16,5	;volatile
 12049                           
 12050                           ;tmr0.c: 129: TMR0_CallBack();
 12051  0D71  318E  263B         	fcall	_TMR0_CallBack
 12052  0D73  0008               	return
 12053  0D74                     __end_of_TMR0_ISR:	
 12054                           
 12055                           	psect	text63
 12056  0E3B                     __ptext63:	
 12057 ;; *************** function _TMR0_CallBack *****************
 12058 ;; Defined at:
 12059 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 12060 ;; Parameters:    Size  Location     Type
 12061 ;;		None
 12062 ;; Auto vars:     Size  Location     Type
 12063 ;;		None
 12064 ;; Return value:  Size  Location     Type
 12065 ;;                  1    wreg      void 
 12066 ;; Registers used:
 12067 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12068 ;; Tracked objects:
 12069 ;;		On entry : 0/0
 12070 ;;		On exit  : 0/0
 12071 ;;		Unchanged: 0/0
 12072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12073 ;;      Params:         0       0       0       0       0       0       0       0
 12074 ;;      Locals:         0       0       0       0       0       0       0       0
 12075 ;;      Temps:          0       0       0       0       0       0       0       0
 12076 ;;      Totals:         0       0       0       0       0       0       0       0
 12077 ;;Total ram usage:        0 bytes
 12078 ;; Hardware stack levels used:    1
 12079 ;; Hardware stack levels required when called:    2
 12080 ;; This function calls:
 12081 ;;		Absolute function
 12082 ;;		_TMR0_DefaultInterruptHandler
 12083 ;;		_Timer0_tick10msecFunc
 12084 ;; This function is called by:
 12085 ;;		_TMR0_ISR
 12086 ;; This function uses a non-reentrant model
 12087 ;;
 12088                           
 12089                           
 12090                           ;psect for function _TMR0_CallBack
 12091  0E3B                     _TMR0_CallBack:	
 12092                           
 12093                           ;tmr0.c: 137: Timer0_tick10msecFunc();
 12094                           
 12095                           ;incstack = 0
 12096                           ; Regs used in _TMR0_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12097  0E3B  3187  2773  318E   	fcall	_Timer0_tick10msecFunc
 12098                           
 12099                           ;tmr0.c: 139: if(TMR0_InterruptHandler)
 12100  0E3E  0022               	movlb	2	; select bank2
 12101  0E3F  0860               	movf	_TMR0_InterruptHandler^(0+256),w
 12102  0E40  0461               	iorwf	(_TMR0_InterruptHandler+1)^(0+256),w
 12103  0E41  1903               	btfsc	3,2
 12104  0E42  0008               	return
 12105                           
 12106                           ;tmr0.c: 140: {
 12107                           ;tmr0.c: 141: TMR0_InterruptHandler();
 12108  0E43  0861               	movf	(_TMR0_InterruptHandler+1)^(0+256),w
 12109  0E44  008A               	movwf	10
 12110  0E45  0860               	movf	_TMR0_InterruptHandler^(0+256),w
 12111  0E46  000A               	callw
 12112  0E47  318E               	pagesel	$
 12113  0E48  0008               	return
 12114  0E49                     __end_of_TMR0_CallBack:	
 12115                           
 12116                           	psect	text64
 12117  0773                     __ptext64:	
 12118 ;; *************** function _Timer0_tick10msecFunc *****************
 12119 ;; Defined at:
 12120 ;;		line 704 in file "main.c"
 12121 ;; Parameters:    Size  Location     Type
 12122 ;;		None
 12123 ;; Auto vars:     Size  Location     Type
 12124 ;;		None
 12125 ;; Return value:  Size  Location     Type
 12126 ;;                  1    wreg      void 
 12127 ;; Registers used:
 12128 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12129 ;; Tracked objects:
 12130 ;;		On entry : 0/0
 12131 ;;		On exit  : 0/0
 12132 ;;		Unchanged: 0/0
 12133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12134 ;;      Params:         0       0       0       0       0       0       0       0
 12135 ;;      Locals:         0       0       0       0       0       0       0       0
 12136 ;;      Temps:          4       0       0       0       0       0       0       0
 12137 ;;      Totals:         4       0       0       0       0       0       0       0
 12138 ;;Total ram usage:        4 bytes
 12139 ;; Hardware stack levels used:    1
 12140 ;; Hardware stack levels required when called:    1
 12141 ;; This function calls:
 12142 ;;		_LedON_Control_10msec
 12143 ;; This function is called by:
 12144 ;;		_TMR0_CallBack
 12145 ;; This function uses a non-reentrant model
 12146 ;;
 12147                           
 12148                           
 12149                           ;psect for function _Timer0_tick10msecFunc
 12150  0773                     _Timer0_tick10msecFunc:	
 12151                           
 12152                           ;main.c: 706: LedON_Control_10msec();
 12153                           
 12154                           ;incstack = 0
 12155                           ; Regs used in _Timer0_tick10msecFunc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12156  0773  3184  240F  3187   	fcall	_LedON_Control_10msec
 12157                           
 12158                           ;main.c: 708: TimertickMsec= TimertickMsec+5;
 12159  0776  3005               	movlw	5
 12160  0777  00F0               	movwf	??_Timer0_tick10msecFunc
 12161  0778  3000               	movlw	0
 12162  0779  00F1               	movwf	??_Timer0_tick10msecFunc+1
 12163  077A  3000               	movlw	0
 12164  077B  00F2               	movwf	??_Timer0_tick10msecFunc+2
 12165  077C  3000               	movlw	0
 12166  077D  00F3               	movwf	??_Timer0_tick10msecFunc+3
 12167  077E  0021               	movlb	1	; select bank1
 12168  077F  0844               	movf	_TimertickMsec^(0+128),w
 12169  0780  07F0               	addwf	??_Timer0_tick10msecFunc,f
 12170  0781  0845               	movf	(_TimertickMsec+1)^(0+128),w
 12171  0782  3DF1               	addwfc	??_Timer0_tick10msecFunc+1,f
 12172  0783  0846               	movf	(_TimertickMsec+2)^(0+128),w
 12173  0784  3DF2               	addwfc	??_Timer0_tick10msecFunc+2,f
 12174  0785  0847               	movf	(_TimertickMsec+3)^(0+128),w
 12175  0786  3DF3               	addwfc	??_Timer0_tick10msecFunc+3,f
 12176  0787  0873               	movf	??_Timer0_tick10msecFunc+3,w
 12177  0788  00C7               	movwf	(_TimertickMsec+3)^(0+128)
 12178  0789  0872               	movf	??_Timer0_tick10msecFunc+2,w
 12179  078A  00C6               	movwf	(_TimertickMsec+2)^(0+128)
 12180  078B  0871               	movf	??_Timer0_tick10msecFunc+1,w
 12181  078C  00C5               	movwf	(_TimertickMsec+1)^(0+128)
 12182  078D  0870               	movf	??_Timer0_tick10msecFunc,w
 12183  078E  00C4               	movwf	_TimertickMsec^(0+128)
 12184                           
 12185                           ;main.c: 710: if(delayFlag==1)
 12186  078F  0020               	movlb	0	; select bank0
 12187  0790  0361               	decf	_delayFlag,w
 12188  0791  1D03               	btfss	3,2
 12189  0792  0008               	return
 12190                           
 12191                           ;main.c: 711: delayCount+=5;
 12192  0793  3005               	movlw	5
 12193  0794  0021               	movlb	1	; select bank1
 12194  0795  07DE               	addwf	_delayCount^(0+128),f
 12195  0796  3000               	movlw	0
 12196  0797  3DDF               	addwfc	(_delayCount+1)^(0+128),f
 12197  0798  0008               	return
 12198  0799                     __end_of_Timer0_tick10msecFunc:	
 12199                           
 12200                           	psect	text65
 12201  040F                     __ptext65:	
 12202 ;; *************** function _LedON_Control_10msec *****************
 12203 ;; Defined at:
 12204 ;;		line 54 in file "LED_Ctrl.c"
 12205 ;; Parameters:    Size  Location     Type
 12206 ;;		None
 12207 ;; Auto vars:     Size  Location     Type
 12208 ;;		None
 12209 ;; Return value:  Size  Location     Type
 12210 ;;                  1    wreg      void 
 12211 ;; Registers used:
 12212 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12213 ;; Tracked objects:
 12214 ;;		On entry : 0/0
 12215 ;;		On exit  : 0/0
 12216 ;;		Unchanged: 0/0
 12217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12218 ;;      Params:         0       0       0       0       0       0       0       0
 12219 ;;      Locals:         0       0       0       0       0       0       0       0
 12220 ;;      Temps:          0       0       0       0       0       0       0       0
 12221 ;;      Totals:         0       0       0       0       0       0       0       0
 12222 ;;Total ram usage:        0 bytes
 12223 ;; Hardware stack levels used:    1
 12224 ;; This function calls:
 12225 ;;		Nothing
 12226 ;; This function is called by:
 12227 ;;		_Timer0_tick10msecFunc
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           
 12232                           ;psect for function _LedON_Control_10msec
 12233  040F                     _LedON_Control_10msec:	
 12234                           
 12235                           ;LED_Ctrl.c: 56: if(1==Led_ON)
 12236                           
 12237                           ;incstack = 0
 12238                           ; Regs used in _LedON_Control_10msec: [wreg-fsr0h+status,2+status,0]
 12239  040F  0020               	movlb	0	; select bank0
 12240  0410  035D               	decf	_Led_ON,w
 12241  0411  1D03               	btfss	3,2
 12242  0412  0008               	return
 12243                           
 12244                           ;LED_Ctrl.c: 57: {
 12245                           ;LED_Ctrl.c: 59: if(LED_msec_Cnt >= Blick_tickPoint)
 12246  0413  0021               	movlb	1	; select bank1
 12247  0414  0859               	movf	(_Blick_tickPoint+1)^(0+128),w
 12248  0415  025D               	subwf	(_LED_msec_Cnt+1)^(0+128),w
 12249  0416  1D03               	skipz
 12250  0417  2C1A               	goto	u186_25
 12251  0418  0858               	movf	_Blick_tickPoint^(0+128),w
 12252  0419  025C               	subwf	_LED_msec_Cnt^(0+128),w
 12253  041A                     u186_25:	
 12254  041A  1803               	btfsc	3,0
 12255  041B  2C41               	goto	i1l3454
 12256  041C  2C54               	goto	i1l3458
 12257  041D                     i1l3446:	
 12258                           ;LED_Ctrl.c: 62: {
 12259                           ;LED_Ctrl.c: 63: case 0 : do { LATCbits.LATC0 = ~LATCbits.LATC0; } while(0);
 12260                           
 12261                           ;LED_Ctrl.c: 60: {
 12262                           ;LED_Ctrl.c: 61: switch(LED_Color)
 12263                           
 12264  041D  1003               	clrc
 12265  041E  0022               	movlb	2	; select bank2
 12266  041F  1C0E               	btfss	14,0	;volatile
 12267  0420  1403               	setc
 12268  0421  1C03               	btfss	3,0
 12269  0422  2C26               	goto	u187_20
 12270  0423  0022               	movlb	2	; select bank2
 12271  0424  140E               	bsf	14,0	;volatile
 12272  0425  2C4D               	goto	i1l3456
 12273  0426                     u187_20:	
 12274  0426  0022               	movlb	2	; select bank2
 12275  0427  100E               	bcf	14,0	;volatile
 12276                           
 12277                           ;LED_Ctrl.c: 64: break;
 12278  0428  2C4D               	goto	i1l3456
 12279  0429                     i1l3448:	
 12280                           ;LED_Ctrl.c: 65: case 1 : do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
 12281                           
 12282  0429  1003               	clrc
 12283  042A  0022               	movlb	2	; select bank2
 12284  042B  1C8E               	btfss	14,1	;volatile
 12285  042C  1403               	setc
 12286  042D  1C03               	btfss	3,0
 12287  042E  2C32               	goto	u189_20
 12288  042F  0022               	movlb	2	; select bank2
 12289  0430  148E               	bsf	14,1	;volatile
 12290  0431  2C4D               	goto	i1l3456
 12291  0432                     u189_20:	
 12292  0432  0022               	movlb	2	; select bank2
 12293  0433  108E               	bcf	14,1	;volatile
 12294                           
 12295                           ;LED_Ctrl.c: 66: break;
 12296  0434  2C4D               	goto	i1l3456
 12297  0435                     i1l3450:	
 12298                           ;LED_Ctrl.c: 67: case 2 : do { LATCbits.LATC2 = ~LATCbits.LATC2; } while(0);
 12299                           
 12300  0435  1003               	clrc
 12301  0436  0022               	movlb	2	; select bank2
 12302  0437  1D0E               	btfss	14,2	;volatile
 12303  0438  1403               	setc
 12304  0439  1C03               	btfss	3,0
 12305  043A  2C3E               	goto	u191_20
 12306  043B  0022               	movlb	2	; select bank2
 12307  043C  150E               	bsf	14,2	;volatile
 12308  043D  2C4D               	goto	i1l3456
 12309  043E                     u191_20:	
 12310  043E  0022               	movlb	2	; select bank2
 12311  043F  110E               	bcf	14,2	;volatile
 12312                           
 12313                           ;LED_Ctrl.c: 70: }
 12314                           
 12315                           ;LED_Ctrl.c: 69: default : break;
 12316                           
 12317                           ;LED_Ctrl.c: 68: break;
 12318  0440  2C4D               	goto	i1l3456
 12319  0441                     i1l3454:	
 12320  0441  0020               	movlb	0	; select bank0
 12321  0442  086F               	movf	_LED_Color,w
 12322                           
 12323                           ; Switch size 1, requested type "space"
 12324                           ; Number of cases is 3, Range of values is 0 to 2
 12325                           ; switch strategies available:
 12326                           ; Name         Instructions Cycles
 12327                           ; simple_byte           10     6 (average)
 12328                           ; direct_byte           12     6 (fixed)
 12329                           ; jumptable            260     6 (fixed)
 12330                           ;	Chosen strategy is simple_byte
 12331  0443  3A00               	xorlw	0	; case 0
 12332  0444  1903               	skipnz
 12333  0445  2C1D               	goto	i1l3446
 12334  0446  3A01               	xorlw	1	; case 1
 12335  0447  1903               	skipnz
 12336  0448  2C29               	goto	i1l3448
 12337  0449  3A03               	xorlw	3	; case 2
 12338  044A  1903               	skipnz
 12339  044B  2C35               	goto	i1l3450
 12340  044C  2C4D               	goto	i1l3456
 12341  044D                     i1l3456:	
 12342                           
 12343                           ;LED_Ctrl.c: 73: Blick_tickPoint=Blick_tickPoint+Blick_tickPointMsec;
 12344  044D  0021               	movlb	1	; select bank1
 12345  044E  085A               	movf	_Blick_tickPointMsec^(0+128),w
 12346  044F  0758               	addwf	_Blick_tickPoint^(0+128),w
 12347  0450  00D8               	movwf	_Blick_tickPoint^(0+128)
 12348  0451  085B               	movf	(_Blick_tickPointMsec+1)^(0+128),w
 12349  0452  3D59               	addwfc	(_Blick_tickPoint+1)^(0+128),w
 12350  0453  00D9               	movwf	(_Blick_tickPoint+1)^(0+128)
 12351  0454                     i1l3458:	
 12352                           
 12353                           ;LED_Ctrl.c: 75: }
 12354                           ;LED_Ctrl.c: 77: if(LED_msec_Cnt > LedON_Duration_msec)
 12355  0454  085D               	movf	(_LED_msec_Cnt+1)^(0+128),w
 12356  0455  0020               	movlb	0	; select bank0
 12357  0456  0250               	subwf	_LedON_Duration_msec+1,w
 12358  0457  1D03               	skipz
 12359  0458  2C5D               	goto	u193_25
 12360  0459  0021               	movlb	1	; select bank1
 12361  045A  085C               	movf	_LED_msec_Cnt^(0+128),w
 12362  045B  0020               	movlb	0	; select bank0
 12363  045C  024F               	subwf	_LedON_Duration_msec,w
 12364  045D                     u193_25:	
 12365  045D  1C03               	btfss	3,0
 12366  045E  2C69               	goto	i1l3464
 12367  045F  2C7A               	goto	i1l3468
 12368  0460                     i1l930:	
 12369                           ;LED_Ctrl.c: 80: {
 12370                           ;LED_Ctrl.c: 81: case 0 : do { LATCbits.LATC0 = 0; } while(0);
 12371                           
 12372                           ;LED_Ctrl.c: 78: {
 12373                           ;LED_Ctrl.c: 79: switch(LED_Color)
 12374                           
 12375  0460  0022               	movlb	2	; select bank2
 12376  0461  100E               	bcf	14,0	;volatile
 12377                           
 12378                           ;LED_Ctrl.c: 82: break;
 12379  0462  2C75               	goto	i1l3466
 12380  0463                     i1l934:	
 12381                           ;LED_Ctrl.c: 83: case 1 : do { LATCbits.LATC1 = 0; } while(0);
 12382                           
 12383  0463  0022               	movlb	2	; select bank2
 12384  0464  108E               	bcf	14,1	;volatile
 12385                           
 12386                           ;LED_Ctrl.c: 84: break;
 12387  0465  2C75               	goto	i1l3466
 12388  0466                     i1l937:	
 12389                           ;LED_Ctrl.c: 85: case 2 : do { LATCbits.LATC2 = 0; } while(0);
 12390                           
 12391  0466  0022               	movlb	2	; select bank2
 12392  0467  110E               	bcf	14,2	;volatile
 12393                           
 12394                           ;LED_Ctrl.c: 88: }
 12395                           
 12396                           ;LED_Ctrl.c: 87: default : break;
 12397                           
 12398                           ;LED_Ctrl.c: 86: break;
 12399  0468  2C75               	goto	i1l3466
 12400  0469                     i1l3464:	
 12401  0469  0020               	movlb	0	; select bank0
 12402  046A  086F               	movf	_LED_Color,w
 12403                           
 12404                           ; Switch size 1, requested type "space"
 12405                           ; Number of cases is 3, Range of values is 0 to 2
 12406                           ; switch strategies available:
 12407                           ; Name         Instructions Cycles
 12408                           ; simple_byte           10     6 (average)
 12409                           ; direct_byte           12     6 (fixed)
 12410                           ; jumptable            260     6 (fixed)
 12411                           ;	Chosen strategy is simple_byte
 12412  046B  3A00               	xorlw	0	; case 0
 12413  046C  1903               	skipnz
 12414  046D  2C60               	goto	i1l930
 12415  046E  3A01               	xorlw	1	; case 1
 12416  046F  1903               	skipnz
 12417  0470  2C63               	goto	i1l934
 12418  0471  3A03               	xorlw	3	; case 2
 12419  0472  1903               	skipnz
 12420  0473  2C66               	goto	i1l937
 12421  0474  2C75               	goto	i1l3466
 12422  0475                     i1l3466:	
 12423                           
 12424                           ;LED_Ctrl.c: 90: Led_ON=0;
 12425  0475  0020               	movlb	0	; select bank0
 12426  0476  01DD               	clrf	_Led_ON
 12427                           
 12428                           ;LED_Ctrl.c: 91: LED_msec_Cnt=0;
 12429  0477  0021               	movlb	1	; select bank1
 12430  0478  01DC               	clrf	_LED_msec_Cnt^(0+128)
 12431  0479  01DD               	clrf	(_LED_msec_Cnt+1)^(0+128)
 12432  047A                     i1l3468:	
 12433                           
 12434                           ;LED_Ctrl.c: 92: }
 12435                           ;LED_Ctrl.c: 94: LED_msec_Cnt+=5;
 12436  047A  3005               	movlw	5
 12437  047B  0021               	movlb	1	; select bank1
 12438  047C  07DC               	addwf	_LED_msec_Cnt^(0+128),f
 12439  047D  3000               	movlw	0
 12440  047E  3DDD               	addwfc	(_LED_msec_Cnt+1)^(0+128),f
 12441  047F  0008               	return
 12442  0480                     __end_of_LedON_Control_10msec:	
 12443                           
 12444                           	psect	text66
 12445  0D3F                     __ptext66:	
 12446 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 12447 ;; Defined at:
 12448 ;;		line 149 in file "mcc_generated_files/tmr0.c"
 12449 ;; Parameters:    Size  Location     Type
 12450 ;;		None
 12451 ;; Auto vars:     Size  Location     Type
 12452 ;;		None
 12453 ;; Return value:  Size  Location     Type
 12454 ;;                  1    wreg      void 
 12455 ;; Registers used:
 12456 ;;		None
 12457 ;; Tracked objects:
 12458 ;;		On entry : 0/0
 12459 ;;		On exit  : 0/0
 12460 ;;		Unchanged: 0/0
 12461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12462 ;;      Params:         0       0       0       0       0       0       0       0
 12463 ;;      Locals:         0       0       0       0       0       0       0       0
 12464 ;;      Temps:          0       0       0       0       0       0       0       0
 12465 ;;      Totals:         0       0       0       0       0       0       0       0
 12466 ;;Total ram usage:        0 bytes
 12467 ;; Hardware stack levels used:    1
 12468 ;; This function calls:
 12469 ;;		Nothing
 12470 ;; This function is called by:
 12471 ;;		_TMR0_Initialize
 12472 ;;		_TMR0_CallBack
 12473 ;; This function uses a non-reentrant model
 12474 ;;
 12475                           
 12476                           
 12477                           ;psect for function _TMR0_DefaultInterruptHandler
 12478  0D3F                     _TMR0_DefaultInterruptHandler:	
 12479                           
 12480                           ;incstack = 0
 12481                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 12482  0D3F  0008               	return
 12483  0D40                     __end_of_TMR0_DefaultInterruptHandler:	
 12484                           
 12485                           	psect	text67
 12486  0E09                     __ptext67:	
 12487 ;; *************** function _PIN_MANAGER_IOC *****************
 12488 ;; Defined at:
 12489 ;;		line 132 in file "mcc_generated_files/pin_manager.c"
 12490 ;; Parameters:    Size  Location     Type
 12491 ;;		None
 12492 ;; Auto vars:     Size  Location     Type
 12493 ;;		None
 12494 ;; Return value:  Size  Location     Type
 12495 ;;                  1    wreg      void 
 12496 ;; Registers used:
 12497 ;;		wreg, status,2, status,0, pclath, cstack
 12498 ;; Tracked objects:
 12499 ;;		On entry : 0/0
 12500 ;;		On exit  : 0/0
 12501 ;;		Unchanged: 0/0
 12502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12503 ;;      Params:         0       0       0       0       0       0       0       0
 12504 ;;      Locals:         0       0       0       0       0       0       0       0
 12505 ;;      Temps:          0       0       0       0       0       0       0       0
 12506 ;;      Totals:         0       0       0       0       0       0       0       0
 12507 ;;Total ram usage:        0 bytes
 12508 ;; Hardware stack levels used:    1
 12509 ;; Hardware stack levels required when called:    2
 12510 ;; This function calls:
 12511 ;;		_IOCCF4_ISR
 12512 ;;		_IOCCF5_ISR
 12513 ;; This function is called by:
 12514 ;;		_INTERRUPT_InterruptManager
 12515 ;; This function uses a non-reentrant model
 12516 ;;
 12517                           
 12518                           
 12519                           ;psect for function _PIN_MANAGER_IOC
 12520  0E09                     _PIN_MANAGER_IOC:	
 12521                           
 12522                           ;pin_manager.c: 135: if(IOCCFbits.IOCCF4 == 1)
 12523                           
 12524                           ;incstack = 0
 12525                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 12526  0E09  0027               	movlb	7	; select bank7
 12527  0E0A  1E19               	btfss	25,4	;volatile
 12528  0E0B  2E0F               	goto	i1l4084
 12529                           
 12530                           ;pin_manager.c: 136: {
 12531                           ;pin_manager.c: 137: IOCCF4_ISR();
 12532  0E0C  318E  2621  318E   	fcall	_IOCCF4_ISR
 12533  0E0F                     i1l4084:	
 12534                           
 12535                           ;pin_manager.c: 138: }
 12536                           ;pin_manager.c: 141: if(IOCCFbits.IOCCF5 == 1)
 12537  0E0F  0027               	movlb	7	; select bank7
 12538  0E10  1E99               	btfss	25,5	;volatile
 12539  0E11  0008               	return
 12540                           
 12541                           ;pin_manager.c: 142: {
 12542                           ;pin_manager.c: 143: IOCCF5_ISR();
 12543  0E12  318E  262E         	fcall	_IOCCF5_ISR
 12544  0E14  0008               	return
 12545  0E15                     __end_of_PIN_MANAGER_IOC:	
 12546                           
 12547                           	psect	text68
 12548  0E2E                     __ptext68:	
 12549 ;; *************** function _IOCCF5_ISR *****************
 12550 ;; Defined at:
 12551 ;;		line 182 in file "mcc_generated_files/pin_manager.c"
 12552 ;; Parameters:    Size  Location     Type
 12553 ;;		None
 12554 ;; Auto vars:     Size  Location     Type
 12555 ;;		None
 12556 ;; Return value:  Size  Location     Type
 12557 ;;                  1    wreg      void 
 12558 ;; Registers used:
 12559 ;;		wreg, status,2, status,0, pclath, cstack
 12560 ;; Tracked objects:
 12561 ;;		On entry : 0/0
 12562 ;;		On exit  : 0/0
 12563 ;;		Unchanged: 0/0
 12564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12565 ;;      Params:         0       0       0       0       0       0       0       0
 12566 ;;      Locals:         0       0       0       0       0       0       0       0
 12567 ;;      Temps:          0       0       0       0       0       0       0       0
 12568 ;;      Totals:         0       0       0       0       0       0       0       0
 12569 ;;Total ram usage:        0 bytes
 12570 ;; Hardware stack levels used:    1
 12571 ;; Hardware stack levels required when called:    1
 12572 ;; This function calls:
 12573 ;;		Absolute function
 12574 ;;		_IOCCF5_DefaultInterruptHandler
 12575 ;; This function is called by:
 12576 ;;		_PIN_MANAGER_IOC
 12577 ;; This function uses a non-reentrant model
 12578 ;;
 12579                           
 12580                           
 12581                           ;psect for function _IOCCF5_ISR
 12582  0E2E                     _IOCCF5_ISR:	
 12583                           
 12584                           ;pin_manager.c: 187: if(IOCCF5_InterruptHandler)
 12585                           
 12586                           ;incstack = 0
 12587                           ; Regs used in _IOCCF5_ISR: [wreg+status,2+status,0+pclath+cstack]
 12588  0E2E  0022               	movlb	2	; select bank2
 12589  0E2F  085C               	movf	_IOCCF5_InterruptHandler^(0+256),w
 12590  0E30  045D               	iorwf	(_IOCCF5_InterruptHandler+1)^(0+256),w
 12591  0E31  1903               	btfsc	3,2
 12592  0E32  2E38               	goto	i1l3756
 12593                           
 12594                           ;pin_manager.c: 188: {
 12595                           ;pin_manager.c: 189: IOCCF5_InterruptHandler();
 12596  0E33  085D               	movf	(_IOCCF5_InterruptHandler+1)^(0+256),w
 12597  0E34  008A               	movwf	10
 12598  0E35  085C               	movf	_IOCCF5_InterruptHandler^(0+256),w
 12599  0E36  000A               	callw
 12600  0E37  318E               	pagesel	$
 12601  0E38                     i1l3756:	
 12602                           
 12603                           ;pin_manager.c: 190: }
 12604                           ;pin_manager.c: 191: IOCCFbits.IOCCF5 = 0;
 12605  0E38  0027               	movlb	7	; select bank7
 12606  0E39  1299               	bcf	25,5	;volatile
 12607  0E3A  0008               	return
 12608  0E3B                     __end_of_IOCCF5_ISR:	
 12609                           
 12610                           	psect	text69
 12611  0D3E                     __ptext69:	
 12612 ;; *************** function _IOCCF5_DefaultInterruptHandler *****************
 12613 ;; Defined at:
 12614 ;;		line 204 in file "mcc_generated_files/pin_manager.c"
 12615 ;; Parameters:    Size  Location     Type
 12616 ;;		None
 12617 ;; Auto vars:     Size  Location     Type
 12618 ;;		None
 12619 ;; Return value:  Size  Location     Type
 12620 ;;                  1    wreg      void 
 12621 ;; Registers used:
 12622 ;;		None
 12623 ;; Tracked objects:
 12624 ;;		On entry : 0/0
 12625 ;;		On exit  : 0/0
 12626 ;;		Unchanged: 0/0
 12627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12628 ;;      Params:         0       0       0       0       0       0       0       0
 12629 ;;      Locals:         0       0       0       0       0       0       0       0
 12630 ;;      Temps:          0       0       0       0       0       0       0       0
 12631 ;;      Totals:         0       0       0       0       0       0       0       0
 12632 ;;Total ram usage:        0 bytes
 12633 ;; Hardware stack levels used:    1
 12634 ;; This function calls:
 12635 ;;		Nothing
 12636 ;; This function is called by:
 12637 ;;		_PIN_MANAGER_Initialize
 12638 ;;		_IOCCF5_ISR
 12639 ;; This function uses a non-reentrant model
 12640 ;;
 12641                           
 12642                           
 12643                           ;psect for function _IOCCF5_DefaultInterruptHandler
 12644  0D3E                     _IOCCF5_DefaultInterruptHandler:	
 12645                           
 12646                           ;incstack = 0
 12647                           ; Regs used in _IOCCF5_DefaultInterruptHandler: []
 12648  0D3E  0008               	return
 12649  0D3F                     __end_of_IOCCF5_DefaultInterruptHandler:	
 12650                           
 12651                           	psect	text70
 12652  0E21                     __ptext70:	
 12653 ;; *************** function _IOCCF4_ISR *****************
 12654 ;; Defined at:
 12655 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
 12656 ;; Parameters:    Size  Location     Type
 12657 ;;		None
 12658 ;; Auto vars:     Size  Location     Type
 12659 ;;		None
 12660 ;; Return value:  Size  Location     Type
 12661 ;;                  1    wreg      void 
 12662 ;; Registers used:
 12663 ;;		wreg, status,2, status,0, pclath, cstack
 12664 ;; Tracked objects:
 12665 ;;		On entry : 0/0
 12666 ;;		On exit  : 0/0
 12667 ;;		Unchanged: 0/0
 12668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12669 ;;      Params:         0       0       0       0       0       0       0       0
 12670 ;;      Locals:         0       0       0       0       0       0       0       0
 12671 ;;      Temps:          0       0       0       0       0       0       0       0
 12672 ;;      Totals:         0       0       0       0       0       0       0       0
 12673 ;;Total ram usage:        0 bytes
 12674 ;; Hardware stack levels used:    1
 12675 ;; Hardware stack levels required when called:    1
 12676 ;; This function calls:
 12677 ;;		Absolute function
 12678 ;;		_IOCCF4_DefaultInterruptHandler
 12679 ;; This function is called by:
 12680 ;;		_PIN_MANAGER_IOC
 12681 ;; This function uses a non-reentrant model
 12682 ;;
 12683                           
 12684                           
 12685                           ;psect for function _IOCCF4_ISR
 12686  0E21                     _IOCCF4_ISR:	
 12687                           
 12688                           ;pin_manager.c: 157: if(IOCCF4_InterruptHandler)
 12689                           
 12690                           ;incstack = 0
 12691                           ; Regs used in _IOCCF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 12692  0E21  0022               	movlb	2	; select bank2
 12693  0E22  085E               	movf	_IOCCF4_InterruptHandler^(0+256),w
 12694  0E23  045F               	iorwf	(_IOCCF4_InterruptHandler+1)^(0+256),w
 12695  0E24  1903               	btfsc	3,2
 12696  0E25  2E2B               	goto	i1l3750
 12697                           
 12698                           ;pin_manager.c: 158: {
 12699                           ;pin_manager.c: 159: IOCCF4_InterruptHandler();
 12700  0E26  085F               	movf	(_IOCCF4_InterruptHandler+1)^(0+256),w
 12701  0E27  008A               	movwf	10
 12702  0E28  085E               	movf	_IOCCF4_InterruptHandler^(0+256),w
 12703  0E29  000A               	callw
 12704  0E2A  318E               	pagesel	$
 12705  0E2B                     i1l3750:	
 12706                           
 12707                           ;pin_manager.c: 160: }
 12708                           ;pin_manager.c: 161: IOCCFbits.IOCCF4 = 0;
 12709  0E2B  0027               	movlb	7	; select bank7
 12710  0E2C  1219               	bcf	25,4	;volatile
 12711  0E2D  0008               	return
 12712  0E2E                     __end_of_IOCCF4_ISR:	
 12713                           
 12714                           	psect	text71
 12715  0D3D                     __ptext71:	
 12716 ;; *************** function _IOCCF4_DefaultInterruptHandler *****************
 12717 ;; Defined at:
 12718 ;;		line 174 in file "mcc_generated_files/pin_manager.c"
 12719 ;; Parameters:    Size  Location     Type
 12720 ;;		None
 12721 ;; Auto vars:     Size  Location     Type
 12722 ;;		None
 12723 ;; Return value:  Size  Location     Type
 12724 ;;                  1    wreg      void 
 12725 ;; Registers used:
 12726 ;;		None
 12727 ;; Tracked objects:
 12728 ;;		On entry : 0/0
 12729 ;;		On exit  : 0/0
 12730 ;;		Unchanged: 0/0
 12731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12732 ;;      Params:         0       0       0       0       0       0       0       0
 12733 ;;      Locals:         0       0       0       0       0       0       0       0
 12734 ;;      Temps:          0       0       0       0       0       0       0       0
 12735 ;;      Totals:         0       0       0       0       0       0       0       0
 12736 ;;Total ram usage:        0 bytes
 12737 ;; Hardware stack levels used:    1
 12738 ;; This function calls:
 12739 ;;		Nothing
 12740 ;; This function is called by:
 12741 ;;		_PIN_MANAGER_Initialize
 12742 ;;		_IOCCF4_ISR
 12743 ;; This function uses a non-reentrant model
 12744 ;;
 12745                           
 12746                           
 12747                           ;psect for function _IOCCF4_DefaultInterruptHandler
 12748  0D3D                     _IOCCF4_DefaultInterruptHandler:	
 12749                           
 12750                           ;incstack = 0
 12751                           ; Regs used in _IOCCF4_DefaultInterruptHandler: []
 12752  0D3D  0008               	return
 12753  0D3E                     __end_of_IOCCF4_DefaultInterruptHandler:	
 12754                           
 12755                           	psect	text72
 12756  0D6A                     __ptext72:	
 12757 ;; *************** function _INT_ISR *****************
 12758 ;; Defined at:
 12759 ;;		line 43 in file "mcc_generated_files/ext_int.c"
 12760 ;; Parameters:    Size  Location     Type
 12761 ;;		None
 12762 ;; Auto vars:     Size  Location     Type
 12763 ;;		None
 12764 ;; Return value:  Size  Location     Type
 12765 ;;                  1    wreg      void 
 12766 ;; Registers used:
 12767 ;;		wreg, status,2, status,0, pclath, cstack
 12768 ;; Tracked objects:
 12769 ;;		On entry : 0/0
 12770 ;;		On exit  : 0/0
 12771 ;;		Unchanged: 0/0
 12772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12773 ;;      Params:         0       0       0       0       0       0       0       0
 12774 ;;      Locals:         0       0       0       0       0       0       0       0
 12775 ;;      Temps:          0       0       0       0       0       0       0       0
 12776 ;;      Totals:         0       0       0       0       0       0       0       0
 12777 ;;Total ram usage:        0 bytes
 12778 ;; Hardware stack levels used:    1
 12779 ;; Hardware stack levels required when called:    2
 12780 ;; This function calls:
 12781 ;;		_INT_CallBack
 12782 ;; This function is called by:
 12783 ;;		_INTERRUPT_InterruptManager
 12784 ;; This function uses a non-reentrant model
 12785 ;;
 12786                           
 12787                           
 12788                           ;psect for function _INT_ISR
 12789  0D6A                     _INT_ISR:	
 12790                           
 12791                           ;ext_int.c: 49: (PIR0bits.INTF = 0);
 12792                           
 12793                           ;incstack = 0
 12794                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 12795  0D6A  0020               	movlb	0	; select bank0
 12796  0D6B  1010               	bcf	16,0	;volatile
 12797                           
 12798                           ;ext_int.c: 52: INT_CallBack();
 12799  0D6C  318D  25F3         	fcall	_INT_CallBack
 12800  0D6E  0008               	return
 12801  0D6F                     __end_of_INT_ISR:	
 12802                           
 12803                           	psect	text73
 12804  0DF3                     __ptext73:	
 12805 ;; *************** function _INT_CallBack *****************
 12806 ;; Defined at:
 12807 ;;		line 58 in file "mcc_generated_files/ext_int.c"
 12808 ;; Parameters:    Size  Location     Type
 12809 ;;		None
 12810 ;; Auto vars:     Size  Location     Type
 12811 ;;		None
 12812 ;; Return value:  Size  Location     Type
 12813 ;;                  1    wreg      void 
 12814 ;; Registers used:
 12815 ;;		wreg, status,2, status,0, pclath, cstack
 12816 ;; Tracked objects:
 12817 ;;		On entry : 0/0
 12818 ;;		On exit  : 0/0
 12819 ;;		Unchanged: 0/0
 12820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12821 ;;      Params:         0       0       0       0       0       0       0       0
 12822 ;;      Locals:         0       0       0       0       0       0       0       0
 12823 ;;      Temps:          0       0       0       0       0       0       0       0
 12824 ;;      Totals:         0       0       0       0       0       0       0       0
 12825 ;;Total ram usage:        0 bytes
 12826 ;; Hardware stack levels used:    1
 12827 ;; Hardware stack levels required when called:    1
 12828 ;; This function calls:
 12829 ;;		Absolute function
 12830 ;;		_INT_DefaultInterruptHandler
 12831 ;; This function is called by:
 12832 ;;		_INT_ISR
 12833 ;; This function uses a non-reentrant model
 12834 ;;
 12835                           
 12836                           
 12837                           ;psect for function _INT_CallBack
 12838  0DF3                     _INT_CallBack:	
 12839                           
 12840                           ;ext_int.c: 61: if(INT_InterruptHandler)
 12841                           
 12842                           ;incstack = 0
 12843                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 12844  0DF3  0022               	movlb	2	; select bank2
 12845  0DF4  085A               	movf	_INT_InterruptHandler^(0+256),w
 12846  0DF5  045B               	iorwf	(_INT_InterruptHandler+1)^(0+256),w
 12847  0DF6  1903               	btfsc	3,2
 12848  0DF7  0008               	return
 12849                           
 12850                           ;ext_int.c: 62: {
 12851                           ;ext_int.c: 63: INT_InterruptHandler();
 12852  0DF8  085B               	movf	(_INT_InterruptHandler+1)^(0+256),w
 12853  0DF9  008A               	movwf	10
 12854  0DFA  085A               	movf	_INT_InterruptHandler^(0+256),w
 12855  0DFB  000A               	callw
 12856  0DFC  318D               	pagesel	$
 12857  0DFD  0008               	return
 12858  0DFE                     __end_of_INT_CallBack:	
 12859                           
 12860                           	psect	text74
 12861  0D3C                     __ptext74:	
 12862 ;; *************** function _INT_DefaultInterruptHandler *****************
 12863 ;; Defined at:
 12864 ;;		line 77 in file "mcc_generated_files/ext_int.c"
 12865 ;; Parameters:    Size  Location     Type
 12866 ;;		None
 12867 ;; Auto vars:     Size  Location     Type
 12868 ;;		None
 12869 ;; Return value:  Size  Location     Type
 12870 ;;                  1    wreg      void 
 12871 ;; Registers used:
 12872 ;;		None
 12873 ;; Tracked objects:
 12874 ;;		On entry : 0/0
 12875 ;;		On exit  : 0/0
 12876 ;;		Unchanged: 0/0
 12877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12878 ;;      Params:         0       0       0       0       0       0       0       0
 12879 ;;      Locals:         0       0       0       0       0       0       0       0
 12880 ;;      Temps:          0       0       0       0       0       0       0       0
 12881 ;;      Totals:         0       0       0       0       0       0       0       0
 12882 ;;Total ram usage:        0 bytes
 12883 ;; Hardware stack levels used:    1
 12884 ;; This function calls:
 12885 ;;		Nothing
 12886 ;; This function is called by:
 12887 ;;		_EXT_INT_Initialize
 12888 ;;		_INT_CallBack
 12889 ;; This function uses a non-reentrant model
 12890 ;;
 12891                           
 12892                           
 12893                           ;psect for function _INT_DefaultInterruptHandler
 12894  0D3C                     _INT_DefaultInterruptHandler:	
 12895                           
 12896                           ;incstack = 0
 12897                           ; Regs used in _INT_DefaultInterruptHandler: []
 12898  0D3C  0008               	return
 12899  0D3D                     __end_of_INT_DefaultInterruptHandler:	
 12900                           
 12901                           	psect	text75
 12902  0FE2                     __ptext75:	
 12903 ;; *************** function _EUSART_Transmit_ISR *****************
 12904 ;; Defined at:
 12905 ;;		line 155 in file "mcc_generated_files/eusart.c"
 12906 ;; Parameters:    Size  Location     Type
 12907 ;;		None
 12908 ;; Auto vars:     Size  Location     Type
 12909 ;;		None
 12910 ;; Return value:  Size  Location     Type
 12911 ;;                  1    wreg      void 
 12912 ;; Registers used:
 12913 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12914 ;; Tracked objects:
 12915 ;;		On entry : 0/0
 12916 ;;		On exit  : 0/0
 12917 ;;		Unchanged: 0/0
 12918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12919 ;;      Params:         0       0       0       0       0       0       0       0
 12920 ;;      Locals:         0       0       0       0       0       0       0       0
 12921 ;;      Temps:          1       0       0       0       0       0       0       0
 12922 ;;      Totals:         1       0       0       0       0       0       0       0
 12923 ;;Total ram usage:        1 bytes
 12924 ;; Hardware stack levels used:    1
 12925 ;; This function calls:
 12926 ;;		Nothing
 12927 ;; This function is called by:
 12928 ;;		_INTERRUPT_InterruptManager
 12929 ;; This function uses a non-reentrant model
 12930 ;;
 12931                           
 12932                           
 12933                           ;psect for function _EUSART_Transmit_ISR
 12934  0FE2                     _EUSART_Transmit_ISR:	
 12935                           
 12936                           ;eusart.c: 159: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 12937                           
 12938                           ;incstack = 0
 12939                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 12940  0FE2  3020               	movlw	32
 12941  0FE3  0020               	movlb	0	; select bank0
 12942  0FE4  026E               	subwf	_eusartTxBufferRemaining,w	;volatile
 12943  0FE5  1803               	skipnc
 12944  0FE6  2FFD               	goto	i1l184
 12945                           
 12946                           ;eusart.c: 160: {
 12947                           ;eusart.c: 161: TX1REG = eusartTxBuffer[eusartTxTail++];
 12948  0FE7  087C               	movf	_eusartTxTail,w
 12949  0FE8  3EC0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 12950  0FE9  0086               	movwf	6
 12951  0FEA  3001               	movlw	1	; select bank3/4
 12952  0FEB  0087               	movwf	7
 12953  0FEC  0801               	movf	1,w
 12954  0FED  0023               	movlb	3	; select bank3
 12955  0FEE  009A               	movwf	26	;volatile
 12956  0FEF  3001               	movlw	1
 12957  0FF0  00F0               	movwf	??_EUSART_Transmit_ISR
 12958  0FF1  0870               	movf	??_EUSART_Transmit_ISR,w
 12959  0FF2  07FC               	addwf	_eusartTxTail,f
 12960                           
 12961                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 12962  0FF3  3020               	movlw	32
 12963  0FF4  027C               	subwf	_eusartTxTail,w
 12964  0FF5  1803               	btfsc	3,0
 12965                           
 12966                           ;eusart.c: 163: {
 12967                           ;eusart.c: 164: eusartTxTail = 0;
 12968  0FF6  01FC               	clrf	_eusartTxTail
 12969                           
 12970                           ;eusart.c: 165: }
 12971                           ;eusart.c: 166: eusartTxBufferRemaining++;
 12972  0FF7  3001               	movlw	1
 12973  0FF8  00F0               	movwf	??_EUSART_Transmit_ISR
 12974  0FF9  0870               	movf	??_EUSART_Transmit_ISR,w
 12975  0FFA  0020               	movlb	0	; select bank0
 12976  0FFB  07EE               	addwf	_eusartTxBufferRemaining,f	;volatile
 12977                           
 12978                           ;eusart.c: 167: }
 12979  0FFC  0008               	return
 12980  0FFD                     i1l184:	
 12981                           
 12982                           ;eusart.c: 168: else
 12983                           ;eusart.c: 169: {
 12984                           ;eusart.c: 170: PIE1bits.TXIE = 0;
 12985  0FFD  0021               	movlb	1	; select bank1
 12986  0FFE  1211               	bcf	17,4	;volatile
 12987  0FFF  0008               	return
 12988  1000                     __end_of_EUSART_Transmit_ISR:	
 12989                           
 12990                           	psect	text76
 12991  0FAA                     __ptext76:	
 12992 ;; *************** function _EUSART_Receive_ISR *****************
 12993 ;; Defined at:
 12994 ;;		line 174 in file "mcc_generated_files/eusart.c"
 12995 ;; Parameters:    Size  Location     Type
 12996 ;;		None
 12997 ;; Auto vars:     Size  Location     Type
 12998 ;;		None
 12999 ;; Return value:  Size  Location     Type
 13000 ;;                  1    wreg      void 
 13001 ;; Registers used:
 13002 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13003 ;; Tracked objects:
 13004 ;;		On entry : 0/0
 13005 ;;		On exit  : 0/0
 13006 ;;		Unchanged: 0/0
 13007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13008 ;;      Params:         0       0       0       0       0       0       0       0
 13009 ;;      Locals:         0       0       0       0       0       0       0       0
 13010 ;;      Temps:          1       0       0       0       0       0       0       0
 13011 ;;      Totals:         1       0       0       0       0       0       0       0
 13012 ;;Total ram usage:        1 bytes
 13013 ;; Hardware stack levels used:    1
 13014 ;; This function calls:
 13015 ;;		Nothing
 13016 ;; This function is called by:
 13017 ;;		_INTERRUPT_InterruptManager
 13018 ;; This function uses a non-reentrant model
 13019 ;;
 13020                           
 13021                           
 13022                           ;psect for function _EUSART_Receive_ISR
 13023  0FAA                     _EUSART_Receive_ISR:	
 13024                           
 13025                           ;eusart.c: 177: if(1 == RC1STAbits.OERR)
 13026                           
 13027                           ;incstack = 0
 13028                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13029  0FAA  0023               	movlb	3	; select bank3
 13030  0FAB  1C9D               	btfss	29,1	;volatile
 13031  0FAC  2FAF               	goto	i1l4066
 13032                           
 13033                           ;eusart.c: 178: {
 13034                           ;eusart.c: 181: RC1STAbits.CREN = 0;
 13035  0FAD  121D               	bcf	29,4	;volatile
 13036                           
 13037                           ;eusart.c: 182: RC1STAbits.CREN = 1;
 13038  0FAE  161D               	bsf	29,4	;volatile
 13039  0FAF                     i1l4066:	
 13040                           
 13041                           ;eusart.c: 183: }
 13042                           ;eusart.c: 186: eusartRxBuffer[eusartRxHead++] = RC1REG;
 13043  0FAF  0819               	movf	25,w	;volatile
 13044  0FB0  00F0               	movwf	??_EUSART_Receive_ISR
 13045  0FB1  087B               	movf	_eusartRxHead,w
 13046  0FB2  3EA0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 13047  0FB3  0086               	movwf	6
 13048  0FB4  3001               	movlw	1	; select bank3/4
 13049  0FB5  0087               	movwf	7
 13050  0FB6  0870               	movf	??_EUSART_Receive_ISR,w
 13051  0FB7  0081               	movwf	1
 13052  0FB8  3001               	movlw	1
 13053  0FB9  00F0               	movwf	??_EUSART_Receive_ISR
 13054  0FBA  0870               	movf	??_EUSART_Receive_ISR,w
 13055  0FBB  07FB               	addwf	_eusartRxHead,f
 13056                           
 13057                           ;eusart.c: 187: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 13058  0FBC  3020               	movlw	32
 13059  0FBD  027B               	subwf	_eusartRxHead,w
 13060  0FBE  1803               	btfsc	3,0
 13061                           
 13062                           ;eusart.c: 188: {
 13063                           ;eusart.c: 189: eusartRxHead = 0;
 13064  0FBF  01FB               	clrf	_eusartRxHead
 13065                           
 13066                           ;eusart.c: 190: }
 13067                           ;eusart.c: 191: eusartRxCount++;
 13068  0FC0  3001               	movlw	1
 13069  0FC1  00F0               	movwf	??_EUSART_Receive_ISR
 13070  0FC2  0870               	movf	??_EUSART_Receive_ISR,w
 13071  0FC3  0020               	movlb	0	; select bank0
 13072  0FC4  07E8               	addwf	_eusartRxCount,f	;volatile
 13073  0FC5  0008               	return
 13074  0FC6                     __end_of_EUSART_Receive_ISR:	
 13075                           
 13076                           	psect	text77
 13077  0E86                     __ptext77:	
 13078 ;; *************** function _CCP1_CaptureISR *****************
 13079 ;; Defined at:
 13080 ;;		line 84 in file "mcc_generated_files/ccp1.c"
 13081 ;; Parameters:    Size  Location     Type
 13082 ;;		None
 13083 ;; Auto vars:     Size  Location     Type
 13084 ;;  module          2    5[COMMON] struct CCPR1Reg_tag
 13085 ;; Return value:  Size  Location     Type
 13086 ;;                  1    wreg      void 
 13087 ;; Registers used:
 13088 ;;		wreg, status,2, status,0, pclath, cstack
 13089 ;; Tracked objects:
 13090 ;;		On entry : 0/0
 13091 ;;		On exit  : 0/0
 13092 ;;		Unchanged: 0/0
 13093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13094 ;;      Params:         0       0       0       0       0       0       0       0
 13095 ;;      Locals:         2       0       0       0       0       0       0       0
 13096 ;;      Temps:          1       0       0       0       0       0       0       0
 13097 ;;      Totals:         3       0       0       0       0       0       0       0
 13098 ;;Total ram usage:        3 bytes
 13099 ;; Hardware stack levels used:    1
 13100 ;; Hardware stack levels required when called:    2
 13101 ;; This function calls:
 13102 ;;		_CCP1_CallBack
 13103 ;; This function is called by:
 13104 ;;		_INTERRUPT_InterruptManager
 13105 ;; This function uses a non-reentrant model
 13106 ;;
 13107                           
 13108                           
 13109                           ;psect for function _CCP1_CaptureISR
 13110  0E86                     _CCP1_CaptureISR:	
 13111                           
 13112                           ;ccp1.c: 86: CCP_PERIOD_REG_T module;
 13113                           ;ccp1.c: 89: PIR4bits.CCP1IF = 0;
 13114                           
 13115                           ;incstack = 0
 13116                           ; Regs used in _CCP1_CaptureISR: [wreg+status,2+status,0+pclath+cstack]
 13117  0E86  0020               	movlb	0	; select bank0
 13118  0E87  1014               	bcf	20,0	;volatile
 13119                           
 13120                           ;ccp1.c: 92: module.ccpr1l = CCPR1L;
 13121  0E88  0025               	movlb	5	; select bank5
 13122  0E89  0811               	movf	17,w	;volatile
 13123  0E8A  00F4               	movwf	??_CCP1_CaptureISR
 13124  0E8B  0874               	movf	??_CCP1_CaptureISR,w
 13125  0E8C  00F5               	movwf	CCP1_CaptureISR@module
 13126                           
 13127                           ;ccp1.c: 93: module.ccpr1h = CCPR1H;
 13128  0E8D  0812               	movf	18,w	;volatile
 13129  0E8E  00F4               	movwf	??_CCP1_CaptureISR
 13130  0E8F  0874               	movf	??_CCP1_CaptureISR,w
 13131  0E90  00F6               	movwf	CCP1_CaptureISR@module+1
 13132                           
 13133                           ;ccp1.c: 96: CCP1_CallBack(module.ccpr1_16Bit);
 13134  0E91  0876               	movf	CCP1_CaptureISR@module+1,w
 13135  0E92  00F3               	movwf	CCP1_CallBack@capturedValue+1
 13136  0E93  0875               	movf	CCP1_CaptureISR@module,w
 13137  0E94  00F2               	movwf	CCP1_CallBack@capturedValue
 13138  0E95  318D  2580         	fcall	_CCP1_CallBack
 13139  0E97  0008               	return
 13140  0E98                     __end_of_CCP1_CaptureISR:	
 13141                           
 13142                           	psect	text78
 13143  0D80                     __ptext78:	
 13144 ;; *************** function _CCP1_CallBack *****************
 13145 ;; Defined at:
 13146 ;;		line 99 in file "mcc_generated_files/ccp1.c"
 13147 ;; Parameters:    Size  Location     Type
 13148 ;;  capturedValu    2    2[COMMON] unsigned int 
 13149 ;; Auto vars:     Size  Location     Type
 13150 ;;		None
 13151 ;; Return value:  Size  Location     Type
 13152 ;;                  1    wreg      void 
 13153 ;; Registers used:
 13154 ;;		wreg, status,2, status,0, pclath, cstack
 13155 ;; Tracked objects:
 13156 ;;		On entry : 0/0
 13157 ;;		On exit  : 0/0
 13158 ;;		Unchanged: 0/0
 13159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13160 ;;      Params:         2       0       0       0       0       0       0       0
 13161 ;;      Locals:         0       0       0       0       0       0       0       0
 13162 ;;      Temps:          0       0       0       0       0       0       0       0
 13163 ;;      Totals:         2       0       0       0       0       0       0       0
 13164 ;;Total ram usage:        2 bytes
 13165 ;; Hardware stack levels used:    1
 13166 ;; Hardware stack levels required when called:    1
 13167 ;; This function calls:
 13168 ;;		_EncA_PulseEdgeEvent
 13169 ;; This function is called by:
 13170 ;;		_CCP1_CaptureISR
 13171 ;; This function uses a non-reentrant model
 13172 ;;
 13173                           
 13174                           
 13175                           ;psect for function _CCP1_CallBack
 13176  0D80                     _CCP1_CallBack:	
 13177                           
 13178                           ;ccp1.c: 102: EncA_PulseEdgeEvent(capturedValue);
 13179                           
 13180                           ;incstack = 0
 13181                           ; Regs used in _CCP1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 13182  0D80  0873               	movf	CCP1_CallBack@capturedValue+1,w
 13183  0D81  00F1               	movwf	EncA_PulseEdgeEvent@capturedValue+1
 13184  0D82  0872               	movf	CCP1_CallBack@capturedValue,w
 13185  0D83  00F0               	movwf	EncA_PulseEdgeEvent@capturedValue
 13186  0D84  318D  258F         	fcall	_EncA_PulseEdgeEvent
 13187  0D86  0008               	return
 13188  0D87                     __end_of_CCP1_CallBack:	
 13189                           
 13190                           	psect	text79
 13191  0D8F                     __ptext79:	
 13192 ;; *************** function _EncA_PulseEdgeEvent *****************
 13193 ;; Defined at:
 13194 ;;		line 320 in file "main.c"
 13195 ;; Parameters:    Size  Location     Type
 13196 ;;  capturedValu    2    0[COMMON] unsigned int 
 13197 ;; Auto vars:     Size  Location     Type
 13198 ;;		None
 13199 ;; Return value:  Size  Location     Type
 13200 ;;                  1    wreg      void 
 13201 ;; Registers used:
 13202 ;;		None
 13203 ;; Tracked objects:
 13204 ;;		On entry : 0/0
 13205 ;;		On exit  : 0/0
 13206 ;;		Unchanged: 0/0
 13207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13208 ;;      Params:         2       0       0       0       0       0       0       0
 13209 ;;      Locals:         0       0       0       0       0       0       0       0
 13210 ;;      Temps:          0       0       0       0       0       0       0       0
 13211 ;;      Totals:         2       0       0       0       0       0       0       0
 13212 ;;Total ram usage:        2 bytes
 13213 ;; Hardware stack levels used:    1
 13214 ;; This function calls:
 13215 ;;		Nothing
 13216 ;; This function is called by:
 13217 ;;		_CCP1_CallBack
 13218 ;; This function uses a non-reentrant model
 13219 ;;
 13220                           
 13221                           
 13222                           ;psect for function _EncA_PulseEdgeEvent
 13223  0D8F                     _EncA_PulseEdgeEvent:	
 13224                           
 13225                           ;incstack = 0
 13226                           ; Regs used in _EncA_PulseEdgeEvent: []
 13227                           ;main.c: 322: do { LATCbits.LATC3 = 1; } while(0);
 13228  0D8F  0022               	movlb	2	; select bank2
 13229  0D90  158E               	bsf	14,3	;volatile
 13230                           
 13231                           ;main.c: 324: PIE4bits.CCP1IE = 0;
 13232  0D91  0021               	movlb	1	; select bank1
 13233  0D92  1014               	bcf	20,0	;volatile
 13234                           
 13235                           ;main.c: 326: PIE4bits.CCP2IE = 0;
 13236  0D93  1094               	bcf	20,1	;volatile
 13237                           
 13238                           ;main.c: 329: PIE4bits.CCP1IE = 1;
 13239  0D94  1414               	bsf	20,0	;volatile
 13240                           
 13241                           ;main.c: 332: do { LATCbits.LATC3 = 0; } while(0);
 13242  0D95  0022               	movlb	2	; select bank2
 13243  0D96  118E               	bcf	14,3	;volatile
 13244  0D97  0008               	return
 13245  0D98                     __end_of_EncA_PulseEdgeEvent:	
 13246  007E                     btemp	set	126	;btemp
 13247  007E                     int$flags	set	126
 13248  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    8
    Data        9
    BSS         229
    Persistent  17
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     43      80
    BANK1            80      0      80
    BANK2            80      0      68
    BANK3            80      0      64
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    au16regs	PTR unsigned int  size(1) Largest target is 32
		 -> NULL(NULL[0]), au16data(BANK2[32]), 

    telegram.au16reg	PTR unsigned int  size(1) Largest target is 32
		 -> au16data(BANK2[32]), 

    S1260$au16reg	PTR unsigned int  size(1) Largest target is 32
		 -> au16data(BANK2[32]), 

    telegram.au16reg	PTR unsigned int  size(1) Largest target is 32
		 -> au16data(BANK2[32]), 

    INT_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    IOCCF5_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> IOCCF5_DefaultInterruptHandler(), 

    IOCCF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF5_DefaultInterruptHandler(), Absolute function(), 

    IOCCF4_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> IOCCF4_DefaultInterruptHandler(), 

    IOCCF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF4_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR3_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), 

    TMR3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), Absolute function(), 

    TMR5_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR5_DefaultInterruptHandler(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR5_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_CCP1_CaptureISR
    _TMR3_DefaultInterruptHandler->_Timer3_Overflow
    _TMR0_CallBack->_Timer0_tick10msecFunc
    _CCP1_CaptureISR->_CCP1_CallBack
    _CCP1_CallBack->_EncA_PulseEdgeEvent

Critical Paths under _main in BANK0

    _main->_Modbusquery
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _TMR5_Initialize->_TMR5_SetInterruptHandler
    _TMR3_Initialize->_TMR3_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF5_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _NutRunCycleStart->_TMR3_WriteTimer
    _Modbusquery->_sendTxBuffer
    _sendTxBuffer->_calcCRC
    _ClearSerialRxBuffer->_EUSART_Read
    _ModbuspollMaster->_validateAnswer
    _validateAnswer->_calcCRC
    _get_FC3->___awdiv
    _get_FC1->___awdiv
    _Serialread->_EUSART_Read
    _Modbusinit->_Serialbegin
    _Serialbegin->_EUSART_Initialize
    _LedONStartConfig->___lwdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    7938
                                             41 BANK0      2     2      0
                   _LedONStartConfig
                    _LedONStatusBusy
                     _ModbusgetState
                         _Modbusinit
                   _ModbuspollMaster
                        _Modbusquery
                   _ModbussetTimeOut
                   _NutRunCycleStart
                  _SYSTEM_Initialize
                     _TMR3_StopTimer
                    _TMR3_WriteTimer
                     _TMR5_StopTimer
                    _TMR5_WriteTimer
                             ___bmul
                    _getEncoderState
                             _millis
 ---------------------------------------------------------------------------------
 (1) _getEncoderState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1      28
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _TMR5_WriteTimer                                      2     0      2     216
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _TMR5_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR3_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     539
                     _ADC_Initialize
                    _CCP1_Initialize
                    _CCP2_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR3_Initialize
                    _TMR5_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0      86
           _TMR5_SetInterruptHandler
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR5_SetInterruptHandler                             2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0      86
           _TMR3_SetInterruptHandler
                    _TMR3_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR3_SetInterruptHandler                             2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      86
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0     195
                                              2 BANK0      1     1      0
         _IOCCF4_SetInterruptHandler
         _IOCCF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF5_SetInterruptHandler                           2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCCF4_SetInterruptHandler                           2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0      86
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CCP2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NutRunCycleStart                                     0     0      0     344
                   _NutRunCycleReset
                    _TMR3_StartTimer
                    _TMR3_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR3_WriteTimer                                      2     0      2     344
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR3_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _NutRunCycleReset                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ModbussetTimeOut                                     2     0      2      64
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Modbusquery                                         19    12      7    1165
                                             22 BANK0     19    12      7
                _ClearSerialRxBuffer
                             ___bmul (ARG)
                          _delayMsec
                       _sendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _sendTxBuffer                                         9     9      0     389
                                             13 BANK0      9     9      0
                        _Serialwrite
                            _calcCRC
                             _millis
 ---------------------------------------------------------------------------------
 (3) _Serialwrite                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _delayMsec                                            8     4      4      86
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _ClearSerialRxBuffer                                  2     2      0      25
                                              2 BANK0      2     2      0
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (1) _ModbuspollMaster                                     4     4      0    4276
                                             24 BANK0      4     4      0
                    _Serialavailable
                        _getRxBuffer
                            _get_FC1
                            _get_FC3
                             _millis
                     _validateAnswer
 ---------------------------------------------------------------------------------
 (2) _validateAnswer                                      11    11      0     415
                                             13 BANK0     11    11      0
                            _calcCRC
 ---------------------------------------------------------------------------------
 (3) _calcCRC                                             13    11      2     275
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) _millis                                               4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _get_FC3                                              4     4      0    1844
                                              9 BANK0      4     4      0
                            ___awdiv
                        _wordConvert
 ---------------------------------------------------------------------------------
 (2) _get_FC1                                              4     4      0    1844
                                              9 BANK0      4     4      0
                            ___awdiv
                        _wordConvert
 ---------------------------------------------------------------------------------
 (3) _wordConvert                                          8     6      2    1196
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     556
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _getRxBuffer                                          2     2      0      48
                                              2 BANK0      2     2      0
                    _Serialavailable
                         _Serialread
 ---------------------------------------------------------------------------------
 (3) _Serialread                                           0     0      0      24
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Serialavailable                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Modbusinit                                           1     1      0      64
                        _Serialbegin
 ---------------------------------------------------------------------------------
 (2) _Serialbegin                                          4     0      4      64
                                              1 BANK0      4     0      4
                  _EUSART_Initialize
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ModbusgetState                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LedONStatusBusy                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LedONStartConfig                                     5     3      2     898
                                              8 BANK0      5     3      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     197
                                              7 COMMON     1     1      0
                    _CCP1_CaptureISR
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR3_ISR
                           _TMR5_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR5_ISR                                             0     0      0       0
                   Absolute function *
       _TMR5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR5_DefaultInterruptHandler                         0     0      0       0
                    _Timer5_Overflow
 ---------------------------------------------------------------------------------
 (8) _Timer5_Overflow                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR3_ISR                                             0     0      0       0
                   Absolute function *
       _TMR3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR3_DefaultInterruptHandler                         0     0      0       0
                    _Timer3_Overflow
 ---------------------------------------------------------------------------------
 (8) _Timer3_Overflow                                      4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
              _Timer0_tick10msecFunc
 ---------------------------------------------------------------------------------
 (8) _Timer0_tick10msecFunc                                4     4      0       0
                                              0 COMMON     4     4      0
               _LedON_Control_10msec
 ---------------------------------------------------------------------------------
 (9) _LedON_Control_10msec                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCCF4_ISR
                         _IOCCF5_ISR
 ---------------------------------------------------------------------------------
 (7) _IOCCF5_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _IOCCF5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _IOCCF4_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _IOCCF4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _INT_ISR                                              0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (7) _INT_CallBack                                         0     0      0       0
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _INT_DefaultInterruptHandler                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _CCP1_CaptureISR                                      3     3      0     197
                                              4 COMMON     3     3      0
                      _CCP1_CallBack
 ---------------------------------------------------------------------------------
 (7) _CCP1_CallBack                                        2     0      2     150
                                              2 COMMON     2     0      2
                _EncA_PulseEdgeEvent
 ---------------------------------------------------------------------------------
 (8) _EncA_PulseEdgeEvent                                  2     0      2      64
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LedONStartConfig
     ___lwdiv
     ___wmul
   _LedONStatusBusy
   _ModbusgetState
   _Modbusinit
     _Serialbegin
       _EUSART_Initialize
   _ModbuspollMaster
     _Serialavailable
     _getRxBuffer
       _Serialavailable
       _Serialread
         _EUSART_Read
     _get_FC1
       ___awdiv
       _wordConvert
     _get_FC3
       ___awdiv
       _wordConvert
     _millis
     _validateAnswer
       _calcCRC
   _Modbusquery
     _ClearSerialRxBuffer
       _EUSART_Read
     ___bmul (ARG)
     _delayMsec (ARG)
     _sendTxBuffer (ARG)
       _Serialwrite
       _calcCRC
       _millis
   _ModbussetTimeOut
   _NutRunCycleStart
     _NutRunCycleReset
     _TMR3_StartTimer
     _TMR3_WriteTimer
   _SYSTEM_Initialize
     _ADC_Initialize
     _CCP1_Initialize
     _CCP2_Initialize
     _EUSART_Initialize
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCCF4_SetInterruptHandler
       _IOCCF5_SetInterruptHandler
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR3_Initialize
       _TMR3_SetInterruptHandler
       _TMR3_StartTimer
     _TMR5_Initialize
       _TMR5_SetInterruptHandler
       _TMR5_StartTimer
     _WDT_Initialize
   _TMR3_StopTimer
   _TMR3_WriteTimer
   _TMR5_StopTimer
   _TMR5_WriteTimer
   ___bmul
   _getEncoderState
   _millis

 _INTERRUPT_InterruptManager (ROOT)
   _CCP1_CaptureISR
     _CCP1_CallBack
       _EncA_PulseEdgeEvent
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
     _IOCCF4_ISR
       Absolute function(Fake) *
       _IOCCF4_DefaultInterruptHandler *
     _IOCCF5_ISR
       Absolute function(Fake) *
       _IOCCF5_DefaultInterruptHandler *
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _Timer0_tick10msecFunc *
         _LedON_Control_10msec
   _TMR3_ISR
     Absolute function(Fake) *
     _TMR3_DefaultInterruptHandler *
       _Timer3_Overflow
   _TMR5_ISR
     Absolute function(Fake) *
     _TMR5_DefaultInterruptHandler *
       _Timer5_Overflow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     132       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      44      10       85.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     132      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed May 31 01:10:03 2017

          __end_of_TMR5_SetInterruptHandler 0DE9                              ___bmul@product 0022  
                          ??_ModbusgetState 0020      __end_of_IOCCF4_DefaultInterruptHandler 0D3E  
   __size_of_IOCCF4_DefaultInterruptHandler 0001              _IOCCF4_DefaultInterruptHandler 0D3D  
                               __CFG_CP$OFF 0000                                ___awdiv@sign 0026  
                       ___wmul@multiplicand 0022                           ??_TMR5_WriteTimer 0022  
                   __end_of_CCP1_Initialize 0E75                    __size_of_Timer5_Overflow 0001  
                               __CFG_LVP$ON 0000                                         l901 0502  
                                       l904 0505                                         l871 0DEF  
                                       l897 04FF                                         _GIE 005F  
                              __CFG_CPD$OFF 0000                         Modbusquery@u8regsno 0045  
             LedONStartConfig@LedONNumBlink 0029                       ??_ClearSerialRxBuffer 0022  
                 __size_of_LedONStartConfig 0069                                         wreg 0009  
                              ?_EUSART_Read 0070                                        l1042 00E3  
                                      l1053 01C7                                        l1037 01BF  
                                      l1046 0148                                        l1148 04B7  
                                      l1328 0FCF                             _timer3ReloadVal 006A  
                                      l4006 0F1E                                        l4200 012E  
                                      l4104 0E06                                        l4124 0508  
                                      l3420 07DE                                        l4300 037C  
                                      l4134 0548                                        l4126 0514  
                                      l4214 0155                                        l5110 0287  
                                      l4304 0380                                        l4232 016D  
                                      l5120 02B6                                        l4306 039B  
                                      l4170 00CB                                        l5130 02DA  
                                      l5122 02B8                                        l5106 0266  
                                      l3612 0656                                        l3604 0645  
                                      l4180 00DF                                        l4236 01A4  
                                      l5044 0EAD                                        l4262 031A  
                                      l4190 0101                                        l5134 02DF  
                                      l3608 064E                                        l3560 05F0  
                                      l3552 05E3                                        l3544 05D0  
                                      l4192 0107                                        l4176 00D4  
                                      l5048 0EB3                                        l4290 036C  
                                      l4274 033D                                        l4186 00EA  
                                      l3580 0614                                        l3556 05EB  
                                      l5076 020E                                        l3558 05BD  
                                      l3822 079F                                        l3832 0E49  
                                      l3664 0F07                                        l3586 061F  
                                      l3922 04E0                                        l3914 04C7  
                                      l4298 0378                                        l3834 0E55  
                                      l3596 0627                                        l3940 06A5  
                                      l3908 04C0                                        l3860 03C9  
                                      l3598 0633                                        l3918 04D7  
                                      l3862 03E3                                        l3880 073A  
                                      l3952 0661                                        l3928 04EA  
                                      l3980 06FB                                        l3956 0FC9  
                                      l3990 0716                                        l3878 071E  
                                      l3888 074A                                        l3986 070D  
                                      l3978 06EF                        Modbusquery@u8bytesno 0046  
                                      u2140 05B4                                        _LATA 010C  
                                      _LATB 010D                             __end_of_INT_ISR 0D6F  
                                      u2055 062A                                        u2215 03D2  
                                      _LATC 010E                                        u2075 0634  
                                      u2315 06BD                                        u2405 06FC  
                                      u2085 063E                                        u2325 0679  
                                      u2415 0706                                        u2095 0646  
                                      u2255 04AE                                        u2425 070E  
                                      u2345 0FD0                                        u2355 0FD5  
                                      u2195 07B7                                        u2385 06F2  
                                      u2715 030C                                        u2745 0356  
                                      u2665 0110                                        u2685 014E  
                                      u2695 0173                                        u1985 05D7  
                                      u3790 02A2                                        u3785 027F  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                                __CFG_WRT$OFF 0000  
                             __CFG_FCMEN$ON 0000                                        _u8id 005C  
                   __end_of_CCP2_Initialize 0DAA                                 _wordConvert 0E98  
                                      _main 01DC                             _TMR0_StartTimer 0D5A  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E            ??_IOCCF5_DefaultInterruptHandler 0070  
           ?_IOCCF5_DefaultInterruptHandler 0070                               __CFG_BOREN$ON 0000  
       __end_of_INT_DefaultInterruptHandler 0D3D                 _INT_DefaultInterruptHandler 0D3C  
                             __CFG_BORV$LOW 0000                                        start 0066  
                           _timer5ReloadVal 006C                     _EncEdgeMinTimeIntSumAvg 00CC  
                           _TMR3_Initialize 0F74             __end_of_INT_SetInterruptHandler 0DB3  
                             __CFG_CSWEN$ON 0000                         Modbusquery@telegram 0036  
                         ___bmul@multiplier 0023                               __CFG_MCLRE$ON 0000  
                          ?_CCP1_CaptureISR 0070                            ?_getEncoderState 0070  
                         ??_Serialavailable 0020                     __end_of_TMR0_Initialize 0EF9  
            ??_TMR0_DefaultInterruptHandler 0070              __size_of_OSCILLATOR_Initialize 0009  
             __end_of_OSCILLATOR_Initialize 0DBC                         __size_of_IOCCF4_ISR 000D  
                       __size_of_IOCCF5_ISR 000D                                       _ADACT 009F  
                                     ?_main 0070                             __end_of___awdiv 065B  
                             __CFG_WDTE$OFF 0000                             __end_of_calcCRC 0609  
                           ___awdiv@divisor 0020                                       _T3CON 0413  
                                     _T5CON 041A                              __CFG_DEBUG$OFF 0000  
                           __end_of___lwdiv 071B                                       i1l184 0FFD  
                                     i1l470 001F                                       i1l480 0059  
                                     i1l472 002B                                       i1l474 0035  
                                     i1l476 0041                                       i1l484 0061  
                                     i1l468 0013                                       i1l478 004D  
                                     i1l930 0460                                       i1l934 0463  
                                     i1l937 0466                             ___awdiv@counter 0025  
                    _flagForFirstRevolution 0079                                       _OSCEN 091D  
                                     _TMR0H 0016                                       _TMR0L 0015  
                                     _TMR3H 0412                                       _TMR5H 0419  
                                     _TMR3L 0411                                       _TMR5L 0418  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E                      __size_of_CCP1_CallBack 0007  
         __size_of_TMR0_SetInterruptHandler 0009                             __end_of_get_FC1 06E6  
                           __end_of_get_FC3 06A2           __size_of_TMR3_SetInterruptHandler 0009  
                 ?_TMR0_SetInterruptHandler 0020                   ?_TMR3_SetInterruptHandler 0020  
                          __end_of_TMR0_ISR 0D74                            __end_of_TMR3_ISR 0ED0  
                          __end_of_TMR5_ISR 0EE4                      ?_Timer0_tick10msecFunc 0070  
               ModbuspollMaster@u8exception 003A              ??_TMR3_DefaultInterruptHandler 0074  
                   __end_of_PIN_MANAGER_IOC 0E15                              _WDT_Initialize 0D66  
               validateAnswer@u16MsgCRCcalc 0034                   ClearSerialRxBuffer@bdummy 0023  
                                     pclath 000A                                       status 0003  
                                     wtemp0 007E                             _LedONStatusBusy 0D48  
                         ?_ModbussetTimeOut 0020                             _TMR5_Initialize 0F8F  
                             ??_Modbusquery 003D                             __initialization 0068  
                        ??_ModbussetTimeOut 0022                                __end_of_main 02EC  
                         ?_ModbuspollMaster 0070                             calcCRC@u8length 0028  
                        ??_ModbuspollMaster 0038                 ?_INTERRUPT_InterruptManager 0070  
                         ??_Timer3_Overflow 0070                                      ??_main 0049  
                                _u32timeOut 012E                                  _u16timeOut 00D0  
                          ?_CCP1_Initialize 0070                    _TMR5_SetInterruptHandler 0DE0  
                           _TMR3_StartTimer 0D57                       _TMR3_InterruptHandler 0162  
                    __end_of_WDT_Initialize 0D6A                                   ??_INT_ISR 0070  
                                _Modbusinit 0F59                           ??_Timer5_Overflow 0070  
                   __end_of_TMR0_StartTimer 0D5D                                      _ADCON0 009D  
                                    _ADCON1 009E                                      _ADRESH 009C  
                                    _ADRESL 009B                                      _CCPR1H 0292  
                                    _CCPR2H 0296                                      _CCPR1L 0291  
                                    _CCPR2L 0295                        __size_of_getRxBuffer 0032  
              ??_IOCCF4_SetInterruptHandler 0022                            ___awdiv@dividend 0022  
                                    _ANSELA 018C                                      _ANSELB 018D  
                                    _ANSELC 018E                          __CFG_RSTOSC$HFINT1 0000  
                                    _T0CON0 0017                                      _T0CON1 0018  
                                    _T3GCON 0414                                      _T5GCON 041B  
                                    _RC1REG 0199                                      _RC1STA 019D  
                                    _ODCONA 028C                                      _ODCONB 028D  
                                    _ODCONC 028E                                      i1l4066 0FAF  
                                    i1l3450 0435                                      i1l4084 0E0F  
                   __end_of_TMR3_Initialize 0F8F                                      i1l3446 041D  
                                    i1l3454 0441                                      i1l3464 0469  
                                    i1l3448 0429                                      i1l3456 044D  
                                    i1l3466 0475                                      i1l3458 0454  
                                    i1l3468 047A                                      i1l3750 0E2B  
                                    i1l3756 0E38                                      _INLVLA 038C  
                                    _INLVLC 038E                                      u191_20 043E  
                                    u193_25 045D                                      u186_25 041A  
                                    u187_20 0426                                      u189_20 0432  
                                    _OSCFRQ 091F                                      _TX1REG 019A  
                                    _WDTCON 0097                                      _TX1STA 019E  
                          ?_CCP2_Initialize 0070                               ??_Serialbegin 0025  
                           _TMR3_WriteTimer 0EF9                                      _Led_ON 005D  
                             _CCP1_CallBack 0D80                              __CFG_PWRTE$OFF 0000  
                             ??_Serialwrite 0020                                  _Serialread 0D54  
                                    ___bmul 0EAA                                      ___wmul 0FC6  
                                 ??___awdiv 0024                              __CFG_STVREN$ON 0000  
                                 ??_calcCRC 0022                                   ??___lwdiv 0024  
                       _EUSART_Transmit_ISR 0FE2                            ?_TMR0_Initialize 0070  
                                    _millis 0E75                            ___awdiv@quotient 0027  
                                 ??_get_FC1 0029                                   ??_get_FC3 0029  
                       __end_of_Modbusquery 01DC                     __size_of_validateAnswer 006C  
                                    _toggle 005E                               ?_INT_CallBack 0070  
       __size_of_IOCCF4_SetInterruptHandler 0009                             _TMR5_StartTimer 0D5D  
                          _LedONStartConfig 04EC                             ?_WDT_Initialize 0070  
                     __end_of_TMR0_CallBack 0E49            __size_of_INT_SetInterruptHandler 0009  
   INT_SetInterruptHandler@InterruptHandler 0020  IOCCF5_SetInterruptHandler@InterruptHandler 0020  
IOCCF4_SetInterruptHandler@InterruptHandler 0020    TMR0_SetInterruptHandler@InterruptHandler 0020  
  TMR3_SetInterruptHandler@InterruptHandler 0020    TMR5_SetInterruptHandler@InterruptHandler 0020  
                          ?_PIN_MANAGER_IOC 0070                 __end_of_EncA_PulseEdgeEvent 0D98  
                   __end_of_LedONStatusBusy 0D4B                        ?_EUSART_Transmit_ISR 0070  
                           _EncPulseOpState 0053                                ??_IOCCF4_ISR 0070  
                              ??_IOCCF5_ISR 0070                     __end_of_TMR5_Initialize 0FAA  
                      __size_of_EUSART_Read 0020                           _SYSTEM_Initialize 07BB  
                 __size_of_NutRunCycleReset 0018                     __end_of__initialization 009D  
                 __size_of_NutRunCycleStart 000F                              ?_CCP1_CallBack 0072  
                        ?_SYSTEM_Initialize 0070                __end_of_LedON_Control_10msec 0480  
                           _TMR5_WriteTimer 0F10                         ___bmul@multiplicand 0020  
                            __pcstackCOMMON 0070                                __pidataBANK0 0003  
                              __pidataBANK1 0D87                         ??_SYSTEM_Initialize 0023  
                              calcCRC@temp2 0024                     __end_of_TMR3_StartTimer 0D5A  
                                 ?_TMR0_ISR 0070                                   ?_TMR3_ISR 0070  
                                 ?_TMR5_ISR 0070                         __end_of_Serialbegin 0D51  
                      __end_of_fctsupported 0804                          __size_of_delayMsec 0022  
                       __end_of_Serialwrite 0DF3                              ??_INT_CallBack 0070  
                        __end_of_IOCCF4_ISR 0E2E                          __end_of_IOCCF5_ISR 0E3B  
               __size_of_EXT_INT_Initialize 000C                          _multipleTimecheck0 0067  
                        _multipleTimecheck1 0066                                 ?_Modbusinit 0070  
                          ?_TMR0_StartTimer 0070                   __end_of_SYSTEM_Initialize 07DC  
                     ??_EUSART_Transmit_ISR 0070                      _EncoderPositionAtIndex 00E0  
                   __end_of_TMR3_WriteTimer 0F10                                  __pbssBANK0 004B  
                                __pbssBANK1 00A0                                  __pbssBANK2 0120  
                                __pbssBANK3 01A0                            ?_TMR3_Initialize 0070  
                              ?_wordConvert 0020                               ?_sendTxBuffer 0070  
                           _Serialavailable 0D51                 __size_of_EUSART_Receive_ISR 001C  
                                _delayCount 00DE                                 ?_Serialread 0070  
                                __pmaintext 01DC                                 _Modbusquery 00A1  
                                   ?___bmul 0020            __end_of_TMR0_SetInterruptHandler 0DD7  
          __end_of_TMR3_SetInterruptHandler 0DE0                                     ?___wmul 0020  
                                ??_TMR0_ISR 0074                     __end_of_TMR5_StartTimer 0D60  
                           __CFG_PPS1WAY$ON 0000                                  ??_TMR3_ISR 0074  
                                ??_TMR5_ISR 0070                                  __pintentry 0004  
                                   _CCP1CAP 0294                                     _CCP2CAP 0298  
                                   _CCP1CON 0293                                     _CCP2CON 0297  
               __end_of_ClearSerialRxBuffer 0E57                                     ?_millis 0020  
    __end_of_IOCCF5_DefaultInterruptHandler 0D3F     __size_of_IOCCF5_DefaultInterruptHandler 0001  
            _IOCCF5_DefaultInterruptHandler 0D3E                     __size_of_ADC_Initialize 0009  
                             _eusartRxCount 0068                     ??_Timer0_tick10msecFunc 0070  
                                   _SP1BRGH 019C                                     _SP1BRGL 019B  
                                   _INT_ISR 0D6A                                     _OSCCON1 0919  
                                   _OSCCON3 091B                                     _OSCTUNE 091E  
        __end_of_IOCCF4_SetInterruptHandler 0DC5                  _IOCCF4_SetInterruptHandler 0DBC  
                                   _PPSLOCK 0E0F                            ?_LedONStatusBusy 0070  
                   __end_of_TMR5_WriteTimer 0F27                          sendTxBuffer@i_1782 0034  
                        sendTxBuffer@u16crc 0032                   ModbuspollMaster@u8current 003B  
                           ??_CCP1_CallBack 0074                              ??_sendTxBuffer 002D  
                          ?_TMR5_Initialize 0070                           __end_of_delayMsec 07BB  
                       _Blick_tickPointMsec 00DA                     __size_of_TMR3_StopTimer 0003  
                               _Serialbegin 0D4E                                     _u32wait 0132  
                                   _u32time 00C0                             _Timer3_Overflow 074D  
                ??_TMR5_SetInterruptHandler 0022                                 _Serialwrite 0DE9  
                       __size_of_Modbusinit 001B                             __size_of___bmul 0012  
                                   ___awdiv 0609                            ?_TMR3_StartTimer 0070  
                           __size_of___wmul 001C                                     _calcCRC 05B6  
                                   ___lwdiv 06E6                             _Timer5_Overflow 0D40  
                                   _u8state 005B                              _validateAnswer 0480  
                                   _u8query 005F                                     _get_FC1 06A2  
                                   _get_FC3 065B                             __size_of_millis 0011  
                             sendTxBuffer@i 0031                                     __ptext1 0DFE  
                                   __ptext2 0EAA                                     __ptext3 0F10  
                                   __ptext4 0D63                                     __ptext5 0D60  
                                   __ptext6 07BB                                     __ptext7 0D66  
                                   __ptext8 0F8F                                     __ptext9 0D5D  
                  __size_of_CCP1_CaptureISR 0012                     __size_of_TMR5_StopTimer 0003  
                 __size_of_ModbussetTimeOut 0001                       _OSCILLATOR_Initialize 0DB3  
                      _LedON_Control_10msec 040F                                   _T3CONbits 0413  
                  __size_of_getEncoderState 000B                    ??_PIN_MANAGER_Initialize 0022  
                   _INT_SetInterruptHandler 0DAA                                   _T5CONbits 041A  
                                 _IOCCFbits 0399                                 _NutRunstate 0062  
                   __size_of_ModbusgetState 0003                                   _IOCCNbits 0398  
                                 _IOCCPbits 0397                   __size_of_ModbuspollMaster 00B2  
                       __size_of_Serialread 0003                     __end_of_Serialavailable 0D54  
                __size_of_SYSTEM_Initialize 0021                                   _LED_Color 006F  
                                   clrloop0 0D75                        end_of_initialization 009D  
                          ?_TMR3_WriteTimer 0020                            _NutRunCycleReset 0F27  
                          _NutRunCycleStart 0E57                                     init_ram 0D7A  
                                   initloop 0D7B                        __end_of_INT_CallBack 0DFE  
                         _EUSART_Initialize 0F3F                    __end_of_LedONStartConfig 0555  
                        ?_EUSART_Initialize 0070                                Modbusquery@i 0043  
                    __end_of_validateAnswer 04EC                               get_FC1@u8byte 002B  
                          ?_TMR5_StartTimer 0070                                __pstringtext 07FC  
                             get_FC3@u8byte 002B            LedONStartConfig@LedONDurationSec 0028  
                       ??_EUSART_Initialize 0020                            ??_WDT_Initialize 0020  
                  _TMR0_SetInterruptHandler 0DCE                                   _PORTCbits 000E  
                  _TMR3_SetInterruptHandler 0DD7                       _TMR5_InterruptHandler 00EE  
                     ?_LedON_Control_10msec 0070                     _IOCCF4_InterruptHandler 015E  
                             ??_getRxBuffer 0022                            wordConvert@hByte 0027  
                          wordConvert@lByte 0020                    __size_of_CCP1_Initialize 000F  
                          __CFG_FEXTOSC$OFF 0000                ??_IOCCF5_SetInterruptHandler 0022  
                          ?_TMR5_WriteTimer 0020                     __end_of_Timer3_Overflow 0773  
                                 _RXPPSbits 0E24                                _fctsupported 07FC  
                   TMR5_WriteTimer@timerVal 0020                   __end_of_EUSART_Initialize 0F59  
                      __size_of_wordConvert 0012                     __end_of_Timer5_Overflow 0D41  
                    _EncEdgeTimeIntervalOld 0136                                 _CCP1PPSbits 0E14  
                    _EncEdgeMinTimeInterval 00EA                                 _CCP2PPSbits 0E15  
                           ?_validateAnswer 0070                    __size_of_CCP2_Initialize 0009  
                            __end_of___bmul 0EBC                              __end_of___wmul 0FE2  
                             _EncSpdredFact 00E6                           __size_of_TMR0_ISR 0005  
                         __size_of_TMR3_ISR 0014                              _ADC_Initialize 0D98  
                         __size_of_TMR5_ISR 0014                        __end_of_sendTxBuffer 040F  
                    ?_OSCILLATOR_Initialize 0070                              __end_of_millis 0E86  
                 ??_INT_SetInterruptHandler 0022         __size_of_IOCCF5_SetInterruptHandler 0009  
                                 _u16OutCnt 00D4                               _EncPulseError 007A  
                       start_initialization 0068                                   _OldEncPos 00E2  
                              ??_Modbusinit 0025                                 _u8lastError 005A  
      __end_of_TMR5_DefaultInterruptHandler 0D48       __size_of_TMR5_DefaultInterruptHandler 0003  
              _TMR5_DefaultInterruptHandler 0D45                         _EncEdgeTimeInterval 004B  
                  __size_of_TMR0_Initialize 0015             __size_of_PIN_MANAGER_Initialize 0061  
                             ??_EUSART_Read 0020                                   _u16errCnt 00D2  
                          ?_Serialavailable 0070                           ??_CCP1_CaptureISR 0074  
                         ??_getEncoderState 0020                         __end_of_getRxBuffer 074D  
                            _TMR3_StopTimer 0D60                __size_of_EncA_PulseEdgeEvent 0009  
                  __size_of_PIN_MANAGER_IOC 000C                ?_INT_DefaultInterruptHandler 0070  
                              ??_Serialread 0022                            __CFG_LPBOREN$OFF 0000  
                              ?_Modbusquery 0036                                    ??___bmul 0021  
                                  ??___wmul 0024                          __end_of_Modbusinit 0F74  
                              _LED_msec_Cnt 00DC                                 _CCPTMRSbits 029F  
                    __size_of_TMR0_CallBack 000E                      __end_of_ADC_Initialize 0DA1  
                               __pdataBANK0 006F                                 __pdataBANK1 00E6  
                                  ??_millis 0024                                   _au8Buffer 00A0  
                __end_of_EXT_INT_Initialize 0E21                      ??_LedON_Control_10msec 0070  
                            _TMR5_StopTimer 0D63                       CCP1_CaptureISR@module 0075  
                          _ModbussetTimeOut 0D41                 __end_of_EUSART_Transmit_ISR 1000  
                               __pbssCOMMON 0078                                   ___latbits 0001  
            __size_of_Timer0_tick10msecFunc 0026                                    ?_INT_ISR 0070  
                            _ModbusgetState 0D4B                               __pcstackBANK0 0020  
             __end_of_Timer0_tick10msecFunc 0799                            _ModbuspollMaster 02EC  
                               calcCRC@flag 0026                                 calcCRC@temp 002B  
               ?_IOCCF4_SetInterruptHandler 0020                          __end_of_Serialread 0D57  
                     __size_of_INT_CallBack 000B               ?_TMR5_DefaultInterruptHandler 0070  
                                 _u8lastRec 0058                      __end_of_TMR3_StopTimer 0D63  
                   _EncoderPositionOneCycle 0065                  __end_of_EUSART_Receive_ISR 0FC6  
                          ?_Timer3_Overflow 0070                                   _u8regsize 0078  
                __size_of_EUSART_Initialize 001A                            _Modbusquery$1760 0041  
                                 _u8state_t 0060                         __end_of_EUSART_Read 07FC  
                     _TMR0_InterruptHandler 0160                           ??_CCP1_Initialize 0020  
                                 __pnvBANK0 006A                                   __pnvBANK1 00EE  
                                 __pnvBANK2 015A                                ?_Serialbegin 0021  
                  __size_of_TMR0_StartTimer 0003                                   _delayFlag 0061  
                           Serialbegin@baud 0021                     _IOCCF5_InterruptHandler 015C  
                                 _delayMsec 0799                            ___lwdiv@dividend 0022  
                    _PIN_MANAGER_Initialize 0555                            ?_Timer5_Overflow 0070  
                              ?_Serialwrite 0070               ??_INT_DefaultInterruptHandler 0070  
                  __size_of_TMR3_Initialize 001B                        EUSART_Read@readValue 0021  
                                  ?___awdiv 0020                                    ?_calcCRC 0020  
                                  ?___lwdiv 0020                             ?_ADC_Initialize 0070  
                              _eusartRxHead 007B                      __end_of_TMR5_StopTimer 0D66  
                              _eusartTxHead 007D                                _eusartRxTail 0069  
                              _eusartTxTail 007C                                    ?_get_FC1 0070  
                                  ?_get_FC3 0070                    __end_of_NutRunCycleReset 0F3F  
              ??_INTERRUPT_InterruptManager 0077                    __end_of_NutRunCycleStart 0E66  
                   _eusartTxBufferRemaining 006E                                _INT_CallBack 0DF3  
                                  _BAUD1CON 019F                      __end_of_ModbusgetState 0D4E  
                         ??_CCP2_Initialize 0020                __size_of_ClearSerialRxBuffer 000E  
                               _getRxBuffer 071B          __end_of_IOCCF5_SetInterruptHandler 0DCE  
                _IOCCF5_SetInterruptHandler 0DC5                            ___lwdiv@quotient 0025  
                             _TMR0_CallBack 0E3B                             ?_TMR3_StopTimer 0070  
                            _eusartRxBuffer 01A0            ??_IOCCF4_DefaultInterruptHandler 0070  
           ?_IOCCF4_DefaultInterruptHandler 0070                           ??_TMR0_Initialize 0022  
                            _eusartTxBuffer 01C0                              ___wmul@product 0024  
                                  _LATBbits 010D                                    _LATCbits 010E  
                     __end_of_CCP1_CallBack 0D87                                   clear_ram0 0D74  
                                  _PIE0bits 0090                              _EncEdgeGotFlag 0064  
                                  _PIE1bits 0091                                    _PIE3bits 0093  
                                  _PIE4bits 0094                                  ?_delayMsec 0020  
                  __size_of_LedONStatusBusy 0003         __size_of_INTERRUPT_InterruptManager 0062  
                ??_TMR0_SetInterruptHandler 0022                                    _PIR0bits 0010  
                         _IdleTimeOnShutOff 00C8                                    _PIR1bits 0011  
                         ?_LedONStartConfig 0028                                    _PIR3bits 0013  
                                  _PIR4bits 0014                  ??_TMR3_SetInterruptHandler 0022  
                           validateAnswer@i 0037                    __size_of_TMR5_Initialize 001B  
                     __size_of_sendTxBuffer 0071                                    _TMR0_ISR 0D6F  
                        ??_LedONStartConfig 002A                                    _TMR3_ISR 0EBC  
                                  _TMR5_ISR 0ED0                           ??_PIN_MANAGER_IOC 0070  
                           ?_TMR5_StopTimer 0070                               _TimertickMsec 00C4  
                                _ADCON0bits 009D                           ___wmul@multiplier 0020  
                           ?_ModbusgetState 0070                    __size_of_TMR3_StartTimer 0003  
      __size_of_INT_DefaultInterruptHandler 0001           __size_of_TMR5_SetInterruptHandler 0009  
                 ?_TMR5_SetInterruptHandler 0020                            __size_of_INT_ISR 0005  
                            ?_TMR0_CallBack 0070                                 _EUSART_Read 07DC  
                                  _u16InCnt 00D6                                _sendTxBuffer 039E  
            ??_TMR5_DefaultInterruptHandler 0070                            ??_validateAnswer 002D  
                  __size_of_TMR3_WriteTimer 0017                                    _au16data 013A  
                                  _au16regs 0057                  ModbussetTimeOut@u16timeOut 0020  
                        _OldEncPulseOpState 0055                     ??_OSCILLATOR_Initialize 0020  
                      __size_of_Modbusquery 013B                           ??_TMR0_StartTimer 0020  
                          __size_of___awdiv 0052                            __size_of_calcCRC 0053  
                          __size_of___lwdiv 0035                  CCP1_CallBack@capturedValue 0072  
                 validateAnswer@isSupported 0036                             _CCP1_CaptureISR 0E86  
                         ??_TMR3_Initialize 0022                            __size_of_get_FC1 0044  
                          __size_of_get_FC3 0047                              Modbusinit@u8id 0070  
                           _getEncoderState 0DFE                         _EncA_PulseEdgeEvent 0D8F  
                              _u8BufferSize 0059                    __size_of_TMR5_StartTimer 0003  
                                _T0CON0bits 0017                                    calcCRC@i 0029  
                                  calcCRC@j 002A                             ___lwdiv@divisor 0020  
                           ___lwdiv@counter 0027                                    __ptext10 0DE0  
                                  __ptext11 0F74                                    __ptext20 0E15  
                                  __ptext12 0DD7                                    __ptext21 0DAA  
                                  __ptext13 0EE4                                    __ptext30 00A1  
                                  __ptext22 0DA1                                    __ptext14 0D5A  
                                  __ptext31 039E                                    __ptext23 0E66  
                                  __ptext15 0DCE                                    __ptext40 06A2  
                                  __ptext32 0DE9                                    __ptext24 0D98  
                                  __ptext16 0555                                    __ptext41 0E98  
                                  __ptext33 0799                                    __ptext25 0E57  
                                  __ptext17 0DC5                                    __ptext50 0D4B  
                                  __ptext42 0609                                    __ptext34 0E49  
                                  __ptext26 0EF9                                    __ptext18 0DBC  
                                  __ptext51 0D48                                    __ptext43 071B  
                                  __ptext35 02EC                                    __ptext27 0D57  
                                  __ptext19 0DB3                                    __ptext60 0D42  
                                  __ptext52 04EC                                    __ptext44 0D54  
                                  __ptext36 0480                                    __ptext28 0F27  
                                  __ptext61 074D                                    __ptext53 0FC6  
                                  __ptext45 07DC                                    __ptext37 05B6  
                                  __ptext29 0D41                                    __ptext70 0E21  
                                  __ptext62 0D6F                                    __ptext54 06E6  
                                  __ptext46 0D51                                    __ptext38 0E75  
                                  __ptext71 0D3D                                    __ptext63 0E3B  
                                  __ptext47 0F59                                    __ptext39 065B  
                                  __ptext72 0D6A                                    __ptext64 0773  
                                  __ptext56 0ED0                                    __ptext48 0D4E  
                                  __ptext73 0DF3                                    __ptext65 040F  
                                  __ptext57 0D45                                    __ptext49 0F3F  
                                  __ptext74 0D3C                                    __ptext66 0D3F  
                                  __ptext58 0D40                                    __ptext75 0FE2  
                                  __ptext67 0E09                                    __ptext59 0EBC  
                                  __ptext76 0FAA                                    __ptext68 0E2E  
                                  __ptext77 0E86                                    __ptext69 0D3E  
                                  __ptext78 0D80                                    __ptext79 0D8F  
                              _NutRunLength 00E4                                  _T3GCONbits 0414  
                                _IOCCF4_ISR 0E21                     TMR3_WriteTimer@timerVal 0020  
                                _IOCCF5_ISR 0E2E                            _ShutdownDetected 0063  
                             ??_wordConvert 0022                               __size_of_main 0110  
                                _T5GCONbits 041B                    __end_of_ModbussetTimeOut 0D42  
                      ?_EncA_PulseEdgeEvent 0070                                    get_FC1@i 002C  
                                  get_FC3@i 002C        __end_of_TMR0_DefaultInterruptHandler 0D40  
     __size_of_TMR0_DefaultInterruptHandler 0001                _TMR0_DefaultInterruptHandler 0D3F  
                               ??_delayMsec 0024                    __size_of_TMR5_WriteTimer 0017  
                                  _telegram 0120                                  _RC1STAbits 019D  
                  __end_of_ModbuspollMaster 039E                        __size_of_Serialbegin 0003  
                                _RB5PPSbits 0E9D                                    int$flags 007E  
                      __size_of_Serialwrite 000A          __end_of_INTERRUPT_InterruptManager 0066  
                _INTERRUPT_InterruptManager 0004            EncA_PulseEdgeEvent@capturedValue 0070  
                         ??_LedONStatusBusy 0020        __end_of_TMR3_DefaultInterruptHandler 0D45  
     __size_of_TMR3_DefaultInterruptHandler 0003                _TMR3_DefaultInterruptHandler 0D42  
               PIN_MANAGER_Initialize@state 0022                           ??_TMR5_Initialize 0022  
                  LedONStartConfig@LEDcolor 002C                                  _INTCONbits 000B  
                           ??_TMR0_CallBack 0074                        _INT_InterruptHandler 015A  
                           _CCP1_Initialize 0E66                          _EXT_INT_Initialize 0E15  
                           Serialwrite@temp 0020                     __size_of_WDT_Initialize 0004  
                                _INTPPSbits 0E10                     validateAnswer@u16MsgCRC 0032  
                         ??_TMR3_StartTimer 0020                             delayMsec@timems 0020  
                                  intlevel1 0000                         _LedON_Duration_msec 004F  
                   ?_PIN_MANAGER_Initialize 0070                       ??_EncA_PulseEdgeEvent 0072  
                         __CFG_CLKOUTEN$OFF 0000                         ?_EXT_INT_Initialize 0070  
                  __size_of_Serialavailable 0003                                 _PPSLOCKbits 0E0F  
                          ??_ADC_Initialize 0020                         _ClearSerialRxBuffer 0E49  
             ?_TMR0_DefaultInterruptHandler 0070                     __end_of_CCP1_CaptureISR 0E98  
                       __end_of_wordConvert 0EAA                             _CCP2_Initialize 0DA1  
                   ModbuspollMaster@i8state 0039                             _EncoderPosition 0051  
                   __end_of_getEncoderState 0E09                          _EUSART_Receive_ISR 0FAA  
                  ?_INT_SetInterruptHandler 0020                           ??_TMR3_WriteTimer 0022  
                         ?_NutRunCycleReset 0070                           ?_NutRunCycleStart 0070  
                      ??_EXT_INT_Initialize 0022                         ?_EUSART_Receive_ISR 0070  
             ?_TMR3_DefaultInterruptHandler 0070               __size_of_LedON_Control_10msec 0071  
                        ??_NutRunCycleReset 0020                             _TMR0_Initialize 0EE4  
                           _Blick_tickPoint 00D8                          ??_NutRunCycleStart 0022  
                          ??_TMR3_StopTimer 0020                        ?_ClearSerialRxBuffer 0070  
                              ?_getRxBuffer 0070                    getRxBuffer@bBuffOverflow 0023  
               ?_IOCCF5_SetInterruptHandler 0020                       _Timer0_tick10msecFunc 0773  
              __size_of_EUSART_Transmit_ISR 001E                           ??_TMR5_StartTimer 0020  
                               ?_IOCCF4_ISR 0070                                 ?_IOCCF5_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 05B6                             _PIN_MANAGER_IOC 0E09  
                      ??_EUSART_Receive_ISR 0070                           Modbusquery@i_1762 0047  
                          ??_TMR5_StopTimer 0020                    __size_of_Timer3_Overflow 0026  
