

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Apr 22 19:50:13 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F18344
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2,group=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	dabs	1,0x320,16
    96                           	dabs	1,0x2A0,80
    97                           	dabs	1,0x250,32
    98                           	dabs	1,0x220,48
    99                           	dabs	1,0x1A0,80
   100                           	dabs	1,0x2170,0,__u16TransmitBuffer
   101                           	dabs	1,0x20F0,0,__u16ResponseBuffer
   102                           	dabs	1,0x7E,2
   103  0000                     
   104                           ; Version 1.41
   105                           ; Generated 25/01/2017 GMT
   106                           ; 
   107                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   108                           ; All rights reserved.
   109                           ; 
   110                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   111                           ; 
   112                           ; Redistribution and use in source and binary forms, with or without modification, are
   113                           ; permitted provided that the following conditions are met:
   114                           ; 
   115                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   116                           ;        conditions and the following disclaimer.
   117                           ; 
   118                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   119                           ;        of conditions and the following disclaimer in the documentation and/or other
   120                           ;        materials provided with the distribution.
   121                           ; 
   122                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   123                           ;        software without specific prior written permission.
   124                           ; 
   125                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   126                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   127                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   128                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   129                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   130                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   131                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   132                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   133                           ; 
   134                           ; 
   135                           ; Code-generator required, PIC16F18344 Definitions
   136                           ; 
   137                           ; SFR Addresses
   138  0000                     	;# 
   139  0001                     	;# 
   140  0002                     	;# 
   141  0003                     	;# 
   142  0004                     	;# 
   143  0005                     	;# 
   144  0006                     	;# 
   145  0007                     	;# 
   146  0008                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0016                     	;# 
   162  0017                     	;# 
   163  0018                     	;# 
   164  0019                     	;# 
   165  0019                     	;# 
   166  001A                     	;# 
   167  001B                     	;# 
   168  001C                     	;# 
   169  001D                     	;# 
   170  001E                     	;# 
   171  001F                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0094                     	;# 
   180  0097                     	;# 
   181  009B                     	;# 
   182  009B                     	;# 
   183  009C                     	;# 
   184  009D                     	;# 
   185  009E                     	;# 
   186  009F                     	;# 
   187  010C                     	;# 
   188  010D                     	;# 
   189  010E                     	;# 
   190  0111                     	;# 
   191  0112                     	;# 
   192  0113                     	;# 
   193  0114                     	;# 
   194  0115                     	;# 
   195  0116                     	;# 
   196  0117                     	;# 
   197  0118                     	;# 
   198  0119                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201  018E                     	;# 
   202  0197                     	;# 
   203  0199                     	;# 
   204  0199                     	;# 
   205  0199                     	;# 
   206  019A                     	;# 
   207  019A                     	;# 
   208  019A                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019B                     	;# 
   213  019B                     	;# 
   214  019C                     	;# 
   215  019C                     	;# 
   216  019C                     	;# 
   217  019D                     	;# 
   218  019D                     	;# 
   219  019D                     	;# 
   220  019E                     	;# 
   221  019E                     	;# 
   222  019E                     	;# 
   223  019F                     	;# 
   224  019F                     	;# 
   225  019F                     	;# 
   226  019F                     	;# 
   227  019F                     	;# 
   228  020C                     	;# 
   229  020D                     	;# 
   230  020E                     	;# 
   231  0211                     	;# 
   232  0211                     	;# 
   233  0212                     	;# 
   234  0212                     	;# 
   235  0213                     	;# 
   236  0213                     	;# 
   237  0214                     	;# 
   238  0214                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0216                     	;# 
   244  0216                     	;# 
   245  0217                     	;# 
   246  0217                     	;# 
   247  028C                     	;# 
   248  028D                     	;# 
   249  028E                     	;# 
   250  0291                     	;# 
   251  0291                     	;# 
   252  0292                     	;# 
   253  0293                     	;# 
   254  0294                     	;# 
   255  0295                     	;# 
   256  0295                     	;# 
   257  0296                     	;# 
   258  0297                     	;# 
   259  0298                     	;# 
   260  029F                     	;# 
   261  030C                     	;# 
   262  030D                     	;# 
   263  030E                     	;# 
   264  0311                     	;# 
   265  0311                     	;# 
   266  0312                     	;# 
   267  0313                     	;# 
   268  0314                     	;# 
   269  0315                     	;# 
   270  0315                     	;# 
   271  0316                     	;# 
   272  0317                     	;# 
   273  0318                     	;# 
   274  038C                     	;# 
   275  038D                     	;# 
   276  038E                     	;# 
   277  0391                     	;# 
   278  0392                     	;# 
   279  0393                     	;# 
   280  0394                     	;# 
   281  0395                     	;# 
   282  0396                     	;# 
   283  0397                     	;# 
   284  0398                     	;# 
   285  0399                     	;# 
   286  039A                     	;# 
   287  039C                     	;# 
   288  039D                     	;# 
   289  039E                     	;# 
   290  039F                     	;# 
   291  0411                     	;# 
   292  0411                     	;# 
   293  0412                     	;# 
   294  0413                     	;# 
   295  0414                     	;# 
   296  0415                     	;# 
   297  0416                     	;# 
   298  0417                     	;# 
   299  0418                     	;# 
   300  0418                     	;# 
   301  0419                     	;# 
   302  041A                     	;# 
   303  041B                     	;# 
   304  041C                     	;# 
   305  041D                     	;# 
   306  041E                     	;# 
   307  041F                     	;# 
   308  0498                     	;# 
   309  0498                     	;# 
   310  0499                     	;# 
   311  049A                     	;# 
   312  049B                     	;# 
   313  049B                     	;# 
   314  049C                     	;# 
   315  049D                     	;# 
   316  049E                     	;# 
   317  049F                     	;# 
   318  0617                     	;# 
   319  0618                     	;# 
   320  0619                     	;# 
   321  0619                     	;# 
   322  061A                     	;# 
   323  061B                     	;# 
   324  061C                     	;# 
   325  061C                     	;# 
   326  061F                     	;# 
   327  0691                     	;# 
   328  0692                     	;# 
   329  0693                     	;# 
   330  0694                     	;# 
   331  0695                     	;# 
   332  0696                     	;# 
   333  0697                     	;# 
   334  0698                     	;# 
   335  0699                     	;# 
   336  0711                     	;# 
   337  0712                     	;# 
   338  0713                     	;# 
   339  0714                     	;# 
   340  0715                     	;# 
   341  0716                     	;# 
   342  0717                     	;# 
   343  0718                     	;# 
   344  0719                     	;# 
   345  0891                     	;# 
   346  0891                     	;# 
   347  0891                     	;# 
   348  0891                     	;# 
   349  0891                     	;# 
   350  0891                     	;# 
   351  0892                     	;# 
   352  0892                     	;# 
   353  0892                     	;# 
   354  0893                     	;# 
   355  0893                     	;# 
   356  0893                     	;# 
   357  0893                     	;# 
   358  0893                     	;# 
   359  0893                     	;# 
   360  0894                     	;# 
   361  0894                     	;# 
   362  0894                     	;# 
   363  0895                     	;# 
   364  0895                     	;# 
   365  0895                     	;# 
   366  0896                     	;# 
   367  0896                     	;# 
   368  0896                     	;# 
   369  089B                     	;# 
   370  0911                     	;# 
   371  0912                     	;# 
   372  0913                     	;# 
   373  0914                     	;# 
   374  0915                     	;# 
   375  0916                     	;# 
   376  0918                     	;# 
   377  0919                     	;# 
   378  091A                     	;# 
   379  091B                     	;# 
   380  091C                     	;# 
   381  091D                     	;# 
   382  091E                     	;# 
   383  091F                     	;# 
   384  0E0F                     	;# 
   385  0E10                     	;# 
   386  0E11                     	;# 
   387  0E12                     	;# 
   388  0E13                     	;# 
   389  0E14                     	;# 
   390  0E15                     	;# 
   391  0E16                     	;# 
   392  0E17                     	;# 
   393  0E18                     	;# 
   394  0E19                     	;# 
   395  0E1A                     	;# 
   396  0E1B                     	;# 
   397  0E1C                     	;# 
   398  0E20                     	;# 
   399  0E21                     	;# 
   400  0E22                     	;# 
   401  0E24                     	;# 
   402  0E25                     	;# 
   403  0E28                     	;# 
   404  0E29                     	;# 
   405  0E2A                     	;# 
   406  0E2B                     	;# 
   407  0E2C                     	;# 
   408  0E2D                     	;# 
   409  0E2E                     	;# 
   410  0E2F                     	;# 
   411  0E90                     	;# 
   412  0E91                     	;# 
   413  0E92                     	;# 
   414  0E94                     	;# 
   415  0E95                     	;# 
   416  0E9C                     	;# 
   417  0E9D                     	;# 
   418  0E9E                     	;# 
   419  0E9F                     	;# 
   420  0EA0                     	;# 
   421  0EA1                     	;# 
   422  0EA2                     	;# 
   423  0EA3                     	;# 
   424  0EA4                     	;# 
   425  0EA5                     	;# 
   426  0EA6                     	;# 
   427  0EA7                     	;# 
   428  0F0F                     	;# 
   429  0F10                     	;# 
   430  0F11                     	;# 
   431  0F12                     	;# 
   432  0F13                     	;# 
   433  0F14                     	;# 
   434  0F15                     	;# 
   435  0F16                     	;# 
   436  0F17                     	;# 
   437  0F18                     	;# 
   438  0F19                     	;# 
   439  0F1A                     	;# 
   440  0F1B                     	;# 
   441  0F1C                     	;# 
   442  0F1D                     	;# 
   443  0F1E                     	;# 
   444  0F1F                     	;# 
   445  0F20                     	;# 
   446  0F21                     	;# 
   447  0F22                     	;# 
   448  0F23                     	;# 
   449  0F24                     	;# 
   450  0F25                     	;# 
   451  0F26                     	;# 
   452  0F27                     	;# 
   453  0F28                     	;# 
   454  0F29                     	;# 
   455  0F2A                     	;# 
   456  0F2B                     	;# 
   457  0F2C                     	;# 
   458  0F2D                     	;# 
   459  0F2E                     	;# 
   460  0F2F                     	;# 
   461  0F30                     	;# 
   462  0F31                     	;# 
   463  0F32                     	;# 
   464  0F33                     	;# 
   465  0F34                     	;# 
   466  0F35                     	;# 
   467  0F36                     	;# 
   468  0F37                     	;# 
   469  0FE4                     	;# 
   470  0FE5                     	;# 
   471  0FE6                     	;# 
   472  0FE7                     	;# 
   473  0FE8                     	;# 
   474  0FE9                     	;# 
   475  0FEA                     	;# 
   476  0FEB                     	;# 
   477  0FED                     	;# 
   478  0FEE                     	;# 
   479  0FEF                     	;# 
   480  0000                     	;# 
   481  0001                     	;# 
   482  0002                     	;# 
   483  0003                     	;# 
   484  0004                     	;# 
   485  0005                     	;# 
   486  0006                     	;# 
   487  0007                     	;# 
   488  0008                     	;# 
   489  0009                     	;# 
   490  000A                     	;# 
   491  000B                     	;# 
   492  000C                     	;# 
   493  000D                     	;# 
   494  000E                     	;# 
   495  0010                     	;# 
   496  0011                     	;# 
   497  0012                     	;# 
   498  0013                     	;# 
   499  0014                     	;# 
   500  0015                     	;# 
   501  0015                     	;# 
   502  0016                     	;# 
   503  0016                     	;# 
   504  0017                     	;# 
   505  0018                     	;# 
   506  0019                     	;# 
   507  0019                     	;# 
   508  001A                     	;# 
   509  001B                     	;# 
   510  001C                     	;# 
   511  001D                     	;# 
   512  001E                     	;# 
   513  001F                     	;# 
   514  008C                     	;# 
   515  008D                     	;# 
   516  008E                     	;# 
   517  0090                     	;# 
   518  0091                     	;# 
   519  0092                     	;# 
   520  0093                     	;# 
   521  0094                     	;# 
   522  0097                     	;# 
   523  009B                     	;# 
   524  009B                     	;# 
   525  009C                     	;# 
   526  009D                     	;# 
   527  009E                     	;# 
   528  009F                     	;# 
   529  010C                     	;# 
   530  010D                     	;# 
   531  010E                     	;# 
   532  0111                     	;# 
   533  0112                     	;# 
   534  0113                     	;# 
   535  0114                     	;# 
   536  0115                     	;# 
   537  0116                     	;# 
   538  0117                     	;# 
   539  0118                     	;# 
   540  0119                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0197                     	;# 
   545  0199                     	;# 
   546  0199                     	;# 
   547  0199                     	;# 
   548  019A                     	;# 
   549  019A                     	;# 
   550  019A                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019C                     	;# 
   557  019C                     	;# 
   558  019C                     	;# 
   559  019D                     	;# 
   560  019D                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019E                     	;# 
   564  019E                     	;# 
   565  019F                     	;# 
   566  019F                     	;# 
   567  019F                     	;# 
   568  019F                     	;# 
   569  019F                     	;# 
   570  020C                     	;# 
   571  020D                     	;# 
   572  020E                     	;# 
   573  0211                     	;# 
   574  0211                     	;# 
   575  0212                     	;# 
   576  0212                     	;# 
   577  0213                     	;# 
   578  0213                     	;# 
   579  0214                     	;# 
   580  0214                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  028C                     	;# 
   590  028D                     	;# 
   591  028E                     	;# 
   592  0291                     	;# 
   593  0291                     	;# 
   594  0292                     	;# 
   595  0293                     	;# 
   596  0294                     	;# 
   597  0295                     	;# 
   598  0295                     	;# 
   599  0296                     	;# 
   600  0297                     	;# 
   601  0298                     	;# 
   602  029F                     	;# 
   603  030C                     	;# 
   604  030D                     	;# 
   605  030E                     	;# 
   606  0311                     	;# 
   607  0311                     	;# 
   608  0312                     	;# 
   609  0313                     	;# 
   610  0314                     	;# 
   611  0315                     	;# 
   612  0315                     	;# 
   613  0316                     	;# 
   614  0317                     	;# 
   615  0318                     	;# 
   616  038C                     	;# 
   617  038D                     	;# 
   618  038E                     	;# 
   619  0391                     	;# 
   620  0392                     	;# 
   621  0393                     	;# 
   622  0394                     	;# 
   623  0395                     	;# 
   624  0396                     	;# 
   625  0397                     	;# 
   626  0398                     	;# 
   627  0399                     	;# 
   628  039A                     	;# 
   629  039C                     	;# 
   630  039D                     	;# 
   631  039E                     	;# 
   632  039F                     	;# 
   633  0411                     	;# 
   634  0411                     	;# 
   635  0412                     	;# 
   636  0413                     	;# 
   637  0414                     	;# 
   638  0415                     	;# 
   639  0416                     	;# 
   640  0417                     	;# 
   641  0418                     	;# 
   642  0418                     	;# 
   643  0419                     	;# 
   644  041A                     	;# 
   645  041B                     	;# 
   646  041C                     	;# 
   647  041D                     	;# 
   648  041E                     	;# 
   649  041F                     	;# 
   650  0498                     	;# 
   651  0498                     	;# 
   652  0499                     	;# 
   653  049A                     	;# 
   654  049B                     	;# 
   655  049B                     	;# 
   656  049C                     	;# 
   657  049D                     	;# 
   658  049E                     	;# 
   659  049F                     	;# 
   660  0617                     	;# 
   661  0618                     	;# 
   662  0619                     	;# 
   663  0619                     	;# 
   664  061A                     	;# 
   665  061B                     	;# 
   666  061C                     	;# 
   667  061C                     	;# 
   668  061F                     	;# 
   669  0691                     	;# 
   670  0692                     	;# 
   671  0693                     	;# 
   672  0694                     	;# 
   673  0695                     	;# 
   674  0696                     	;# 
   675  0697                     	;# 
   676  0698                     	;# 
   677  0699                     	;# 
   678  0711                     	;# 
   679  0712                     	;# 
   680  0713                     	;# 
   681  0714                     	;# 
   682  0715                     	;# 
   683  0716                     	;# 
   684  0717                     	;# 
   685  0718                     	;# 
   686  0719                     	;# 
   687  0891                     	;# 
   688  0891                     	;# 
   689  0891                     	;# 
   690  0891                     	;# 
   691  0891                     	;# 
   692  0891                     	;# 
   693  0892                     	;# 
   694  0892                     	;# 
   695  0892                     	;# 
   696  0893                     	;# 
   697  0893                     	;# 
   698  0893                     	;# 
   699  0893                     	;# 
   700  0893                     	;# 
   701  0893                     	;# 
   702  0894                     	;# 
   703  0894                     	;# 
   704  0894                     	;# 
   705  0895                     	;# 
   706  0895                     	;# 
   707  0895                     	;# 
   708  0896                     	;# 
   709  0896                     	;# 
   710  0896                     	;# 
   711  089B                     	;# 
   712  0911                     	;# 
   713  0912                     	;# 
   714  0913                     	;# 
   715  0914                     	;# 
   716  0915                     	;# 
   717  0916                     	;# 
   718  0918                     	;# 
   719  0919                     	;# 
   720  091A                     	;# 
   721  091B                     	;# 
   722  091C                     	;# 
   723  091D                     	;# 
   724  091E                     	;# 
   725  091F                     	;# 
   726  0E0F                     	;# 
   727  0E10                     	;# 
   728  0E11                     	;# 
   729  0E12                     	;# 
   730  0E13                     	;# 
   731  0E14                     	;# 
   732  0E15                     	;# 
   733  0E16                     	;# 
   734  0E17                     	;# 
   735  0E18                     	;# 
   736  0E19                     	;# 
   737  0E1A                     	;# 
   738  0E1B                     	;# 
   739  0E1C                     	;# 
   740  0E20                     	;# 
   741  0E21                     	;# 
   742  0E22                     	;# 
   743  0E24                     	;# 
   744  0E25                     	;# 
   745  0E28                     	;# 
   746  0E29                     	;# 
   747  0E2A                     	;# 
   748  0E2B                     	;# 
   749  0E2C                     	;# 
   750  0E2D                     	;# 
   751  0E2E                     	;# 
   752  0E2F                     	;# 
   753  0E90                     	;# 
   754  0E91                     	;# 
   755  0E92                     	;# 
   756  0E94                     	;# 
   757  0E95                     	;# 
   758  0E9C                     	;# 
   759  0E9D                     	;# 
   760  0E9E                     	;# 
   761  0E9F                     	;# 
   762  0EA0                     	;# 
   763  0EA1                     	;# 
   764  0EA2                     	;# 
   765  0EA3                     	;# 
   766  0EA4                     	;# 
   767  0EA5                     	;# 
   768  0EA6                     	;# 
   769  0EA7                     	;# 
   770  0F0F                     	;# 
   771  0F10                     	;# 
   772  0F11                     	;# 
   773  0F12                     	;# 
   774  0F13                     	;# 
   775  0F14                     	;# 
   776  0F15                     	;# 
   777  0F16                     	;# 
   778  0F17                     	;# 
   779  0F18                     	;# 
   780  0F19                     	;# 
   781  0F1A                     	;# 
   782  0F1B                     	;# 
   783  0F1C                     	;# 
   784  0F1D                     	;# 
   785  0F1E                     	;# 
   786  0F1F                     	;# 
   787  0F20                     	;# 
   788  0F21                     	;# 
   789  0F22                     	;# 
   790  0F23                     	;# 
   791  0F24                     	;# 
   792  0F25                     	;# 
   793  0F26                     	;# 
   794  0F27                     	;# 
   795  0F28                     	;# 
   796  0F29                     	;# 
   797  0F2A                     	;# 
   798  0F2B                     	;# 
   799  0F2C                     	;# 
   800  0F2D                     	;# 
   801  0F2E                     	;# 
   802  0F2F                     	;# 
   803  0F30                     	;# 
   804  0F31                     	;# 
   805  0F32                     	;# 
   806  0F33                     	;# 
   807  0F34                     	;# 
   808  0F35                     	;# 
   809  0F36                     	;# 
   810  0F37                     	;# 
   811  0FE4                     	;# 
   812  0FE5                     	;# 
   813  0FE6                     	;# 
   814  0FE7                     	;# 
   815  0FE8                     	;# 
   816  0FE9                     	;# 
   817  0FEA                     	;# 
   818  0FEB                     	;# 
   819  0FED                     	;# 
   820  0FEE                     	;# 
   821  0FEF                     	;# 
   822  0000                     	;# 
   823  0001                     	;# 
   824  0002                     	;# 
   825  0003                     	;# 
   826  0004                     	;# 
   827  0005                     	;# 
   828  0006                     	;# 
   829  0007                     	;# 
   830  0008                     	;# 
   831  0009                     	;# 
   832  000A                     	;# 
   833  000B                     	;# 
   834  000C                     	;# 
   835  000D                     	;# 
   836  000E                     	;# 
   837  0010                     	;# 
   838  0011                     	;# 
   839  0012                     	;# 
   840  0013                     	;# 
   841  0014                     	;# 
   842  0015                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  0019                     	;# 
   850  001A                     	;# 
   851  001B                     	;# 
   852  001C                     	;# 
   853  001D                     	;# 
   854  001E                     	;# 
   855  001F                     	;# 
   856  008C                     	;# 
   857  008D                     	;# 
   858  008E                     	;# 
   859  0090                     	;# 
   860  0091                     	;# 
   861  0092                     	;# 
   862  0093                     	;# 
   863  0094                     	;# 
   864  0097                     	;# 
   865  009B                     	;# 
   866  009B                     	;# 
   867  009C                     	;# 
   868  009D                     	;# 
   869  009E                     	;# 
   870  009F                     	;# 
   871  010C                     	;# 
   872  010D                     	;# 
   873  010E                     	;# 
   874  0111                     	;# 
   875  0112                     	;# 
   876  0113                     	;# 
   877  0114                     	;# 
   878  0115                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  0118                     	;# 
   882  0119                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0197                     	;# 
   887  0199                     	;# 
   888  0199                     	;# 
   889  0199                     	;# 
   890  019A                     	;# 
   891  019A                     	;# 
   892  019A                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019C                     	;# 
   899  019C                     	;# 
   900  019C                     	;# 
   901  019D                     	;# 
   902  019D                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019E                     	;# 
   906  019E                     	;# 
   907  019F                     	;# 
   908  019F                     	;# 
   909  019F                     	;# 
   910  019F                     	;# 
   911  019F                     	;# 
   912  020C                     	;# 
   913  020D                     	;# 
   914  020E                     	;# 
   915  0211                     	;# 
   916  0211                     	;# 
   917  0212                     	;# 
   918  0212                     	;# 
   919  0213                     	;# 
   920  0213                     	;# 
   921  0214                     	;# 
   922  0214                     	;# 
   923  0215                     	;# 
   924  0215                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0216                     	;# 
   928  0216                     	;# 
   929  0217                     	;# 
   930  0217                     	;# 
   931  028C                     	;# 
   932  028D                     	;# 
   933  028E                     	;# 
   934  0291                     	;# 
   935  0291                     	;# 
   936  0292                     	;# 
   937  0293                     	;# 
   938  0294                     	;# 
   939  0295                     	;# 
   940  0295                     	;# 
   941  0296                     	;# 
   942  0297                     	;# 
   943  0298                     	;# 
   944  029F                     	;# 
   945  030C                     	;# 
   946  030D                     	;# 
   947  030E                     	;# 
   948  0311                     	;# 
   949  0311                     	;# 
   950  0312                     	;# 
   951  0313                     	;# 
   952  0314                     	;# 
   953  0315                     	;# 
   954  0315                     	;# 
   955  0316                     	;# 
   956  0317                     	;# 
   957  0318                     	;# 
   958  038C                     	;# 
   959  038D                     	;# 
   960  038E                     	;# 
   961  0391                     	;# 
   962  0392                     	;# 
   963  0393                     	;# 
   964  0394                     	;# 
   965  0395                     	;# 
   966  0396                     	;# 
   967  0397                     	;# 
   968  0398                     	;# 
   969  0399                     	;# 
   970  039A                     	;# 
   971  039C                     	;# 
   972  039D                     	;# 
   973  039E                     	;# 
   974  039F                     	;# 
   975  0411                     	;# 
   976  0411                     	;# 
   977  0412                     	;# 
   978  0413                     	;# 
   979  0414                     	;# 
   980  0415                     	;# 
   981  0416                     	;# 
   982  0417                     	;# 
   983  0418                     	;# 
   984  0418                     	;# 
   985  0419                     	;# 
   986  041A                     	;# 
   987  041B                     	;# 
   988  041C                     	;# 
   989  041D                     	;# 
   990  041E                     	;# 
   991  041F                     	;# 
   992  0498                     	;# 
   993  0498                     	;# 
   994  0499                     	;# 
   995  049A                     	;# 
   996  049B                     	;# 
   997  049B                     	;# 
   998  049C                     	;# 
   999  049D                     	;# 
  1000  049E                     	;# 
  1001  049F                     	;# 
  1002  0617                     	;# 
  1003  0618                     	;# 
  1004  0619                     	;# 
  1005  0619                     	;# 
  1006  061A                     	;# 
  1007  061B                     	;# 
  1008  061C                     	;# 
  1009  061C                     	;# 
  1010  061F                     	;# 
  1011  0691                     	;# 
  1012  0692                     	;# 
  1013  0693                     	;# 
  1014  0694                     	;# 
  1015  0695                     	;# 
  1016  0696                     	;# 
  1017  0697                     	;# 
  1018  0698                     	;# 
  1019  0699                     	;# 
  1020  0711                     	;# 
  1021  0712                     	;# 
  1022  0713                     	;# 
  1023  0714                     	;# 
  1024  0715                     	;# 
  1025  0716                     	;# 
  1026  0717                     	;# 
  1027  0718                     	;# 
  1028  0719                     	;# 
  1029  0891                     	;# 
  1030  0891                     	;# 
  1031  0891                     	;# 
  1032  0891                     	;# 
  1033  0891                     	;# 
  1034  0891                     	;# 
  1035  0892                     	;# 
  1036  0892                     	;# 
  1037  0892                     	;# 
  1038  0893                     	;# 
  1039  0893                     	;# 
  1040  0893                     	;# 
  1041  0893                     	;# 
  1042  0893                     	;# 
  1043  0893                     	;# 
  1044  0894                     	;# 
  1045  0894                     	;# 
  1046  0894                     	;# 
  1047  0895                     	;# 
  1048  0895                     	;# 
  1049  0895                     	;# 
  1050  0896                     	;# 
  1051  0896                     	;# 
  1052  0896                     	;# 
  1053  089B                     	;# 
  1054  0911                     	;# 
  1055  0912                     	;# 
  1056  0913                     	;# 
  1057  0914                     	;# 
  1058  0915                     	;# 
  1059  0916                     	;# 
  1060  0918                     	;# 
  1061  0919                     	;# 
  1062  091A                     	;# 
  1063  091B                     	;# 
  1064  091C                     	;# 
  1065  091D                     	;# 
  1066  091E                     	;# 
  1067  091F                     	;# 
  1068  0E0F                     	;# 
  1069  0E10                     	;# 
  1070  0E11                     	;# 
  1071  0E12                     	;# 
  1072  0E13                     	;# 
  1073  0E14                     	;# 
  1074  0E15                     	;# 
  1075  0E16                     	;# 
  1076  0E17                     	;# 
  1077  0E18                     	;# 
  1078  0E19                     	;# 
  1079  0E1A                     	;# 
  1080  0E1B                     	;# 
  1081  0E1C                     	;# 
  1082  0E20                     	;# 
  1083  0E21                     	;# 
  1084  0E22                     	;# 
  1085  0E24                     	;# 
  1086  0E25                     	;# 
  1087  0E28                     	;# 
  1088  0E29                     	;# 
  1089  0E2A                     	;# 
  1090  0E2B                     	;# 
  1091  0E2C                     	;# 
  1092  0E2D                     	;# 
  1093  0E2E                     	;# 
  1094  0E2F                     	;# 
  1095  0E90                     	;# 
  1096  0E91                     	;# 
  1097  0E92                     	;# 
  1098  0E94                     	;# 
  1099  0E95                     	;# 
  1100  0E9C                     	;# 
  1101  0E9D                     	;# 
  1102  0E9E                     	;# 
  1103  0E9F                     	;# 
  1104  0EA0                     	;# 
  1105  0EA1                     	;# 
  1106  0EA2                     	;# 
  1107  0EA3                     	;# 
  1108  0EA4                     	;# 
  1109  0EA5                     	;# 
  1110  0EA6                     	;# 
  1111  0EA7                     	;# 
  1112  0F0F                     	;# 
  1113  0F10                     	;# 
  1114  0F11                     	;# 
  1115  0F12                     	;# 
  1116  0F13                     	;# 
  1117  0F14                     	;# 
  1118  0F15                     	;# 
  1119  0F16                     	;# 
  1120  0F17                     	;# 
  1121  0F18                     	;# 
  1122  0F19                     	;# 
  1123  0F1A                     	;# 
  1124  0F1B                     	;# 
  1125  0F1C                     	;# 
  1126  0F1D                     	;# 
  1127  0F1E                     	;# 
  1128  0F1F                     	;# 
  1129  0F20                     	;# 
  1130  0F21                     	;# 
  1131  0F22                     	;# 
  1132  0F23                     	;# 
  1133  0F24                     	;# 
  1134  0F25                     	;# 
  1135  0F26                     	;# 
  1136  0F27                     	;# 
  1137  0F28                     	;# 
  1138  0F29                     	;# 
  1139  0F2A                     	;# 
  1140  0F2B                     	;# 
  1141  0F2C                     	;# 
  1142  0F2D                     	;# 
  1143  0F2E                     	;# 
  1144  0F2F                     	;# 
  1145  0F30                     	;# 
  1146  0F31                     	;# 
  1147  0F32                     	;# 
  1148  0F33                     	;# 
  1149  0F34                     	;# 
  1150  0F35                     	;# 
  1151  0F36                     	;# 
  1152  0F37                     	;# 
  1153  0FE4                     	;# 
  1154  0FE5                     	;# 
  1155  0FE6                     	;# 
  1156  0FE7                     	;# 
  1157  0FE8                     	;# 
  1158  0FE9                     	;# 
  1159  0FEA                     	;# 
  1160  0FEB                     	;# 
  1161  0FED                     	;# 
  1162  0FEE                     	;# 
  1163  0FEF                     	;# 
  1164  0000                     	;# 
  1165  0001                     	;# 
  1166  0002                     	;# 
  1167  0003                     	;# 
  1168  0004                     	;# 
  1169  0005                     	;# 
  1170  0006                     	;# 
  1171  0007                     	;# 
  1172  0008                     	;# 
  1173  0009                     	;# 
  1174  000A                     	;# 
  1175  000B                     	;# 
  1176  000C                     	;# 
  1177  000D                     	;# 
  1178  000E                     	;# 
  1179  0010                     	;# 
  1180  0011                     	;# 
  1181  0012                     	;# 
  1182  0013                     	;# 
  1183  0014                     	;# 
  1184  0015                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  0019                     	;# 
  1192  001A                     	;# 
  1193  001B                     	;# 
  1194  001C                     	;# 
  1195  001D                     	;# 
  1196  001E                     	;# 
  1197  001F                     	;# 
  1198  008C                     	;# 
  1199  008D                     	;# 
  1200  008E                     	;# 
  1201  0090                     	;# 
  1202  0091                     	;# 
  1203  0092                     	;# 
  1204  0093                     	;# 
  1205  0094                     	;# 
  1206  0097                     	;# 
  1207  009B                     	;# 
  1208  009B                     	;# 
  1209  009C                     	;# 
  1210  009D                     	;# 
  1211  009E                     	;# 
  1212  009F                     	;# 
  1213  010C                     	;# 
  1214  010D                     	;# 
  1215  010E                     	;# 
  1216  0111                     	;# 
  1217  0112                     	;# 
  1218  0113                     	;# 
  1219  0114                     	;# 
  1220  0115                     	;# 
  1221  0116                     	;# 
  1222  0117                     	;# 
  1223  0118                     	;# 
  1224  0119                     	;# 
  1225  018C                     	;# 
  1226  018D                     	;# 
  1227  018E                     	;# 
  1228  0197                     	;# 
  1229  0199                     	;# 
  1230  0199                     	;# 
  1231  0199                     	;# 
  1232  019A                     	;# 
  1233  019A                     	;# 
  1234  019A                     	;# 
  1235  019B                     	;# 
  1236  019B                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019C                     	;# 
  1241  019C                     	;# 
  1242  019C                     	;# 
  1243  019D                     	;# 
  1244  019D                     	;# 
  1245  019D                     	;# 
  1246  019E                     	;# 
  1247  019E                     	;# 
  1248  019E                     	;# 
  1249  019F                     	;# 
  1250  019F                     	;# 
  1251  019F                     	;# 
  1252  019F                     	;# 
  1253  019F                     	;# 
  1254  020C                     	;# 
  1255  020D                     	;# 
  1256  020E                     	;# 
  1257  0211                     	;# 
  1258  0211                     	;# 
  1259  0212                     	;# 
  1260  0212                     	;# 
  1261  0213                     	;# 
  1262  0213                     	;# 
  1263  0214                     	;# 
  1264  0214                     	;# 
  1265  0215                     	;# 
  1266  0215                     	;# 
  1267  0215                     	;# 
  1268  0215                     	;# 
  1269  0216                     	;# 
  1270  0216                     	;# 
  1271  0217                     	;# 
  1272  0217                     	;# 
  1273  028C                     	;# 
  1274  028D                     	;# 
  1275  028E                     	;# 
  1276  0291                     	;# 
  1277  0291                     	;# 
  1278  0292                     	;# 
  1279  0293                     	;# 
  1280  0294                     	;# 
  1281  0295                     	;# 
  1282  0295                     	;# 
  1283  0296                     	;# 
  1284  0297                     	;# 
  1285  0298                     	;# 
  1286  029F                     	;# 
  1287  030C                     	;# 
  1288  030D                     	;# 
  1289  030E                     	;# 
  1290  0311                     	;# 
  1291  0311                     	;# 
  1292  0312                     	;# 
  1293  0313                     	;# 
  1294  0314                     	;# 
  1295  0315                     	;# 
  1296  0315                     	;# 
  1297  0316                     	;# 
  1298  0317                     	;# 
  1299  0318                     	;# 
  1300  038C                     	;# 
  1301  038D                     	;# 
  1302  038E                     	;# 
  1303  0391                     	;# 
  1304  0392                     	;# 
  1305  0393                     	;# 
  1306  0394                     	;# 
  1307  0395                     	;# 
  1308  0396                     	;# 
  1309  0397                     	;# 
  1310  0398                     	;# 
  1311  0399                     	;# 
  1312  039A                     	;# 
  1313  039C                     	;# 
  1314  039D                     	;# 
  1315  039E                     	;# 
  1316  039F                     	;# 
  1317  0411                     	;# 
  1318  0411                     	;# 
  1319  0412                     	;# 
  1320  0413                     	;# 
  1321  0414                     	;# 
  1322  0415                     	;# 
  1323  0416                     	;# 
  1324  0417                     	;# 
  1325  0418                     	;# 
  1326  0418                     	;# 
  1327  0419                     	;# 
  1328  041A                     	;# 
  1329  041B                     	;# 
  1330  041C                     	;# 
  1331  041D                     	;# 
  1332  041E                     	;# 
  1333  041F                     	;# 
  1334  0498                     	;# 
  1335  0498                     	;# 
  1336  0499                     	;# 
  1337  049A                     	;# 
  1338  049B                     	;# 
  1339  049B                     	;# 
  1340  049C                     	;# 
  1341  049D                     	;# 
  1342  049E                     	;# 
  1343  049F                     	;# 
  1344  0617                     	;# 
  1345  0618                     	;# 
  1346  0619                     	;# 
  1347  0619                     	;# 
  1348  061A                     	;# 
  1349  061B                     	;# 
  1350  061C                     	;# 
  1351  061C                     	;# 
  1352  061F                     	;# 
  1353  0691                     	;# 
  1354  0692                     	;# 
  1355  0693                     	;# 
  1356  0694                     	;# 
  1357  0695                     	;# 
  1358  0696                     	;# 
  1359  0697                     	;# 
  1360  0698                     	;# 
  1361  0699                     	;# 
  1362  0711                     	;# 
  1363  0712                     	;# 
  1364  0713                     	;# 
  1365  0714                     	;# 
  1366  0715                     	;# 
  1367  0716                     	;# 
  1368  0717                     	;# 
  1369  0718                     	;# 
  1370  0719                     	;# 
  1371  0891                     	;# 
  1372  0891                     	;# 
  1373  0891                     	;# 
  1374  0891                     	;# 
  1375  0891                     	;# 
  1376  0891                     	;# 
  1377  0892                     	;# 
  1378  0892                     	;# 
  1379  0892                     	;# 
  1380  0893                     	;# 
  1381  0893                     	;# 
  1382  0893                     	;# 
  1383  0893                     	;# 
  1384  0893                     	;# 
  1385  0893                     	;# 
  1386  0894                     	;# 
  1387  0894                     	;# 
  1388  0894                     	;# 
  1389  0895                     	;# 
  1390  0895                     	;# 
  1391  0895                     	;# 
  1392  0896                     	;# 
  1393  0896                     	;# 
  1394  0896                     	;# 
  1395  089B                     	;# 
  1396  0911                     	;# 
  1397  0912                     	;# 
  1398  0913                     	;# 
  1399  0914                     	;# 
  1400  0915                     	;# 
  1401  0916                     	;# 
  1402  0918                     	;# 
  1403  0919                     	;# 
  1404  091A                     	;# 
  1405  091B                     	;# 
  1406  091C                     	;# 
  1407  091D                     	;# 
  1408  091E                     	;# 
  1409  091F                     	;# 
  1410  0E0F                     	;# 
  1411  0E10                     	;# 
  1412  0E11                     	;# 
  1413  0E12                     	;# 
  1414  0E13                     	;# 
  1415  0E14                     	;# 
  1416  0E15                     	;# 
  1417  0E16                     	;# 
  1418  0E17                     	;# 
  1419  0E18                     	;# 
  1420  0E19                     	;# 
  1421  0E1A                     	;# 
  1422  0E1B                     	;# 
  1423  0E1C                     	;# 
  1424  0E20                     	;# 
  1425  0E21                     	;# 
  1426  0E22                     	;# 
  1427  0E24                     	;# 
  1428  0E25                     	;# 
  1429  0E28                     	;# 
  1430  0E29                     	;# 
  1431  0E2A                     	;# 
  1432  0E2B                     	;# 
  1433  0E2C                     	;# 
  1434  0E2D                     	;# 
  1435  0E2E                     	;# 
  1436  0E2F                     	;# 
  1437  0E90                     	;# 
  1438  0E91                     	;# 
  1439  0E92                     	;# 
  1440  0E94                     	;# 
  1441  0E95                     	;# 
  1442  0E9C                     	;# 
  1443  0E9D                     	;# 
  1444  0E9E                     	;# 
  1445  0E9F                     	;# 
  1446  0EA0                     	;# 
  1447  0EA1                     	;# 
  1448  0EA2                     	;# 
  1449  0EA3                     	;# 
  1450  0EA4                     	;# 
  1451  0EA5                     	;# 
  1452  0EA6                     	;# 
  1453  0EA7                     	;# 
  1454  0F0F                     	;# 
  1455  0F10                     	;# 
  1456  0F11                     	;# 
  1457  0F12                     	;# 
  1458  0F13                     	;# 
  1459  0F14                     	;# 
  1460  0F15                     	;# 
  1461  0F16                     	;# 
  1462  0F17                     	;# 
  1463  0F18                     	;# 
  1464  0F19                     	;# 
  1465  0F1A                     	;# 
  1466  0F1B                     	;# 
  1467  0F1C                     	;# 
  1468  0F1D                     	;# 
  1469  0F1E                     	;# 
  1470  0F1F                     	;# 
  1471  0F20                     	;# 
  1472  0F21                     	;# 
  1473  0F22                     	;# 
  1474  0F23                     	;# 
  1475  0F24                     	;# 
  1476  0F25                     	;# 
  1477  0F26                     	;# 
  1478  0F27                     	;# 
  1479  0F28                     	;# 
  1480  0F29                     	;# 
  1481  0F2A                     	;# 
  1482  0F2B                     	;# 
  1483  0F2C                     	;# 
  1484  0F2D                     	;# 
  1485  0F2E                     	;# 
  1486  0F2F                     	;# 
  1487  0F30                     	;# 
  1488  0F31                     	;# 
  1489  0F32                     	;# 
  1490  0F33                     	;# 
  1491  0F34                     	;# 
  1492  0F35                     	;# 
  1493  0F36                     	;# 
  1494  0F37                     	;# 
  1495  0FE4                     	;# 
  1496  0FE5                     	;# 
  1497  0FE6                     	;# 
  1498  0FE7                     	;# 
  1499  0FE8                     	;# 
  1500  0FE9                     	;# 
  1501  0FEA                     	;# 
  1502  0FEB                     	;# 
  1503  0FED                     	;# 
  1504  0FEE                     	;# 
  1505  0FEF                     	;# 
  1506  0000                     	;# 
  1507  0001                     	;# 
  1508  0002                     	;# 
  1509  0003                     	;# 
  1510  0004                     	;# 
  1511  0005                     	;# 
  1512  0006                     	;# 
  1513  0007                     	;# 
  1514  0008                     	;# 
  1515  0009                     	;# 
  1516  000A                     	;# 
  1517  000B                     	;# 
  1518  000C                     	;# 
  1519  000D                     	;# 
  1520  000E                     	;# 
  1521  0010                     	;# 
  1522  0011                     	;# 
  1523  0012                     	;# 
  1524  0013                     	;# 
  1525  0014                     	;# 
  1526  0015                     	;# 
  1527  0015                     	;# 
  1528  0016                     	;# 
  1529  0016                     	;# 
  1530  0017                     	;# 
  1531  0018                     	;# 
  1532  0019                     	;# 
  1533  0019                     	;# 
  1534  001A                     	;# 
  1535  001B                     	;# 
  1536  001C                     	;# 
  1537  001D                     	;# 
  1538  001E                     	;# 
  1539  001F                     	;# 
  1540  008C                     	;# 
  1541  008D                     	;# 
  1542  008E                     	;# 
  1543  0090                     	;# 
  1544  0091                     	;# 
  1545  0092                     	;# 
  1546  0093                     	;# 
  1547  0094                     	;# 
  1548  0097                     	;# 
  1549  009B                     	;# 
  1550  009B                     	;# 
  1551  009C                     	;# 
  1552  009D                     	;# 
  1553  009E                     	;# 
  1554  009F                     	;# 
  1555  010C                     	;# 
  1556  010D                     	;# 
  1557  010E                     	;# 
  1558  0111                     	;# 
  1559  0112                     	;# 
  1560  0113                     	;# 
  1561  0114                     	;# 
  1562  0115                     	;# 
  1563  0116                     	;# 
  1564  0117                     	;# 
  1565  0118                     	;# 
  1566  0119                     	;# 
  1567  018C                     	;# 
  1568  018D                     	;# 
  1569  018E                     	;# 
  1570  0197                     	;# 
  1571  0199                     	;# 
  1572  0199                     	;# 
  1573  0199                     	;# 
  1574  019A                     	;# 
  1575  019A                     	;# 
  1576  019A                     	;# 
  1577  019B                     	;# 
  1578  019B                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019C                     	;# 
  1583  019C                     	;# 
  1584  019C                     	;# 
  1585  019D                     	;# 
  1586  019D                     	;# 
  1587  019D                     	;# 
  1588  019E                     	;# 
  1589  019E                     	;# 
  1590  019E                     	;# 
  1591  019F                     	;# 
  1592  019F                     	;# 
  1593  019F                     	;# 
  1594  019F                     	;# 
  1595  019F                     	;# 
  1596  020C                     	;# 
  1597  020D                     	;# 
  1598  020E                     	;# 
  1599  0211                     	;# 
  1600  0211                     	;# 
  1601  0212                     	;# 
  1602  0212                     	;# 
  1603  0213                     	;# 
  1604  0213                     	;# 
  1605  0214                     	;# 
  1606  0214                     	;# 
  1607  0215                     	;# 
  1608  0215                     	;# 
  1609  0215                     	;# 
  1610  0215                     	;# 
  1611  0216                     	;# 
  1612  0216                     	;# 
  1613  0217                     	;# 
  1614  0217                     	;# 
  1615  028C                     	;# 
  1616  028D                     	;# 
  1617  028E                     	;# 
  1618  0291                     	;# 
  1619  0291                     	;# 
  1620  0292                     	;# 
  1621  0293                     	;# 
  1622  0294                     	;# 
  1623  0295                     	;# 
  1624  0295                     	;# 
  1625  0296                     	;# 
  1626  0297                     	;# 
  1627  0298                     	;# 
  1628  029F                     	;# 
  1629  030C                     	;# 
  1630  030D                     	;# 
  1631  030E                     	;# 
  1632  0311                     	;# 
  1633  0311                     	;# 
  1634  0312                     	;# 
  1635  0313                     	;# 
  1636  0314                     	;# 
  1637  0315                     	;# 
  1638  0315                     	;# 
  1639  0316                     	;# 
  1640  0317                     	;# 
  1641  0318                     	;# 
  1642  038C                     	;# 
  1643  038D                     	;# 
  1644  038E                     	;# 
  1645  0391                     	;# 
  1646  0392                     	;# 
  1647  0393                     	;# 
  1648  0394                     	;# 
  1649  0395                     	;# 
  1650  0396                     	;# 
  1651  0397                     	;# 
  1652  0398                     	;# 
  1653  0399                     	;# 
  1654  039A                     	;# 
  1655  039C                     	;# 
  1656  039D                     	;# 
  1657  039E                     	;# 
  1658  039F                     	;# 
  1659  0411                     	;# 
  1660  0411                     	;# 
  1661  0412                     	;# 
  1662  0413                     	;# 
  1663  0414                     	;# 
  1664  0415                     	;# 
  1665  0416                     	;# 
  1666  0417                     	;# 
  1667  0418                     	;# 
  1668  0418                     	;# 
  1669  0419                     	;# 
  1670  041A                     	;# 
  1671  041B                     	;# 
  1672  041C                     	;# 
  1673  041D                     	;# 
  1674  041E                     	;# 
  1675  041F                     	;# 
  1676  0498                     	;# 
  1677  0498                     	;# 
  1678  0499                     	;# 
  1679  049A                     	;# 
  1680  049B                     	;# 
  1681  049B                     	;# 
  1682  049C                     	;# 
  1683  049D                     	;# 
  1684  049E                     	;# 
  1685  049F                     	;# 
  1686  0617                     	;# 
  1687  0618                     	;# 
  1688  0619                     	;# 
  1689  0619                     	;# 
  1690  061A                     	;# 
  1691  061B                     	;# 
  1692  061C                     	;# 
  1693  061C                     	;# 
  1694  061F                     	;# 
  1695  0691                     	;# 
  1696  0692                     	;# 
  1697  0693                     	;# 
  1698  0694                     	;# 
  1699  0695                     	;# 
  1700  0696                     	;# 
  1701  0697                     	;# 
  1702  0698                     	;# 
  1703  0699                     	;# 
  1704  0711                     	;# 
  1705  0712                     	;# 
  1706  0713                     	;# 
  1707  0714                     	;# 
  1708  0715                     	;# 
  1709  0716                     	;# 
  1710  0717                     	;# 
  1711  0718                     	;# 
  1712  0719                     	;# 
  1713  0891                     	;# 
  1714  0891                     	;# 
  1715  0891                     	;# 
  1716  0891                     	;# 
  1717  0891                     	;# 
  1718  0891                     	;# 
  1719  0892                     	;# 
  1720  0892                     	;# 
  1721  0892                     	;# 
  1722  0893                     	;# 
  1723  0893                     	;# 
  1724  0893                     	;# 
  1725  0893                     	;# 
  1726  0893                     	;# 
  1727  0893                     	;# 
  1728  0894                     	;# 
  1729  0894                     	;# 
  1730  0894                     	;# 
  1731  0895                     	;# 
  1732  0895                     	;# 
  1733  0895                     	;# 
  1734  0896                     	;# 
  1735  0896                     	;# 
  1736  0896                     	;# 
  1737  089B                     	;# 
  1738  0911                     	;# 
  1739  0912                     	;# 
  1740  0913                     	;# 
  1741  0914                     	;# 
  1742  0915                     	;# 
  1743  0916                     	;# 
  1744  0918                     	;# 
  1745  0919                     	;# 
  1746  091A                     	;# 
  1747  091B                     	;# 
  1748  091C                     	;# 
  1749  091D                     	;# 
  1750  091E                     	;# 
  1751  091F                     	;# 
  1752  0E0F                     	;# 
  1753  0E10                     	;# 
  1754  0E11                     	;# 
  1755  0E12                     	;# 
  1756  0E13                     	;# 
  1757  0E14                     	;# 
  1758  0E15                     	;# 
  1759  0E16                     	;# 
  1760  0E17                     	;# 
  1761  0E18                     	;# 
  1762  0E19                     	;# 
  1763  0E1A                     	;# 
  1764  0E1B                     	;# 
  1765  0E1C                     	;# 
  1766  0E20                     	;# 
  1767  0E21                     	;# 
  1768  0E22                     	;# 
  1769  0E24                     	;# 
  1770  0E25                     	;# 
  1771  0E28                     	;# 
  1772  0E29                     	;# 
  1773  0E2A                     	;# 
  1774  0E2B                     	;# 
  1775  0E2C                     	;# 
  1776  0E2D                     	;# 
  1777  0E2E                     	;# 
  1778  0E2F                     	;# 
  1779  0E90                     	;# 
  1780  0E91                     	;# 
  1781  0E92                     	;# 
  1782  0E94                     	;# 
  1783  0E95                     	;# 
  1784  0E9C                     	;# 
  1785  0E9D                     	;# 
  1786  0E9E                     	;# 
  1787  0E9F                     	;# 
  1788  0EA0                     	;# 
  1789  0EA1                     	;# 
  1790  0EA2                     	;# 
  1791  0EA3                     	;# 
  1792  0EA4                     	;# 
  1793  0EA5                     	;# 
  1794  0EA6                     	;# 
  1795  0EA7                     	;# 
  1796  0F0F                     	;# 
  1797  0F10                     	;# 
  1798  0F11                     	;# 
  1799  0F12                     	;# 
  1800  0F13                     	;# 
  1801  0F14                     	;# 
  1802  0F15                     	;# 
  1803  0F16                     	;# 
  1804  0F17                     	;# 
  1805  0F18                     	;# 
  1806  0F19                     	;# 
  1807  0F1A                     	;# 
  1808  0F1B                     	;# 
  1809  0F1C                     	;# 
  1810  0F1D                     	;# 
  1811  0F1E                     	;# 
  1812  0F1F                     	;# 
  1813  0F20                     	;# 
  1814  0F21                     	;# 
  1815  0F22                     	;# 
  1816  0F23                     	;# 
  1817  0F24                     	;# 
  1818  0F25                     	;# 
  1819  0F26                     	;# 
  1820  0F27                     	;# 
  1821  0F28                     	;# 
  1822  0F29                     	;# 
  1823  0F2A                     	;# 
  1824  0F2B                     	;# 
  1825  0F2C                     	;# 
  1826  0F2D                     	;# 
  1827  0F2E                     	;# 
  1828  0F2F                     	;# 
  1829  0F30                     	;# 
  1830  0F31                     	;# 
  1831  0F32                     	;# 
  1832  0F33                     	;# 
  1833  0F34                     	;# 
  1834  0F35                     	;# 
  1835  0F36                     	;# 
  1836  0F37                     	;# 
  1837  0FE4                     	;# 
  1838  0FE5                     	;# 
  1839  0FE6                     	;# 
  1840  0FE7                     	;# 
  1841  0FE8                     	;# 
  1842  0FE9                     	;# 
  1843  0FEA                     	;# 
  1844  0FEB                     	;# 
  1845  0FED                     	;# 
  1846  0FEE                     	;# 
  1847  0FEF                     	;# 
  1848  0000                     	;# 
  1849  0001                     	;# 
  1850  0002                     	;# 
  1851  0003                     	;# 
  1852  0004                     	;# 
  1853  0005                     	;# 
  1854  0006                     	;# 
  1855  0007                     	;# 
  1856  0008                     	;# 
  1857  0009                     	;# 
  1858  000A                     	;# 
  1859  000B                     	;# 
  1860  000C                     	;# 
  1861  000D                     	;# 
  1862  000E                     	;# 
  1863  0010                     	;# 
  1864  0011                     	;# 
  1865  0012                     	;# 
  1866  0013                     	;# 
  1867  0014                     	;# 
  1868  0015                     	;# 
  1869  0015                     	;# 
  1870  0016                     	;# 
  1871  0016                     	;# 
  1872  0017                     	;# 
  1873  0018                     	;# 
  1874  0019                     	;# 
  1875  0019                     	;# 
  1876  001A                     	;# 
  1877  001B                     	;# 
  1878  001C                     	;# 
  1879  001D                     	;# 
  1880  001E                     	;# 
  1881  001F                     	;# 
  1882  008C                     	;# 
  1883  008D                     	;# 
  1884  008E                     	;# 
  1885  0090                     	;# 
  1886  0091                     	;# 
  1887  0092                     	;# 
  1888  0093                     	;# 
  1889  0094                     	;# 
  1890  0097                     	;# 
  1891  009B                     	;# 
  1892  009B                     	;# 
  1893  009C                     	;# 
  1894  009D                     	;# 
  1895  009E                     	;# 
  1896  009F                     	;# 
  1897  010C                     	;# 
  1898  010D                     	;# 
  1899  010E                     	;# 
  1900  0111                     	;# 
  1901  0112                     	;# 
  1902  0113                     	;# 
  1903  0114                     	;# 
  1904  0115                     	;# 
  1905  0116                     	;# 
  1906  0117                     	;# 
  1907  0118                     	;# 
  1908  0119                     	;# 
  1909  018C                     	;# 
  1910  018D                     	;# 
  1911  018E                     	;# 
  1912  0197                     	;# 
  1913  0199                     	;# 
  1914  0199                     	;# 
  1915  0199                     	;# 
  1916  019A                     	;# 
  1917  019A                     	;# 
  1918  019A                     	;# 
  1919  019B                     	;# 
  1920  019B                     	;# 
  1921  019B                     	;# 
  1922  019B                     	;# 
  1923  019B                     	;# 
  1924  019C                     	;# 
  1925  019C                     	;# 
  1926  019C                     	;# 
  1927  019D                     	;# 
  1928  019D                     	;# 
  1929  019D                     	;# 
  1930  019E                     	;# 
  1931  019E                     	;# 
  1932  019E                     	;# 
  1933  019F                     	;# 
  1934  019F                     	;# 
  1935  019F                     	;# 
  1936  019F                     	;# 
  1937  019F                     	;# 
  1938  020C                     	;# 
  1939  020D                     	;# 
  1940  020E                     	;# 
  1941  0211                     	;# 
  1942  0211                     	;# 
  1943  0212                     	;# 
  1944  0212                     	;# 
  1945  0213                     	;# 
  1946  0213                     	;# 
  1947  0214                     	;# 
  1948  0214                     	;# 
  1949  0215                     	;# 
  1950  0215                     	;# 
  1951  0215                     	;# 
  1952  0215                     	;# 
  1953  0216                     	;# 
  1954  0216                     	;# 
  1955  0217                     	;# 
  1956  0217                     	;# 
  1957  028C                     	;# 
  1958  028D                     	;# 
  1959  028E                     	;# 
  1960  0291                     	;# 
  1961  0291                     	;# 
  1962  0292                     	;# 
  1963  0293                     	;# 
  1964  0294                     	;# 
  1965  0295                     	;# 
  1966  0295                     	;# 
  1967  0296                     	;# 
  1968  0297                     	;# 
  1969  0298                     	;# 
  1970  029F                     	;# 
  1971  030C                     	;# 
  1972  030D                     	;# 
  1973  030E                     	;# 
  1974  0311                     	;# 
  1975  0311                     	;# 
  1976  0312                     	;# 
  1977  0313                     	;# 
  1978  0314                     	;# 
  1979  0315                     	;# 
  1980  0315                     	;# 
  1981  0316                     	;# 
  1982  0317                     	;# 
  1983  0318                     	;# 
  1984  038C                     	;# 
  1985  038D                     	;# 
  1986  038E                     	;# 
  1987  0391                     	;# 
  1988  0392                     	;# 
  1989  0393                     	;# 
  1990  0394                     	;# 
  1991  0395                     	;# 
  1992  0396                     	;# 
  1993  0397                     	;# 
  1994  0398                     	;# 
  1995  0399                     	;# 
  1996  039A                     	;# 
  1997  039C                     	;# 
  1998  039D                     	;# 
  1999  039E                     	;# 
  2000  039F                     	;# 
  2001  0411                     	;# 
  2002  0411                     	;# 
  2003  0412                     	;# 
  2004  0413                     	;# 
  2005  0414                     	;# 
  2006  0415                     	;# 
  2007  0416                     	;# 
  2008  0417                     	;# 
  2009  0418                     	;# 
  2010  0418                     	;# 
  2011  0419                     	;# 
  2012  041A                     	;# 
  2013  041B                     	;# 
  2014  041C                     	;# 
  2015  041D                     	;# 
  2016  041E                     	;# 
  2017  041F                     	;# 
  2018  0498                     	;# 
  2019  0498                     	;# 
  2020  0499                     	;# 
  2021  049A                     	;# 
  2022  049B                     	;# 
  2023  049B                     	;# 
  2024  049C                     	;# 
  2025  049D                     	;# 
  2026  049E                     	;# 
  2027  049F                     	;# 
  2028  0617                     	;# 
  2029  0618                     	;# 
  2030  0619                     	;# 
  2031  0619                     	;# 
  2032  061A                     	;# 
  2033  061B                     	;# 
  2034  061C                     	;# 
  2035  061C                     	;# 
  2036  061F                     	;# 
  2037  0691                     	;# 
  2038  0692                     	;# 
  2039  0693                     	;# 
  2040  0694                     	;# 
  2041  0695                     	;# 
  2042  0696                     	;# 
  2043  0697                     	;# 
  2044  0698                     	;# 
  2045  0699                     	;# 
  2046  0711                     	;# 
  2047  0712                     	;# 
  2048  0713                     	;# 
  2049  0714                     	;# 
  2050  0715                     	;# 
  2051  0716                     	;# 
  2052  0717                     	;# 
  2053  0718                     	;# 
  2054  0719                     	;# 
  2055  0891                     	;# 
  2056  0891                     	;# 
  2057  0891                     	;# 
  2058  0891                     	;# 
  2059  0891                     	;# 
  2060  0891                     	;# 
  2061  0892                     	;# 
  2062  0892                     	;# 
  2063  0892                     	;# 
  2064  0893                     	;# 
  2065  0893                     	;# 
  2066  0893                     	;# 
  2067  0893                     	;# 
  2068  0893                     	;# 
  2069  0893                     	;# 
  2070  0894                     	;# 
  2071  0894                     	;# 
  2072  0894                     	;# 
  2073  0895                     	;# 
  2074  0895                     	;# 
  2075  0895                     	;# 
  2076  0896                     	;# 
  2077  0896                     	;# 
  2078  0896                     	;# 
  2079  089B                     	;# 
  2080  0911                     	;# 
  2081  0912                     	;# 
  2082  0913                     	;# 
  2083  0914                     	;# 
  2084  0915                     	;# 
  2085  0916                     	;# 
  2086  0918                     	;# 
  2087  0919                     	;# 
  2088  091A                     	;# 
  2089  091B                     	;# 
  2090  091C                     	;# 
  2091  091D                     	;# 
  2092  091E                     	;# 
  2093  091F                     	;# 
  2094  0E0F                     	;# 
  2095  0E10                     	;# 
  2096  0E11                     	;# 
  2097  0E12                     	;# 
  2098  0E13                     	;# 
  2099  0E14                     	;# 
  2100  0E15                     	;# 
  2101  0E16                     	;# 
  2102  0E17                     	;# 
  2103  0E18                     	;# 
  2104  0E19                     	;# 
  2105  0E1A                     	;# 
  2106  0E1B                     	;# 
  2107  0E1C                     	;# 
  2108  0E20                     	;# 
  2109  0E21                     	;# 
  2110  0E22                     	;# 
  2111  0E24                     	;# 
  2112  0E25                     	;# 
  2113  0E28                     	;# 
  2114  0E29                     	;# 
  2115  0E2A                     	;# 
  2116  0E2B                     	;# 
  2117  0E2C                     	;# 
  2118  0E2D                     	;# 
  2119  0E2E                     	;# 
  2120  0E2F                     	;# 
  2121  0E90                     	;# 
  2122  0E91                     	;# 
  2123  0E92                     	;# 
  2124  0E94                     	;# 
  2125  0E95                     	;# 
  2126  0E9C                     	;# 
  2127  0E9D                     	;# 
  2128  0E9E                     	;# 
  2129  0E9F                     	;# 
  2130  0EA0                     	;# 
  2131  0EA1                     	;# 
  2132  0EA2                     	;# 
  2133  0EA3                     	;# 
  2134  0EA4                     	;# 
  2135  0EA5                     	;# 
  2136  0EA6                     	;# 
  2137  0EA7                     	;# 
  2138  0F0F                     	;# 
  2139  0F10                     	;# 
  2140  0F11                     	;# 
  2141  0F12                     	;# 
  2142  0F13                     	;# 
  2143  0F14                     	;# 
  2144  0F15                     	;# 
  2145  0F16                     	;# 
  2146  0F17                     	;# 
  2147  0F18                     	;# 
  2148  0F19                     	;# 
  2149  0F1A                     	;# 
  2150  0F1B                     	;# 
  2151  0F1C                     	;# 
  2152  0F1D                     	;# 
  2153  0F1E                     	;# 
  2154  0F1F                     	;# 
  2155  0F20                     	;# 
  2156  0F21                     	;# 
  2157  0F22                     	;# 
  2158  0F23                     	;# 
  2159  0F24                     	;# 
  2160  0F25                     	;# 
  2161  0F26                     	;# 
  2162  0F27                     	;# 
  2163  0F28                     	;# 
  2164  0F29                     	;# 
  2165  0F2A                     	;# 
  2166  0F2B                     	;# 
  2167  0F2C                     	;# 
  2168  0F2D                     	;# 
  2169  0F2E                     	;# 
  2170  0F2F                     	;# 
  2171  0F30                     	;# 
  2172  0F31                     	;# 
  2173  0F32                     	;# 
  2174  0F33                     	;# 
  2175  0F34                     	;# 
  2176  0F35                     	;# 
  2177  0F36                     	;# 
  2178  0F37                     	;# 
  2179  0FE4                     	;# 
  2180  0FE5                     	;# 
  2181  0FE6                     	;# 
  2182  0FE7                     	;# 
  2183  0FE8                     	;# 
  2184  0FE9                     	;# 
  2185  0FEA                     	;# 
  2186  0FEB                     	;# 
  2187  0FED                     	;# 
  2188  0FEE                     	;# 
  2189  0FEF                     	;# 
  2190  0000                     	;# 
  2191  0001                     	;# 
  2192  0002                     	;# 
  2193  0003                     	;# 
  2194  0004                     	;# 
  2195  0005                     	;# 
  2196  0006                     	;# 
  2197  0007                     	;# 
  2198  0008                     	;# 
  2199  0009                     	;# 
  2200  000A                     	;# 
  2201  000B                     	;# 
  2202  000C                     	;# 
  2203  000D                     	;# 
  2204  000E                     	;# 
  2205  0010                     	;# 
  2206  0011                     	;# 
  2207  0012                     	;# 
  2208  0013                     	;# 
  2209  0014                     	;# 
  2210  0015                     	;# 
  2211  0015                     	;# 
  2212  0016                     	;# 
  2213  0016                     	;# 
  2214  0017                     	;# 
  2215  0018                     	;# 
  2216  0019                     	;# 
  2217  0019                     	;# 
  2218  001A                     	;# 
  2219  001B                     	;# 
  2220  001C                     	;# 
  2221  001D                     	;# 
  2222  001E                     	;# 
  2223  001F                     	;# 
  2224  008C                     	;# 
  2225  008D                     	;# 
  2226  008E                     	;# 
  2227  0090                     	;# 
  2228  0091                     	;# 
  2229  0092                     	;# 
  2230  0093                     	;# 
  2231  0094                     	;# 
  2232  0097                     	;# 
  2233  009B                     	;# 
  2234  009B                     	;# 
  2235  009C                     	;# 
  2236  009D                     	;# 
  2237  009E                     	;# 
  2238  009F                     	;# 
  2239  010C                     	;# 
  2240  010D                     	;# 
  2241  010E                     	;# 
  2242  0111                     	;# 
  2243  0112                     	;# 
  2244  0113                     	;# 
  2245  0114                     	;# 
  2246  0115                     	;# 
  2247  0116                     	;# 
  2248  0117                     	;# 
  2249  0118                     	;# 
  2250  0119                     	;# 
  2251  018C                     	;# 
  2252  018D                     	;# 
  2253  018E                     	;# 
  2254  0197                     	;# 
  2255  0199                     	;# 
  2256  0199                     	;# 
  2257  0199                     	;# 
  2258  019A                     	;# 
  2259  019A                     	;# 
  2260  019A                     	;# 
  2261  019B                     	;# 
  2262  019B                     	;# 
  2263  019B                     	;# 
  2264  019B                     	;# 
  2265  019B                     	;# 
  2266  019C                     	;# 
  2267  019C                     	;# 
  2268  019C                     	;# 
  2269  019D                     	;# 
  2270  019D                     	;# 
  2271  019D                     	;# 
  2272  019E                     	;# 
  2273  019E                     	;# 
  2274  019E                     	;# 
  2275  019F                     	;# 
  2276  019F                     	;# 
  2277  019F                     	;# 
  2278  019F                     	;# 
  2279  019F                     	;# 
  2280  020C                     	;# 
  2281  020D                     	;# 
  2282  020E                     	;# 
  2283  0211                     	;# 
  2284  0211                     	;# 
  2285  0212                     	;# 
  2286  0212                     	;# 
  2287  0213                     	;# 
  2288  0213                     	;# 
  2289  0214                     	;# 
  2290  0214                     	;# 
  2291  0215                     	;# 
  2292  0215                     	;# 
  2293  0215                     	;# 
  2294  0215                     	;# 
  2295  0216                     	;# 
  2296  0216                     	;# 
  2297  0217                     	;# 
  2298  0217                     	;# 
  2299  028C                     	;# 
  2300  028D                     	;# 
  2301  028E                     	;# 
  2302  0291                     	;# 
  2303  0291                     	;# 
  2304  0292                     	;# 
  2305  0293                     	;# 
  2306  0294                     	;# 
  2307  0295                     	;# 
  2308  0295                     	;# 
  2309  0296                     	;# 
  2310  0297                     	;# 
  2311  0298                     	;# 
  2312  029F                     	;# 
  2313  030C                     	;# 
  2314  030D                     	;# 
  2315  030E                     	;# 
  2316  0311                     	;# 
  2317  0311                     	;# 
  2318  0312                     	;# 
  2319  0313                     	;# 
  2320  0314                     	;# 
  2321  0315                     	;# 
  2322  0315                     	;# 
  2323  0316                     	;# 
  2324  0317                     	;# 
  2325  0318                     	;# 
  2326  038C                     	;# 
  2327  038D                     	;# 
  2328  038E                     	;# 
  2329  0391                     	;# 
  2330  0392                     	;# 
  2331  0393                     	;# 
  2332  0394                     	;# 
  2333  0395                     	;# 
  2334  0396                     	;# 
  2335  0397                     	;# 
  2336  0398                     	;# 
  2337  0399                     	;# 
  2338  039A                     	;# 
  2339  039C                     	;# 
  2340  039D                     	;# 
  2341  039E                     	;# 
  2342  039F                     	;# 
  2343  0411                     	;# 
  2344  0411                     	;# 
  2345  0412                     	;# 
  2346  0413                     	;# 
  2347  0414                     	;# 
  2348  0415                     	;# 
  2349  0416                     	;# 
  2350  0417                     	;# 
  2351  0418                     	;# 
  2352  0418                     	;# 
  2353  0419                     	;# 
  2354  041A                     	;# 
  2355  041B                     	;# 
  2356  041C                     	;# 
  2357  041D                     	;# 
  2358  041E                     	;# 
  2359  041F                     	;# 
  2360  0498                     	;# 
  2361  0498                     	;# 
  2362  0499                     	;# 
  2363  049A                     	;# 
  2364  049B                     	;# 
  2365  049B                     	;# 
  2366  049C                     	;# 
  2367  049D                     	;# 
  2368  049E                     	;# 
  2369  049F                     	;# 
  2370  0617                     	;# 
  2371  0618                     	;# 
  2372  0619                     	;# 
  2373  0619                     	;# 
  2374  061A                     	;# 
  2375  061B                     	;# 
  2376  061C                     	;# 
  2377  061C                     	;# 
  2378  061F                     	;# 
  2379  0691                     	;# 
  2380  0692                     	;# 
  2381  0693                     	;# 
  2382  0694                     	;# 
  2383  0695                     	;# 
  2384  0696                     	;# 
  2385  0697                     	;# 
  2386  0698                     	;# 
  2387  0699                     	;# 
  2388  0711                     	;# 
  2389  0712                     	;# 
  2390  0713                     	;# 
  2391  0714                     	;# 
  2392  0715                     	;# 
  2393  0716                     	;# 
  2394  0717                     	;# 
  2395  0718                     	;# 
  2396  0719                     	;# 
  2397  0891                     	;# 
  2398  0891                     	;# 
  2399  0891                     	;# 
  2400  0891                     	;# 
  2401  0891                     	;# 
  2402  0891                     	;# 
  2403  0892                     	;# 
  2404  0892                     	;# 
  2405  0892                     	;# 
  2406  0893                     	;# 
  2407  0893                     	;# 
  2408  0893                     	;# 
  2409  0893                     	;# 
  2410  0893                     	;# 
  2411  0893                     	;# 
  2412  0894                     	;# 
  2413  0894                     	;# 
  2414  0894                     	;# 
  2415  0895                     	;# 
  2416  0895                     	;# 
  2417  0895                     	;# 
  2418  0896                     	;# 
  2419  0896                     	;# 
  2420  0896                     	;# 
  2421  089B                     	;# 
  2422  0911                     	;# 
  2423  0912                     	;# 
  2424  0913                     	;# 
  2425  0914                     	;# 
  2426  0915                     	;# 
  2427  0916                     	;# 
  2428  0918                     	;# 
  2429  0919                     	;# 
  2430  091A                     	;# 
  2431  091B                     	;# 
  2432  091C                     	;# 
  2433  091D                     	;# 
  2434  091E                     	;# 
  2435  091F                     	;# 
  2436  0E0F                     	;# 
  2437  0E10                     	;# 
  2438  0E11                     	;# 
  2439  0E12                     	;# 
  2440  0E13                     	;# 
  2441  0E14                     	;# 
  2442  0E15                     	;# 
  2443  0E16                     	;# 
  2444  0E17                     	;# 
  2445  0E18                     	;# 
  2446  0E19                     	;# 
  2447  0E1A                     	;# 
  2448  0E1B                     	;# 
  2449  0E1C                     	;# 
  2450  0E20                     	;# 
  2451  0E21                     	;# 
  2452  0E22                     	;# 
  2453  0E24                     	;# 
  2454  0E25                     	;# 
  2455  0E28                     	;# 
  2456  0E29                     	;# 
  2457  0E2A                     	;# 
  2458  0E2B                     	;# 
  2459  0E2C                     	;# 
  2460  0E2D                     	;# 
  2461  0E2E                     	;# 
  2462  0E2F                     	;# 
  2463  0E90                     	;# 
  2464  0E91                     	;# 
  2465  0E92                     	;# 
  2466  0E94                     	;# 
  2467  0E95                     	;# 
  2468  0E9C                     	;# 
  2469  0E9D                     	;# 
  2470  0E9E                     	;# 
  2471  0E9F                     	;# 
  2472  0EA0                     	;# 
  2473  0EA1                     	;# 
  2474  0EA2                     	;# 
  2475  0EA3                     	;# 
  2476  0EA4                     	;# 
  2477  0EA5                     	;# 
  2478  0EA6                     	;# 
  2479  0EA7                     	;# 
  2480  0F0F                     	;# 
  2481  0F10                     	;# 
  2482  0F11                     	;# 
  2483  0F12                     	;# 
  2484  0F13                     	;# 
  2485  0F14                     	;# 
  2486  0F15                     	;# 
  2487  0F16                     	;# 
  2488  0F17                     	;# 
  2489  0F18                     	;# 
  2490  0F19                     	;# 
  2491  0F1A                     	;# 
  2492  0F1B                     	;# 
  2493  0F1C                     	;# 
  2494  0F1D                     	;# 
  2495  0F1E                     	;# 
  2496  0F1F                     	;# 
  2497  0F20                     	;# 
  2498  0F21                     	;# 
  2499  0F22                     	;# 
  2500  0F23                     	;# 
  2501  0F24                     	;# 
  2502  0F25                     	;# 
  2503  0F26                     	;# 
  2504  0F27                     	;# 
  2505  0F28                     	;# 
  2506  0F29                     	;# 
  2507  0F2A                     	;# 
  2508  0F2B                     	;# 
  2509  0F2C                     	;# 
  2510  0F2D                     	;# 
  2511  0F2E                     	;# 
  2512  0F2F                     	;# 
  2513  0F30                     	;# 
  2514  0F31                     	;# 
  2515  0F32                     	;# 
  2516  0F33                     	;# 
  2517  0F34                     	;# 
  2518  0F35                     	;# 
  2519  0F36                     	;# 
  2520  0F37                     	;# 
  2521  0FE4                     	;# 
  2522  0FE5                     	;# 
  2523  0FE6                     	;# 
  2524  0FE7                     	;# 
  2525  0FE8                     	;# 
  2526  0FE9                     	;# 
  2527  0FEA                     	;# 
  2528  0FEB                     	;# 
  2529  0FED                     	;# 
  2530  0FEE                     	;# 
  2531  0FEF                     	;# 
  2532  0000                     	;# 
  2533  0001                     	;# 
  2534  0002                     	;# 
  2535  0003                     	;# 
  2536  0004                     	;# 
  2537  0005                     	;# 
  2538  0006                     	;# 
  2539  0007                     	;# 
  2540  0008                     	;# 
  2541  0009                     	;# 
  2542  000A                     	;# 
  2543  000B                     	;# 
  2544  000C                     	;# 
  2545  000D                     	;# 
  2546  000E                     	;# 
  2547  0010                     	;# 
  2548  0011                     	;# 
  2549  0012                     	;# 
  2550  0013                     	;# 
  2551  0014                     	;# 
  2552  0015                     	;# 
  2553  0015                     	;# 
  2554  0016                     	;# 
  2555  0016                     	;# 
  2556  0017                     	;# 
  2557  0018                     	;# 
  2558  0019                     	;# 
  2559  0019                     	;# 
  2560  001A                     	;# 
  2561  001B                     	;# 
  2562  001C                     	;# 
  2563  001D                     	;# 
  2564  001E                     	;# 
  2565  001F                     	;# 
  2566  008C                     	;# 
  2567  008D                     	;# 
  2568  008E                     	;# 
  2569  0090                     	;# 
  2570  0091                     	;# 
  2571  0092                     	;# 
  2572  0093                     	;# 
  2573  0094                     	;# 
  2574  0097                     	;# 
  2575  009B                     	;# 
  2576  009B                     	;# 
  2577  009C                     	;# 
  2578  009D                     	;# 
  2579  009E                     	;# 
  2580  009F                     	;# 
  2581  010C                     	;# 
  2582  010D                     	;# 
  2583  010E                     	;# 
  2584  0111                     	;# 
  2585  0112                     	;# 
  2586  0113                     	;# 
  2587  0114                     	;# 
  2588  0115                     	;# 
  2589  0116                     	;# 
  2590  0117                     	;# 
  2591  0118                     	;# 
  2592  0119                     	;# 
  2593  018C                     	;# 
  2594  018D                     	;# 
  2595  018E                     	;# 
  2596  0197                     	;# 
  2597  0199                     	;# 
  2598  0199                     	;# 
  2599  0199                     	;# 
  2600  019A                     	;# 
  2601  019A                     	;# 
  2602  019A                     	;# 
  2603  019B                     	;# 
  2604  019B                     	;# 
  2605  019B                     	;# 
  2606  019B                     	;# 
  2607  019B                     	;# 
  2608  019C                     	;# 
  2609  019C                     	;# 
  2610  019C                     	;# 
  2611  019D                     	;# 
  2612  019D                     	;# 
  2613  019D                     	;# 
  2614  019E                     	;# 
  2615  019E                     	;# 
  2616  019E                     	;# 
  2617  019F                     	;# 
  2618  019F                     	;# 
  2619  019F                     	;# 
  2620  019F                     	;# 
  2621  019F                     	;# 
  2622  020C                     	;# 
  2623  020D                     	;# 
  2624  020E                     	;# 
  2625  0211                     	;# 
  2626  0211                     	;# 
  2627  0212                     	;# 
  2628  0212                     	;# 
  2629  0213                     	;# 
  2630  0213                     	;# 
  2631  0214                     	;# 
  2632  0214                     	;# 
  2633  0215                     	;# 
  2634  0215                     	;# 
  2635  0215                     	;# 
  2636  0215                     	;# 
  2637  0216                     	;# 
  2638  0216                     	;# 
  2639  0217                     	;# 
  2640  0217                     	;# 
  2641  028C                     	;# 
  2642  028D                     	;# 
  2643  028E                     	;# 
  2644  0291                     	;# 
  2645  0291                     	;# 
  2646  0292                     	;# 
  2647  0293                     	;# 
  2648  0294                     	;# 
  2649  0295                     	;# 
  2650  0295                     	;# 
  2651  0296                     	;# 
  2652  0297                     	;# 
  2653  0298                     	;# 
  2654  029F                     	;# 
  2655  030C                     	;# 
  2656  030D                     	;# 
  2657  030E                     	;# 
  2658  0311                     	;# 
  2659  0311                     	;# 
  2660  0312                     	;# 
  2661  0313                     	;# 
  2662  0314                     	;# 
  2663  0315                     	;# 
  2664  0315                     	;# 
  2665  0316                     	;# 
  2666  0317                     	;# 
  2667  0318                     	;# 
  2668  038C                     	;# 
  2669  038D                     	;# 
  2670  038E                     	;# 
  2671  0391                     	;# 
  2672  0392                     	;# 
  2673  0393                     	;# 
  2674  0394                     	;# 
  2675  0395                     	;# 
  2676  0396                     	;# 
  2677  0397                     	;# 
  2678  0398                     	;# 
  2679  0399                     	;# 
  2680  039A                     	;# 
  2681  039C                     	;# 
  2682  039D                     	;# 
  2683  039E                     	;# 
  2684  039F                     	;# 
  2685  0411                     	;# 
  2686  0411                     	;# 
  2687  0412                     	;# 
  2688  0413                     	;# 
  2689  0414                     	;# 
  2690  0415                     	;# 
  2691  0416                     	;# 
  2692  0417                     	;# 
  2693  0418                     	;# 
  2694  0418                     	;# 
  2695  0419                     	;# 
  2696  041A                     	;# 
  2697  041B                     	;# 
  2698  041C                     	;# 
  2699  041D                     	;# 
  2700  041E                     	;# 
  2701  041F                     	;# 
  2702  0498                     	;# 
  2703  0498                     	;# 
  2704  0499                     	;# 
  2705  049A                     	;# 
  2706  049B                     	;# 
  2707  049B                     	;# 
  2708  049C                     	;# 
  2709  049D                     	;# 
  2710  049E                     	;# 
  2711  049F                     	;# 
  2712  0617                     	;# 
  2713  0618                     	;# 
  2714  0619                     	;# 
  2715  0619                     	;# 
  2716  061A                     	;# 
  2717  061B                     	;# 
  2718  061C                     	;# 
  2719  061C                     	;# 
  2720  061F                     	;# 
  2721  0691                     	;# 
  2722  0692                     	;# 
  2723  0693                     	;# 
  2724  0694                     	;# 
  2725  0695                     	;# 
  2726  0696                     	;# 
  2727  0697                     	;# 
  2728  0698                     	;# 
  2729  0699                     	;# 
  2730  0711                     	;# 
  2731  0712                     	;# 
  2732  0713                     	;# 
  2733  0714                     	;# 
  2734  0715                     	;# 
  2735  0716                     	;# 
  2736  0717                     	;# 
  2737  0718                     	;# 
  2738  0719                     	;# 
  2739  0891                     	;# 
  2740  0891                     	;# 
  2741  0891                     	;# 
  2742  0891                     	;# 
  2743  0891                     	;# 
  2744  0891                     	;# 
  2745  0892                     	;# 
  2746  0892                     	;# 
  2747  0892                     	;# 
  2748  0893                     	;# 
  2749  0893                     	;# 
  2750  0893                     	;# 
  2751  0893                     	;# 
  2752  0893                     	;# 
  2753  0893                     	;# 
  2754  0894                     	;# 
  2755  0894                     	;# 
  2756  0894                     	;# 
  2757  0895                     	;# 
  2758  0895                     	;# 
  2759  0895                     	;# 
  2760  0896                     	;# 
  2761  0896                     	;# 
  2762  0896                     	;# 
  2763  089B                     	;# 
  2764  0911                     	;# 
  2765  0912                     	;# 
  2766  0913                     	;# 
  2767  0914                     	;# 
  2768  0915                     	;# 
  2769  0916                     	;# 
  2770  0918                     	;# 
  2771  0919                     	;# 
  2772  091A                     	;# 
  2773  091B                     	;# 
  2774  091C                     	;# 
  2775  091D                     	;# 
  2776  091E                     	;# 
  2777  091F                     	;# 
  2778  0E0F                     	;# 
  2779  0E10                     	;# 
  2780  0E11                     	;# 
  2781  0E12                     	;# 
  2782  0E13                     	;# 
  2783  0E14                     	;# 
  2784  0E15                     	;# 
  2785  0E16                     	;# 
  2786  0E17                     	;# 
  2787  0E18                     	;# 
  2788  0E19                     	;# 
  2789  0E1A                     	;# 
  2790  0E1B                     	;# 
  2791  0E1C                     	;# 
  2792  0E20                     	;# 
  2793  0E21                     	;# 
  2794  0E22                     	;# 
  2795  0E24                     	;# 
  2796  0E25                     	;# 
  2797  0E28                     	;# 
  2798  0E29                     	;# 
  2799  0E2A                     	;# 
  2800  0E2B                     	;# 
  2801  0E2C                     	;# 
  2802  0E2D                     	;# 
  2803  0E2E                     	;# 
  2804  0E2F                     	;# 
  2805  0E90                     	;# 
  2806  0E91                     	;# 
  2807  0E92                     	;# 
  2808  0E94                     	;# 
  2809  0E95                     	;# 
  2810  0E9C                     	;# 
  2811  0E9D                     	;# 
  2812  0E9E                     	;# 
  2813  0E9F                     	;# 
  2814  0EA0                     	;# 
  2815  0EA1                     	;# 
  2816  0EA2                     	;# 
  2817  0EA3                     	;# 
  2818  0EA4                     	;# 
  2819  0EA5                     	;# 
  2820  0EA6                     	;# 
  2821  0EA7                     	;# 
  2822  0F0F                     	;# 
  2823  0F10                     	;# 
  2824  0F11                     	;# 
  2825  0F12                     	;# 
  2826  0F13                     	;# 
  2827  0F14                     	;# 
  2828  0F15                     	;# 
  2829  0F16                     	;# 
  2830  0F17                     	;# 
  2831  0F18                     	;# 
  2832  0F19                     	;# 
  2833  0F1A                     	;# 
  2834  0F1B                     	;# 
  2835  0F1C                     	;# 
  2836  0F1D                     	;# 
  2837  0F1E                     	;# 
  2838  0F1F                     	;# 
  2839  0F20                     	;# 
  2840  0F21                     	;# 
  2841  0F22                     	;# 
  2842  0F23                     	;# 
  2843  0F24                     	;# 
  2844  0F25                     	;# 
  2845  0F26                     	;# 
  2846  0F27                     	;# 
  2847  0F28                     	;# 
  2848  0F29                     	;# 
  2849  0F2A                     	;# 
  2850  0F2B                     	;# 
  2851  0F2C                     	;# 
  2852  0F2D                     	;# 
  2853  0F2E                     	;# 
  2854  0F2F                     	;# 
  2855  0F30                     	;# 
  2856  0F31                     	;# 
  2857  0F32                     	;# 
  2858  0F33                     	;# 
  2859  0F34                     	;# 
  2860  0F35                     	;# 
  2861  0F36                     	;# 
  2862  0F37                     	;# 
  2863  0FE4                     	;# 
  2864  0FE5                     	;# 
  2865  0FE6                     	;# 
  2866  0FE7                     	;# 
  2867  0FE8                     	;# 
  2868  0FE9                     	;# 
  2869  0FEA                     	;# 
  2870  0FEB                     	;# 
  2871  0FED                     	;# 
  2872  0FEE                     	;# 
  2873  0FEF                     	;# 
  2874  0000                     	;# 
  2875  0001                     	;# 
  2876  0002                     	;# 
  2877  0003                     	;# 
  2878  0004                     	;# 
  2879  0005                     	;# 
  2880  0006                     	;# 
  2881  0007                     	;# 
  2882  0008                     	;# 
  2883  0009                     	;# 
  2884  000A                     	;# 
  2885  000B                     	;# 
  2886  000C                     	;# 
  2887  000D                     	;# 
  2888  000E                     	;# 
  2889  0010                     	;# 
  2890  0011                     	;# 
  2891  0012                     	;# 
  2892  0013                     	;# 
  2893  0014                     	;# 
  2894  0015                     	;# 
  2895  0015                     	;# 
  2896  0016                     	;# 
  2897  0016                     	;# 
  2898  0017                     	;# 
  2899  0018                     	;# 
  2900  0019                     	;# 
  2901  0019                     	;# 
  2902  001A                     	;# 
  2903  001B                     	;# 
  2904  001C                     	;# 
  2905  001D                     	;# 
  2906  001E                     	;# 
  2907  001F                     	;# 
  2908  008C                     	;# 
  2909  008D                     	;# 
  2910  008E                     	;# 
  2911  0090                     	;# 
  2912  0091                     	;# 
  2913  0092                     	;# 
  2914  0093                     	;# 
  2915  0094                     	;# 
  2916  0097                     	;# 
  2917  009B                     	;# 
  2918  009B                     	;# 
  2919  009C                     	;# 
  2920  009D                     	;# 
  2921  009E                     	;# 
  2922  009F                     	;# 
  2923  010C                     	;# 
  2924  010D                     	;# 
  2925  010E                     	;# 
  2926  0111                     	;# 
  2927  0112                     	;# 
  2928  0113                     	;# 
  2929  0114                     	;# 
  2930  0115                     	;# 
  2931  0116                     	;# 
  2932  0117                     	;# 
  2933  0118                     	;# 
  2934  0119                     	;# 
  2935  018C                     	;# 
  2936  018D                     	;# 
  2937  018E                     	;# 
  2938  0197                     	;# 
  2939  0199                     	;# 
  2940  0199                     	;# 
  2941  0199                     	;# 
  2942  019A                     	;# 
  2943  019A                     	;# 
  2944  019A                     	;# 
  2945  019B                     	;# 
  2946  019B                     	;# 
  2947  019B                     	;# 
  2948  019B                     	;# 
  2949  019B                     	;# 
  2950  019C                     	;# 
  2951  019C                     	;# 
  2952  019C                     	;# 
  2953  019D                     	;# 
  2954  019D                     	;# 
  2955  019D                     	;# 
  2956  019E                     	;# 
  2957  019E                     	;# 
  2958  019E                     	;# 
  2959  019F                     	;# 
  2960  019F                     	;# 
  2961  019F                     	;# 
  2962  019F                     	;# 
  2963  019F                     	;# 
  2964  020C                     	;# 
  2965  020D                     	;# 
  2966  020E                     	;# 
  2967  0211                     	;# 
  2968  0211                     	;# 
  2969  0212                     	;# 
  2970  0212                     	;# 
  2971  0213                     	;# 
  2972  0213                     	;# 
  2973  0214                     	;# 
  2974  0214                     	;# 
  2975  0215                     	;# 
  2976  0215                     	;# 
  2977  0215                     	;# 
  2978  0215                     	;# 
  2979  0216                     	;# 
  2980  0216                     	;# 
  2981  0217                     	;# 
  2982  0217                     	;# 
  2983  028C                     	;# 
  2984  028D                     	;# 
  2985  028E                     	;# 
  2986  0291                     	;# 
  2987  0291                     	;# 
  2988  0292                     	;# 
  2989  0293                     	;# 
  2990  0294                     	;# 
  2991  0295                     	;# 
  2992  0295                     	;# 
  2993  0296                     	;# 
  2994  0297                     	;# 
  2995  0298                     	;# 
  2996  029F                     	;# 
  2997  030C                     	;# 
  2998  030D                     	;# 
  2999  030E                     	;# 
  3000  0311                     	;# 
  3001  0311                     	;# 
  3002  0312                     	;# 
  3003  0313                     	;# 
  3004  0314                     	;# 
  3005  0315                     	;# 
  3006  0315                     	;# 
  3007  0316                     	;# 
  3008  0317                     	;# 
  3009  0318                     	;# 
  3010  038C                     	;# 
  3011  038D                     	;# 
  3012  038E                     	;# 
  3013  0391                     	;# 
  3014  0392                     	;# 
  3015  0393                     	;# 
  3016  0394                     	;# 
  3017  0395                     	;# 
  3018  0396                     	;# 
  3019  0397                     	;# 
  3020  0398                     	;# 
  3021  0399                     	;# 
  3022  039A                     	;# 
  3023  039C                     	;# 
  3024  039D                     	;# 
  3025  039E                     	;# 
  3026  039F                     	;# 
  3027  0411                     	;# 
  3028  0411                     	;# 
  3029  0412                     	;# 
  3030  0413                     	;# 
  3031  0414                     	;# 
  3032  0415                     	;# 
  3033  0416                     	;# 
  3034  0417                     	;# 
  3035  0418                     	;# 
  3036  0418                     	;# 
  3037  0419                     	;# 
  3038  041A                     	;# 
  3039  041B                     	;# 
  3040  041C                     	;# 
  3041  041D                     	;# 
  3042  041E                     	;# 
  3043  041F                     	;# 
  3044  0498                     	;# 
  3045  0498                     	;# 
  3046  0499                     	;# 
  3047  049A                     	;# 
  3048  049B                     	;# 
  3049  049B                     	;# 
  3050  049C                     	;# 
  3051  049D                     	;# 
  3052  049E                     	;# 
  3053  049F                     	;# 
  3054  0617                     	;# 
  3055  0618                     	;# 
  3056  0619                     	;# 
  3057  0619                     	;# 
  3058  061A                     	;# 
  3059  061B                     	;# 
  3060  061C                     	;# 
  3061  061C                     	;# 
  3062  061F                     	;# 
  3063  0691                     	;# 
  3064  0692                     	;# 
  3065  0693                     	;# 
  3066  0694                     	;# 
  3067  0695                     	;# 
  3068  0696                     	;# 
  3069  0697                     	;# 
  3070  0698                     	;# 
  3071  0699                     	;# 
  3072  0711                     	;# 
  3073  0712                     	;# 
  3074  0713                     	;# 
  3075  0714                     	;# 
  3076  0715                     	;# 
  3077  0716                     	;# 
  3078  0717                     	;# 
  3079  0718                     	;# 
  3080  0719                     	;# 
  3081  0891                     	;# 
  3082  0891                     	;# 
  3083  0891                     	;# 
  3084  0891                     	;# 
  3085  0891                     	;# 
  3086  0891                     	;# 
  3087  0892                     	;# 
  3088  0892                     	;# 
  3089  0892                     	;# 
  3090  0893                     	;# 
  3091  0893                     	;# 
  3092  0893                     	;# 
  3093  0893                     	;# 
  3094  0893                     	;# 
  3095  0893                     	;# 
  3096  0894                     	;# 
  3097  0894                     	;# 
  3098  0894                     	;# 
  3099  0895                     	;# 
  3100  0895                     	;# 
  3101  0895                     	;# 
  3102  0896                     	;# 
  3103  0896                     	;# 
  3104  0896                     	;# 
  3105  089B                     	;# 
  3106  0911                     	;# 
  3107  0912                     	;# 
  3108  0913                     	;# 
  3109  0914                     	;# 
  3110  0915                     	;# 
  3111  0916                     	;# 
  3112  0918                     	;# 
  3113  0919                     	;# 
  3114  091A                     	;# 
  3115  091B                     	;# 
  3116  091C                     	;# 
  3117  091D                     	;# 
  3118  091E                     	;# 
  3119  091F                     	;# 
  3120  0E0F                     	;# 
  3121  0E10                     	;# 
  3122  0E11                     	;# 
  3123  0E12                     	;# 
  3124  0E13                     	;# 
  3125  0E14                     	;# 
  3126  0E15                     	;# 
  3127  0E16                     	;# 
  3128  0E17                     	;# 
  3129  0E18                     	;# 
  3130  0E19                     	;# 
  3131  0E1A                     	;# 
  3132  0E1B                     	;# 
  3133  0E1C                     	;# 
  3134  0E20                     	;# 
  3135  0E21                     	;# 
  3136  0E22                     	;# 
  3137  0E24                     	;# 
  3138  0E25                     	;# 
  3139  0E28                     	;# 
  3140  0E29                     	;# 
  3141  0E2A                     	;# 
  3142  0E2B                     	;# 
  3143  0E2C                     	;# 
  3144  0E2D                     	;# 
  3145  0E2E                     	;# 
  3146  0E2F                     	;# 
  3147  0E90                     	;# 
  3148  0E91                     	;# 
  3149  0E92                     	;# 
  3150  0E94                     	;# 
  3151  0E95                     	;# 
  3152  0E9C                     	;# 
  3153  0E9D                     	;# 
  3154  0E9E                     	;# 
  3155  0E9F                     	;# 
  3156  0EA0                     	;# 
  3157  0EA1                     	;# 
  3158  0EA2                     	;# 
  3159  0EA3                     	;# 
  3160  0EA4                     	;# 
  3161  0EA5                     	;# 
  3162  0EA6                     	;# 
  3163  0EA7                     	;# 
  3164  0F0F                     	;# 
  3165  0F10                     	;# 
  3166  0F11                     	;# 
  3167  0F12                     	;# 
  3168  0F13                     	;# 
  3169  0F14                     	;# 
  3170  0F15                     	;# 
  3171  0F16                     	;# 
  3172  0F17                     	;# 
  3173  0F18                     	;# 
  3174  0F19                     	;# 
  3175  0F1A                     	;# 
  3176  0F1B                     	;# 
  3177  0F1C                     	;# 
  3178  0F1D                     	;# 
  3179  0F1E                     	;# 
  3180  0F1F                     	;# 
  3181  0F20                     	;# 
  3182  0F21                     	;# 
  3183  0F22                     	;# 
  3184  0F23                     	;# 
  3185  0F24                     	;# 
  3186  0F25                     	;# 
  3187  0F26                     	;# 
  3188  0F27                     	;# 
  3189  0F28                     	;# 
  3190  0F29                     	;# 
  3191  0F2A                     	;# 
  3192  0F2B                     	;# 
  3193  0F2C                     	;# 
  3194  0F2D                     	;# 
  3195  0F2E                     	;# 
  3196  0F2F                     	;# 
  3197  0F30                     	;# 
  3198  0F31                     	;# 
  3199  0F32                     	;# 
  3200  0F33                     	;# 
  3201  0F34                     	;# 
  3202  0F35                     	;# 
  3203  0F36                     	;# 
  3204  0F37                     	;# 
  3205  0FE4                     	;# 
  3206  0FE5                     	;# 
  3207  0FE6                     	;# 
  3208  0FE7                     	;# 
  3209  0FE8                     	;# 
  3210  0FE9                     	;# 
  3211  0FEA                     	;# 
  3212  0FEB                     	;# 
  3213  0FED                     	;# 
  3214  0FEE                     	;# 
  3215  0FEF                     	;# 
  3216  0000                     	;# 
  3217  0001                     	;# 
  3218  0002                     	;# 
  3219  0003                     	;# 
  3220  0004                     	;# 
  3221  0005                     	;# 
  3222  0006                     	;# 
  3223  0007                     	;# 
  3224  0008                     	;# 
  3225  0009                     	;# 
  3226  000A                     	;# 
  3227  000B                     	;# 
  3228  000C                     	;# 
  3229  000D                     	;# 
  3230  000E                     	;# 
  3231  0010                     	;# 
  3232  0011                     	;# 
  3233  0012                     	;# 
  3234  0013                     	;# 
  3235  0014                     	;# 
  3236  0015                     	;# 
  3237  0015                     	;# 
  3238  0016                     	;# 
  3239  0016                     	;# 
  3240  0017                     	;# 
  3241  0018                     	;# 
  3242  0019                     	;# 
  3243  0019                     	;# 
  3244  001A                     	;# 
  3245  001B                     	;# 
  3246  001C                     	;# 
  3247  001D                     	;# 
  3248  001E                     	;# 
  3249  001F                     	;# 
  3250  008C                     	;# 
  3251  008D                     	;# 
  3252  008E                     	;# 
  3253  0090                     	;# 
  3254  0091                     	;# 
  3255  0092                     	;# 
  3256  0093                     	;# 
  3257  0094                     	;# 
  3258  0097                     	;# 
  3259  009B                     	;# 
  3260  009B                     	;# 
  3261  009C                     	;# 
  3262  009D                     	;# 
  3263  009E                     	;# 
  3264  009F                     	;# 
  3265  010C                     	;# 
  3266  010D                     	;# 
  3267  010E                     	;# 
  3268  0111                     	;# 
  3269  0112                     	;# 
  3270  0113                     	;# 
  3271  0114                     	;# 
  3272  0115                     	;# 
  3273  0116                     	;# 
  3274  0117                     	;# 
  3275  0118                     	;# 
  3276  0119                     	;# 
  3277  018C                     	;# 
  3278  018D                     	;# 
  3279  018E                     	;# 
  3280  0197                     	;# 
  3281  0199                     	;# 
  3282  0199                     	;# 
  3283  0199                     	;# 
  3284  019A                     	;# 
  3285  019A                     	;# 
  3286  019A                     	;# 
  3287  019B                     	;# 
  3288  019B                     	;# 
  3289  019B                     	;# 
  3290  019B                     	;# 
  3291  019B                     	;# 
  3292  019C                     	;# 
  3293  019C                     	;# 
  3294  019C                     	;# 
  3295  019D                     	;# 
  3296  019D                     	;# 
  3297  019D                     	;# 
  3298  019E                     	;# 
  3299  019E                     	;# 
  3300  019E                     	;# 
  3301  019F                     	;# 
  3302  019F                     	;# 
  3303  019F                     	;# 
  3304  019F                     	;# 
  3305  019F                     	;# 
  3306  020C                     	;# 
  3307  020D                     	;# 
  3308  020E                     	;# 
  3309  0211                     	;# 
  3310  0211                     	;# 
  3311  0212                     	;# 
  3312  0212                     	;# 
  3313  0213                     	;# 
  3314  0213                     	;# 
  3315  0214                     	;# 
  3316  0214                     	;# 
  3317  0215                     	;# 
  3318  0215                     	;# 
  3319  0215                     	;# 
  3320  0215                     	;# 
  3321  0216                     	;# 
  3322  0216                     	;# 
  3323  0217                     	;# 
  3324  0217                     	;# 
  3325  028C                     	;# 
  3326  028D                     	;# 
  3327  028E                     	;# 
  3328  0291                     	;# 
  3329  0291                     	;# 
  3330  0292                     	;# 
  3331  0293                     	;# 
  3332  0294                     	;# 
  3333  0295                     	;# 
  3334  0295                     	;# 
  3335  0296                     	;# 
  3336  0297                     	;# 
  3337  0298                     	;# 
  3338  029F                     	;# 
  3339  030C                     	;# 
  3340  030D                     	;# 
  3341  030E                     	;# 
  3342  0311                     	;# 
  3343  0311                     	;# 
  3344  0312                     	;# 
  3345  0313                     	;# 
  3346  0314                     	;# 
  3347  0315                     	;# 
  3348  0315                     	;# 
  3349  0316                     	;# 
  3350  0317                     	;# 
  3351  0318                     	;# 
  3352  038C                     	;# 
  3353  038D                     	;# 
  3354  038E                     	;# 
  3355  0391                     	;# 
  3356  0392                     	;# 
  3357  0393                     	;# 
  3358  0394                     	;# 
  3359  0395                     	;# 
  3360  0396                     	;# 
  3361  0397                     	;# 
  3362  0398                     	;# 
  3363  0399                     	;# 
  3364  039A                     	;# 
  3365  039C                     	;# 
  3366  039D                     	;# 
  3367  039E                     	;# 
  3368  039F                     	;# 
  3369  0411                     	;# 
  3370  0411                     	;# 
  3371  0412                     	;# 
  3372  0413                     	;# 
  3373  0414                     	;# 
  3374  0415                     	;# 
  3375  0416                     	;# 
  3376  0417                     	;# 
  3377  0418                     	;# 
  3378  0418                     	;# 
  3379  0419                     	;# 
  3380  041A                     	;# 
  3381  041B                     	;# 
  3382  041C                     	;# 
  3383  041D                     	;# 
  3384  041E                     	;# 
  3385  041F                     	;# 
  3386  0498                     	;# 
  3387  0498                     	;# 
  3388  0499                     	;# 
  3389  049A                     	;# 
  3390  049B                     	;# 
  3391  049B                     	;# 
  3392  049C                     	;# 
  3393  049D                     	;# 
  3394  049E                     	;# 
  3395  049F                     	;# 
  3396  0617                     	;# 
  3397  0618                     	;# 
  3398  0619                     	;# 
  3399  0619                     	;# 
  3400  061A                     	;# 
  3401  061B                     	;# 
  3402  061C                     	;# 
  3403  061C                     	;# 
  3404  061F                     	;# 
  3405  0691                     	;# 
  3406  0692                     	;# 
  3407  0693                     	;# 
  3408  0694                     	;# 
  3409  0695                     	;# 
  3410  0696                     	;# 
  3411  0697                     	;# 
  3412  0698                     	;# 
  3413  0699                     	;# 
  3414  0711                     	;# 
  3415  0712                     	;# 
  3416  0713                     	;# 
  3417  0714                     	;# 
  3418  0715                     	;# 
  3419  0716                     	;# 
  3420  0717                     	;# 
  3421  0718                     	;# 
  3422  0719                     	;# 
  3423  0891                     	;# 
  3424  0891                     	;# 
  3425  0891                     	;# 
  3426  0891                     	;# 
  3427  0891                     	;# 
  3428  0891                     	;# 
  3429  0892                     	;# 
  3430  0892                     	;# 
  3431  0892                     	;# 
  3432  0893                     	;# 
  3433  0893                     	;# 
  3434  0893                     	;# 
  3435  0893                     	;# 
  3436  0893                     	;# 
  3437  0893                     	;# 
  3438  0894                     	;# 
  3439  0894                     	;# 
  3440  0894                     	;# 
  3441  0895                     	;# 
  3442  0895                     	;# 
  3443  0895                     	;# 
  3444  0896                     	;# 
  3445  0896                     	;# 
  3446  0896                     	;# 
  3447  089B                     	;# 
  3448  0911                     	;# 
  3449  0912                     	;# 
  3450  0913                     	;# 
  3451  0914                     	;# 
  3452  0915                     	;# 
  3453  0916                     	;# 
  3454  0918                     	;# 
  3455  0919                     	;# 
  3456  091A                     	;# 
  3457  091B                     	;# 
  3458  091C                     	;# 
  3459  091D                     	;# 
  3460  091E                     	;# 
  3461  091F                     	;# 
  3462  0E0F                     	;# 
  3463  0E10                     	;# 
  3464  0E11                     	;# 
  3465  0E12                     	;# 
  3466  0E13                     	;# 
  3467  0E14                     	;# 
  3468  0E15                     	;# 
  3469  0E16                     	;# 
  3470  0E17                     	;# 
  3471  0E18                     	;# 
  3472  0E19                     	;# 
  3473  0E1A                     	;# 
  3474  0E1B                     	;# 
  3475  0E1C                     	;# 
  3476  0E20                     	;# 
  3477  0E21                     	;# 
  3478  0E22                     	;# 
  3479  0E24                     	;# 
  3480  0E25                     	;# 
  3481  0E28                     	;# 
  3482  0E29                     	;# 
  3483  0E2A                     	;# 
  3484  0E2B                     	;# 
  3485  0E2C                     	;# 
  3486  0E2D                     	;# 
  3487  0E2E                     	;# 
  3488  0E2F                     	;# 
  3489  0E90                     	;# 
  3490  0E91                     	;# 
  3491  0E92                     	;# 
  3492  0E94                     	;# 
  3493  0E95                     	;# 
  3494  0E9C                     	;# 
  3495  0E9D                     	;# 
  3496  0E9E                     	;# 
  3497  0E9F                     	;# 
  3498  0EA0                     	;# 
  3499  0EA1                     	;# 
  3500  0EA2                     	;# 
  3501  0EA3                     	;# 
  3502  0EA4                     	;# 
  3503  0EA5                     	;# 
  3504  0EA6                     	;# 
  3505  0EA7                     	;# 
  3506  0F0F                     	;# 
  3507  0F10                     	;# 
  3508  0F11                     	;# 
  3509  0F12                     	;# 
  3510  0F13                     	;# 
  3511  0F14                     	;# 
  3512  0F15                     	;# 
  3513  0F16                     	;# 
  3514  0F17                     	;# 
  3515  0F18                     	;# 
  3516  0F19                     	;# 
  3517  0F1A                     	;# 
  3518  0F1B                     	;# 
  3519  0F1C                     	;# 
  3520  0F1D                     	;# 
  3521  0F1E                     	;# 
  3522  0F1F                     	;# 
  3523  0F20                     	;# 
  3524  0F21                     	;# 
  3525  0F22                     	;# 
  3526  0F23                     	;# 
  3527  0F24                     	;# 
  3528  0F25                     	;# 
  3529  0F26                     	;# 
  3530  0F27                     	;# 
  3531  0F28                     	;# 
  3532  0F29                     	;# 
  3533  0F2A                     	;# 
  3534  0F2B                     	;# 
  3535  0F2C                     	;# 
  3536  0F2D                     	;# 
  3537  0F2E                     	;# 
  3538  0F2F                     	;# 
  3539  0F30                     	;# 
  3540  0F31                     	;# 
  3541  0F32                     	;# 
  3542  0F33                     	;# 
  3543  0F34                     	;# 
  3544  0F35                     	;# 
  3545  0F36                     	;# 
  3546  0F37                     	;# 
  3547  0FE4                     	;# 
  3548  0FE5                     	;# 
  3549  0FE6                     	;# 
  3550  0FE7                     	;# 
  3551  0FE8                     	;# 
  3552  0FE9                     	;# 
  3553  0FEA                     	;# 
  3554  0FEB                     	;# 
  3555  0FED                     	;# 
  3556  0FEE                     	;# 
  3557  0FEF                     	;# 
  3558  0000                     	;# 
  3559  0001                     	;# 
  3560  0002                     	;# 
  3561  0003                     	;# 
  3562  0004                     	;# 
  3563  0005                     	;# 
  3564  0006                     	;# 
  3565  0007                     	;# 
  3566  0008                     	;# 
  3567  0009                     	;# 
  3568  000A                     	;# 
  3569  000B                     	;# 
  3570  000C                     	;# 
  3571  000D                     	;# 
  3572  000E                     	;# 
  3573  0010                     	;# 
  3574  0011                     	;# 
  3575  0012                     	;# 
  3576  0013                     	;# 
  3577  0014                     	;# 
  3578  0015                     	;# 
  3579  0015                     	;# 
  3580  0016                     	;# 
  3581  0016                     	;# 
  3582  0017                     	;# 
  3583  0018                     	;# 
  3584  0019                     	;# 
  3585  0019                     	;# 
  3586  001A                     	;# 
  3587  001B                     	;# 
  3588  001C                     	;# 
  3589  001D                     	;# 
  3590  001E                     	;# 
  3591  001F                     	;# 
  3592  008C                     	;# 
  3593  008D                     	;# 
  3594  008E                     	;# 
  3595  0090                     	;# 
  3596  0091                     	;# 
  3597  0092                     	;# 
  3598  0093                     	;# 
  3599  0094                     	;# 
  3600  0097                     	;# 
  3601  009B                     	;# 
  3602  009B                     	;# 
  3603  009C                     	;# 
  3604  009D                     	;# 
  3605  009E                     	;# 
  3606  009F                     	;# 
  3607  010C                     	;# 
  3608  010D                     	;# 
  3609  010E                     	;# 
  3610  0111                     	;# 
  3611  0112                     	;# 
  3612  0113                     	;# 
  3613  0114                     	;# 
  3614  0115                     	;# 
  3615  0116                     	;# 
  3616  0117                     	;# 
  3617  0118                     	;# 
  3618  0119                     	;# 
  3619  018C                     	;# 
  3620  018D                     	;# 
  3621  018E                     	;# 
  3622  0197                     	;# 
  3623  0199                     	;# 
  3624  0199                     	;# 
  3625  0199                     	;# 
  3626  019A                     	;# 
  3627  019A                     	;# 
  3628  019A                     	;# 
  3629  019B                     	;# 
  3630  019B                     	;# 
  3631  019B                     	;# 
  3632  019B                     	;# 
  3633  019B                     	;# 
  3634  019C                     	;# 
  3635  019C                     	;# 
  3636  019C                     	;# 
  3637  019D                     	;# 
  3638  019D                     	;# 
  3639  019D                     	;# 
  3640  019E                     	;# 
  3641  019E                     	;# 
  3642  019E                     	;# 
  3643  019F                     	;# 
  3644  019F                     	;# 
  3645  019F                     	;# 
  3646  019F                     	;# 
  3647  019F                     	;# 
  3648  020C                     	;# 
  3649  020D                     	;# 
  3650  020E                     	;# 
  3651  0211                     	;# 
  3652  0211                     	;# 
  3653  0212                     	;# 
  3654  0212                     	;# 
  3655  0213                     	;# 
  3656  0213                     	;# 
  3657  0214                     	;# 
  3658  0214                     	;# 
  3659  0215                     	;# 
  3660  0215                     	;# 
  3661  0215                     	;# 
  3662  0215                     	;# 
  3663  0216                     	;# 
  3664  0216                     	;# 
  3665  0217                     	;# 
  3666  0217                     	;# 
  3667  028C                     	;# 
  3668  028D                     	;# 
  3669  028E                     	;# 
  3670  0291                     	;# 
  3671  0291                     	;# 
  3672  0292                     	;# 
  3673  0293                     	;# 
  3674  0294                     	;# 
  3675  0295                     	;# 
  3676  0295                     	;# 
  3677  0296                     	;# 
  3678  0297                     	;# 
  3679  0298                     	;# 
  3680  029F                     	;# 
  3681  030C                     	;# 
  3682  030D                     	;# 
  3683  030E                     	;# 
  3684  0311                     	;# 
  3685  0311                     	;# 
  3686  0312                     	;# 
  3687  0313                     	;# 
  3688  0314                     	;# 
  3689  0315                     	;# 
  3690  0315                     	;# 
  3691  0316                     	;# 
  3692  0317                     	;# 
  3693  0318                     	;# 
  3694  038C                     	;# 
  3695  038D                     	;# 
  3696  038E                     	;# 
  3697  0391                     	;# 
  3698  0392                     	;# 
  3699  0393                     	;# 
  3700  0394                     	;# 
  3701  0395                     	;# 
  3702  0396                     	;# 
  3703  0397                     	;# 
  3704  0398                     	;# 
  3705  0399                     	;# 
  3706  039A                     	;# 
  3707  039C                     	;# 
  3708  039D                     	;# 
  3709  039E                     	;# 
  3710  039F                     	;# 
  3711  0411                     	;# 
  3712  0411                     	;# 
  3713  0412                     	;# 
  3714  0413                     	;# 
  3715  0414                     	;# 
  3716  0415                     	;# 
  3717  0416                     	;# 
  3718  0417                     	;# 
  3719  0418                     	;# 
  3720  0418                     	;# 
  3721  0419                     	;# 
  3722  041A                     	;# 
  3723  041B                     	;# 
  3724  041C                     	;# 
  3725  041D                     	;# 
  3726  041E                     	;# 
  3727  041F                     	;# 
  3728  0498                     	;# 
  3729  0498                     	;# 
  3730  0499                     	;# 
  3731  049A                     	;# 
  3732  049B                     	;# 
  3733  049B                     	;# 
  3734  049C                     	;# 
  3735  049D                     	;# 
  3736  049E                     	;# 
  3737  049F                     	;# 
  3738  0617                     	;# 
  3739  0618                     	;# 
  3740  0619                     	;# 
  3741  0619                     	;# 
  3742  061A                     	;# 
  3743  061B                     	;# 
  3744  061C                     	;# 
  3745  061C                     	;# 
  3746  061F                     	;# 
  3747  0691                     	;# 
  3748  0692                     	;# 
  3749  0693                     	;# 
  3750  0694                     	;# 
  3751  0695                     	;# 
  3752  0696                     	;# 
  3753  0697                     	;# 
  3754  0698                     	;# 
  3755  0699                     	;# 
  3756  0711                     	;# 
  3757  0712                     	;# 
  3758  0713                     	;# 
  3759  0714                     	;# 
  3760  0715                     	;# 
  3761  0716                     	;# 
  3762  0717                     	;# 
  3763  0718                     	;# 
  3764  0719                     	;# 
  3765  0891                     	;# 
  3766  0891                     	;# 
  3767  0891                     	;# 
  3768  0891                     	;# 
  3769  0891                     	;# 
  3770  0891                     	;# 
  3771  0892                     	;# 
  3772  0892                     	;# 
  3773  0892                     	;# 
  3774  0893                     	;# 
  3775  0893                     	;# 
  3776  0893                     	;# 
  3777  0893                     	;# 
  3778  0893                     	;# 
  3779  0893                     	;# 
  3780  0894                     	;# 
  3781  0894                     	;# 
  3782  0894                     	;# 
  3783  0895                     	;# 
  3784  0895                     	;# 
  3785  0895                     	;# 
  3786  0896                     	;# 
  3787  0896                     	;# 
  3788  0896                     	;# 
  3789  089B                     	;# 
  3790  0911                     	;# 
  3791  0912                     	;# 
  3792  0913                     	;# 
  3793  0914                     	;# 
  3794  0915                     	;# 
  3795  0916                     	;# 
  3796  0918                     	;# 
  3797  0919                     	;# 
  3798  091A                     	;# 
  3799  091B                     	;# 
  3800  091C                     	;# 
  3801  091D                     	;# 
  3802  091E                     	;# 
  3803  091F                     	;# 
  3804  0E0F                     	;# 
  3805  0E10                     	;# 
  3806  0E11                     	;# 
  3807  0E12                     	;# 
  3808  0E13                     	;# 
  3809  0E14                     	;# 
  3810  0E15                     	;# 
  3811  0E16                     	;# 
  3812  0E17                     	;# 
  3813  0E18                     	;# 
  3814  0E19                     	;# 
  3815  0E1A                     	;# 
  3816  0E1B                     	;# 
  3817  0E1C                     	;# 
  3818  0E20                     	;# 
  3819  0E21                     	;# 
  3820  0E22                     	;# 
  3821  0E24                     	;# 
  3822  0E25                     	;# 
  3823  0E28                     	;# 
  3824  0E29                     	;# 
  3825  0E2A                     	;# 
  3826  0E2B                     	;# 
  3827  0E2C                     	;# 
  3828  0E2D                     	;# 
  3829  0E2E                     	;# 
  3830  0E2F                     	;# 
  3831  0E90                     	;# 
  3832  0E91                     	;# 
  3833  0E92                     	;# 
  3834  0E94                     	;# 
  3835  0E95                     	;# 
  3836  0E9C                     	;# 
  3837  0E9D                     	;# 
  3838  0E9E                     	;# 
  3839  0E9F                     	;# 
  3840  0EA0                     	;# 
  3841  0EA1                     	;# 
  3842  0EA2                     	;# 
  3843  0EA3                     	;# 
  3844  0EA4                     	;# 
  3845  0EA5                     	;# 
  3846  0EA6                     	;# 
  3847  0EA7                     	;# 
  3848  0F0F                     	;# 
  3849  0F10                     	;# 
  3850  0F11                     	;# 
  3851  0F12                     	;# 
  3852  0F13                     	;# 
  3853  0F14                     	;# 
  3854  0F15                     	;# 
  3855  0F16                     	;# 
  3856  0F17                     	;# 
  3857  0F18                     	;# 
  3858  0F19                     	;# 
  3859  0F1A                     	;# 
  3860  0F1B                     	;# 
  3861  0F1C                     	;# 
  3862  0F1D                     	;# 
  3863  0F1E                     	;# 
  3864  0F1F                     	;# 
  3865  0F20                     	;# 
  3866  0F21                     	;# 
  3867  0F22                     	;# 
  3868  0F23                     	;# 
  3869  0F24                     	;# 
  3870  0F25                     	;# 
  3871  0F26                     	;# 
  3872  0F27                     	;# 
  3873  0F28                     	;# 
  3874  0F29                     	;# 
  3875  0F2A                     	;# 
  3876  0F2B                     	;# 
  3877  0F2C                     	;# 
  3878  0F2D                     	;# 
  3879  0F2E                     	;# 
  3880  0F2F                     	;# 
  3881  0F30                     	;# 
  3882  0F31                     	;# 
  3883  0F32                     	;# 
  3884  0F33                     	;# 
  3885  0F34                     	;# 
  3886  0F35                     	;# 
  3887  0F36                     	;# 
  3888  0F37                     	;# 
  3889  0FE4                     	;# 
  3890  0FE5                     	;# 
  3891  0FE6                     	;# 
  3892  0FE7                     	;# 
  3893  0FE8                     	;# 
  3894  0FE9                     	;# 
  3895  0FEA                     	;# 
  3896  0FEB                     	;# 
  3897  0FED                     	;# 
  3898  0FEE                     	;# 
  3899  0FEF                     	;# 
  3900  0000                     	;# 
  3901  0001                     	;# 
  3902  0002                     	;# 
  3903  0003                     	;# 
  3904  0004                     	;# 
  3905  0005                     	;# 
  3906  0006                     	;# 
  3907  0007                     	;# 
  3908  0008                     	;# 
  3909  0009                     	;# 
  3910  000A                     	;# 
  3911  000B                     	;# 
  3912  000C                     	;# 
  3913  000D                     	;# 
  3914  000E                     	;# 
  3915  0010                     	;# 
  3916  0011                     	;# 
  3917  0012                     	;# 
  3918  0013                     	;# 
  3919  0014                     	;# 
  3920  0015                     	;# 
  3921  0015                     	;# 
  3922  0016                     	;# 
  3923  0016                     	;# 
  3924  0017                     	;# 
  3925  0018                     	;# 
  3926  0019                     	;# 
  3927  0019                     	;# 
  3928  001A                     	;# 
  3929  001B                     	;# 
  3930  001C                     	;# 
  3931  001D                     	;# 
  3932  001E                     	;# 
  3933  001F                     	;# 
  3934  008C                     	;# 
  3935  008D                     	;# 
  3936  008E                     	;# 
  3937  0090                     	;# 
  3938  0091                     	;# 
  3939  0092                     	;# 
  3940  0093                     	;# 
  3941  0094                     	;# 
  3942  0097                     	;# 
  3943  009B                     	;# 
  3944  009B                     	;# 
  3945  009C                     	;# 
  3946  009D                     	;# 
  3947  009E                     	;# 
  3948  009F                     	;# 
  3949  010C                     	;# 
  3950  010D                     	;# 
  3951  010E                     	;# 
  3952  0111                     	;# 
  3953  0112                     	;# 
  3954  0113                     	;# 
  3955  0114                     	;# 
  3956  0115                     	;# 
  3957  0116                     	;# 
  3958  0117                     	;# 
  3959  0118                     	;# 
  3960  0119                     	;# 
  3961  018C                     	;# 
  3962  018D                     	;# 
  3963  018E                     	;# 
  3964  0197                     	;# 
  3965  0199                     	;# 
  3966  0199                     	;# 
  3967  0199                     	;# 
  3968  019A                     	;# 
  3969  019A                     	;# 
  3970  019A                     	;# 
  3971  019B                     	;# 
  3972  019B                     	;# 
  3973  019B                     	;# 
  3974  019B                     	;# 
  3975  019B                     	;# 
  3976  019C                     	;# 
  3977  019C                     	;# 
  3978  019C                     	;# 
  3979  019D                     	;# 
  3980  019D                     	;# 
  3981  019D                     	;# 
  3982  019E                     	;# 
  3983  019E                     	;# 
  3984  019E                     	;# 
  3985  019F                     	;# 
  3986  019F                     	;# 
  3987  019F                     	;# 
  3988  019F                     	;# 
  3989  019F                     	;# 
  3990  020C                     	;# 
  3991  020D                     	;# 
  3992  020E                     	;# 
  3993  0211                     	;# 
  3994  0211                     	;# 
  3995  0212                     	;# 
  3996  0212                     	;# 
  3997  0213                     	;# 
  3998  0213                     	;# 
  3999  0214                     	;# 
  4000  0214                     	;# 
  4001  0215                     	;# 
  4002  0215                     	;# 
  4003  0215                     	;# 
  4004  0215                     	;# 
  4005  0216                     	;# 
  4006  0216                     	;# 
  4007  0217                     	;# 
  4008  0217                     	;# 
  4009  028C                     	;# 
  4010  028D                     	;# 
  4011  028E                     	;# 
  4012  0291                     	;# 
  4013  0291                     	;# 
  4014  0292                     	;# 
  4015  0293                     	;# 
  4016  0294                     	;# 
  4017  0295                     	;# 
  4018  0295                     	;# 
  4019  0296                     	;# 
  4020  0297                     	;# 
  4021  0298                     	;# 
  4022  029F                     	;# 
  4023  030C                     	;# 
  4024  030D                     	;# 
  4025  030E                     	;# 
  4026  0311                     	;# 
  4027  0311                     	;# 
  4028  0312                     	;# 
  4029  0313                     	;# 
  4030  0314                     	;# 
  4031  0315                     	;# 
  4032  0315                     	;# 
  4033  0316                     	;# 
  4034  0317                     	;# 
  4035  0318                     	;# 
  4036  038C                     	;# 
  4037  038D                     	;# 
  4038  038E                     	;# 
  4039  0391                     	;# 
  4040  0392                     	;# 
  4041  0393                     	;# 
  4042  0394                     	;# 
  4043  0395                     	;# 
  4044  0396                     	;# 
  4045  0397                     	;# 
  4046  0398                     	;# 
  4047  0399                     	;# 
  4048  039A                     	;# 
  4049  039C                     	;# 
  4050  039D                     	;# 
  4051  039E                     	;# 
  4052  039F                     	;# 
  4053  0411                     	;# 
  4054  0411                     	;# 
  4055  0412                     	;# 
  4056  0413                     	;# 
  4057  0414                     	;# 
  4058  0415                     	;# 
  4059  0416                     	;# 
  4060  0417                     	;# 
  4061  0418                     	;# 
  4062  0418                     	;# 
  4063  0419                     	;# 
  4064  041A                     	;# 
  4065  041B                     	;# 
  4066  041C                     	;# 
  4067  041D                     	;# 
  4068  041E                     	;# 
  4069  041F                     	;# 
  4070  0498                     	;# 
  4071  0498                     	;# 
  4072  0499                     	;# 
  4073  049A                     	;# 
  4074  049B                     	;# 
  4075  049B                     	;# 
  4076  049C                     	;# 
  4077  049D                     	;# 
  4078  049E                     	;# 
  4079  049F                     	;# 
  4080  0617                     	;# 
  4081  0618                     	;# 
  4082  0619                     	;# 
  4083  0619                     	;# 
  4084  061A                     	;# 
  4085  061B                     	;# 
  4086  061C                     	;# 
  4087  061C                     	;# 
  4088  061F                     	;# 
  4089  0691                     	;# 
  4090  0692                     	;# 
  4091  0693                     	;# 
  4092  0694                     	;# 
  4093  0695                     	;# 
  4094  0696                     	;# 
  4095  0697                     	;# 
  4096  0698                     	;# 
  4097  0699                     	;# 
  4098  0711                     	;# 
  4099  0712                     	;# 
  4100  0713                     	;# 
  4101  0714                     	;# 
  4102  0715                     	;# 
  4103  0716                     	;# 
  4104  0717                     	;# 
  4105  0718                     	;# 
  4106  0719                     	;# 
  4107  0891                     	;# 
  4108  0891                     	;# 
  4109  0891                     	;# 
  4110  0891                     	;# 
  4111  0891                     	;# 
  4112  0891                     	;# 
  4113  0892                     	;# 
  4114  0892                     	;# 
  4115  0892                     	;# 
  4116  0893                     	;# 
  4117  0893                     	;# 
  4118  0893                     	;# 
  4119  0893                     	;# 
  4120  0893                     	;# 
  4121  0893                     	;# 
  4122  0894                     	;# 
  4123  0894                     	;# 
  4124  0894                     	;# 
  4125  0895                     	;# 
  4126  0895                     	;# 
  4127  0895                     	;# 
  4128  0896                     	;# 
  4129  0896                     	;# 
  4130  0896                     	;# 
  4131  089B                     	;# 
  4132  0911                     	;# 
  4133  0912                     	;# 
  4134  0913                     	;# 
  4135  0914                     	;# 
  4136  0915                     	;# 
  4137  0916                     	;# 
  4138  0918                     	;# 
  4139  0919                     	;# 
  4140  091A                     	;# 
  4141  091B                     	;# 
  4142  091C                     	;# 
  4143  091D                     	;# 
  4144  091E                     	;# 
  4145  091F                     	;# 
  4146  0E0F                     	;# 
  4147  0E10                     	;# 
  4148  0E11                     	;# 
  4149  0E12                     	;# 
  4150  0E13                     	;# 
  4151  0E14                     	;# 
  4152  0E15                     	;# 
  4153  0E16                     	;# 
  4154  0E17                     	;# 
  4155  0E18                     	;# 
  4156  0E19                     	;# 
  4157  0E1A                     	;# 
  4158  0E1B                     	;# 
  4159  0E1C                     	;# 
  4160  0E20                     	;# 
  4161  0E21                     	;# 
  4162  0E22                     	;# 
  4163  0E24                     	;# 
  4164  0E25                     	;# 
  4165  0E28                     	;# 
  4166  0E29                     	;# 
  4167  0E2A                     	;# 
  4168  0E2B                     	;# 
  4169  0E2C                     	;# 
  4170  0E2D                     	;# 
  4171  0E2E                     	;# 
  4172  0E2F                     	;# 
  4173  0E90                     	;# 
  4174  0E91                     	;# 
  4175  0E92                     	;# 
  4176  0E94                     	;# 
  4177  0E95                     	;# 
  4178  0E9C                     	;# 
  4179  0E9D                     	;# 
  4180  0E9E                     	;# 
  4181  0E9F                     	;# 
  4182  0EA0                     	;# 
  4183  0EA1                     	;# 
  4184  0EA2                     	;# 
  4185  0EA3                     	;# 
  4186  0EA4                     	;# 
  4187  0EA5                     	;# 
  4188  0EA6                     	;# 
  4189  0EA7                     	;# 
  4190  0F0F                     	;# 
  4191  0F10                     	;# 
  4192  0F11                     	;# 
  4193  0F12                     	;# 
  4194  0F13                     	;# 
  4195  0F14                     	;# 
  4196  0F15                     	;# 
  4197  0F16                     	;# 
  4198  0F17                     	;# 
  4199  0F18                     	;# 
  4200  0F19                     	;# 
  4201  0F1A                     	;# 
  4202  0F1B                     	;# 
  4203  0F1C                     	;# 
  4204  0F1D                     	;# 
  4205  0F1E                     	;# 
  4206  0F1F                     	;# 
  4207  0F20                     	;# 
  4208  0F21                     	;# 
  4209  0F22                     	;# 
  4210  0F23                     	;# 
  4211  0F24                     	;# 
  4212  0F25                     	;# 
  4213  0F26                     	;# 
  4214  0F27                     	;# 
  4215  0F28                     	;# 
  4216  0F29                     	;# 
  4217  0F2A                     	;# 
  4218  0F2B                     	;# 
  4219  0F2C                     	;# 
  4220  0F2D                     	;# 
  4221  0F2E                     	;# 
  4222  0F2F                     	;# 
  4223  0F30                     	;# 
  4224  0F31                     	;# 
  4225  0F32                     	;# 
  4226  0F33                     	;# 
  4227  0F34                     	;# 
  4228  0F35                     	;# 
  4229  0F36                     	;# 
  4230  0F37                     	;# 
  4231  0FE4                     	;# 
  4232  0FE5                     	;# 
  4233  0FE6                     	;# 
  4234  0FE7                     	;# 
  4235  0FE8                     	;# 
  4236  0FE9                     	;# 
  4237  0FEA                     	;# 
  4238  0FEB                     	;# 
  4239  0FED                     	;# 
  4240  0FEE                     	;# 
  4241  0FEF                     	;# 
  4242  0000                     	;# 
  4243  0001                     	;# 
  4244  0002                     	;# 
  4245  0003                     	;# 
  4246  0004                     	;# 
  4247  0005                     	;# 
  4248  0006                     	;# 
  4249  0007                     	;# 
  4250  0008                     	;# 
  4251  0009                     	;# 
  4252  000A                     	;# 
  4253  000B                     	;# 
  4254  000C                     	;# 
  4255  000D                     	;# 
  4256  000E                     	;# 
  4257  0010                     	;# 
  4258  0011                     	;# 
  4259  0012                     	;# 
  4260  0013                     	;# 
  4261  0014                     	;# 
  4262  0015                     	;# 
  4263  0015                     	;# 
  4264  0016                     	;# 
  4265  0016                     	;# 
  4266  0017                     	;# 
  4267  0018                     	;# 
  4268  0019                     	;# 
  4269  0019                     	;# 
  4270  001A                     	;# 
  4271  001B                     	;# 
  4272  001C                     	;# 
  4273  001D                     	;# 
  4274  001E                     	;# 
  4275  001F                     	;# 
  4276  008C                     	;# 
  4277  008D                     	;# 
  4278  008E                     	;# 
  4279  0090                     	;# 
  4280  0091                     	;# 
  4281  0092                     	;# 
  4282  0093                     	;# 
  4283  0094                     	;# 
  4284  0097                     	;# 
  4285  009B                     	;# 
  4286  009B                     	;# 
  4287  009C                     	;# 
  4288  009D                     	;# 
  4289  009E                     	;# 
  4290  009F                     	;# 
  4291  010C                     	;# 
  4292  010D                     	;# 
  4293  010E                     	;# 
  4294  0111                     	;# 
  4295  0112                     	;# 
  4296  0113                     	;# 
  4297  0114                     	;# 
  4298  0115                     	;# 
  4299  0116                     	;# 
  4300  0117                     	;# 
  4301  0118                     	;# 
  4302  0119                     	;# 
  4303  018C                     	;# 
  4304  018D                     	;# 
  4305  018E                     	;# 
  4306  0197                     	;# 
  4307  0199                     	;# 
  4308  0199                     	;# 
  4309  0199                     	;# 
  4310  019A                     	;# 
  4311  019A                     	;# 
  4312  019A                     	;# 
  4313  019B                     	;# 
  4314  019B                     	;# 
  4315  019B                     	;# 
  4316  019B                     	;# 
  4317  019B                     	;# 
  4318  019C                     	;# 
  4319  019C                     	;# 
  4320  019C                     	;# 
  4321  019D                     	;# 
  4322  019D                     	;# 
  4323  019D                     	;# 
  4324  019E                     	;# 
  4325  019E                     	;# 
  4326  019E                     	;# 
  4327  019F                     	;# 
  4328  019F                     	;# 
  4329  019F                     	;# 
  4330  019F                     	;# 
  4331  019F                     	;# 
  4332  020C                     	;# 
  4333  020D                     	;# 
  4334  020E                     	;# 
  4335  0211                     	;# 
  4336  0211                     	;# 
  4337  0212                     	;# 
  4338  0212                     	;# 
  4339  0213                     	;# 
  4340  0213                     	;# 
  4341  0214                     	;# 
  4342  0214                     	;# 
  4343  0215                     	;# 
  4344  0215                     	;# 
  4345  0215                     	;# 
  4346  0215                     	;# 
  4347  0216                     	;# 
  4348  0216                     	;# 
  4349  0217                     	;# 
  4350  0217                     	;# 
  4351  028C                     	;# 
  4352  028D                     	;# 
  4353  028E                     	;# 
  4354  0291                     	;# 
  4355  0291                     	;# 
  4356  0292                     	;# 
  4357  0293                     	;# 
  4358  0294                     	;# 
  4359  0295                     	;# 
  4360  0295                     	;# 
  4361  0296                     	;# 
  4362  0297                     	;# 
  4363  0298                     	;# 
  4364  029F                     	;# 
  4365  030C                     	;# 
  4366  030D                     	;# 
  4367  030E                     	;# 
  4368  0311                     	;# 
  4369  0311                     	;# 
  4370  0312                     	;# 
  4371  0313                     	;# 
  4372  0314                     	;# 
  4373  0315                     	;# 
  4374  0315                     	;# 
  4375  0316                     	;# 
  4376  0317                     	;# 
  4377  0318                     	;# 
  4378  038C                     	;# 
  4379  038D                     	;# 
  4380  038E                     	;# 
  4381  0391                     	;# 
  4382  0392                     	;# 
  4383  0393                     	;# 
  4384  0394                     	;# 
  4385  0395                     	;# 
  4386  0396                     	;# 
  4387  0397                     	;# 
  4388  0398                     	;# 
  4389  0399                     	;# 
  4390  039A                     	;# 
  4391  039C                     	;# 
  4392  039D                     	;# 
  4393  039E                     	;# 
  4394  039F                     	;# 
  4395  0411                     	;# 
  4396  0411                     	;# 
  4397  0412                     	;# 
  4398  0413                     	;# 
  4399  0414                     	;# 
  4400  0415                     	;# 
  4401  0416                     	;# 
  4402  0417                     	;# 
  4403  0418                     	;# 
  4404  0418                     	;# 
  4405  0419                     	;# 
  4406  041A                     	;# 
  4407  041B                     	;# 
  4408  041C                     	;# 
  4409  041D                     	;# 
  4410  041E                     	;# 
  4411  041F                     	;# 
  4412  0498                     	;# 
  4413  0498                     	;# 
  4414  0499                     	;# 
  4415  049A                     	;# 
  4416  049B                     	;# 
  4417  049B                     	;# 
  4418  049C                     	;# 
  4419  049D                     	;# 
  4420  049E                     	;# 
  4421  049F                     	;# 
  4422  0617                     	;# 
  4423  0618                     	;# 
  4424  0619                     	;# 
  4425  0619                     	;# 
  4426  061A                     	;# 
  4427  061B                     	;# 
  4428  061C                     	;# 
  4429  061C                     	;# 
  4430  061F                     	;# 
  4431  0691                     	;# 
  4432  0692                     	;# 
  4433  0693                     	;# 
  4434  0694                     	;# 
  4435  0695                     	;# 
  4436  0696                     	;# 
  4437  0697                     	;# 
  4438  0698                     	;# 
  4439  0699                     	;# 
  4440  0711                     	;# 
  4441  0712                     	;# 
  4442  0713                     	;# 
  4443  0714                     	;# 
  4444  0715                     	;# 
  4445  0716                     	;# 
  4446  0717                     	;# 
  4447  0718                     	;# 
  4448  0719                     	;# 
  4449  0891                     	;# 
  4450  0891                     	;# 
  4451  0891                     	;# 
  4452  0891                     	;# 
  4453  0891                     	;# 
  4454  0891                     	;# 
  4455  0892                     	;# 
  4456  0892                     	;# 
  4457  0892                     	;# 
  4458  0893                     	;# 
  4459  0893                     	;# 
  4460  0893                     	;# 
  4461  0893                     	;# 
  4462  0893                     	;# 
  4463  0893                     	;# 
  4464  0894                     	;# 
  4465  0894                     	;# 
  4466  0894                     	;# 
  4467  0895                     	;# 
  4468  0895                     	;# 
  4469  0895                     	;# 
  4470  0896                     	;# 
  4471  0896                     	;# 
  4472  0896                     	;# 
  4473  089B                     	;# 
  4474  0911                     	;# 
  4475  0912                     	;# 
  4476  0913                     	;# 
  4477  0914                     	;# 
  4478  0915                     	;# 
  4479  0916                     	;# 
  4480  0918                     	;# 
  4481  0919                     	;# 
  4482  091A                     	;# 
  4483  091B                     	;# 
  4484  091C                     	;# 
  4485  091D                     	;# 
  4486  091E                     	;# 
  4487  091F                     	;# 
  4488  0E0F                     	;# 
  4489  0E10                     	;# 
  4490  0E11                     	;# 
  4491  0E12                     	;# 
  4492  0E13                     	;# 
  4493  0E14                     	;# 
  4494  0E15                     	;# 
  4495  0E16                     	;# 
  4496  0E17                     	;# 
  4497  0E18                     	;# 
  4498  0E19                     	;# 
  4499  0E1A                     	;# 
  4500  0E1B                     	;# 
  4501  0E1C                     	;# 
  4502  0E20                     	;# 
  4503  0E21                     	;# 
  4504  0E22                     	;# 
  4505  0E24                     	;# 
  4506  0E25                     	;# 
  4507  0E28                     	;# 
  4508  0E29                     	;# 
  4509  0E2A                     	;# 
  4510  0E2B                     	;# 
  4511  0E2C                     	;# 
  4512  0E2D                     	;# 
  4513  0E2E                     	;# 
  4514  0E2F                     	;# 
  4515  0E90                     	;# 
  4516  0E91                     	;# 
  4517  0E92                     	;# 
  4518  0E94                     	;# 
  4519  0E95                     	;# 
  4520  0E9C                     	;# 
  4521  0E9D                     	;# 
  4522  0E9E                     	;# 
  4523  0E9F                     	;# 
  4524  0EA0                     	;# 
  4525  0EA1                     	;# 
  4526  0EA2                     	;# 
  4527  0EA3                     	;# 
  4528  0EA4                     	;# 
  4529  0EA5                     	;# 
  4530  0EA6                     	;# 
  4531  0EA7                     	;# 
  4532  0F0F                     	;# 
  4533  0F10                     	;# 
  4534  0F11                     	;# 
  4535  0F12                     	;# 
  4536  0F13                     	;# 
  4537  0F14                     	;# 
  4538  0F15                     	;# 
  4539  0F16                     	;# 
  4540  0F17                     	;# 
  4541  0F18                     	;# 
  4542  0F19                     	;# 
  4543  0F1A                     	;# 
  4544  0F1B                     	;# 
  4545  0F1C                     	;# 
  4546  0F1D                     	;# 
  4547  0F1E                     	;# 
  4548  0F1F                     	;# 
  4549  0F20                     	;# 
  4550  0F21                     	;# 
  4551  0F22                     	;# 
  4552  0F23                     	;# 
  4553  0F24                     	;# 
  4554  0F25                     	;# 
  4555  0F26                     	;# 
  4556  0F27                     	;# 
  4557  0F28                     	;# 
  4558  0F29                     	;# 
  4559  0F2A                     	;# 
  4560  0F2B                     	;# 
  4561  0F2C                     	;# 
  4562  0F2D                     	;# 
  4563  0F2E                     	;# 
  4564  0F2F                     	;# 
  4565  0F30                     	;# 
  4566  0F31                     	;# 
  4567  0F32                     	;# 
  4568  0F33                     	;# 
  4569  0F34                     	;# 
  4570  0F35                     	;# 
  4571  0F36                     	;# 
  4572  0F37                     	;# 
  4573  0FE4                     	;# 
  4574  0FE5                     	;# 
  4575  0FE6                     	;# 
  4576  0FE7                     	;# 
  4577  0FE8                     	;# 
  4578  0FE9                     	;# 
  4579  0FEA                     	;# 
  4580  0FEB                     	;# 
  4581  0FED                     	;# 
  4582  0FEE                     	;# 
  4583  0FEF                     	;# 
  4584  0000                     	;# 
  4585  0001                     	;# 
  4586  0002                     	;# 
  4587  0003                     	;# 
  4588  0004                     	;# 
  4589  0005                     	;# 
  4590  0006                     	;# 
  4591  0007                     	;# 
  4592  0008                     	;# 
  4593  0009                     	;# 
  4594  000A                     	;# 
  4595  000B                     	;# 
  4596  000C                     	;# 
  4597  000D                     	;# 
  4598  000E                     	;# 
  4599  0010                     	;# 
  4600  0011                     	;# 
  4601  0012                     	;# 
  4602  0013                     	;# 
  4603  0014                     	;# 
  4604  0015                     	;# 
  4605  0015                     	;# 
  4606  0016                     	;# 
  4607  0016                     	;# 
  4608  0017                     	;# 
  4609  0018                     	;# 
  4610  0019                     	;# 
  4611  0019                     	;# 
  4612  001A                     	;# 
  4613  001B                     	;# 
  4614  001C                     	;# 
  4615  001D                     	;# 
  4616  001E                     	;# 
  4617  001F                     	;# 
  4618  008C                     	;# 
  4619  008D                     	;# 
  4620  008E                     	;# 
  4621  0090                     	;# 
  4622  0091                     	;# 
  4623  0092                     	;# 
  4624  0093                     	;# 
  4625  0094                     	;# 
  4626  0097                     	;# 
  4627  009B                     	;# 
  4628  009B                     	;# 
  4629  009C                     	;# 
  4630  009D                     	;# 
  4631  009E                     	;# 
  4632  009F                     	;# 
  4633  010C                     	;# 
  4634  010D                     	;# 
  4635  010E                     	;# 
  4636  0111                     	;# 
  4637  0112                     	;# 
  4638  0113                     	;# 
  4639  0114                     	;# 
  4640  0115                     	;# 
  4641  0116                     	;# 
  4642  0117                     	;# 
  4643  0118                     	;# 
  4644  0119                     	;# 
  4645  018C                     	;# 
  4646  018D                     	;# 
  4647  018E                     	;# 
  4648  0197                     	;# 
  4649  0199                     	;# 
  4650  0199                     	;# 
  4651  0199                     	;# 
  4652  019A                     	;# 
  4653  019A                     	;# 
  4654  019A                     	;# 
  4655  019B                     	;# 
  4656  019B                     	;# 
  4657  019B                     	;# 
  4658  019B                     	;# 
  4659  019B                     	;# 
  4660  019C                     	;# 
  4661  019C                     	;# 
  4662  019C                     	;# 
  4663  019D                     	;# 
  4664  019D                     	;# 
  4665  019D                     	;# 
  4666  019E                     	;# 
  4667  019E                     	;# 
  4668  019E                     	;# 
  4669  019F                     	;# 
  4670  019F                     	;# 
  4671  019F                     	;# 
  4672  019F                     	;# 
  4673  019F                     	;# 
  4674  020C                     	;# 
  4675  020D                     	;# 
  4676  020E                     	;# 
  4677  0211                     	;# 
  4678  0211                     	;# 
  4679  0212                     	;# 
  4680  0212                     	;# 
  4681  0213                     	;# 
  4682  0213                     	;# 
  4683  0214                     	;# 
  4684  0214                     	;# 
  4685  0215                     	;# 
  4686  0215                     	;# 
  4687  0215                     	;# 
  4688  0215                     	;# 
  4689  0216                     	;# 
  4690  0216                     	;# 
  4691  0217                     	;# 
  4692  0217                     	;# 
  4693  028C                     	;# 
  4694  028D                     	;# 
  4695  028E                     	;# 
  4696  0291                     	;# 
  4697  0291                     	;# 
  4698  0292                     	;# 
  4699  0293                     	;# 
  4700  0294                     	;# 
  4701  0295                     	;# 
  4702  0295                     	;# 
  4703  0296                     	;# 
  4704  0297                     	;# 
  4705  0298                     	;# 
  4706  029F                     	;# 
  4707  030C                     	;# 
  4708  030D                     	;# 
  4709  030E                     	;# 
  4710  0311                     	;# 
  4711  0311                     	;# 
  4712  0312                     	;# 
  4713  0313                     	;# 
  4714  0314                     	;# 
  4715  0315                     	;# 
  4716  0315                     	;# 
  4717  0316                     	;# 
  4718  0317                     	;# 
  4719  0318                     	;# 
  4720  038C                     	;# 
  4721  038D                     	;# 
  4722  038E                     	;# 
  4723  0391                     	;# 
  4724  0392                     	;# 
  4725  0393                     	;# 
  4726  0394                     	;# 
  4727  0395                     	;# 
  4728  0396                     	;# 
  4729  0397                     	;# 
  4730  0398                     	;# 
  4731  0399                     	;# 
  4732  039A                     	;# 
  4733  039C                     	;# 
  4734  039D                     	;# 
  4735  039E                     	;# 
  4736  039F                     	;# 
  4737  0411                     	;# 
  4738  0411                     	;# 
  4739  0412                     	;# 
  4740  0413                     	;# 
  4741  0414                     	;# 
  4742  0415                     	;# 
  4743  0416                     	;# 
  4744  0417                     	;# 
  4745  0418                     	;# 
  4746  0418                     	;# 
  4747  0419                     	;# 
  4748  041A                     	;# 
  4749  041B                     	;# 
  4750  041C                     	;# 
  4751  041D                     	;# 
  4752  041E                     	;# 
  4753  041F                     	;# 
  4754  0498                     	;# 
  4755  0498                     	;# 
  4756  0499                     	;# 
  4757  049A                     	;# 
  4758  049B                     	;# 
  4759  049B                     	;# 
  4760  049C                     	;# 
  4761  049D                     	;# 
  4762  049E                     	;# 
  4763  049F                     	;# 
  4764  0617                     	;# 
  4765  0618                     	;# 
  4766  0619                     	;# 
  4767  0619                     	;# 
  4768  061A                     	;# 
  4769  061B                     	;# 
  4770  061C                     	;# 
  4771  061C                     	;# 
  4772  061F                     	;# 
  4773  0691                     	;# 
  4774  0692                     	;# 
  4775  0693                     	;# 
  4776  0694                     	;# 
  4777  0695                     	;# 
  4778  0696                     	;# 
  4779  0697                     	;# 
  4780  0698                     	;# 
  4781  0699                     	;# 
  4782  0711                     	;# 
  4783  0712                     	;# 
  4784  0713                     	;# 
  4785  0714                     	;# 
  4786  0715                     	;# 
  4787  0716                     	;# 
  4788  0717                     	;# 
  4789  0718                     	;# 
  4790  0719                     	;# 
  4791  0891                     	;# 
  4792  0891                     	;# 
  4793  0891                     	;# 
  4794  0891                     	;# 
  4795  0891                     	;# 
  4796  0891                     	;# 
  4797  0892                     	;# 
  4798  0892                     	;# 
  4799  0892                     	;# 
  4800  0893                     	;# 
  4801  0893                     	;# 
  4802  0893                     	;# 
  4803  0893                     	;# 
  4804  0893                     	;# 
  4805  0893                     	;# 
  4806  0894                     	;# 
  4807  0894                     	;# 
  4808  0894                     	;# 
  4809  0895                     	;# 
  4810  0895                     	;# 
  4811  0895                     	;# 
  4812  0896                     	;# 
  4813  0896                     	;# 
  4814  0896                     	;# 
  4815  089B                     	;# 
  4816  0911                     	;# 
  4817  0912                     	;# 
  4818  0913                     	;# 
  4819  0914                     	;# 
  4820  0915                     	;# 
  4821  0916                     	;# 
  4822  0918                     	;# 
  4823  0919                     	;# 
  4824  091A                     	;# 
  4825  091B                     	;# 
  4826  091C                     	;# 
  4827  091D                     	;# 
  4828  091E                     	;# 
  4829  091F                     	;# 
  4830  0E0F                     	;# 
  4831  0E10                     	;# 
  4832  0E11                     	;# 
  4833  0E12                     	;# 
  4834  0E13                     	;# 
  4835  0E14                     	;# 
  4836  0E15                     	;# 
  4837  0E16                     	;# 
  4838  0E17                     	;# 
  4839  0E18                     	;# 
  4840  0E19                     	;# 
  4841  0E1A                     	;# 
  4842  0E1B                     	;# 
  4843  0E1C                     	;# 
  4844  0E20                     	;# 
  4845  0E21                     	;# 
  4846  0E22                     	;# 
  4847  0E24                     	;# 
  4848  0E25                     	;# 
  4849  0E28                     	;# 
  4850  0E29                     	;# 
  4851  0E2A                     	;# 
  4852  0E2B                     	;# 
  4853  0E2C                     	;# 
  4854  0E2D                     	;# 
  4855  0E2E                     	;# 
  4856  0E2F                     	;# 
  4857  0E90                     	;# 
  4858  0E91                     	;# 
  4859  0E92                     	;# 
  4860  0E94                     	;# 
  4861  0E95                     	;# 
  4862  0E9C                     	;# 
  4863  0E9D                     	;# 
  4864  0E9E                     	;# 
  4865  0E9F                     	;# 
  4866  0EA0                     	;# 
  4867  0EA1                     	;# 
  4868  0EA2                     	;# 
  4869  0EA3                     	;# 
  4870  0EA4                     	;# 
  4871  0EA5                     	;# 
  4872  0EA6                     	;# 
  4873  0EA7                     	;# 
  4874  0F0F                     	;# 
  4875  0F10                     	;# 
  4876  0F11                     	;# 
  4877  0F12                     	;# 
  4878  0F13                     	;# 
  4879  0F14                     	;# 
  4880  0F15                     	;# 
  4881  0F16                     	;# 
  4882  0F17                     	;# 
  4883  0F18                     	;# 
  4884  0F19                     	;# 
  4885  0F1A                     	;# 
  4886  0F1B                     	;# 
  4887  0F1C                     	;# 
  4888  0F1D                     	;# 
  4889  0F1E                     	;# 
  4890  0F1F                     	;# 
  4891  0F20                     	;# 
  4892  0F21                     	;# 
  4893  0F22                     	;# 
  4894  0F23                     	;# 
  4895  0F24                     	;# 
  4896  0F25                     	;# 
  4897  0F26                     	;# 
  4898  0F27                     	;# 
  4899  0F28                     	;# 
  4900  0F29                     	;# 
  4901  0F2A                     	;# 
  4902  0F2B                     	;# 
  4903  0F2C                     	;# 
  4904  0F2D                     	;# 
  4905  0F2E                     	;# 
  4906  0F2F                     	;# 
  4907  0F30                     	;# 
  4908  0F31                     	;# 
  4909  0F32                     	;# 
  4910  0F33                     	;# 
  4911  0F34                     	;# 
  4912  0F35                     	;# 
  4913  0F36                     	;# 
  4914  0F37                     	;# 
  4915  0FE4                     	;# 
  4916  0FE5                     	;# 
  4917  0FE6                     	;# 
  4918  0FE7                     	;# 
  4919  0FE8                     	;# 
  4920  0FE9                     	;# 
  4921  0FEA                     	;# 
  4922  0FEB                     	;# 
  4923  0FED                     	;# 
  4924  0FEE                     	;# 
  4925  0FEF                     	;# 
  4926  0000                     	;# 
  4927  0001                     	;# 
  4928  0002                     	;# 
  4929  0003                     	;# 
  4930  0004                     	;# 
  4931  0005                     	;# 
  4932  0006                     	;# 
  4933  0007                     	;# 
  4934  0008                     	;# 
  4935  0009                     	;# 
  4936  000A                     	;# 
  4937  000B                     	;# 
  4938  000C                     	;# 
  4939  000D                     	;# 
  4940  000E                     	;# 
  4941  0010                     	;# 
  4942  0011                     	;# 
  4943  0012                     	;# 
  4944  0013                     	;# 
  4945  0014                     	;# 
  4946  0015                     	;# 
  4947  0015                     	;# 
  4948  0016                     	;# 
  4949  0016                     	;# 
  4950  0017                     	;# 
  4951  0018                     	;# 
  4952  0019                     	;# 
  4953  0019                     	;# 
  4954  001A                     	;# 
  4955  001B                     	;# 
  4956  001C                     	;# 
  4957  001D                     	;# 
  4958  001E                     	;# 
  4959  001F                     	;# 
  4960  008C                     	;# 
  4961  008D                     	;# 
  4962  008E                     	;# 
  4963  0090                     	;# 
  4964  0091                     	;# 
  4965  0092                     	;# 
  4966  0093                     	;# 
  4967  0094                     	;# 
  4968  0097                     	;# 
  4969  009B                     	;# 
  4970  009B                     	;# 
  4971  009C                     	;# 
  4972  009D                     	;# 
  4973  009E                     	;# 
  4974  009F                     	;# 
  4975  010C                     	;# 
  4976  010D                     	;# 
  4977  010E                     	;# 
  4978  0111                     	;# 
  4979  0112                     	;# 
  4980  0113                     	;# 
  4981  0114                     	;# 
  4982  0115                     	;# 
  4983  0116                     	;# 
  4984  0117                     	;# 
  4985  0118                     	;# 
  4986  0119                     	;# 
  4987  018C                     	;# 
  4988  018D                     	;# 
  4989  018E                     	;# 
  4990  0197                     	;# 
  4991  0199                     	;# 
  4992  0199                     	;# 
  4993  0199                     	;# 
  4994  019A                     	;# 
  4995  019A                     	;# 
  4996  019A                     	;# 
  4997  019B                     	;# 
  4998  019B                     	;# 
  4999  019B                     	;# 
  5000  019B                     	;# 
  5001  019B                     	;# 
  5002  019C                     	;# 
  5003  019C                     	;# 
  5004  019C                     	;# 
  5005  019D                     	;# 
  5006  019D                     	;# 
  5007  019D                     	;# 
  5008  019E                     	;# 
  5009  019E                     	;# 
  5010  019E                     	;# 
  5011  019F                     	;# 
  5012  019F                     	;# 
  5013  019F                     	;# 
  5014  019F                     	;# 
  5015  019F                     	;# 
  5016  020C                     	;# 
  5017  020D                     	;# 
  5018  020E                     	;# 
  5019  0211                     	;# 
  5020  0211                     	;# 
  5021  0212                     	;# 
  5022  0212                     	;# 
  5023  0213                     	;# 
  5024  0213                     	;# 
  5025  0214                     	;# 
  5026  0214                     	;# 
  5027  0215                     	;# 
  5028  0215                     	;# 
  5029  0215                     	;# 
  5030  0215                     	;# 
  5031  0216                     	;# 
  5032  0216                     	;# 
  5033  0217                     	;# 
  5034  0217                     	;# 
  5035  028C                     	;# 
  5036  028D                     	;# 
  5037  028E                     	;# 
  5038  0291                     	;# 
  5039  0291                     	;# 
  5040  0292                     	;# 
  5041  0293                     	;# 
  5042  0294                     	;# 
  5043  0295                     	;# 
  5044  0295                     	;# 
  5045  0296                     	;# 
  5046  0297                     	;# 
  5047  0298                     	;# 
  5048  029F                     	;# 
  5049  030C                     	;# 
  5050  030D                     	;# 
  5051  030E                     	;# 
  5052  0311                     	;# 
  5053  0311                     	;# 
  5054  0312                     	;# 
  5055  0313                     	;# 
  5056  0314                     	;# 
  5057  0315                     	;# 
  5058  0315                     	;# 
  5059  0316                     	;# 
  5060  0317                     	;# 
  5061  0318                     	;# 
  5062  038C                     	;# 
  5063  038D                     	;# 
  5064  038E                     	;# 
  5065  0391                     	;# 
  5066  0392                     	;# 
  5067  0393                     	;# 
  5068  0394                     	;# 
  5069  0395                     	;# 
  5070  0396                     	;# 
  5071  0397                     	;# 
  5072  0398                     	;# 
  5073  0399                     	;# 
  5074  039A                     	;# 
  5075  039C                     	;# 
  5076  039D                     	;# 
  5077  039E                     	;# 
  5078  039F                     	;# 
  5079  0411                     	;# 
  5080  0411                     	;# 
  5081  0412                     	;# 
  5082  0413                     	;# 
  5083  0414                     	;# 
  5084  0415                     	;# 
  5085  0416                     	;# 
  5086  0417                     	;# 
  5087  0418                     	;# 
  5088  0418                     	;# 
  5089  0419                     	;# 
  5090  041A                     	;# 
  5091  041B                     	;# 
  5092  041C                     	;# 
  5093  041D                     	;# 
  5094  041E                     	;# 
  5095  041F                     	;# 
  5096  0498                     	;# 
  5097  0498                     	;# 
  5098  0499                     	;# 
  5099  049A                     	;# 
  5100  049B                     	;# 
  5101  049B                     	;# 
  5102  049C                     	;# 
  5103  049D                     	;# 
  5104  049E                     	;# 
  5105  049F                     	;# 
  5106  0617                     	;# 
  5107  0618                     	;# 
  5108  0619                     	;# 
  5109  0619                     	;# 
  5110  061A                     	;# 
  5111  061B                     	;# 
  5112  061C                     	;# 
  5113  061C                     	;# 
  5114  061F                     	;# 
  5115  0691                     	;# 
  5116  0692                     	;# 
  5117  0693                     	;# 
  5118  0694                     	;# 
  5119  0695                     	;# 
  5120  0696                     	;# 
  5121  0697                     	;# 
  5122  0698                     	;# 
  5123  0699                     	;# 
  5124  0711                     	;# 
  5125  0712                     	;# 
  5126  0713                     	;# 
  5127  0714                     	;# 
  5128  0715                     	;# 
  5129  0716                     	;# 
  5130  0717                     	;# 
  5131  0718                     	;# 
  5132  0719                     	;# 
  5133  0891                     	;# 
  5134  0891                     	;# 
  5135  0891                     	;# 
  5136  0891                     	;# 
  5137  0891                     	;# 
  5138  0891                     	;# 
  5139  0892                     	;# 
  5140  0892                     	;# 
  5141  0892                     	;# 
  5142  0893                     	;# 
  5143  0893                     	;# 
  5144  0893                     	;# 
  5145  0893                     	;# 
  5146  0893                     	;# 
  5147  0893                     	;# 
  5148  0894                     	;# 
  5149  0894                     	;# 
  5150  0894                     	;# 
  5151  0895                     	;# 
  5152  0895                     	;# 
  5153  0895                     	;# 
  5154  0896                     	;# 
  5155  0896                     	;# 
  5156  0896                     	;# 
  5157  089B                     	;# 
  5158  0911                     	;# 
  5159  0912                     	;# 
  5160  0913                     	;# 
  5161  0914                     	;# 
  5162  0915                     	;# 
  5163  0916                     	;# 
  5164  0918                     	;# 
  5165  0919                     	;# 
  5166  091A                     	;# 
  5167  091B                     	;# 
  5168  091C                     	;# 
  5169  091D                     	;# 
  5170  091E                     	;# 
  5171  091F                     	;# 
  5172  0E0F                     	;# 
  5173  0E10                     	;# 
  5174  0E11                     	;# 
  5175  0E12                     	;# 
  5176  0E13                     	;# 
  5177  0E14                     	;# 
  5178  0E15                     	;# 
  5179  0E16                     	;# 
  5180  0E17                     	;# 
  5181  0E18                     	;# 
  5182  0E19                     	;# 
  5183  0E1A                     	;# 
  5184  0E1B                     	;# 
  5185  0E1C                     	;# 
  5186  0E20                     	;# 
  5187  0E21                     	;# 
  5188  0E22                     	;# 
  5189  0E24                     	;# 
  5190  0E25                     	;# 
  5191  0E28                     	;# 
  5192  0E29                     	;# 
  5193  0E2A                     	;# 
  5194  0E2B                     	;# 
  5195  0E2C                     	;# 
  5196  0E2D                     	;# 
  5197  0E2E                     	;# 
  5198  0E2F                     	;# 
  5199  0E90                     	;# 
  5200  0E91                     	;# 
  5201  0E92                     	;# 
  5202  0E94                     	;# 
  5203  0E95                     	;# 
  5204  0E9C                     	;# 
  5205  0E9D                     	;# 
  5206  0E9E                     	;# 
  5207  0E9F                     	;# 
  5208  0EA0                     	;# 
  5209  0EA1                     	;# 
  5210  0EA2                     	;# 
  5211  0EA3                     	;# 
  5212  0EA4                     	;# 
  5213  0EA5                     	;# 
  5214  0EA6                     	;# 
  5215  0EA7                     	;# 
  5216  0F0F                     	;# 
  5217  0F10                     	;# 
  5218  0F11                     	;# 
  5219  0F12                     	;# 
  5220  0F13                     	;# 
  5221  0F14                     	;# 
  5222  0F15                     	;# 
  5223  0F16                     	;# 
  5224  0F17                     	;# 
  5225  0F18                     	;# 
  5226  0F19                     	;# 
  5227  0F1A                     	;# 
  5228  0F1B                     	;# 
  5229  0F1C                     	;# 
  5230  0F1D                     	;# 
  5231  0F1E                     	;# 
  5232  0F1F                     	;# 
  5233  0F20                     	;# 
  5234  0F21                     	;# 
  5235  0F22                     	;# 
  5236  0F23                     	;# 
  5237  0F24                     	;# 
  5238  0F25                     	;# 
  5239  0F26                     	;# 
  5240  0F27                     	;# 
  5241  0F28                     	;# 
  5242  0F29                     	;# 
  5243  0F2A                     	;# 
  5244  0F2B                     	;# 
  5245  0F2C                     	;# 
  5246  0F2D                     	;# 
  5247  0F2E                     	;# 
  5248  0F2F                     	;# 
  5249  0F30                     	;# 
  5250  0F31                     	;# 
  5251  0F32                     	;# 
  5252  0F33                     	;# 
  5253  0F34                     	;# 
  5254  0F35                     	;# 
  5255  0F36                     	;# 
  5256  0F37                     	;# 
  5257  0FE4                     	;# 
  5258  0FE5                     	;# 
  5259  0FE6                     	;# 
  5260  0FE7                     	;# 
  5261  0FE8                     	;# 
  5262  0FE9                     	;# 
  5263  0FEA                     	;# 
  5264  0FEB                     	;# 
  5265  0FED                     	;# 
  5266  0FEE                     	;# 
  5267  0FEF                     	;__u16ResponseBuffer
  5268                           
  5269                           	psect	idataBANK0
  5270  0C0B                     __pidataBANK0:	
  5271                           
  5272                           ;initializer for _EncEdgeMinTimeInterval
  5273  0C0B  34FF               	retlw	255
  5274  0C0C  34FF               	retlw	255
  5275  0C0D  34FF               	retlw	255
  5276  0C0E  34EF               	retlw	239
  5277                           
  5278                           ;initializer for _LED_Color
  5279  0C0F  3401               	retlw	1
  5280                           
  5281                           	psect	idataBANK2
  5282  0BF8                     __pidataBANK2:	
  5283                           
  5284                           ;initializer for _EncSpdredFact
  5285  0BF8  341E               	retlw	30
  5286  0BF9  3400               	retlw	0
  5287  0BFA  3400               	retlw	0
  5288  0BFB  3400               	retlw	0
  5289                           
  5290                           	psect	nvBANK0
  5291  006B                     __pnvBANK0:	
  5292  006B                     _timer3ReloadVal:	
  5293  006B                     	ds	2
  5294  006D                     _timer5ReloadVal:	
  5295  006D                     	ds	2
  5296                           
  5297                           	psect	nvBANK2
  5298  0134                     __pnvBANK2:	
  5299  0134                     _INT_InterruptHandler:	
  5300  0134                     	ds	2
  5301  0136                     _IOCCF5_InterruptHandler:	
  5302  0136                     	ds	2
  5303  0138                     _IOCCF4_InterruptHandler:	
  5304  0138                     	ds	2
  5305  013A                     _TMR0_InterruptHandler:	
  5306  013A                     	ds	2
  5307  013C                     _TMR3_InterruptHandler:	
  5308  013C                     	ds	2
  5309  013E                     _TMR5_InterruptHandler:	
  5310  013E                     	ds	2
  5311  000E                     _PORTCbits	set	14
  5312  000B                     _INTCONbits	set	11
  5313  0017                     _T0CON0bits	set	23
  5314  0010                     _PIR0bits	set	16
  5315  0015                     _TMR0L	set	21
  5316  0016                     _TMR0H	set	22
  5317  0018                     _T0CON1	set	24
  5318  0017                     _T0CON0	set	23
  5319  0011                     _PIR1bits	set	17
  5320  0013                     _PIR3bits	set	19
  5321  0014                     _PIR4bits	set	20
  5322  005F                     _GIE	set	95
  5323  0097                     _WDTCON	set	151
  5324  009D                     _ADCON0bits	set	157
  5325  009C                     _ADRESH	set	156
  5326  009B                     _ADRESL	set	155
  5327  009F                     _ADACT	set	159
  5328  009E                     _ADCON1	set	158
  5329  009D                     _ADCON0	set	157
  5330  008E                     _TRISC	set	142
  5331  008D                     _TRISB	set	141
  5332  008C                     _TRISA	set	140
  5333  0090                     _PIE0bits	set	144
  5334  0093                     _PIE3bits	set	147
  5335  0094                     _PIE4bits	set	148
  5336  010E                     _LATCbits	set	270
  5337  010D                     _LATBbits	set	269
  5338  010E                     _LATC	set	270
  5339  010D                     _LATB	set	269
  5340  010C                     _LATA	set	268
  5341  018C                     _ANSELA	set	396
  5342  018D                     _ANSELB	set	397
  5343  018E                     _ANSELC	set	398
  5344  019A                     _TX1REG	set	410
  5345  0199                     _RC1REG	set	409
  5346  019D                     _RC1STAbits	set	413
  5347  019C                     _SP1BRGH	set	412
  5348  019B                     _SP1BRGL	set	411
  5349  019E                     _TX1STA	set	414
  5350  019D                     _RC1STA	set	413
  5351  019F                     _BAUD1CON	set	415
  5352  020E                     _WPUC	set	526
  5353  020C                     _WPUA	set	524
  5354  020D                     _WPUB	set	525
  5355  0295                     _CCPR2L	set	661
  5356  0296                     _CCPR2H	set	662
  5357  0298                     _CCP2CAP	set	664
  5358  0297                     _CCP2CON	set	663
  5359  029F                     _CCPTMRSbits	set	671
  5360  0291                     _CCPR1L	set	657
  5361  0292                     _CCPR1H	set	658
  5362  0294                     _CCP1CAP	set	660
  5363  0293                     _CCP1CON	set	659
  5364  028E                     _ODCONC	set	654
  5365  028D                     _ODCONB	set	653
  5366  028C                     _ODCONA	set	652
  5367  038C                     _INLVLA	set	908
  5368  038E                     _INLVLC	set	910
  5369  0397                     _IOCCPbits	set	919
  5370  0398                     _IOCCNbits	set	920
  5371  0399                     _IOCCFbits	set	921
  5372  0414                     _T3GCONbits	set	1044
  5373  0413                     _T3CONbits	set	1043
  5374  0411                     _TMR3L	set	1041
  5375  0412                     _TMR3H	set	1042
  5376  0414                     _T3GCON	set	1044
  5377  0413                     _T3CON	set	1043
  5378  041B                     _T5GCONbits	set	1051
  5379  041A                     _T5CONbits	set	1050
  5380  0418                     _TMR5L	set	1048
  5381  0419                     _TMR5H	set	1049
  5382  041B                     _T5GCON	set	1051
  5383  041A                     _T5CON	set	1050
  5384  091E                     _OSCTUNE	set	2334
  5385  091F                     _OSCFRQ	set	2335
  5386  091D                     _OSCEN	set	2333
  5387  091B                     _OSCCON3	set	2331
  5388  0919                     _OSCCON1	set	2329
  5389  0E14                     _CCP1PPSbits	set	3604
  5390  0E10                     _INTPPSbits	set	3600
  5391  0E24                     _RXPPSbits	set	3620
  5392  0E15                     _CCP2PPSbits	set	3605
  5393  0E0F                     _PPSLOCKbits	set	3599
  5394  0E0F                     _PPSLOCK	set	3599
  5395  0E9D                     _RB5PPSbits	set	3741
  5396                           
  5397                           ; #config settings
  5398  0000                     
  5399                           	psect	cinit
  5400  0050                     start_initialization:	
  5401  0050                     __initialization:		;BIGRAM
  5402                           
  5403                           ; Initialize objects allocated to BANK0
  5404  0050  300B               	movlw	low __pidataBANK0
  5405  0051  0084               	movwf	4
  5406  0052  308C               	movlw	(high __pidataBANK0)| (0+128)
  5407  0053  0085               	movwf	5
  5408  0054  0012               	moviw fsr0++
  5409  0055  00E6               	movwf	__pdataBANK0& (0+127)
  5410  0056  0012               	moviw fsr0++
  5411  0057  00E7               	movwf	(__pdataBANK0+1)& (0+127)
  5412  0058  0012               	moviw fsr0++
  5413  0059  00E8               	movwf	(__pdataBANK0+2)& (0+127)
  5414  005A  0012               	moviw fsr0++
  5415  005B  00E9               	movwf	(__pdataBANK0+3)& (0+127)
  5416  005C  0012               	moviw fsr0++
  5417  005D  00EA               	movwf	(__pdataBANK0+4)& (0+127)
  5418                           
  5419                           ; Initialize objects allocated to BANK2
  5420  005E  0022               	movlb	2	; select bank2
  5421  005F  318B  23F8  3180   	fcall	__pidataBANK2	;fetch initializer
  5422  0062  00C0               	movwf	__pdataBANK2& (0+127)
  5423  0063  318B  23F9  3180   	fcall	__pidataBANK2+1	;fetch initializer
  5424  0066  00C1               	movwf	(__pdataBANK2+1)& (0+127)
  5425  0067  318B  23FA  3180   	fcall	__pidataBANK2+2	;fetch initializer
  5426  006A  00C2               	movwf	(__pdataBANK2+2)& (0+127)
  5427  006B  318B  23FB  3180   	fcall	__pidataBANK2+3	;fetch initializer
  5428  006E  00C3               	movwf	(__pdataBANK2+3)& (0+127)
  5429                           
  5430                           ; Clear objects allocated to BIGRAM
  5431  006F  30F0               	movlw	low (0+8432)
  5432  0070  0084               	movwf	4
  5433  0071  3020               	movlw	high (0+8432)
  5434  0072  0085               	movwf	5
  5435  0073  3000               	movlw	0
  5436  0074  00FE               	movwf	btemp
  5437  0075  3001               	movlw	1
  5438  0076  00FF               	movwf	btemp+1
  5439  0077  318C  24D1  3180   	fcall	clear_ram0
  5440                           
  5441                           ; Clear objects allocated to COMMON
  5442  007A  01F8               	clrf	__pbssCOMMON& (0+127)
  5443  007B  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  5444  007C  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  5445  007D  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  5446  007E  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  5447  007F  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
  5448                           
  5449                           ; Clear objects allocated to BANK0
  5450  0080  3020               	movlw	low __pbssBANK0
  5451  0081  0084               	movwf	4
  5452  0082  3000               	movlw	high __pbssBANK0
  5453  0083  0085               	movwf	5
  5454  0084  3031               	movlw	49
  5455  0085  00FE               	movwf	btemp
  5456  0086  3000               	movlw	0
  5457  0087  00FF               	movwf	btemp+1
  5458  0088  318C  24D1  3180   	fcall	clear_ram0
  5459                           
  5460                           ; Clear objects allocated to BANK1
  5461  008B  0021               	movlb	1	; select bank1
  5462  008C  01EE               	clrf	__pbssBANK1& (0+127)
  5463  008D  01EF               	clrf	(__pbssBANK1+1)& (0+127)
  5464                           
  5465                           ; Clear objects allocated to BANK2
  5466  008E  3020               	movlw	low __pbssBANK2
  5467  008F  0084               	movwf	4
  5468  0090  3001               	movlw	high __pbssBANK2
  5469  0091  0085               	movwf	5
  5470  0092  3014               	movlw	20
  5471  0093  00FE               	movwf	btemp
  5472  0094  3000               	movlw	0
  5473  0095  00FF               	movwf	btemp+1
  5474  0096  318C  24D1         	fcall	clear_ram0
  5475  0098                     end_of_initialization:	
  5476                           ;End of C runtime variable initialization code
  5477                           
  5478  0098                     __end_of__initialization:	
  5479  0098  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5480  0099  0020               	movlb	0
  5481  009A  318F  2FB9         	ljmp	_main	;jump to C main() function
  5482                           
  5483                           	psect	bssCOMMON
  5484  0078                     __pbssCOMMON:	
  5485  0078                     _rxBuffer:	
  5486  0078                     	ds	1
  5487  0079                     _txBuffer:	
  5488  0079                     	ds	1
  5489  007A                     _delayFlag:	
  5490  007A                     	ds	1
  5491  007B                     _flagForFirstRevolution:	
  5492  007B                     	ds	1
  5493  007C                     _EncPulseError:	
  5494  007C                     	ds	1
  5495  007D                     _MBwriteToolOperating:	
  5496  007D                     	ds	1
  5497                           
  5498                           	psect	bssBANK0
  5499  0020                     __pbssBANK0:	
  5500  0020                     _TimertickMsec:	
  5501  0020                     	ds	4
  5502  0024                     _EncEdgeTimeInterval:	
  5503  0024                     	ds	4
  5504  0028                     _LedON_Duration_msec:	
  5505  0028                     	ds	2
  5506  002A                     _Blick_tickPoint:	
  5507  002A                     	ds	2
  5508  002C                     _Blick_tickPointMsec:	
  5509  002C                     	ds	2
  5510  002E                     _LED_msec_Cnt:	
  5511  002E                     	ds	2
  5512  0030                     __postTransmission:	
  5513  0030                     	ds	2
  5514  0032                     __preTransmission:	
  5515  0032                     	ds	2
  5516  0034                     __u16WriteAddress:	
  5517  0034                     	ds	2
  5518  0036                     __u16ReadQty:	
  5519  0036                     	ds	2
  5520  0038                     __u16ReadAddress:	
  5521  0038                     	ds	2
  5522  003A                     _delayCount:	
  5523  003A                     	ds	2
  5524  003C                     _OldEncPos:	
  5525  003C                     	ds	2
  5526  003E                     _EncoderPosition:	
  5527  003E                     	ds	2
  5528  0040                     _EncPulseOpState:	
  5529  0040                     	ds	2
  5530  0042                     _OldEncPulseOpState:	
  5531  0042                     	ds	2
  5532  0044                     _MBreadSetNoOfPulse:	
  5533  0044                     	ds	2
  5534  0046                     _Led_ON:	
  5535  0046                     	ds	1
  5536  0047                     __u8ResponseBufferLength:	
  5537  0047                     	ds	1
  5538  0048                     __u8ResponseBufferIndex:	
  5539  0048                     	ds	1
  5540  0049                     __u8TransmitBufferIndex:	
  5541  0049                     	ds	1
  5542  004A                     __u8MBSlave:	
  5543  004A                     	ds	1
  5544  004B                     _NutRunstate:	
  5545  004B                     	ds	1
  5546  004C                     _ShutdownDetected:	
  5547  004C                     	ds	1
  5548  004D                     _EncEdgeGotFlag:	
  5549  004D                     	ds	1
  5550  004E                     _EncoderPositionOneCycle:	
  5551  004E                     	ds	1
  5552  004F                     _multipleTimecheck1:	
  5553  004F                     	ds	1
  5554  0050                     _multipleTimecheck0:	
  5555  0050                     	ds	1
  5556                           
  5557                           	psect	dataBANK0
  5558  0066                     __pdataBANK0:	
  5559  0066                     _EncEdgeMinTimeInterval:	
  5560  0066                     	ds	4
  5561  006A                     _LED_Color:	
  5562  006A                     	ds	1
  5563                           
  5564                           	psect	bssBANK1
  5565  00EE                     __pbssBANK1:	
  5566  00EE                     __u16WriteQty:	
  5567  00EE                     	ds	2
  5568                           
  5569                           	psect	bssBANK2
  5570  0120                     __pbssBANK2:	
  5571  0120                     _IdleTimeOnShutOff:	
  5572  0120                     	ds	4
  5573  0124                     _EncEdgeMinTimeIntSumAvg:	
  5574  0124                     	ds	4
  5575  0128                     _EncEdgeTimeIntervalOld:	
  5576  0128                     	ds	4
  5577  012C                     _u16TransmitBufferLength:	
  5578  012C                     	ds	2
  5579  012E                     _EncoderPositionAtIndex:	
  5580  012E                     	ds	2
  5581  0130                     _NutRunLength:	
  5582  0130                     	ds	2
  5583  0132                     _MBwriteCurrentNoOfPulse:	
  5584  0132                     	ds	2
  5585                           
  5586                           	psect	dataBANK2
  5587  0140                     __pdataBANK2:	
  5588  0140                     _EncSpdredFact:	
  5589  0140                     	ds	4
  5590                           
  5591                           	psect	clrtext
  5592  0CD1                     clear_ram0:	
  5593                           ;	Called with FSR0 containing the base address, and
  5594                           ;	btemp/btemp+1 has the size to clear
  5595                           
  5596  0CD1  0064               	clrwdt	;clear the watchdog before getting into this loop
  5597  0CD2                     clrloop0:	
  5598  0CD2  0180               	clrf	0	;clear RAM location pointed to by FSR
  5599  0CD3  3101               	addfsr 0,1
  5600  0CD4  3001               	movlw	1
  5601  0CD5  02FE               	subwf	126,f
  5602  0CD6  3000               	movlw	0
  5603  0CD7  3BFF               	subwfb	127,f
  5604  0CD8  087F               	movf	127,w
  5605  0CD9  047E               	iorwf	126,w
  5606  0CDA  1903               	btfsc	3,2
  5607  0CDB  3400               	retlw	0	;all done for this memory range, return
  5608  0CDC  2CD2               	goto	clrloop0	;have we reached the end yet?
  5609                           
  5610                           	psect	cstackBANK1
  5611  00A0                     __pcstackBANK1:	
  5612  00A0                     ModbusMasterTransaction@u8ModbusADU:	
  5613                           
  5614                           ; 64 bytes @ 0x0
  5615  00A0                     	ds	64
  5616  00E0                     ModbusMasterTransaction@u32StartTime:	
  5617                           
  5618                           ; 4 bytes @ 0x40
  5619  00E0                     	ds	4
  5620  00E4                     _ModbusMasterTransaction$1564:	
  5621                           
  5622                           ; 2 bytes @ 0x44
  5623  00E4                     	ds	2
  5624  00E6                     ModbusMasterTransaction@u8Qty:	
  5625                           
  5626                           ; 1 bytes @ 0x46
  5627  00E6                     	ds	1
  5628  00E7                     ModbusMasterTransaction@u8BytesLeft:	
  5629                           
  5630                           ; 1 bytes @ 0x47
  5631  00E7                     	ds	1
  5632  00E8                     ModbusMasterTransaction@u8MBFunction:	
  5633                           
  5634                           ; 1 bytes @ 0x48
  5635  00E8                     	ds	1
  5636  00E9                     ModbusMasterTransaction@u8MBStatus:	
  5637                           
  5638                           ; 1 bytes @ 0x49
  5639  00E9                     	ds	1
  5640  00EA                     ModbusMasterTransaction@u16CRC:	
  5641                           
  5642                           ; 2 bytes @ 0x4A
  5643  00EA                     	ds	2
  5644  00EC                     ModbusMasterTransaction@i:	
  5645                           
  5646                           ; 1 bytes @ 0x4C
  5647  00EC                     	ds	1
  5648  00ED                     ModbusMasterTransaction@u8ModbusADUSize:	
  5649                           
  5650                           ; 1 bytes @ 0x4D
  5651  00ED                     	ds	1
  5652                           
  5653                           	psect	cstackCOMMON
  5654  0070                     __pcstackCOMMON:	
  5655  0070                     ?_TMR5_DefaultInterruptHandler:	
  5656  0070                     ??_TMR5_DefaultInterruptHandler:	
  5657                           ; 1 bytes @ 0x0
  5658                           
  5659  0070                     ?_TMR5_StartTimer:	
  5660                           ; 1 bytes @ 0x0
  5661                           
  5662  0070                     ?_Timer5_Overflow:	
  5663                           ; 1 bytes @ 0x0
  5664                           
  5665  0070                     ??_Timer5_Overflow:	
  5666                           ; 1 bytes @ 0x0
  5667                           
  5668  0070                     ?_TMR3_DefaultInterruptHandler:	
  5669                           ; 1 bytes @ 0x0
  5670                           
  5671  0070                     ?_TMR3_StartTimer:	
  5672                           ; 1 bytes @ 0x0
  5673                           
  5674  0070                     ?_Timer3_Overflow:	
  5675                           ; 1 bytes @ 0x0
  5676                           
  5677  0070                     ??_Timer3_Overflow:	
  5678                           ; 1 bytes @ 0x0
  5679                           
  5680  0070                     ?_TMR0_DefaultInterruptHandler:	
  5681                           ; 1 bytes @ 0x0
  5682                           
  5683  0070                     ??_TMR0_DefaultInterruptHandler:	
  5684                           ; 1 bytes @ 0x0
  5685                           
  5686  0070                     ?_TMR0_StartTimer:	
  5687                           ; 1 bytes @ 0x0
  5688                           
  5689  0070                     ?_TMR0_CallBack:	
  5690                           ; 1 bytes @ 0x0
  5691                           
  5692  0070                     ?_Timer0_tick10msecFunc:	
  5693                           ; 1 bytes @ 0x0
  5694                           
  5695  0070                     ??_Timer0_tick10msecFunc:	
  5696                           ; 1 bytes @ 0x0
  5697                           
  5698  0070                     ?_IOCCF4_DefaultInterruptHandler:	
  5699                           ; 1 bytes @ 0x0
  5700                           
  5701  0070                     ??_IOCCF4_DefaultInterruptHandler:	
  5702                           ; 1 bytes @ 0x0
  5703                           
  5704  0070                     ?_IOCCF5_DefaultInterruptHandler:	
  5705                           ; 1 bytes @ 0x0
  5706                           
  5707  0070                     ??_IOCCF5_DefaultInterruptHandler:	
  5708                           ; 1 bytes @ 0x0
  5709                           
  5710  0070                     ?_IOCCF4_ISR:	
  5711                           ; 1 bytes @ 0x0
  5712                           
  5713  0070                     ??_IOCCF4_ISR:	
  5714                           ; 1 bytes @ 0x0
  5715                           
  5716  0070                     ?_IOCCF5_ISR:	
  5717                           ; 1 bytes @ 0x0
  5718                           
  5719  0070                     ??_IOCCF5_ISR:	
  5720                           ; 1 bytes @ 0x0
  5721                           
  5722  0070                     ?_EncA_PulseEdgeEvent:	
  5723                           ; 1 bytes @ 0x0
  5724                           
  5725  0070                     ?_INT_ISR:	
  5726                           ; 1 bytes @ 0x0
  5727                           
  5728  0070                     ?_OSCILLATOR_Initialize:	
  5729                           ; 1 bytes @ 0x0
  5730                           
  5731  0070                     ?_WDT_Initialize:	
  5732                           ; 1 bytes @ 0x0
  5733                           
  5734  0070                     ?_EXT_INT_Initialize:	
  5735                           ; 1 bytes @ 0x0
  5736                           
  5737  0070                     ?_INT_CallBack:	
  5738                           ; 1 bytes @ 0x0
  5739                           
  5740  0070                     ?_EncINX_PulseRisingEvent:	
  5741                           ; 1 bytes @ 0x0
  5742                           
  5743  0070                     ??_EncINX_PulseRisingEvent:	
  5744                           ; 1 bytes @ 0x0
  5745                           
  5746  0070                     ?_getEncoderState:	
  5747                           ; 1 bytes @ 0x0
  5748                           
  5749  0070                     ?_NutRunCycleStart:	
  5750                           ; 1 bytes @ 0x0
  5751                           
  5752  0070                     ?_LedONStatusBusy:	
  5753                           ; 1 bytes @ 0x0
  5754                           
  5755  0070                     ?_MB_UpdateEPCParameter:	
  5756                           ; 1 bytes @ 0x0
  5757                           
  5758  0070                     ?_EPC_StateMachineControlLoop:	
  5759                           ; 1 bytes @ 0x0
  5760                           
  5761  0070                     ?_NutRunCycleReset:	
  5762                           ; 1 bytes @ 0x0
  5763                           
  5764  0070                     ?_LedON_Control_10msec:	
  5765                           ; 1 bytes @ 0x0
  5766                           
  5767  0070                     ??_LedON_Control_10msec:	
  5768                           ; 1 bytes @ 0x0
  5769                           
  5770  0070                     ?_ModbusMasterTransaction:	
  5771                           ; 1 bytes @ 0x0
  5772                           
  5773  0070                     ?_TMR5_Initialize:	
  5774                           ; 1 bytes @ 0x0
  5775                           
  5776  0070                     ?_TMR5_StopTimer:	
  5777                           ; 1 bytes @ 0x0
  5778                           
  5779  0070                     ?_TMR5_ISR:	
  5780                           ; 1 bytes @ 0x0
  5781                           
  5782  0070                     ??_TMR5_ISR:	
  5783                           ; 1 bytes @ 0x0
  5784                           
  5785  0070                     ?_TMR3_Initialize:	
  5786                           ; 1 bytes @ 0x0
  5787                           
  5788  0070                     ?_TMR3_StopTimer:	
  5789                           ; 1 bytes @ 0x0
  5790                           
  5791  0070                     ?_TMR3_ISR:	
  5792                           ; 1 bytes @ 0x0
  5793                           
  5794  0070                     ?_EUSART_Initialize:	
  5795                           ; 1 bytes @ 0x0
  5796                           
  5797  0070                     ?_EUSART_Read:	
  5798                           ; 1 bytes @ 0x0
  5799                           
  5800  0070                     ?_EUSART_Write:	
  5801                           ; 1 bytes @ 0x0
  5802                           
  5803  0070                     ?_TMR0_Initialize:	
  5804                           ; 1 bytes @ 0x0
  5805                           
  5806  0070                     ?_TMR0_ISR:	
  5807                           ; 1 bytes @ 0x0
  5808                           
  5809  0070                     ?_PIN_MANAGER_Initialize:	
  5810                           ; 1 bytes @ 0x0
  5811                           
  5812  0070                     ?_PIN_MANAGER_IOC:	
  5813                           ; 1 bytes @ 0x0
  5814                           
  5815  0070                     ??_PIN_MANAGER_IOC:	
  5816                           ; 1 bytes @ 0x0
  5817                           
  5818  0070                     ?_CCP1_Initialize:	
  5819                           ; 1 bytes @ 0x0
  5820                           
  5821  0070                     ?_CCP1_CaptureISR:	
  5822                           ; 1 bytes @ 0x0
  5823                           
  5824  0070                     ?_CCP2_Initialize:	
  5825                           ; 1 bytes @ 0x0
  5826                           
  5827  0070                     ?_ADC_Initialize:	
  5828                           ; 1 bytes @ 0x0
  5829                           
  5830  0070                     ?_INTERRUPT_InterruptManager:	
  5831                           ; 1 bytes @ 0x0
  5832                           
  5833  0070                     ?_SYSTEM_Initialize:	
  5834                           ; 1 bytes @ 0x0
  5835                           
  5836  0070                     ?_INT_DefaultInterruptHandler:	
  5837                           ; 1 bytes @ 0x0
  5838                           
  5839  0070                     ??_INT_DefaultInterruptHandler:	
  5840                           ; 1 bytes @ 0x0
  5841                           
  5842  0070                     ?_main:	
  5843                           ; 1 bytes @ 0x0
  5844                           
  5845  0070                     ?_millisReset:	
  5846                           ; 1 bytes @ 0x0
  5847                           
  5848  0070                     ?_ModbusMasterInit:	
  5849                           ; 1 bytes @ 0x0
  5850                           
  5851  0070                     ?_preTransmission_App:	
  5852                           ; 1 bytes @ 0x0
  5853                           
  5854  0070                     ?_postTransmission_App:	
  5855                           ; 1 bytes @ 0x0
  5856                           
  5857  0070                     ?_ModbusMasterSetup:	
  5858                           ; 1 bytes @ 0x0
  5859                           
  5860  0070                     EncA_PulseEdgeEvent@capturedValue:	
  5861                           ; 2 bytes @ 0x0
  5862                           
  5863                           
  5864                           ; 2 bytes @ 0x0
  5865  0070                     	ds	1
  5866  0071                     ??_INT_ISR:	
  5867  0071                     ??_INT_CallBack:	
  5868                           ; 1 bytes @ 0x1
  5869                           
  5870                           
  5871                           ; 1 bytes @ 0x1
  5872  0071                     	ds	1
  5873  0072                     ?_CCP1_CallBack:	
  5874  0072                     ??_EncA_PulseEdgeEvent:	
  5875                           ; 1 bytes @ 0x2
  5876                           
  5877  0072                     CCP1_CallBack@capturedValue:	
  5878                           ; 1 bytes @ 0x2
  5879                           
  5880                           
  5881                           ; 2 bytes @ 0x2
  5882  0072                     	ds	2
  5883  0074                     ??_TMR3_DefaultInterruptHandler:	
  5884  0074                     ??_TMR0_CallBack:	
  5885                           ; 1 bytes @ 0x4
  5886                           
  5887  0074                     ??_CCP1_CallBack:	
  5888                           ; 1 bytes @ 0x4
  5889                           
  5890  0074                     ??_TMR3_ISR:	
  5891                           ; 1 bytes @ 0x4
  5892                           
  5893  0074                     ??_TMR0_ISR:	
  5894                           ; 1 bytes @ 0x4
  5895                           
  5896  0074                     ??_CCP1_CaptureISR:	
  5897                           ; 1 bytes @ 0x4
  5898                           
  5899                           
  5900                           ; 1 bytes @ 0x4
  5901  0074                     	ds	1
  5902  0075                     CCP1_CaptureISR@module:	
  5903                           
  5904                           ; 2 bytes @ 0x5
  5905  0075                     	ds	2
  5906  0077                     ??_INTERRUPT_InterruptManager:	
  5907                           
  5908                           ; 1 bytes @ 0x7
  5909  0077                     	ds	1
  5910                           
  5911                           	psect	cstackBANK0
  5912  0051                     __pcstackBANK0:	
  5913  0051                     ?_TMR5_SetInterruptHandler:	
  5914  0051                     ??_TMR5_StartTimer:	
  5915                           ; 1 bytes @ 0x0
  5916                           
  5917  0051                     ?_TMR3_SetInterruptHandler:	
  5918                           ; 1 bytes @ 0x0
  5919                           
  5920  0051                     ??_TMR3_StartTimer:	
  5921                           ; 1 bytes @ 0x0
  5922                           
  5923  0051                     ?_TMR0_SetInterruptHandler:	
  5924                           ; 1 bytes @ 0x0
  5925                           
  5926  0051                     ??_TMR0_StartTimer:	
  5927                           ; 1 bytes @ 0x0
  5928                           
  5929  0051                     ?_IOCCF4_SetInterruptHandler:	
  5930                           ; 1 bytes @ 0x0
  5931                           
  5932  0051                     ?_IOCCF5_SetInterruptHandler:	
  5933                           ; 1 bytes @ 0x0
  5934                           
  5935  0051                     ??_OSCILLATOR_Initialize:	
  5936                           ; 1 bytes @ 0x0
  5937                           
  5938  0051                     ??_WDT_Initialize:	
  5939                           ; 1 bytes @ 0x0
  5940                           
  5941  0051                     ??_getEncoderState:	
  5942                           ; 1 bytes @ 0x0
  5943                           
  5944  0051                     ??_LedONStatusBusy:	
  5945                           ; 1 bytes @ 0x0
  5946                           
  5947  0051                     ??_NutRunCycleReset:	
  5948                           ; 1 bytes @ 0x0
  5949                           
  5950  0051                     ??_TMR5_StopTimer:	
  5951                           ; 1 bytes @ 0x0
  5952                           
  5953  0051                     ?_TMR5_WriteTimer:	
  5954                           ; 1 bytes @ 0x0
  5955                           
  5956  0051                     ??_TMR3_StopTimer:	
  5957                           ; 1 bytes @ 0x0
  5958                           
  5959  0051                     ?_TMR3_WriteTimer:	
  5960                           ; 1 bytes @ 0x0
  5961                           
  5962  0051                     ??_EUSART_Initialize:	
  5963                           ; 1 bytes @ 0x0
  5964                           
  5965  0051                     ??_EUSART_Read:	
  5966                           ; 1 bytes @ 0x0
  5967                           
  5968  0051                     ??_EUSART_Write:	
  5969                           ; 1 bytes @ 0x0
  5970                           
  5971  0051                     ??_CCP1_Initialize:	
  5972                           ; 1 bytes @ 0x0
  5973                           
  5974  0051                     ??_CCP2_Initialize:	
  5975                           ; 1 bytes @ 0x0
  5976                           
  5977  0051                     ??_ADC_Initialize:	
  5978                           ; 1 bytes @ 0x0
  5979                           
  5980  0051                     ?_INT_SetInterruptHandler:	
  5981                           ; 1 bytes @ 0x0
  5982                           
  5983  0051                     ??_millisReset:	
  5984                           ; 1 bytes @ 0x0
  5985                           
  5986  0051                     ?_highByte:	
  5987                           ; 1 bytes @ 0x0
  5988                           
  5989  0051                     ?_lowByte:	
  5990                           ; 1 bytes @ 0x0
  5991                           
  5992  0051                     ??_ModbusMasterInit:	
  5993                           ; 1 bytes @ 0x0
  5994                           
  5995  0051                     ?_preTransmission:	
  5996                           ; 1 bytes @ 0x0
  5997                           
  5998  0051                     ?_postTransmission:	
  5999                           ; 1 bytes @ 0x0
  6000                           
  6001  0051                     ??_preTransmission_App:	
  6002                           ; 1 bytes @ 0x0
  6003                           
  6004  0051                     ??_postTransmission_App:	
  6005                           ; 1 bytes @ 0x0
  6006                           
  6007  0051                     ?_crc16_update:	
  6008                           ; 1 bytes @ 0x0
  6009                           
  6010  0051                     ?_word:	
  6011                           ; 2 bytes @ 0x0
  6012                           
  6013  0051                     ?_getResponseBuffer:	
  6014                           ; 2 bytes @ 0x0
  6015                           
  6016  0051                     ?___wmul:	
  6017                           ; 2 bytes @ 0x0
  6018                           
  6019  0051                     ?___lwdiv:	
  6020                           ; 2 bytes @ 0x0
  6021                           
  6022  0051                     ?_millis:	
  6023                           ; 2 bytes @ 0x0
  6024                           
  6025  0051                     EUSART_Write@txData:	
  6026                           ; 4 bytes @ 0x0
  6027                           
  6028  0051                     word@lowByte:	
  6029                           ; 1 bytes @ 0x0
  6030                           
  6031  0051                     TMR5_WriteTimer@timerVal:	
  6032                           ; 1 bytes @ 0x0
  6033                           
  6034  0051                     TMR5_SetInterruptHandler@InterruptHandler:	
  6035                           ; 2 bytes @ 0x0
  6036                           
  6037  0051                     TMR3_WriteTimer@timerVal:	
  6038                           ; 2 bytes @ 0x0
  6039                           
  6040  0051                     TMR3_SetInterruptHandler@InterruptHandler:	
  6041                           ; 2 bytes @ 0x0
  6042                           
  6043  0051                     TMR0_SetInterruptHandler@InterruptHandler:	
  6044                           ; 2 bytes @ 0x0
  6045                           
  6046  0051                     IOCCF4_SetInterruptHandler@InterruptHandler:	
  6047                           ; 2 bytes @ 0x0
  6048                           
  6049  0051                     IOCCF5_SetInterruptHandler@InterruptHandler:	
  6050                           ; 2 bytes @ 0x0
  6051                           
  6052  0051                     INT_SetInterruptHandler@InterruptHandler:	
  6053                           ; 2 bytes @ 0x0
  6054                           
  6055  0051                     crc16_update@crc:	
  6056                           ; 2 bytes @ 0x0
  6057                           
  6058  0051                     highByte@ww:	
  6059                           ; 2 bytes @ 0x0
  6060                           
  6061  0051                     lowByte@ww:	
  6062                           ; 2 bytes @ 0x0
  6063                           
  6064  0051                     preTransmission@preTransmission:	
  6065                           ; 2 bytes @ 0x0
  6066                           
  6067  0051                     postTransmission@postTransmission:	
  6068                           ; 2 bytes @ 0x0
  6069                           
  6070  0051                     ___wmul@multiplier:	
  6071                           ; 2 bytes @ 0x0
  6072                           
  6073  0051                     ___lwdiv@divisor:	
  6074                           ; 2 bytes @ 0x0
  6075                           
  6076                           
  6077                           ; 2 bytes @ 0x0
  6078  0051                     	ds	1
  6079  0052                     ModbusMasterInit@slave:	
  6080                           
  6081                           ; 1 bytes @ 0x1
  6082  0052                     	ds	1
  6083  0053                     ??_TMR5_SetInterruptHandler:	
  6084  0053                     ??_TMR3_SetInterruptHandler:	
  6085                           ; 1 bytes @ 0x2
  6086                           
  6087  0053                     ??_TMR0_SetInterruptHandler:	
  6088                           ; 1 bytes @ 0x2
  6089                           
  6090  0053                     ??_IOCCF4_SetInterruptHandler:	
  6091                           ; 1 bytes @ 0x2
  6092                           
  6093  0053                     ??_IOCCF5_SetInterruptHandler:	
  6094                           ; 1 bytes @ 0x2
  6095                           
  6096  0053                     ??_EXT_INT_Initialize:	
  6097                           ; 1 bytes @ 0x2
  6098                           
  6099  0053                     ??_ModbusMasterSetup:	
  6100                           ; 1 bytes @ 0x2
  6101                           
  6102  0053                     ??_NutRunCycleStart:	
  6103                           ; 1 bytes @ 0x2
  6104                           
  6105  0053                     ??_TMR5_Initialize:	
  6106                           ; 1 bytes @ 0x2
  6107                           
  6108  0053                     ??_TMR5_WriteTimer:	
  6109                           ; 1 bytes @ 0x2
  6110                           
  6111  0053                     ??_TMR3_Initialize:	
  6112                           ; 1 bytes @ 0x2
  6113                           
  6114  0053                     ??_TMR3_WriteTimer:	
  6115                           ; 1 bytes @ 0x2
  6116                           
  6117  0053                     ??_TMR0_Initialize:	
  6118                           ; 1 bytes @ 0x2
  6119                           
  6120  0053                     ??_PIN_MANAGER_Initialize:	
  6121                           ; 1 bytes @ 0x2
  6122                           
  6123  0053                     ??_INT_SetInterruptHandler:	
  6124                           ; 1 bytes @ 0x2
  6125                           
  6126  0053                     ??_highByte:	
  6127                           ; 1 bytes @ 0x2
  6128                           
  6129  0053                     ??_lowByte:	
  6130                           ; 1 bytes @ 0x2
  6131                           
  6132  0053                     ??_word:	
  6133                           ; 1 bytes @ 0x2
  6134                           
  6135  0053                     ??_preTransmission:	
  6136                           ; 1 bytes @ 0x2
  6137                           
  6138  0053                     ??_postTransmission:	
  6139                           ; 1 bytes @ 0x2
  6140                           
  6141  0053                     ??_getResponseBuffer:	
  6142                           ; 1 bytes @ 0x2
  6143                           
  6144  0053                     PIN_MANAGER_Initialize@state:	
  6145                           ; 1 bytes @ 0x2
  6146                           
  6147  0053                     crc16_update@a:	
  6148                           ; 1 bytes @ 0x2
  6149                           
  6150  0053                     ___wmul@multiplicand:	
  6151                           ; 1 bytes @ 0x2
  6152                           
  6153  0053                     ___lwdiv@dividend:	
  6154                           ; 2 bytes @ 0x2
  6155                           
  6156                           
  6157                           ; 2 bytes @ 0x2
  6158  0053                     	ds	1
  6159  0054                     ??_SYSTEM_Initialize:	
  6160  0054                     ??_crc16_update:	
  6161                           ; 1 bytes @ 0x3
  6162                           
  6163                           
  6164                           ; 1 bytes @ 0x3
  6165  0054                     	ds	1
  6166  0055                     ??_millis:	
  6167  0055                     ??___wmul:	
  6168                           ; 1 bytes @ 0x4
  6169                           
  6170  0055                     ??___lwdiv:	
  6171                           ; 1 bytes @ 0x4
  6172                           
  6173  0055                     ___wmul@product:	
  6174                           ; 1 bytes @ 0x4
  6175                           
  6176                           
  6177                           ; 2 bytes @ 0x4
  6178  0055                     	ds	1
  6179  0056                     crc16_update@i:	
  6180  0056                     ___lwdiv@quotient:	
  6181                           ; 2 bytes @ 0x5
  6182                           
  6183                           
  6184                           ; 2 bytes @ 0x5
  6185  0056                     	ds	1
  6186  0057                     getResponseBuffer@u8Index:	
  6187                           
  6188                           ; 1 bytes @ 0x6
  6189  0057                     	ds	1
  6190  0058                     ___lwdiv@counter:	
  6191                           
  6192                           ; 1 bytes @ 0x7
  6193  0058                     	ds	1
  6194  0059                     ?_LedONStartConfig:	
  6195  0059                     LedONStartConfig@LedONDurationSec:	
  6196                           ; 1 bytes @ 0x8
  6197                           
  6198                           
  6199                           ; 1 bytes @ 0x8
  6200  0059                     	ds	1
  6201  005A                     word@highByte:	
  6202  005A                     LedONStartConfig@LedONNumBlink:	
  6203                           ; 1 bytes @ 0x9
  6204                           
  6205                           
  6206                           ; 1 bytes @ 0x9
  6207  005A                     	ds	1
  6208  005B                     ??_LedONStartConfig:	
  6209  005B                     ??_ModbusMasterTransaction:	
  6210                           ; 1 bytes @ 0xA
  6211                           
  6212                           
  6213                           ; 1 bytes @ 0xA
  6214  005B                     	ds	2
  6215  005D                     LedONStartConfig@LEDcolor:	
  6216                           
  6217                           ; 1 bytes @ 0xC
  6218  005D                     	ds	1
  6219  005E                     ??_EPC_StateMachineControlLoop:	
  6220                           
  6221                           ; 1 bytes @ 0xD
  6222  005E                     	ds	2
  6223  0060                     ?_readHoldingRegisters:	
  6224  0060                     readHoldingRegisters@u16ReadAddress:	
  6225                           ; 1 bytes @ 0xF
  6226                           
  6227                           
  6228                           ; 2 bytes @ 0xF
  6229  0060                     	ds	2
  6230  0062                     readHoldingRegisters@u16ReadQty:	
  6231                           
  6232                           ; 2 bytes @ 0x11
  6233  0062                     	ds	2
  6234  0064                     ??_MB_UpdateEPCParameter:	
  6235  0064                     ??_readHoldingRegisters:	
  6236                           ; 1 bytes @ 0x13
  6237                           
  6238                           
  6239                           ; 1 bytes @ 0x13
  6240  0064                     	ds	1
  6241  0065                     MB_UpdateEPCParameter@result:	
  6242                           
  6243                           ; 1 bytes @ 0x14
  6244  0065                     	ds	1
  6245  0066                     ??_main:	
  6246                           
  6247                           	psect	maintext
  6248  0FB9                     __pmaintext:	
  6249                           ; 1 bytes @ 0x15
  6250 ;;
  6251 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6252 ;;
  6253 ;; *************** function _main *****************
  6254 ;; Defined at:
  6255 ;;		line 108 in file "main.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;		None
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;		None
  6260 ;; Return value:  Size  Location     Type
  6261 ;;                  1    wreg      void 
  6262 ;; Registers used:
  6263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6264 ;; Tracked objects:
  6265 ;;		On entry : B1F/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6269 ;;      Params:         0       0       0       0       0       0       0       0
  6270 ;;      Locals:         0       0       0       0       0       0       0       0
  6271 ;;      Temps:          0       0       0       0       0       0       0       0
  6272 ;;      Totals:         0       0       0       0       0       0       0       0
  6273 ;;Total ram usage:        0 bytes
  6274 ;; Hardware stack levels required when called:    9
  6275 ;; This function calls:
  6276 ;;		_EPC_StateMachineControlLoop
  6277 ;;		_LedONStartConfig
  6278 ;;		_LedONStatusBusy
  6279 ;;		_MB_UpdateEPCParameter
  6280 ;;		_ModbusMasterSetup
  6281 ;;		_NutRunCycleStart
  6282 ;;		_SYSTEM_Initialize
  6283 ;;		_TMR3_StopTimer
  6284 ;;		_TMR3_WriteTimer
  6285 ;;		_TMR5_StopTimer
  6286 ;;		_TMR5_WriteTimer
  6287 ;;		_getEncoderState
  6288 ;; This function is called by:
  6289 ;;		Startup code after reset
  6290 ;; This function uses a non-reentrant model
  6291 ;;
  6292                           
  6293                           
  6294                           ;psect for function _main
  6295  0FB9                     _main:	
  6296                           
  6297                           ;main.c: 111: SYSTEM_Initialize();
  6298                           
  6299                           ;incstack = 0
  6300                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6301  0FB9  318E  2683  318F   	fcall	_SYSTEM_Initialize
  6302                           
  6303                           ;main.c: 118: TMR3_WriteTimer(0);
  6304  0FBC  3000               	movlw	0
  6305  0FBD  0020               	movlb	0	; select bank0
  6306  0FBE  00D1               	movwf	TMR3_WriteTimer@timerVal
  6307  0FBF  00D2               	movwf	TMR3_WriteTimer@timerVal+1
  6308  0FC0  318D  25B3  318F   	fcall	_TMR3_WriteTimer
  6309                           
  6310                           ;main.c: 119: TMR3_StopTimer();
  6311  0FC3  318B  23EE  318F   	fcall	_TMR3_StopTimer
  6312                           
  6313                           ;main.c: 120: TMR5_WriteTimer(0);
  6314  0FC6  3000               	movlw	0
  6315  0FC7  0020               	movlb	0	; select bank0
  6316  0FC8  00D1               	movwf	TMR5_WriteTimer@timerVal
  6317  0FC9  00D2               	movwf	TMR5_WriteTimer@timerVal+1
  6318  0FCA  318D  25CA  318F   	fcall	_TMR5_WriteTimer
  6319                           
  6320                           ;main.c: 121: TMR5_StopTimer();
  6321  0FCD  318B  23F1  318F   	fcall	_TMR5_StopTimer
  6322                           
  6323                           ;main.c: 123: ModbusMasterSetup();
  6324  0FD0  318D  25F9  318F   	fcall	_ModbusMasterSetup
  6325                           
  6326                           ;main.c: 124: EncPulseOpState=0;
  6327  0FD3  0020               	movlb	0	; select bank0
  6328  0FD4  01C0               	clrf	_EncPulseOpState
  6329  0FD5  01C1               	clrf	_EncPulseOpState+1
  6330                           
  6331                           ;main.c: 126: INLVLC = 0xFF;
  6332  0FD6  30FF               	movlw	255
  6333  0FD7  0027               	movlb	7	; select bank7
  6334  0FD8  008E               	movwf	14	;volatile
  6335                           
  6336                           ;main.c: 127: INLVLA = 0xFF;
  6337  0FD9  30FF               	movlw	255
  6338  0FDA  008C               	movwf	12	;volatile
  6339                           
  6340                           ;main.c: 129: getEncoderState();
  6341  0FDB  318C  24A2  318F   	fcall	_getEncoderState
  6342                           
  6343                           ;main.c: 130: OldEncPulseOpState=EncPulseOpState;
  6344  0FDE  0020               	movlb	0	; select bank0
  6345  0FDF  0841               	movf	_EncPulseOpState+1,w
  6346  0FE0  00C3               	movwf	_OldEncPulseOpState+1
  6347  0FE1  0840               	movf	_EncPulseOpState,w
  6348  0FE2  00C2               	movwf	_OldEncPulseOpState
  6349                           
  6350                           ;main.c: 131: NutRunCycleStart();
  6351  0FE3  318D  252F  318F   	fcall	_NutRunCycleStart
  6352                           
  6353                           ;main.c: 141: (INTCONbits.GIE = 1);
  6354  0FE6  178B               	bsf	11,7	;volatile
  6355                           
  6356                           ;main.c: 144: (INTCONbits.PEIE = 1);
  6357  0FE7  170B               	bsf	11,6	;volatile
  6358                           
  6359                           ;main.c: 146: LedONStartConfig(0, 1, 1);
  6360  0FE8  0020               	movlb	0	; select bank0
  6361  0FE9  01D9               	clrf	LedONStartConfig@LedONDurationSec
  6362  0FEA  0AD9               	incf	LedONStartConfig@LedONDurationSec,f
  6363  0FEB  01DA               	clrf	LedONStartConfig@LedONNumBlink
  6364  0FEC  0ADA               	incf	LedONStartConfig@LedONNumBlink,f
  6365  0FED  3000               	movlw	0
  6366  0FEE  3187  271F  318F   	fcall	_LedONStartConfig
  6367  0FF1                     l6263:	
  6368                           ;main.c: 147: while(LedONStatusBusy());
  6369                           
  6370  0FF1  318B  23D9  318F   	fcall	_LedONStatusBusy
  6371  0FF4  3A00               	xorlw	0
  6372  0FF5  1D03               	skipz
  6373  0FF6  2FF1               	goto	l6263
  6374                           
  6375                           ;main.c: 153: do { LATBbits.LATB6 = 1; } while(0);
  6376  0FF7  0022               	movlb	2	; select bank2
  6377  0FF8  170D               	bsf	13,6	;volatile
  6378                           
  6379                           ;main.c: 159: MB_UpdateEPCParameter();
  6380  0FF9  3187  27E2  318F   	fcall	_MB_UpdateEPCParameter
  6381  0FFC                     l6267:	
  6382                           ;main.c: 161: while (1)
  6383                           
  6384                           
  6385                           ;main.c: 162: {
  6386                           ;main.c: 174: EPC_StateMachineControlLoop();
  6387  0FFC  318F  277F  318F   	fcall	_EPC_StateMachineControlLoop
  6388  0FFF  2FFC               	goto	l6267
  6389  1000                     __end_of_main:	
  6390                           
  6391                           	psect	text1
  6392  0CA2                     __ptext1:	
  6393 ;; *************** function _getEncoderState *****************
  6394 ;; Defined at:
  6395 ;;		line 546 in file "main.c"
  6396 ;; Parameters:    Size  Location     Type
  6397 ;;		None
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;		None
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  1    wreg      void 
  6402 ;; Registers used:
  6403 ;;		wreg, status,2
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6409 ;;      Params:         0       0       0       0       0       0       0       0
  6410 ;;      Locals:         0       0       0       0       0       0       0       0
  6411 ;;      Temps:          0       0       0       0       0       0       0       0
  6412 ;;      Totals:         0       0       0       0       0       0       0       0
  6413 ;;Total ram usage:        0 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:    5
  6416 ;; This function calls:
  6417 ;;		Nothing
  6418 ;; This function is called by:
  6419 ;;		_main
  6420 ;;		_OnEncPulseEdgeEvent
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           
  6425                           ;psect for function _getEncoderState
  6426  0CA2                     _getEncoderState:	
  6427                           
  6428                           ;main.c: 548: if(PORTCbits.RC5)
  6429                           
  6430                           ;incstack = 0
  6431                           ; Regs used in _getEncoderState: [wreg+status,2]
  6432  0CA2  0020               	movlb	0	; select bank0
  6433  0CA3  1E8E               	btfss	14,5	;volatile
  6434  0CA4  2CAA               	goto	l3827
  6435                           
  6436                           ;main.c: 549: {
  6437                           ;main.c: 551: EncPulseOpState= 1;
  6438  0CA5  3001               	movlw	1
  6439  0CA6  00C0               	movwf	_EncPulseOpState
  6440  0CA7  3000               	movlw	0
  6441  0CA8  00C1               	movwf	_EncPulseOpState+1
  6442                           
  6443                           ;main.c: 554: }
  6444  0CA9  0008               	return
  6445  0CAA                     l3827:	
  6446                           
  6447                           ;main.c: 555: else
  6448                           ;main.c: 556: {
  6449                           ;main.c: 558: EncPulseOpState= 0;
  6450  0CAA  01C0               	clrf	_EncPulseOpState
  6451  0CAB  01C1               	clrf	_EncPulseOpState+1
  6452  0CAC  0008               	return
  6453  0CAD                     __end_of_getEncoderState:	
  6454                           
  6455                           	psect	text2
  6456  0DCA                     __ptext2:	
  6457 ;; *************** function _TMR5_WriteTimer *****************
  6458 ;; Defined at:
  6459 ;;		line 117 in file "mcc_generated_files/tmr5.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;  timerVal        2    0[BANK0 ] unsigned int 
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;		None
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  1    wreg      void 
  6466 ;; Registers used:
  6467 ;;		wreg, status,2
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6473 ;;      Params:         0       2       0       0       0       0       0       0
  6474 ;;      Locals:         0       0       0       0       0       0       0       0
  6475 ;;      Temps:          0       0       0       0       0       0       0       0
  6476 ;;      Totals:         0       2       0       0       0       0       0       0
  6477 ;;Total ram usage:        2 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; Hardware stack levels required when called:    5
  6480 ;; This function calls:
  6481 ;;		Nothing
  6482 ;; This function is called by:
  6483 ;;		_main
  6484 ;;		_NutRunCycleStop
  6485 ;; This function uses a non-reentrant model
  6486 ;;
  6487                           
  6488                           
  6489                           ;psect for function _TMR5_WriteTimer
  6490  0DCA                     _TMR5_WriteTimer:	
  6491                           
  6492                           ;tmr5.c: 119: if (T5CONbits.T5SYNC == 1)
  6493                           
  6494                           ;incstack = 0
  6495                           ; Regs used in _TMR5_WriteTimer: [wreg+status,2]
  6496  0DCA  0028               	movlb	8	; select bank8
  6497  0DCB  1D1A               	btfss	26,2	;volatile
  6498  0DCC  2DD8               	goto	l3771
  6499                           
  6500                           ;tmr5.c: 120: {
  6501                           ;tmr5.c: 122: T5CONbits.TMR5ON = 0;
  6502  0DCD  101A               	bcf	26,0	;volatile
  6503                           
  6504                           ;tmr5.c: 125: TMR5H = (timerVal >> 8);
  6505  0DCE  0020               	movlb	0	; select bank0
  6506  0DCF  0852               	movf	TMR5_WriteTimer@timerVal+1,w
  6507  0DD0  0028               	movlb	8	; select bank8
  6508  0DD1  0099               	movwf	25	;volatile
  6509                           
  6510                           ;tmr5.c: 126: TMR5L = timerVal;
  6511  0DD2  0020               	movlb	0	; select bank0
  6512  0DD3  0851               	movf	TMR5_WriteTimer@timerVal,w
  6513  0DD4  0028               	movlb	8	; select bank8
  6514  0DD5  0098               	movwf	24	;volatile
  6515                           
  6516                           ;tmr5.c: 129: T5CONbits.TMR5ON =1;
  6517  0DD6  141A               	bsf	26,0	;volatile
  6518                           
  6519                           ;tmr5.c: 130: }
  6520  0DD7  0008               	return
  6521  0DD8                     l3771:	
  6522                           
  6523                           ;tmr5.c: 131: else
  6524                           ;tmr5.c: 132: {
  6525                           ;tmr5.c: 134: TMR5H = (timerVal >> 8);
  6526  0DD8  0020               	movlb	0	; select bank0
  6527  0DD9  0852               	movf	TMR5_WriteTimer@timerVal+1,w
  6528  0DDA  0028               	movlb	8	; select bank8
  6529  0DDB  0099               	movwf	25	;volatile
  6530                           
  6531                           ;tmr5.c: 135: TMR5L = timerVal;
  6532  0DDC  0020               	movlb	0	; select bank0
  6533  0DDD  0851               	movf	TMR5_WriteTimer@timerVal,w
  6534  0DDE  0028               	movlb	8	; select bank8
  6535  0DDF  0098               	movwf	24	;volatile
  6536  0DE0  0008               	return
  6537  0DE1                     __end_of_TMR5_WriteTimer:	
  6538                           
  6539                           	psect	text3
  6540  0BF1                     __ptext3:	
  6541 ;; *************** function _TMR5_StopTimer *****************
  6542 ;; Defined at:
  6543 ;;		line 102 in file "mcc_generated_files/tmr5.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;		None
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;		None
  6548 ;; Return value:  Size  Location     Type
  6549 ;;                  1    wreg      void 
  6550 ;; Registers used:
  6551 ;;		None
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6557 ;;      Params:         0       0       0       0       0       0       0       0
  6558 ;;      Locals:         0       0       0       0       0       0       0       0
  6559 ;;      Temps:          0       0       0       0       0       0       0       0
  6560 ;;      Totals:         0       0       0       0       0       0       0       0
  6561 ;;Total ram usage:        0 bytes
  6562 ;; Hardware stack levels used:    1
  6563 ;; Hardware stack levels required when called:    5
  6564 ;; This function calls:
  6565 ;;		Nothing
  6566 ;; This function is called by:
  6567 ;;		_main
  6568 ;;		_NutRunCycleStop
  6569 ;; This function uses a non-reentrant model
  6570 ;;
  6571                           
  6572                           
  6573                           ;psect for function _TMR5_StopTimer
  6574  0BF1                     _TMR5_StopTimer:	
  6575                           
  6576                           ;tmr5.c: 105: T5CONbits.TMR5ON = 0;
  6577                           
  6578                           ;incstack = 0
  6579                           ; Regs used in _TMR5_StopTimer: []
  6580  0BF1  0028               	movlb	8	; select bank8
  6581  0BF2  101A               	bcf	26,0	;volatile
  6582  0BF3  0008               	return
  6583  0BF4                     __end_of_TMR5_StopTimer:	
  6584                           
  6585                           	psect	text4
  6586  0BEE                     __ptext4:	
  6587 ;; *************** function _TMR3_StopTimer *****************
  6588 ;; Defined at:
  6589 ;;		line 102 in file "mcc_generated_files/tmr3.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;		None
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;		None
  6594 ;; Return value:  Size  Location     Type
  6595 ;;                  1    wreg      void 
  6596 ;; Registers used:
  6597 ;;		None
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6603 ;;      Params:         0       0       0       0       0       0       0       0
  6604 ;;      Locals:         0       0       0       0       0       0       0       0
  6605 ;;      Temps:          0       0       0       0       0       0       0       0
  6606 ;;      Totals:         0       0       0       0       0       0       0       0
  6607 ;;Total ram usage:        0 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    5
  6610 ;; This function calls:
  6611 ;;		Nothing
  6612 ;; This function is called by:
  6613 ;;		_main
  6614 ;;		_NutRunCycleStop
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           
  6619                           ;psect for function _TMR3_StopTimer
  6620  0BEE                     _TMR3_StopTimer:	
  6621                           
  6622                           ;tmr3.c: 105: T3CONbits.TMR3ON = 0;
  6623                           
  6624                           ;incstack = 0
  6625                           ; Regs used in _TMR3_StopTimer: []
  6626  0BEE  0028               	movlb	8	; select bank8
  6627  0BEF  1013               	bcf	19,0	;volatile
  6628  0BF0  0008               	return
  6629  0BF1                     __end_of_TMR3_StopTimer:	
  6630                           
  6631                           	psect	text5
  6632  0E83                     __ptext5:	
  6633 ;; *************** function _SYSTEM_Initialize *****************
  6634 ;; Defined at:
  6635 ;;		line 76 in file "mcc_generated_files/mcc.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;		None
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;		None
  6640 ;; Return value:  Size  Location     Type
  6641 ;;                  1    wreg      void 
  6642 ;; Registers used:
  6643 ;;		wreg, status,2, status,0, pclath, cstack
  6644 ;; Tracked objects:
  6645 ;;		On entry : 0/0
  6646 ;;		On exit  : 0/0
  6647 ;;		Unchanged: 0/0
  6648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6649 ;;      Params:         0       0       0       0       0       0       0       0
  6650 ;;      Locals:         0       0       0       0       0       0       0       0
  6651 ;;      Temps:          0       0       0       0       0       0       0       0
  6652 ;;      Totals:         0       0       0       0       0       0       0       0
  6653 ;;Total ram usage:        0 bytes
  6654 ;; Hardware stack levels used:    1
  6655 ;; Hardware stack levels required when called:    7
  6656 ;; This function calls:
  6657 ;;		_ADC_Initialize
  6658 ;;		_CCP1_Initialize
  6659 ;;		_CCP2_Initialize
  6660 ;;		_EUSART_Initialize
  6661 ;;		_EXT_INT_Initialize
  6662 ;;		_OSCILLATOR_Initialize
  6663 ;;		_PIN_MANAGER_Initialize
  6664 ;;		_TMR0_Initialize
  6665 ;;		_TMR3_Initialize
  6666 ;;		_TMR5_Initialize
  6667 ;;		_WDT_Initialize
  6668 ;; This function is called by:
  6669 ;;		_main
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           
  6674                           ;psect for function _SYSTEM_Initialize
  6675  0E83                     _SYSTEM_Initialize:	
  6676                           
  6677                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  6678                           
  6679                           ;incstack = 0
  6680                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6681  0E83  3187  2781  318E   	fcall	_PIN_MANAGER_Initialize
  6682                           
  6683                           ;mcc.c: 80: OSCILLATOR_Initialize();
  6684  0E86  318C  242B  318E   	fcall	_OSCILLATOR_Initialize
  6685                           
  6686                           ;mcc.c: 81: WDT_Initialize();
  6687  0E89  318B  23F4  318E   	fcall	_WDT_Initialize
  6688                           
  6689                           ;mcc.c: 82: CCP2_Initialize();
  6690  0E8C  318C  2445  318E   	fcall	_CCP2_Initialize
  6691                           
  6692                           ;mcc.c: 83: ADC_Initialize();
  6693  0E8F  318C  243C  318E   	fcall	_ADC_Initialize
  6694                           
  6695                           ;mcc.c: 84: TMR3_Initialize();
  6696  0E92  318E  2612  318E   	fcall	_TMR3_Initialize
  6697                           
  6698                           ;mcc.c: 85: CCP1_Initialize();
  6699  0E95  318D  253E  318E   	fcall	_CCP1_Initialize
  6700                           
  6701                           ;mcc.c: 86: TMR5_Initialize();
  6702  0E98  318E  262D  318E   	fcall	_TMR5_Initialize
  6703                           
  6704                           ;mcc.c: 87: EXT_INT_Initialize();
  6705  0E9B  318C  24C5  318E   	fcall	_EXT_INT_Initialize
  6706                           
  6707                           ;mcc.c: 88: TMR0_Initialize();
  6708  0E9E  318D  2587  318E   	fcall	_TMR0_Initialize
  6709                           
  6710                           ;mcc.c: 89: EUSART_Initialize();
  6711  0EA1  318C  24B9         	fcall	_EUSART_Initialize
  6712  0EA3  0008               	return
  6713  0EA4                     __end_of_SYSTEM_Initialize:	
  6714                           
  6715                           	psect	text6
  6716  0BF4                     __ptext6:	
  6717 ;; *************** function _WDT_Initialize *****************
  6718 ;; Defined at:
  6719 ;;		line 108 in file "mcc_generated_files/mcc.c"
  6720 ;; Parameters:    Size  Location     Type
  6721 ;;		None
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;		None
  6724 ;; Return value:  Size  Location     Type
  6725 ;;                  1    wreg      void 
  6726 ;; Registers used:
  6727 ;;		wreg
  6728 ;; Tracked objects:
  6729 ;;		On entry : 0/0
  6730 ;;		On exit  : 0/0
  6731 ;;		Unchanged: 0/0
  6732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6733 ;;      Params:         0       0       0       0       0       0       0       0
  6734 ;;      Locals:         0       0       0       0       0       0       0       0
  6735 ;;      Temps:          0       0       0       0       0       0       0       0
  6736 ;;      Totals:         0       0       0       0       0       0       0       0
  6737 ;;Total ram usage:        0 bytes
  6738 ;; Hardware stack levels used:    1
  6739 ;; Hardware stack levels required when called:    5
  6740 ;; This function calls:
  6741 ;;		Nothing
  6742 ;; This function is called by:
  6743 ;;		_SYSTEM_Initialize
  6744 ;; This function uses a non-reentrant model
  6745 ;;
  6746                           
  6747                           
  6748                           ;psect for function _WDT_Initialize
  6749  0BF4                     _WDT_Initialize:	
  6750                           
  6751                           ;mcc.c: 111: WDTCON = 0x16;
  6752                           
  6753                           ;incstack = 0
  6754                           ; Regs used in _WDT_Initialize: [wreg]
  6755  0BF4  3016               	movlw	22
  6756  0BF5  0021               	movlb	1	; select bank1
  6757  0BF6  0097               	movwf	23	;volatile
  6758  0BF7  0008               	return
  6759  0BF8                     __end_of_WDT_Initialize:	
  6760                           
  6761                           	psect	text7
  6762  0E2D                     __ptext7:	
  6763 ;; *************** function _TMR5_Initialize *****************
  6764 ;; Defined at:
  6765 ;;		line 64 in file "mcc_generated_files/tmr5.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;		None
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;		None
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  1    wreg      void 
  6772 ;; Registers used:
  6773 ;;		wreg, status,2, status,0, pclath, cstack
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6779 ;;      Params:         0       0       0       0       0       0       0       0
  6780 ;;      Locals:         0       0       0       0       0       0       0       0
  6781 ;;      Temps:          0       0       0       0       0       0       0       0
  6782 ;;      Totals:         0       0       0       0       0       0       0       0
  6783 ;;Total ram usage:        0 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; Hardware stack levels required when called:    6
  6786 ;; This function calls:
  6787 ;;		_TMR5_SetInterruptHandler
  6788 ;;		_TMR5_StartTimer
  6789 ;; This function is called by:
  6790 ;;		_SYSTEM_Initialize
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           
  6795                           ;psect for function _TMR5_Initialize
  6796  0E2D                     _TMR5_Initialize:	
  6797                           
  6798                           ;tmr5.c: 69: T5CON = 0x30;
  6799                           
  6800                           ;incstack = 0
  6801                           ; Regs used in _TMR5_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6802  0E2D  3030               	movlw	48
  6803  0E2E  0028               	movlb	8	; select bank8
  6804  0E2F  009A               	movwf	26	;volatile
  6805                           
  6806                           ;tmr5.c: 72: T5GCON = 0x00;
  6807  0E30  019B               	clrf	27	;volatile
  6808                           
  6809                           ;tmr5.c: 75: TMR5H = 0x00;
  6810  0E31  0199               	clrf	25	;volatile
  6811                           
  6812                           ;tmr5.c: 78: TMR5L = 0x00;
  6813  0E32  0198               	clrf	24	;volatile
  6814                           
  6815                           ;tmr5.c: 81: timer5ReloadVal=(TMR5H << 8) | TMR5L;
  6816  0E33  0819               	movf	25,w	;volatile
  6817  0E34  0020               	movlb	0	; select bank0
  6818  0E35  00EE               	movwf	_timer5ReloadVal+1	;volatile
  6819  0E36  0028               	movlb	8	; select bank8
  6820  0E37  0818               	movf	24,w	;volatile
  6821  0E38  0020               	movlb	0	; select bank0
  6822  0E39  00ED               	movwf	_timer5ReloadVal	;volatile
  6823                           
  6824                           ;tmr5.c: 84: PIR4bits.TMR5IF = 0;
  6825  0E3A  1214               	bcf	20,4	;volatile
  6826                           
  6827                           ;tmr5.c: 87: PIE4bits.TMR5IE = 1;
  6828  0E3B  0021               	movlb	1	; select bank1
  6829  0E3C  1614               	bsf	20,4	;volatile
  6830                           
  6831                           ;tmr5.c: 90: TMR5_SetInterruptHandler(TMR5_DefaultInterruptHandler);
  6832  0E3D  30D6               	movlw	low _TMR5_DefaultInterruptHandler
  6833  0E3E  0020               	movlb	0	; select bank0
  6834  0E3F  00D1               	movwf	TMR5_SetInterruptHandler@InterruptHandler
  6835  0E40  300B               	movlw	high _TMR5_DefaultInterruptHandler
  6836  0E41  00D2               	movwf	TMR5_SetInterruptHandler@InterruptHandler+1
  6837  0E42  318C  247B  318E   	fcall	_TMR5_SetInterruptHandler
  6838                           
  6839                           ;tmr5.c: 93: TMR5_StartTimer();
  6840  0E45  318B  23EB         	fcall	_TMR5_StartTimer
  6841  0E47  0008               	return
  6842  0E48                     __end_of_TMR5_Initialize:	
  6843                           
  6844                           	psect	text8
  6845  0BEB                     __ptext8:	
  6846 ;; *************** function _TMR5_StartTimer *****************
  6847 ;; Defined at:
  6848 ;;		line 96 in file "mcc_generated_files/tmr5.c"
  6849 ;; Parameters:    Size  Location     Type
  6850 ;;		None
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;		None
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  1    wreg      void 
  6855 ;; Registers used:
  6856 ;;		None
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/0
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6862 ;;      Params:         0       0       0       0       0       0       0       0
  6863 ;;      Locals:         0       0       0       0       0       0       0       0
  6864 ;;      Temps:          0       0       0       0       0       0       0       0
  6865 ;;      Totals:         0       0       0       0       0       0       0       0
  6866 ;;Total ram usage:        0 bytes
  6867 ;; Hardware stack levels used:    1
  6868 ;; Hardware stack levels required when called:    5
  6869 ;; This function calls:
  6870 ;;		Nothing
  6871 ;; This function is called by:
  6872 ;;		_TMR5_Initialize
  6873 ;; This function uses a non-reentrant model
  6874 ;;
  6875                           
  6876                           
  6877                           ;psect for function _TMR5_StartTimer
  6878  0BEB                     _TMR5_StartTimer:	
  6879                           
  6880                           ;tmr5.c: 99: T5CONbits.TMR5ON = 1;
  6881                           
  6882                           ;incstack = 0
  6883                           ; Regs used in _TMR5_StartTimer: []
  6884  0BEB  0028               	movlb	8	; select bank8
  6885  0BEC  141A               	bsf	26,0	;volatile
  6886  0BED  0008               	return
  6887  0BEE                     __end_of_TMR5_StartTimer:	
  6888                           
  6889                           	psect	text9
  6890  0C7B                     __ptext9:	
  6891 ;; *************** function _TMR5_SetInterruptHandler *****************
  6892 ;; Defined at:
  6893 ;;		line 172 in file "mcc_generated_files/tmr5.c"
  6894 ;; Parameters:    Size  Location     Type
  6895 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  6896 ;;		 -> TMR5_DefaultInterruptHandler(1), 
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      void 
  6901 ;; Registers used:
  6902 ;;		wreg
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6908 ;;      Params:         0       2       0       0       0       0       0       0
  6909 ;;      Locals:         0       0       0       0       0       0       0       0
  6910 ;;      Temps:          0       0       0       0       0       0       0       0
  6911 ;;      Totals:         0       2       0       0       0       0       0       0
  6912 ;;Total ram usage:        2 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:    5
  6915 ;; This function calls:
  6916 ;;		Nothing
  6917 ;; This function is called by:
  6918 ;;		_TMR5_Initialize
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           
  6923                           ;psect for function _TMR5_SetInterruptHandler
  6924  0C7B                     _TMR5_SetInterruptHandler:	
  6925                           
  6926                           ;tmr5.c: 173: TMR5_InterruptHandler = InterruptHandler;
  6927                           
  6928                           ;incstack = 0
  6929                           ; Regs used in _TMR5_SetInterruptHandler: [wreg]
  6930  0C7B  0020               	movlb	0	; select bank0
  6931  0C7C  0852               	movf	TMR5_SetInterruptHandler@InterruptHandler+1,w
  6932  0C7D  0022               	movlb	2	; select bank2
  6933  0C7E  00BF               	movwf	(_TMR5_InterruptHandler+1)^(0+256)
  6934  0C7F  0020               	movlb	0	; select bank0
  6935  0C80  0851               	movf	TMR5_SetInterruptHandler@InterruptHandler,w
  6936  0C81  0022               	movlb	2	; select bank2
  6937  0C82  00BE               	movwf	_TMR5_InterruptHandler^(0+256)
  6938  0C83  0008               	return
  6939  0C84                     __end_of_TMR5_SetInterruptHandler:	
  6940                           
  6941                           	psect	text10
  6942  0E12                     __ptext10:	
  6943 ;; *************** function _TMR3_Initialize *****************
  6944 ;; Defined at:
  6945 ;;		line 64 in file "mcc_generated_files/tmr3.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;		None
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;		None
  6950 ;; Return value:  Size  Location     Type
  6951 ;;                  1    wreg      void 
  6952 ;; Registers used:
  6953 ;;		wreg, status,2, status,0, pclath, cstack
  6954 ;; Tracked objects:
  6955 ;;		On entry : 0/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6959 ;;      Params:         0       0       0       0       0       0       0       0
  6960 ;;      Locals:         0       0       0       0       0       0       0       0
  6961 ;;      Temps:          0       0       0       0       0       0       0       0
  6962 ;;      Totals:         0       0       0       0       0       0       0       0
  6963 ;;Total ram usage:        0 bytes
  6964 ;; Hardware stack levels used:    1
  6965 ;; Hardware stack levels required when called:    6
  6966 ;; This function calls:
  6967 ;;		_TMR3_SetInterruptHandler
  6968 ;;		_TMR3_StartTimer
  6969 ;; This function is called by:
  6970 ;;		_SYSTEM_Initialize
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           
  6975                           ;psect for function _TMR3_Initialize
  6976  0E12                     _TMR3_Initialize:	
  6977                           
  6978                           ;tmr3.c: 69: T3CON = 0x30;
  6979                           
  6980                           ;incstack = 0
  6981                           ; Regs used in _TMR3_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6982  0E12  3030               	movlw	48
  6983  0E13  0028               	movlb	8	; select bank8
  6984  0E14  0093               	movwf	19	;volatile
  6985                           
  6986                           ;tmr3.c: 72: T3GCON = 0x00;
  6987  0E15  0194               	clrf	20	;volatile
  6988                           
  6989                           ;tmr3.c: 75: TMR3H = 0x00;
  6990  0E16  0192               	clrf	18	;volatile
  6991                           
  6992                           ;tmr3.c: 78: TMR3L = 0x00;
  6993  0E17  0191               	clrf	17	;volatile
  6994                           
  6995                           ;tmr3.c: 81: timer3ReloadVal=(TMR3H << 8) | TMR3L;
  6996  0E18  0812               	movf	18,w	;volatile
  6997  0E19  0020               	movlb	0	; select bank0
  6998  0E1A  00EC               	movwf	_timer3ReloadVal+1	;volatile
  6999  0E1B  0028               	movlb	8	; select bank8
  7000  0E1C  0811               	movf	17,w	;volatile
  7001  0E1D  0020               	movlb	0	; select bank0
  7002  0E1E  00EB               	movwf	_timer3ReloadVal	;volatile
  7003                           
  7004                           ;tmr3.c: 84: PIR3bits.TMR3IF = 0;
  7005  0E1F  1213               	bcf	19,4	;volatile
  7006                           
  7007                           ;tmr3.c: 87: PIE3bits.TMR3IE = 1;
  7008  0E20  0021               	movlb	1	; select bank1
  7009  0E21  1613               	bsf	19,4	;volatile
  7010                           
  7011                           ;tmr3.c: 90: TMR3_SetInterruptHandler(TMR3_DefaultInterruptHandler);
  7012  0E22  30D3               	movlw	low _TMR3_DefaultInterruptHandler
  7013  0E23  0020               	movlb	0	; select bank0
  7014  0E24  00D1               	movwf	TMR3_SetInterruptHandler@InterruptHandler
  7015  0E25  300B               	movlw	high _TMR3_DefaultInterruptHandler
  7016  0E26  00D2               	movwf	TMR3_SetInterruptHandler@InterruptHandler+1
  7017  0E27  318C  2472  318E   	fcall	_TMR3_SetInterruptHandler
  7018                           
  7019                           ;tmr3.c: 93: TMR3_StartTimer();
  7020  0E2A  318B  23E5         	fcall	_TMR3_StartTimer
  7021  0E2C  0008               	return
  7022  0E2D                     __end_of_TMR3_Initialize:	
  7023                           
  7024                           	psect	text11
  7025  0C72                     __ptext11:	
  7026 ;; *************** function _TMR3_SetInterruptHandler *****************
  7027 ;; Defined at:
  7028 ;;		line 172 in file "mcc_generated_files/tmr3.c"
  7029 ;; Parameters:    Size  Location     Type
  7030 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  7031 ;;		 -> TMR3_DefaultInterruptHandler(1), 
  7032 ;; Auto vars:     Size  Location     Type
  7033 ;;		None
  7034 ;; Return value:  Size  Location     Type
  7035 ;;                  1    wreg      void 
  7036 ;; Registers used:
  7037 ;;		wreg
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7043 ;;      Params:         0       2       0       0       0       0       0       0
  7044 ;;      Locals:         0       0       0       0       0       0       0       0
  7045 ;;      Temps:          0       0       0       0       0       0       0       0
  7046 ;;      Totals:         0       2       0       0       0       0       0       0
  7047 ;;Total ram usage:        2 bytes
  7048 ;; Hardware stack levels used:    1
  7049 ;; Hardware stack levels required when called:    5
  7050 ;; This function calls:
  7051 ;;		Nothing
  7052 ;; This function is called by:
  7053 ;;		_TMR3_Initialize
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057                           
  7058                           ;psect for function _TMR3_SetInterruptHandler
  7059  0C72                     _TMR3_SetInterruptHandler:	
  7060                           
  7061                           ;tmr3.c: 173: TMR3_InterruptHandler = InterruptHandler;
  7062                           
  7063                           ;incstack = 0
  7064                           ; Regs used in _TMR3_SetInterruptHandler: [wreg]
  7065  0C72  0020               	movlb	0	; select bank0
  7066  0C73  0852               	movf	TMR3_SetInterruptHandler@InterruptHandler+1,w
  7067  0C74  0022               	movlb	2	; select bank2
  7068  0C75  00BD               	movwf	(_TMR3_InterruptHandler+1)^(0+256)
  7069  0C76  0020               	movlb	0	; select bank0
  7070  0C77  0851               	movf	TMR3_SetInterruptHandler@InterruptHandler,w
  7071  0C78  0022               	movlb	2	; select bank2
  7072  0C79  00BC               	movwf	_TMR3_InterruptHandler^(0+256)
  7073  0C7A  0008               	return
  7074  0C7B                     __end_of_TMR3_SetInterruptHandler:	
  7075                           
  7076                           	psect	text12
  7077  0D87                     __ptext12:	
  7078 ;; *************** function _TMR0_Initialize *****************
  7079 ;; Defined at:
  7080 ;;		line 60 in file "mcc_generated_files/tmr0.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;		None
  7083 ;; Auto vars:     Size  Location     Type
  7084 ;;		None
  7085 ;; Return value:  Size  Location     Type
  7086 ;;                  1    wreg      void 
  7087 ;; Registers used:
  7088 ;;		wreg, status,2, status,0, pclath, cstack
  7089 ;; Tracked objects:
  7090 ;;		On entry : 0/0
  7091 ;;		On exit  : 0/0
  7092 ;;		Unchanged: 0/0
  7093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7094 ;;      Params:         0       0       0       0       0       0       0       0
  7095 ;;      Locals:         0       0       0       0       0       0       0       0
  7096 ;;      Temps:          0       0       0       0       0       0       0       0
  7097 ;;      Totals:         0       0       0       0       0       0       0       0
  7098 ;;Total ram usage:        0 bytes
  7099 ;; Hardware stack levels used:    1
  7100 ;; Hardware stack levels required when called:    6
  7101 ;; This function calls:
  7102 ;;		_TMR0_SetInterruptHandler
  7103 ;;		_TMR0_StartTimer
  7104 ;; This function is called by:
  7105 ;;		_SYSTEM_Initialize
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           
  7110                           ;psect for function _TMR0_Initialize
  7111  0D87                     _TMR0_Initialize:	
  7112                           
  7113                           ;tmr0.c: 65: T0CON0 = 0x00;
  7114                           
  7115                           ;incstack = 0
  7116                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7117  0D87  0020               	movlb	0	; select bank0
  7118  0D88  0197               	clrf	23	;volatile
  7119                           
  7120                           ;tmr0.c: 68: T0CON1 = 0x49;
  7121  0D89  3049               	movlw	73
  7122  0D8A  0098               	movwf	24	;volatile
  7123                           
  7124                           ;tmr0.c: 71: TMR0H = 0x9B;
  7125  0D8B  309B               	movlw	155
  7126  0D8C  0096               	movwf	22	;volatile
  7127                           
  7128                           ;tmr0.c: 74: TMR0L = 0x00;
  7129  0D8D  0195               	clrf	21	;volatile
  7130                           
  7131                           ;tmr0.c: 77: PIR0bits.TMR0IF = 0;
  7132  0D8E  1290               	bcf	16,5	;volatile
  7133                           
  7134                           ;tmr0.c: 80: PIE0bits.TMR0IE = 1;
  7135  0D8F  0021               	movlb	1	; select bank1
  7136  0D90  1690               	bsf	16,5	;volatile
  7137                           
  7138                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7139  0D91  30D2               	movlw	low _TMR0_DefaultInterruptHandler
  7140  0D92  0020               	movlb	0	; select bank0
  7141  0D93  00D1               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  7142  0D94  300B               	movlw	high _TMR0_DefaultInterruptHandler
  7143  0D95  00D2               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  7144  0D96  318C  2469  318D   	fcall	_TMR0_SetInterruptHandler
  7145                           
  7146                           ;tmr0.c: 86: TMR0_StartTimer();
  7147  0D99  318B  23E8         	fcall	_TMR0_StartTimer
  7148  0D9B  0008               	return
  7149  0D9C                     __end_of_TMR0_Initialize:	
  7150                           
  7151                           	psect	text13
  7152  0BE8                     __ptext13:	
  7153 ;; *************** function _TMR0_StartTimer *****************
  7154 ;; Defined at:
  7155 ;;		line 89 in file "mcc_generated_files/tmr0.c"
  7156 ;; Parameters:    Size  Location     Type
  7157 ;;		None
  7158 ;; Auto vars:     Size  Location     Type
  7159 ;;		None
  7160 ;; Return value:  Size  Location     Type
  7161 ;;                  1    wreg      void 
  7162 ;; Registers used:
  7163 ;;		None
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7169 ;;      Params:         0       0       0       0       0       0       0       0
  7170 ;;      Locals:         0       0       0       0       0       0       0       0
  7171 ;;      Temps:          0       0       0       0       0       0       0       0
  7172 ;;      Totals:         0       0       0       0       0       0       0       0
  7173 ;;Total ram usage:        0 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; Hardware stack levels required when called:    5
  7176 ;; This function calls:
  7177 ;;		Nothing
  7178 ;; This function is called by:
  7179 ;;		_TMR0_Initialize
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           
  7184                           ;psect for function _TMR0_StartTimer
  7185  0BE8                     _TMR0_StartTimer:	
  7186                           
  7187                           ;tmr0.c: 92: T0CON0bits.T0EN = 1;
  7188                           
  7189                           ;incstack = 0
  7190                           ; Regs used in _TMR0_StartTimer: []
  7191  0BE8  0020               	movlb	0	; select bank0
  7192  0BE9  1797               	bsf	23,7	;volatile
  7193  0BEA  0008               	return
  7194  0BEB                     __end_of_TMR0_StartTimer:	
  7195                           
  7196                           	psect	text14
  7197  0C69                     __ptext14:	
  7198 ;; *************** function _TMR0_SetInterruptHandler *****************
  7199 ;; Defined at:
  7200 ;;		line 145 in file "mcc_generated_files/tmr0.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  7203 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;		None
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  1    wreg      void 
  7208 ;; Registers used:
  7209 ;;		wreg
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7215 ;;      Params:         0       2       0       0       0       0       0       0
  7216 ;;      Locals:         0       0       0       0       0       0       0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0       0
  7218 ;;      Totals:         0       2       0       0       0       0       0       0
  7219 ;;Total ram usage:        2 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    5
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		_TMR0_Initialize
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           
  7230                           ;psect for function _TMR0_SetInterruptHandler
  7231  0C69                     _TMR0_SetInterruptHandler:	
  7232                           
  7233                           ;tmr0.c: 146: TMR0_InterruptHandler = InterruptHandler;
  7234                           
  7235                           ;incstack = 0
  7236                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  7237  0C69  0020               	movlb	0	; select bank0
  7238  0C6A  0852               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  7239  0C6B  0022               	movlb	2	; select bank2
  7240  0C6C  00BB               	movwf	(_TMR0_InterruptHandler+1)^(0+256)
  7241  0C6D  0020               	movlb	0	; select bank0
  7242  0C6E  0851               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  7243  0C6F  0022               	movlb	2	; select bank2
  7244  0C70  00BA               	movwf	_TMR0_InterruptHandler^(0+256)
  7245  0C71  0008               	return
  7246  0C72                     __end_of_TMR0_SetInterruptHandler:	
  7247                           
  7248                           	psect	text15
  7249  0781                     __ptext15:	
  7250 ;; *************** function _PIN_MANAGER_Initialize *****************
  7251 ;; Defined at:
  7252 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
  7253 ;; Parameters:    Size  Location     Type
  7254 ;;		None
  7255 ;; Auto vars:     Size  Location     Type
  7256 ;;  state           1    2[BANK0 ] unsigned char 
  7257 ;; Return value:  Size  Location     Type
  7258 ;;                  1    wreg      void 
  7259 ;; Registers used:
  7260 ;;		wreg, status,2, status,0, pclath, cstack
  7261 ;; Tracked objects:
  7262 ;;		On entry : 0/0
  7263 ;;		On exit  : 0/0
  7264 ;;		Unchanged: 0/0
  7265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7266 ;;      Params:         0       0       0       0       0       0       0       0
  7267 ;;      Locals:         0       1       0       0       0       0       0       0
  7268 ;;      Temps:          0       0       0       0       0       0       0       0
  7269 ;;      Totals:         0       1       0       0       0       0       0       0
  7270 ;;Total ram usage:        1 bytes
  7271 ;; Hardware stack levels used:    1
  7272 ;; Hardware stack levels required when called:    6
  7273 ;; This function calls:
  7274 ;;		_IOCCF4_SetInterruptHandler
  7275 ;;		_IOCCF5_SetInterruptHandler
  7276 ;; This function is called by:
  7277 ;;		_SYSTEM_Initialize
  7278 ;; This function uses a non-reentrant model
  7279 ;;
  7280                           
  7281                           
  7282                           ;psect for function _PIN_MANAGER_Initialize
  7283  0781                     _PIN_MANAGER_Initialize:	
  7284                           
  7285                           ;pin_manager.c: 59: LATA = 0x00;
  7286                           
  7287                           ;incstack = 0
  7288                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7289  0781  0022               	movlb	2	; select bank2
  7290  0782  018C               	clrf	12	;volatile
  7291                           
  7292                           ;pin_manager.c: 60: LATB = 0x00;
  7293  0783  018D               	clrf	13	;volatile
  7294                           
  7295                           ;pin_manager.c: 61: LATC = 0x00;
  7296  0784  018E               	clrf	14	;volatile
  7297                           
  7298                           ;pin_manager.c: 66: TRISA = 0x37;
  7299  0785  3037               	movlw	55
  7300  0786  0021               	movlb	1	; select bank1
  7301  0787  008C               	movwf	12	;volatile
  7302                           
  7303                           ;pin_manager.c: 67: TRISB = 0x90;
  7304  0788  3090               	movlw	144
  7305  0789  008D               	movwf	13	;volatile
  7306                           
  7307                           ;pin_manager.c: 68: TRISC = 0x30;
  7308  078A  3030               	movlw	48
  7309  078B  008E               	movwf	14	;volatile
  7310                           
  7311                           ;pin_manager.c: 73: ANSELC = 0x80;
  7312  078C  3080               	movlw	128
  7313  078D  0023               	movlb	3	; select bank3
  7314  078E  008E               	movwf	14	;volatile
  7315                           
  7316                           ;pin_manager.c: 74: ANSELB = 0x00;
  7317  078F  018D               	clrf	13	;volatile
  7318                           
  7319                           ;pin_manager.c: 75: ANSELA = 0x17;
  7320  0790  3017               	movlw	23
  7321  0791  008C               	movwf	12	;volatile
  7322                           
  7323                           ;pin_manager.c: 80: WPUB = 0x80;
  7324  0792  3080               	movlw	128
  7325  0793  0024               	movlb	4	; select bank4
  7326  0794  008D               	movwf	13	;volatile
  7327                           
  7328                           ;pin_manager.c: 81: WPUA = 0x00;
  7329  0795  018C               	clrf	12	;volatile
  7330                           
  7331                           ;pin_manager.c: 82: WPUC = 0x00;
  7332  0796  018E               	clrf	14	;volatile
  7333                           
  7334                           ;pin_manager.c: 87: ODCONA = 0x00;
  7335  0797  0025               	movlb	5	; select bank5
  7336  0798  018C               	clrf	12	;volatile
  7337                           
  7338                           ;pin_manager.c: 88: ODCONB = 0x00;
  7339  0799  018D               	clrf	13	;volatile
  7340                           
  7341                           ;pin_manager.c: 89: ODCONC = 0x00;
  7342  079A  018E               	clrf	14	;volatile
  7343                           
  7344                           ;pin_manager.c: 96: IOCCFbits.IOCCF4 = 0;
  7345  079B  0027               	movlb	7	; select bank7
  7346  079C  1219               	bcf	25,4	;volatile
  7347                           
  7348                           ;pin_manager.c: 97: IOCCFbits.IOCCF5 = 0;
  7349  079D  1299               	bcf	25,5	;volatile
  7350                           
  7351                           ;pin_manager.c: 99: IOCCNbits.IOCCN4 = 1;
  7352  079E  1618               	bsf	24,4	;volatile
  7353                           
  7354                           ;pin_manager.c: 100: IOCCNbits.IOCCN5 = 1;
  7355  079F  1698               	bsf	24,5	;volatile
  7356                           
  7357                           ;pin_manager.c: 102: IOCCPbits.IOCCP4 = 1;
  7358  07A0  1617               	bsf	23,4	;volatile
  7359                           
  7360                           ;pin_manager.c: 103: IOCCPbits.IOCCP5 = 1;
  7361  07A1  1697               	bsf	23,5	;volatile
  7362                           
  7363                           ;pin_manager.c: 106: IOCCF4_SetInterruptHandler(IOCCF4_DefaultInterruptHandler);
  7364  07A2  30D0               	movlw	low _IOCCF4_DefaultInterruptHandler
  7365  07A3  0020               	movlb	0	; select bank0
  7366  07A4  00D1               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
  7367  07A5  300B               	movlw	high _IOCCF4_DefaultInterruptHandler
  7368  07A6  00D2               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
  7369  07A7  318C  2457  3187   	fcall	_IOCCF4_SetInterruptHandler
  7370                           
  7371                           ;pin_manager.c: 107: IOCCF5_SetInterruptHandler(IOCCF5_DefaultInterruptHandler);
  7372  07AA  30D1               	movlw	low _IOCCF5_DefaultInterruptHandler
  7373  07AB  0020               	movlb	0	; select bank0
  7374  07AC  00D1               	movwf	IOCCF5_SetInterruptHandler@InterruptHandler
  7375  07AD  300B               	movlw	high _IOCCF5_DefaultInterruptHandler
  7376  07AE  00D2               	movwf	IOCCF5_SetInterruptHandler@InterruptHandler+1
  7377  07AF  318C  2460  3187   	fcall	_IOCCF5_SetInterruptHandler
  7378                           
  7379                           ;pin_manager.c: 110: PIE0bits.IOCIE = 1;
  7380  07B2  0021               	movlb	1	; select bank1
  7381  07B3  1610               	bsf	16,4	;volatile
  7382                           
  7383                           ;pin_manager.c: 113: bool state = GIE;
  7384  07B4  3000               	movlw	0
  7385  07B5  1B8B               	btfsc	11,7	;volatile
  7386  07B6  3001               	movlw	1
  7387  07B7  0020               	movlb	0	; select bank0
  7388  07B8  00D3               	movwf	PIN_MANAGER_Initialize@state
  7389                           
  7390                           ;pin_manager.c: 114: GIE = 0;
  7391  07B9  138B               	bcf	11,7	;volatile
  7392                           
  7393                           ;pin_manager.c: 115: PPSLOCK = 0x55;
  7394  07BA  3055               	movlw	85
  7395  07BB  003C               	movlb	28	; select bank28
  7396  07BC  008F               	movwf	15	;volatile
  7397                           
  7398                           ;pin_manager.c: 116: PPSLOCK = 0xAA;
  7399  07BD  30AA               	movlw	170
  7400  07BE  008F               	movwf	15	;volatile
  7401                           
  7402                           ;pin_manager.c: 117: PPSLOCKbits.PPSLOCKED = 0x00;
  7403  07BF  100F               	bcf	15,0	;volatile
  7404                           
  7405                           ;pin_manager.c: 119: CCP2PPSbits.CCP2PPS = 0x14;
  7406  07C0  0815               	movf	21,w	;volatile
  7407  07C1  39E0               	andlw	-32
  7408  07C2  3814               	iorlw	20
  7409  07C3  0095               	movwf	21	;volatile
  7410                           
  7411                           ;pin_manager.c: 120: RXPPSbits.RXPPS = 0x0C;
  7412  07C4  0824               	movf	36,w	;volatile
  7413  07C5  39E0               	andlw	-32
  7414  07C6  380C               	iorlw	12
  7415  07C7  00A4               	movwf	36	;volatile
  7416                           
  7417                           ;pin_manager.c: 121: INTPPSbits.INTPPS = 0x05;
  7418  07C8  0810               	movf	16,w	;volatile
  7419  07C9  39E0               	andlw	-32
  7420  07CA  3805               	iorlw	5
  7421  07CB  0090               	movwf	16	;volatile
  7422                           
  7423                           ;pin_manager.c: 122: CCP1PPSbits.CCP1PPS = 0x15;
  7424  07CC  0814               	movf	20,w	;volatile
  7425  07CD  39E0               	andlw	-32
  7426  07CE  3815               	iorlw	21
  7427  07CF  0094               	movwf	20	;volatile
  7428                           
  7429                           ;pin_manager.c: 123: RB5PPSbits.RB5PPS = 0x14;
  7430  07D0  003D               	movlb	29	; select bank29
  7431  07D1  081D               	movf	29,w	;volatile
  7432  07D2  39E0               	andlw	-32
  7433  07D3  3814               	iorlw	20
  7434  07D4  009D               	movwf	29	;volatile
  7435                           
  7436                           ;pin_manager.c: 125: PPSLOCK = 0x55;
  7437  07D5  3055               	movlw	85
  7438  07D6  003C               	movlb	28	; select bank28
  7439  07D7  008F               	movwf	15	;volatile
  7440                           
  7441                           ;pin_manager.c: 126: PPSLOCK = 0xAA;
  7442  07D8  30AA               	movlw	170
  7443  07D9  008F               	movwf	15	;volatile
  7444                           
  7445                           ;pin_manager.c: 127: PPSLOCKbits.PPSLOCKED = 0x01;
  7446  07DA  140F               	bsf	15,0	;volatile
  7447                           
  7448                           ;pin_manager.c: 129: GIE = state;
  7449  07DB  0020               	movlb	0	; select bank0
  7450  07DC  1C53               	btfss	PIN_MANAGER_Initialize@state,0
  7451  07DD  2FE0               	goto	u2020
  7452  07DE  178B               	bsf	11,7	;volatile
  7453  07DF  0008               	return
  7454  07E0                     u2020:	
  7455  07E0  138B               	bcf	11,7	;volatile
  7456  07E1  0008               	return
  7457  07E2                     __end_of_PIN_MANAGER_Initialize:	
  7458                           
  7459                           	psect	text16
  7460  0C60                     __ptext16:	
  7461 ;; *************** function _IOCCF5_SetInterruptHandler *****************
  7462 ;; Defined at:
  7463 ;;		line 197 in file "mcc_generated_files/pin_manager.c"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  7466 ;;		 -> IOCCF5_DefaultInterruptHandler(1), 
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;		None
  7469 ;; Return value:  Size  Location     Type
  7470 ;;                  1    wreg      void 
  7471 ;; Registers used:
  7472 ;;		wreg
  7473 ;; Tracked objects:
  7474 ;;		On entry : 0/0
  7475 ;;		On exit  : 0/0
  7476 ;;		Unchanged: 0/0
  7477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7478 ;;      Params:         0       2       0       0       0       0       0       0
  7479 ;;      Locals:         0       0       0       0       0       0       0       0
  7480 ;;      Temps:          0       0       0       0       0       0       0       0
  7481 ;;      Totals:         0       2       0       0       0       0       0       0
  7482 ;;Total ram usage:        2 bytes
  7483 ;; Hardware stack levels used:    1
  7484 ;; Hardware stack levels required when called:    5
  7485 ;; This function calls:
  7486 ;;		Nothing
  7487 ;; This function is called by:
  7488 ;;		_PIN_MANAGER_Initialize
  7489 ;; This function uses a non-reentrant model
  7490 ;;
  7491                           
  7492                           
  7493                           ;psect for function _IOCCF5_SetInterruptHandler
  7494  0C60                     _IOCCF5_SetInterruptHandler:	
  7495                           
  7496                           ;pin_manager.c: 198: IOCCF5_InterruptHandler = InterruptHandler;
  7497                           
  7498                           ;incstack = 0
  7499                           ; Regs used in _IOCCF5_SetInterruptHandler: [wreg]
  7500  0C60  0020               	movlb	0	; select bank0
  7501  0C61  0852               	movf	IOCCF5_SetInterruptHandler@InterruptHandler+1,w
  7502  0C62  0022               	movlb	2	; select bank2
  7503  0C63  00B7               	movwf	(_IOCCF5_InterruptHandler+1)^(0+256)
  7504  0C64  0020               	movlb	0	; select bank0
  7505  0C65  0851               	movf	IOCCF5_SetInterruptHandler@InterruptHandler,w
  7506  0C66  0022               	movlb	2	; select bank2
  7507  0C67  00B6               	movwf	_IOCCF5_InterruptHandler^(0+256)
  7508  0C68  0008               	return
  7509  0C69                     __end_of_IOCCF5_SetInterruptHandler:	
  7510                           
  7511                           	psect	text17
  7512  0C57                     __ptext17:	
  7513 ;; *************** function _IOCCF4_SetInterruptHandler *****************
  7514 ;; Defined at:
  7515 ;;		line 167 in file "mcc_generated_files/pin_manager.c"
  7516 ;; Parameters:    Size  Location     Type
  7517 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  7518 ;;		 -> IOCCF4_DefaultInterruptHandler(1), 
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;		None
  7521 ;; Return value:  Size  Location     Type
  7522 ;;                  1    wreg      void 
  7523 ;; Registers used:
  7524 ;;		wreg
  7525 ;; Tracked objects:
  7526 ;;		On entry : 0/0
  7527 ;;		On exit  : 0/0
  7528 ;;		Unchanged: 0/0
  7529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7530 ;;      Params:         0       2       0       0       0       0       0       0
  7531 ;;      Locals:         0       0       0       0       0       0       0       0
  7532 ;;      Temps:          0       0       0       0       0       0       0       0
  7533 ;;      Totals:         0       2       0       0       0       0       0       0
  7534 ;;Total ram usage:        2 bytes
  7535 ;; Hardware stack levels used:    1
  7536 ;; Hardware stack levels required when called:    5
  7537 ;; This function calls:
  7538 ;;		Nothing
  7539 ;; This function is called by:
  7540 ;;		_PIN_MANAGER_Initialize
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           
  7545                           ;psect for function _IOCCF4_SetInterruptHandler
  7546  0C57                     _IOCCF4_SetInterruptHandler:	
  7547                           
  7548                           ;pin_manager.c: 168: IOCCF4_InterruptHandler = InterruptHandler;
  7549                           
  7550                           ;incstack = 0
  7551                           ; Regs used in _IOCCF4_SetInterruptHandler: [wreg]
  7552  0C57  0020               	movlb	0	; select bank0
  7553  0C58  0852               	movf	IOCCF4_SetInterruptHandler@InterruptHandler+1,w
  7554  0C59  0022               	movlb	2	; select bank2
  7555  0C5A  00B9               	movwf	(_IOCCF4_InterruptHandler+1)^(0+256)
  7556  0C5B  0020               	movlb	0	; select bank0
  7557  0C5C  0851               	movf	IOCCF4_SetInterruptHandler@InterruptHandler,w
  7558  0C5D  0022               	movlb	2	; select bank2
  7559  0C5E  00B8               	movwf	_IOCCF4_InterruptHandler^(0+256)
  7560  0C5F  0008               	return
  7561  0C60                     __end_of_IOCCF4_SetInterruptHandler:	
  7562                           
  7563                           	psect	text18
  7564  0C2B                     __ptext18:	
  7565 ;; *************** function _OSCILLATOR_Initialize *****************
  7566 ;; Defined at:
  7567 ;;		line 92 in file "mcc_generated_files/mcc.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;		None
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;		None
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  1    wreg      void 
  7574 ;; Registers used:
  7575 ;;		wreg, status,2
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7581 ;;      Params:         0       0       0       0       0       0       0       0
  7582 ;;      Locals:         0       0       0       0       0       0       0       0
  7583 ;;      Temps:          0       0       0       0       0       0       0       0
  7584 ;;      Totals:         0       0       0       0       0       0       0       0
  7585 ;;Total ram usage:        0 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    5
  7588 ;; This function calls:
  7589 ;;		Nothing
  7590 ;; This function is called by:
  7591 ;;		_SYSTEM_Initialize
  7592 ;; This function uses a non-reentrant model
  7593 ;;
  7594                           
  7595                           
  7596                           ;psect for function _OSCILLATOR_Initialize
  7597  0C2B                     _OSCILLATOR_Initialize:	
  7598                           
  7599                           ;mcc.c: 95: OSCCON1 = 0x00;
  7600                           
  7601                           ;incstack = 0
  7602                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7603  0C2B  0032               	movlb	18	; select bank18
  7604  0C2C  0199               	clrf	25	;volatile
  7605                           
  7606                           ;mcc.c: 97: OSCCON3 = 0x00;
  7607  0C2D  019B               	clrf	27	;volatile
  7608                           
  7609                           ;mcc.c: 99: OSCEN = 0x00;
  7610  0C2E  019D               	clrf	29	;volatile
  7611                           
  7612                           ;mcc.c: 101: OSCFRQ = 0x07;
  7613  0C2F  3007               	movlw	7
  7614  0C30  009F               	movwf	31	;volatile
  7615                           
  7616                           ;mcc.c: 103: OSCTUNE = 0x00;
  7617  0C31  019E               	clrf	30	;volatile
  7618  0C32  0008               	return
  7619  0C33                     __end_of_OSCILLATOR_Initialize:	
  7620                           
  7621                           	psect	text19
  7622  0CC5                     __ptext19:	
  7623 ;; *************** function _EXT_INT_Initialize *****************
  7624 ;; Defined at:
  7625 ;;		line 93 in file "mcc_generated_files/ext_int.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;		None
  7628 ;; Auto vars:     Size  Location     Type
  7629 ;;		None
  7630 ;; Return value:  Size  Location     Type
  7631 ;;                  1    wreg      void 
  7632 ;; Registers used:
  7633 ;;		wreg, status,2, status,0, pclath, cstack
  7634 ;; Tracked objects:
  7635 ;;		On entry : 0/0
  7636 ;;		On exit  : 0/0
  7637 ;;		Unchanged: 0/0
  7638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7639 ;;      Params:         0       0       0       0       0       0       0       0
  7640 ;;      Locals:         0       0       0       0       0       0       0       0
  7641 ;;      Temps:          0       0       0       0       0       0       0       0
  7642 ;;      Totals:         0       0       0       0       0       0       0       0
  7643 ;;Total ram usage:        0 bytes
  7644 ;; Hardware stack levels used:    1
  7645 ;; Hardware stack levels required when called:    6
  7646 ;; This function calls:
  7647 ;;		_INT_SetInterruptHandler
  7648 ;; This function is called by:
  7649 ;;		_SYSTEM_Initialize
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           
  7654                           ;psect for function _EXT_INT_Initialize
  7655  0CC5                     _EXT_INT_Initialize:	
  7656                           
  7657                           ;ext_int.c: 102: (PIR0bits.INTF = 0);
  7658                           
  7659                           ;incstack = 0
  7660                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7661  0CC5  0020               	movlb	0	; select bank0
  7662  0CC6  1010               	bcf	16,0	;volatile
  7663                           
  7664                           ;ext_int.c: 103: (INTCONbits.INTEDG = 1);
  7665  0CC7  140B               	bsf	11,0	;volatile
  7666                           
  7667                           ;ext_int.c: 105: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  7668  0CC8  30CF               	movlw	low _INT_DefaultInterruptHandler
  7669  0CC9  00D1               	movwf	INT_SetInterruptHandler@InterruptHandler
  7670  0CCA  300B               	movlw	high _INT_DefaultInterruptHandler
  7671  0CCB  00D2               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  7672  0CCC  318C  244E         	fcall	_INT_SetInterruptHandler
  7673                           
  7674                           ;ext_int.c: 106: (PIE0bits.INTE = 1);
  7675  0CCE  0021               	movlb	1	; select bank1
  7676  0CCF  1410               	bsf	16,0	;volatile
  7677  0CD0  0008               	return
  7678  0CD1                     __end_of_EXT_INT_Initialize:	
  7679                           
  7680                           	psect	text20
  7681  0C4E                     __ptext20:	
  7682 ;; *************** function _INT_SetInterruptHandler *****************
  7683 ;; Defined at:
  7684 ;;		line 73 in file "mcc_generated_files/ext_int.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;  InterruptHan    2    0[BANK0 ] PTR void 
  7687 ;;		 -> INT_DefaultInterruptHandler(1), 
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;		None
  7690 ;; Return value:  Size  Location     Type
  7691 ;;                  1    wreg      void 
  7692 ;; Registers used:
  7693 ;;		wreg
  7694 ;; Tracked objects:
  7695 ;;		On entry : 0/0
  7696 ;;		On exit  : 0/0
  7697 ;;		Unchanged: 0/0
  7698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7699 ;;      Params:         0       2       0       0       0       0       0       0
  7700 ;;      Locals:         0       0       0       0       0       0       0       0
  7701 ;;      Temps:          0       0       0       0       0       0       0       0
  7702 ;;      Totals:         0       2       0       0       0       0       0       0
  7703 ;;Total ram usage:        2 bytes
  7704 ;; Hardware stack levels used:    1
  7705 ;; Hardware stack levels required when called:    5
  7706 ;; This function calls:
  7707 ;;		Nothing
  7708 ;; This function is called by:
  7709 ;;		_EXT_INT_Initialize
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           
  7714                           ;psect for function _INT_SetInterruptHandler
  7715  0C4E                     _INT_SetInterruptHandler:	
  7716                           
  7717                           ;ext_int.c: 74: INT_InterruptHandler = InterruptHandler;
  7718                           
  7719                           ;incstack = 0
  7720                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  7721  0C4E  0020               	movlb	0	; select bank0
  7722  0C4F  0852               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  7723  0C50  0022               	movlb	2	; select bank2
  7724  0C51  00B5               	movwf	(_INT_InterruptHandler+1)^(0+256)
  7725  0C52  0020               	movlb	0	; select bank0
  7726  0C53  0851               	movf	INT_SetInterruptHandler@InterruptHandler,w
  7727  0C54  0022               	movlb	2	; select bank2
  7728  0C55  00B4               	movwf	_INT_InterruptHandler^(0+256)
  7729  0C56  0008               	return
  7730  0C57                     __end_of_INT_SetInterruptHandler:	
  7731                           
  7732                           	psect	text21
  7733  0C45                     __ptext21:	
  7734 ;; *************** function _CCP2_Initialize *****************
  7735 ;; Defined at:
  7736 ;;		line 57 in file "mcc_generated_files/ccp2.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;		None
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;		None
  7741 ;; Return value:  Size  Location     Type
  7742 ;;                  1    wreg      void 
  7743 ;; Registers used:
  7744 ;;		wreg, status,2, status,0
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7750 ;;      Params:         0       0       0       0       0       0       0       0
  7751 ;;      Locals:         0       0       0       0       0       0       0       0
  7752 ;;      Temps:          0       0       0       0       0       0       0       0
  7753 ;;      Totals:         0       0       0       0       0       0       0       0
  7754 ;;Total ram usage:        0 bytes
  7755 ;; Hardware stack levels used:    1
  7756 ;; Hardware stack levels required when called:    5
  7757 ;; This function calls:
  7758 ;;		Nothing
  7759 ;; This function is called by:
  7760 ;;		_SYSTEM_Initialize
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           
  7765                           ;psect for function _CCP2_Initialize
  7766  0C45                     _CCP2_Initialize:	
  7767                           
  7768                           ;ccp2.c: 62: CCP2CON = 0x03;
  7769                           
  7770                           ;incstack = 0
  7771                           ; Regs used in _CCP2_Initialize: [wreg+status,2+status,0]
  7772  0C45  3003               	movlw	3
  7773  0C46  0025               	movlb	5	; select bank5
  7774  0C47  0097               	movwf	23	;volatile
  7775                           
  7776                           ;ccp2.c: 65: CCP2CAP = 0x00;
  7777  0C48  0198               	clrf	24	;volatile
  7778                           
  7779                           ;ccp2.c: 68: CCPR2H = 0x00;
  7780  0C49  0196               	clrf	22	;volatile
  7781                           
  7782                           ;ccp2.c: 71: CCPR2L = 0x00;
  7783  0C4A  0195               	clrf	21	;volatile
  7784                           
  7785                           ;ccp2.c: 74: CCPTMRSbits.C2TSEL = 0x3;
  7786  0C4B  300C               	movlw	12
  7787  0C4C  049F               	iorwf	31,f	;volatile
  7788  0C4D  0008               	return
  7789  0C4E                     __end_of_CCP2_Initialize:	
  7790                           
  7791                           	psect	text22
  7792  0D3E                     __ptext22:	
  7793 ;; *************** function _CCP1_Initialize *****************
  7794 ;; Defined at:
  7795 ;;		line 58 in file "mcc_generated_files/ccp1.c"
  7796 ;; Parameters:    Size  Location     Type
  7797 ;;		None
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;		None
  7800 ;; Return value:  Size  Location     Type
  7801 ;;                  1    wreg      void 
  7802 ;; Registers used:
  7803 ;;		wreg, status,2, status,0
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7809 ;;      Params:         0       0       0       0       0       0       0       0
  7810 ;;      Locals:         0       0       0       0       0       0       0       0
  7811 ;;      Temps:          0       0       0       0       0       0       0       0
  7812 ;;      Totals:         0       0       0       0       0       0       0       0
  7813 ;;Total ram usage:        0 bytes
  7814 ;; Hardware stack levels used:    1
  7815 ;; Hardware stack levels required when called:    5
  7816 ;; This function calls:
  7817 ;;		Nothing
  7818 ;; This function is called by:
  7819 ;;		_SYSTEM_Initialize
  7820 ;; This function uses a non-reentrant model
  7821 ;;
  7822                           
  7823                           
  7824                           ;psect for function _CCP1_Initialize
  7825  0D3E                     _CCP1_Initialize:	
  7826                           
  7827                           ;ccp1.c: 63: CCP1CON = 0x83;
  7828                           
  7829                           ;incstack = 0
  7830                           ; Regs used in _CCP1_Initialize: [wreg+status,2+status,0]
  7831  0D3E  3083               	movlw	131
  7832  0D3F  0025               	movlb	5	; select bank5
  7833  0D40  0093               	movwf	19	;volatile
  7834                           
  7835                           ;ccp1.c: 66: CCP1CAP = 0x00;
  7836  0D41  0194               	clrf	20	;volatile
  7837                           
  7838                           ;ccp1.c: 69: CCPR1H = 0x00;
  7839  0D42  0192               	clrf	18	;volatile
  7840                           
  7841                           ;ccp1.c: 72: CCPR1L = 0x00;
  7842  0D43  0191               	clrf	17	;volatile
  7843                           
  7844                           ;ccp1.c: 75: CCPTMRSbits.C1TSEL = 0x2;
  7845  0D44  081F               	movf	31,w	;volatile
  7846  0D45  39FC               	andlw	-4
  7847  0D46  3802               	iorlw	2
  7848  0D47  009F               	movwf	31	;volatile
  7849                           
  7850                           ;ccp1.c: 78: PIR4bits.CCP1IF = 0;
  7851  0D48  0020               	movlb	0	; select bank0
  7852  0D49  1014               	bcf	20,0	;volatile
  7853                           
  7854                           ;ccp1.c: 81: PIE4bits.CCP1IE = 1;
  7855  0D4A  0021               	movlb	1	; select bank1
  7856  0D4B  1414               	bsf	20,0	;volatile
  7857  0D4C  0008               	return
  7858  0D4D                     __end_of_CCP1_Initialize:	
  7859                           
  7860                           	psect	text23
  7861  0C3C                     __ptext23:	
  7862 ;; *************** function _ADC_Initialize *****************
  7863 ;; Defined at:
  7864 ;;		line 64 in file "mcc_generated_files/adc.c"
  7865 ;; Parameters:    Size  Location     Type
  7866 ;;		None
  7867 ;; Auto vars:     Size  Location     Type
  7868 ;;		None
  7869 ;; Return value:  Size  Location     Type
  7870 ;;                  1    wreg      void 
  7871 ;; Registers used:
  7872 ;;		wreg, status,2
  7873 ;; Tracked objects:
  7874 ;;		On entry : 0/0
  7875 ;;		On exit  : 0/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7878 ;;      Params:         0       0       0       0       0       0       0       0
  7879 ;;      Locals:         0       0       0       0       0       0       0       0
  7880 ;;      Temps:          0       0       0       0       0       0       0       0
  7881 ;;      Totals:         0       0       0       0       0       0       0       0
  7882 ;;Total ram usage:        0 bytes
  7883 ;; Hardware stack levels used:    1
  7884 ;; Hardware stack levels required when called:    5
  7885 ;; This function calls:
  7886 ;;		Nothing
  7887 ;; This function is called by:
  7888 ;;		_SYSTEM_Initialize
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           
  7893                           ;psect for function _ADC_Initialize
  7894  0C3C                     _ADC_Initialize:	
  7895                           
  7896                           ;adc.c: 69: ADCON0 = 0x01;
  7897                           
  7898                           ;incstack = 0
  7899                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  7900  0C3C  3001               	movlw	1
  7901  0C3D  0021               	movlb	1	; select bank1
  7902  0C3E  009D               	movwf	29	;volatile
  7903                           
  7904                           ;adc.c: 72: ADCON1 = 0xE0;
  7905  0C3F  30E0               	movlw	224
  7906  0C40  009E               	movwf	30	;volatile
  7907                           
  7908                           ;adc.c: 75: ADACT = 0x00;
  7909  0C41  019F               	clrf	31	;volatile
  7910                           
  7911                           ;adc.c: 78: ADRESL = 0x00;
  7912  0C42  019B               	clrf	27	;volatile
  7913                           
  7914                           ;adc.c: 81: ADRESH = 0x00;
  7915  0C43  019C               	clrf	28	;volatile
  7916  0C44  0008               	return
  7917  0C45                     __end_of_ADC_Initialize:	
  7918                           
  7919                           	psect	text24
  7920  0D2F                     __ptext24:	
  7921 ;; *************** function _NutRunCycleStart *****************
  7922 ;; Defined at:
  7923 ;;		line 523 in file "main.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;		None
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;		None
  7928 ;; Return value:  Size  Location     Type
  7929 ;;                  1    wreg      void 
  7930 ;; Registers used:
  7931 ;;		wreg, status,2, status,0, pclath, cstack
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7937 ;;      Params:         0       0       0       0       0       0       0       0
  7938 ;;      Locals:         0       0       0       0       0       0       0       0
  7939 ;;      Temps:          0       0       0       0       0       0       0       0
  7940 ;;      Totals:         0       0       0       0       0       0       0       0
  7941 ;;Total ram usage:        0 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    6
  7944 ;; This function calls:
  7945 ;;		_NutRunCycleReset
  7946 ;;		_TMR3_StartTimer
  7947 ;;		_TMR3_WriteTimer
  7948 ;; This function is called by:
  7949 ;;		_main
  7950 ;;		_OnEncPulseEdgeEvent
  7951 ;; This function uses a non-reentrant model
  7952 ;;
  7953                           
  7954                           
  7955                           ;psect for function _NutRunCycleStart
  7956  0D2F                     _NutRunCycleStart:	
  7957                           
  7958                           ;main.c: 525: NutRunCycleReset();
  7959                           
  7960                           ;incstack = 0
  7961                           ; Regs used in _NutRunCycleStart: [wreg+status,2+status,0+pclath+cstack]
  7962  0D2F  318D  259C  318D   	fcall	_NutRunCycleReset
  7963                           
  7964                           ;main.c: 527: TMR3_WriteTimer(0);
  7965  0D32  3000               	movlw	0
  7966  0D33  0020               	movlb	0	; select bank0
  7967  0D34  00D1               	movwf	TMR3_WriteTimer@timerVal
  7968  0D35  00D2               	movwf	TMR3_WriteTimer@timerVal+1
  7969  0D36  318D  25B3  318D   	fcall	_TMR3_WriteTimer
  7970                           
  7971                           ;main.c: 528: TMR3_StartTimer();
  7972  0D39  318B  23E5         	fcall	_TMR3_StartTimer
  7973                           
  7974                           ;main.c: 529: PIE3bits.TMR3IE = 1;
  7975  0D3B  0021               	movlb	1	; select bank1
  7976  0D3C  1613               	bsf	19,4	;volatile
  7977  0D3D  0008               	return
  7978  0D3E                     __end_of_NutRunCycleStart:	
  7979                           
  7980                           	psect	text25
  7981  0DB3                     __ptext25:	
  7982 ;; *************** function _TMR3_WriteTimer *****************
  7983 ;; Defined at:
  7984 ;;		line 117 in file "mcc_generated_files/tmr3.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;  timerVal        2    0[BANK0 ] unsigned int 
  7987 ;; Auto vars:     Size  Location     Type
  7988 ;;		None
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  1    wreg      void 
  7991 ;; Registers used:
  7992 ;;		wreg, status,2
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7998 ;;      Params:         0       2       0       0       0       0       0       0
  7999 ;;      Locals:         0       0       0       0       0       0       0       0
  8000 ;;      Temps:          0       0       0       0       0       0       0       0
  8001 ;;      Totals:         0       2       0       0       0       0       0       0
  8002 ;;Total ram usage:        2 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; Hardware stack levels required when called:    5
  8005 ;; This function calls:
  8006 ;;		Nothing
  8007 ;; This function is called by:
  8008 ;;		_main
  8009 ;;		_NutRunCycleStart
  8010 ;;		_OnEncPulseEdgeEvent
  8011 ;;		_NutRunCycleStop
  8012 ;; This function uses a non-reentrant model
  8013 ;;
  8014                           
  8015                           
  8016                           ;psect for function _TMR3_WriteTimer
  8017  0DB3                     _TMR3_WriteTimer:	
  8018                           
  8019                           ;tmr3.c: 119: if (T3CONbits.T3SYNC == 1)
  8020                           
  8021                           ;incstack = 0
  8022                           ; Regs used in _TMR3_WriteTimer: [wreg+status,2]
  8023  0DB3  0028               	movlb	8	; select bank8
  8024  0DB4  1D13               	btfss	19,2	;volatile
  8025  0DB5  2DC1               	goto	l3545
  8026                           
  8027                           ;tmr3.c: 120: {
  8028                           ;tmr3.c: 122: T3CONbits.TMR3ON = 0;
  8029  0DB6  1013               	bcf	19,0	;volatile
  8030                           
  8031                           ;tmr3.c: 125: TMR3H = (timerVal >> 8);
  8032  0DB7  0020               	movlb	0	; select bank0
  8033  0DB8  0852               	movf	TMR3_WriteTimer@timerVal+1,w
  8034  0DB9  0028               	movlb	8	; select bank8
  8035  0DBA  0092               	movwf	18	;volatile
  8036                           
  8037                           ;tmr3.c: 126: TMR3L = timerVal;
  8038  0DBB  0020               	movlb	0	; select bank0
  8039  0DBC  0851               	movf	TMR3_WriteTimer@timerVal,w
  8040  0DBD  0028               	movlb	8	; select bank8
  8041  0DBE  0091               	movwf	17	;volatile
  8042                           
  8043                           ;tmr3.c: 129: T3CONbits.TMR3ON =1;
  8044  0DBF  1413               	bsf	19,0	;volatile
  8045                           
  8046                           ;tmr3.c: 130: }
  8047  0DC0  0008               	return
  8048  0DC1                     l3545:	
  8049                           
  8050                           ;tmr3.c: 131: else
  8051                           ;tmr3.c: 132: {
  8052                           ;tmr3.c: 134: TMR3H = (timerVal >> 8);
  8053  0DC1  0020               	movlb	0	; select bank0
  8054  0DC2  0852               	movf	TMR3_WriteTimer@timerVal+1,w
  8055  0DC3  0028               	movlb	8	; select bank8
  8056  0DC4  0092               	movwf	18	;volatile
  8057                           
  8058                           ;tmr3.c: 135: TMR3L = timerVal;
  8059  0DC5  0020               	movlb	0	; select bank0
  8060  0DC6  0851               	movf	TMR3_WriteTimer@timerVal,w
  8061  0DC7  0028               	movlb	8	; select bank8
  8062  0DC8  0091               	movwf	17	;volatile
  8063  0DC9  0008               	return
  8064  0DCA                     __end_of_TMR3_WriteTimer:	
  8065                           
  8066                           	psect	text26
  8067  0BE5                     __ptext26:	
  8068 ;; *************** function _TMR3_StartTimer *****************
  8069 ;; Defined at:
  8070 ;;		line 96 in file "mcc_generated_files/tmr3.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;		None
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;		None
  8075 ;; Return value:  Size  Location     Type
  8076 ;;                  1    wreg      void 
  8077 ;; Registers used:
  8078 ;;		None
  8079 ;; Tracked objects:
  8080 ;;		On entry : 0/0
  8081 ;;		On exit  : 0/0
  8082 ;;		Unchanged: 0/0
  8083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8084 ;;      Params:         0       0       0       0       0       0       0       0
  8085 ;;      Locals:         0       0       0       0       0       0       0       0
  8086 ;;      Temps:          0       0       0       0       0       0       0       0
  8087 ;;      Totals:         0       0       0       0       0       0       0       0
  8088 ;;Total ram usage:        0 bytes
  8089 ;; Hardware stack levels used:    1
  8090 ;; Hardware stack levels required when called:    5
  8091 ;; This function calls:
  8092 ;;		Nothing
  8093 ;; This function is called by:
  8094 ;;		_TMR3_Initialize
  8095 ;;		_NutRunCycleStart
  8096 ;;		_OnEncPulseEdgeEvent
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           
  8101                           ;psect for function _TMR3_StartTimer
  8102  0BE5                     _TMR3_StartTimer:	
  8103                           
  8104                           ;tmr3.c: 99: T3CONbits.TMR3ON = 1;
  8105                           
  8106                           ;incstack = 0
  8107                           ; Regs used in _TMR3_StartTimer: []
  8108  0BE5  0028               	movlb	8	; select bank8
  8109  0BE6  1413               	bsf	19,0	;volatile
  8110  0BE7  0008               	return
  8111  0BE8                     __end_of_TMR3_StartTimer:	
  8112                           
  8113                           	psect	text27
  8114  0DF9                     __ptext27:	
  8115 ;; *************** function _ModbusMasterSetup *****************
  8116 ;; Defined at:
  8117 ;;		line 65 in file "ModbusManager.c"
  8118 ;; Parameters:    Size  Location     Type
  8119 ;;		None
  8120 ;; Auto vars:     Size  Location     Type
  8121 ;;		None
  8122 ;; Return value:  Size  Location     Type
  8123 ;;                  2  525[None  ] int 
  8124 ;; Registers used:
  8125 ;;		wreg, status,2, status,0, pclath, cstack
  8126 ;; Tracked objects:
  8127 ;;		On entry : 0/0
  8128 ;;		On exit  : 0/0
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8131 ;;      Params:         0       0       0       0       0       0       0       0
  8132 ;;      Locals:         0       0       0       0       0       0       0       0
  8133 ;;      Temps:          0       0       0       0       0       0       0       0
  8134 ;;      Totals:         0       0       0       0       0       0       0       0
  8135 ;;Total ram usage:        0 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; Hardware stack levels required when called:    6
  8138 ;; This function calls:
  8139 ;;		_EUSART_Initialize
  8140 ;;		_ModbusMasterInit
  8141 ;;		_postTransmission
  8142 ;;		_preTransmission
  8143 ;; This function is called by:
  8144 ;;		_main
  8145 ;; This function uses a non-reentrant model
  8146 ;;
  8147                           
  8148                           
  8149                           ;psect for function _ModbusMasterSetup
  8150  0DF9                     _ModbusMasterSetup:	
  8151                           
  8152                           ;incstack = 0
  8153                           ; Regs used in _ModbusMasterSetup: [wreg+status,2+status,0+pclath+cstack]
  8154                           ;ModbusManager.c: 67: do { LATBbits.LATB6 = 0; } while(0);
  8155  0DF9  0022               	movlb	2	; select bank2
  8156  0DFA  130D               	bcf	13,6	;volatile
  8157                           
  8158                           ;ModbusManager.c: 68: EUSART_Initialize();
  8159  0DFB  318C  24B9  318D   	fcall	_EUSART_Initialize
  8160                           
  8161                           ;ModbusManager.c: 70: ModbusMasterInit(5);
  8162  0DFE  3005               	movlw	5
  8163  0DFF  318D  2520  318D   	fcall	_ModbusMasterInit
  8164                           
  8165                           ;ModbusManager.c: 72: preTransmission(preTransmission_App);
  8166  0E02  30E2               	movlw	low _preTransmission_App
  8167  0E03  0020               	movlb	0	; select bank0
  8168  0E04  00D1               	movwf	preTransmission@preTransmission
  8169  0E05  300B               	movlw	high _preTransmission_App
  8170  0E06  00D2               	movwf	preTransmission@preTransmission+1
  8171  0E07  318C  2416  318D   	fcall	_preTransmission
  8172                           
  8173                           ;ModbusManager.c: 73: postTransmission(postTransmission_App);
  8174  0E0A  3006               	movlw	low _postTransmission_App
  8175  0E0B  0020               	movlb	0	; select bank0
  8176  0E0C  00D1               	movwf	postTransmission@postTransmission
  8177  0E0D  300C               	movlw	high _postTransmission_App
  8178  0E0E  00D2               	movwf	postTransmission@postTransmission+1
  8179  0E0F  318C  2410         	fcall	_postTransmission
  8180  0E11  0008               	return
  8181  0E12                     __end_of_ModbusMasterSetup:	
  8182                           
  8183                           	psect	text28
  8184  0C16                     __ptext28:	
  8185 ;; *************** function _preTransmission *****************
  8186 ;; Defined at:
  8187 ;;		line 134 in file "ModbusMaster.c"
  8188 ;; Parameters:    Size  Location     Type
  8189 ;;  preTransmiss    2    0[BANK0 ] PTR FTN()void 
  8190 ;;		 -> preTransmission_App(1), 
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;		None
  8193 ;; Return value:  Size  Location     Type
  8194 ;;                  1    wreg      void 
  8195 ;; Registers used:
  8196 ;;		wreg
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8202 ;;      Params:         0       2       0       0       0       0       0       0
  8203 ;;      Locals:         0       0       0       0       0       0       0       0
  8204 ;;      Temps:          0       0       0       0       0       0       0       0
  8205 ;;      Totals:         0       2       0       0       0       0       0       0
  8206 ;;Total ram usage:        2 bytes
  8207 ;; Hardware stack levels used:    1
  8208 ;; Hardware stack levels required when called:    5
  8209 ;; This function calls:
  8210 ;;		Nothing
  8211 ;; This function is called by:
  8212 ;;		_ModbusMasterSetup
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           
  8217                           ;psect for function _preTransmission
  8218  0C16                     _preTransmission:	
  8219                           
  8220                           ;ModbusMaster.c: 136: _preTransmission = preTransmission;
  8221                           
  8222                           ;incstack = 0
  8223                           ; Regs used in _preTransmission: [wreg]
  8224  0C16  0020               	movlb	0	; select bank0
  8225  0C17  0852               	movf	preTransmission@preTransmission+1,w
  8226  0C18  00B3               	movwf	__preTransmission+1
  8227  0C19  0851               	movf	preTransmission@preTransmission,w
  8228  0C1A  00B2               	movwf	__preTransmission
  8229  0C1B  0008               	return
  8230  0C1C                     __end_of_preTransmission:	
  8231                           
  8232                           	psect	text29
  8233  0C10                     __ptext29:	
  8234 ;; *************** function _postTransmission *****************
  8235 ;; Defined at:
  8236 ;;		line 152 in file "ModbusMaster.c"
  8237 ;; Parameters:    Size  Location     Type
  8238 ;;  postTransmis    2    0[BANK0 ] PTR FTN()void 
  8239 ;;		 -> postTransmission_App(1), 
  8240 ;; Auto vars:     Size  Location     Type
  8241 ;;		None
  8242 ;; Return value:  Size  Location     Type
  8243 ;;                  1    wreg      void 
  8244 ;; Registers used:
  8245 ;;		wreg
  8246 ;; Tracked objects:
  8247 ;;		On entry : 0/0
  8248 ;;		On exit  : 0/0
  8249 ;;		Unchanged: 0/0
  8250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8251 ;;      Params:         0       2       0       0       0       0       0       0
  8252 ;;      Locals:         0       0       0       0       0       0       0       0
  8253 ;;      Temps:          0       0       0       0       0       0       0       0
  8254 ;;      Totals:         0       2       0       0       0       0       0       0
  8255 ;;Total ram usage:        2 bytes
  8256 ;; Hardware stack levels used:    1
  8257 ;; Hardware stack levels required when called:    5
  8258 ;; This function calls:
  8259 ;;		Nothing
  8260 ;; This function is called by:
  8261 ;;		_ModbusMasterSetup
  8262 ;; This function uses a non-reentrant model
  8263 ;;
  8264                           
  8265                           
  8266                           ;psect for function _postTransmission
  8267  0C10                     _postTransmission:	
  8268                           
  8269                           ;ModbusMaster.c: 154: _postTransmission = postTransmission;
  8270                           
  8271                           ;incstack = 0
  8272                           ; Regs used in _postTransmission: [wreg]
  8273  0C10  0020               	movlb	0	; select bank0
  8274  0C11  0852               	movf	postTransmission@postTransmission+1,w
  8275  0C12  00B1               	movwf	__postTransmission+1
  8276  0C13  0851               	movf	postTransmission@postTransmission,w
  8277  0C14  00B0               	movwf	__postTransmission
  8278  0C15  0008               	return
  8279  0C16                     __end_of_postTransmission:	
  8280                           
  8281                           	psect	text30
  8282  0D20                     __ptext30:	
  8283 ;; *************** function _ModbusMasterInit *****************
  8284 ;; Defined at:
  8285 ;;		line 19 in file "ModbusMaster.c"
  8286 ;; Parameters:    Size  Location     Type
  8287 ;;  slave           1    wreg     unsigned char 
  8288 ;; Auto vars:     Size  Location     Type
  8289 ;;  slave           1    1[BANK0 ] unsigned char 
  8290 ;; Return value:  Size  Location     Type
  8291 ;;                  1    wreg      void 
  8292 ;; Registers used:
  8293 ;;		wreg, status,2
  8294 ;; Tracked objects:
  8295 ;;		On entry : 0/0
  8296 ;;		On exit  : 0/0
  8297 ;;		Unchanged: 0/0
  8298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8299 ;;      Params:         0       0       0       0       0       0       0       0
  8300 ;;      Locals:         0       1       0       0       0       0       0       0
  8301 ;;      Temps:          0       1       0       0       0       0       0       0
  8302 ;;      Totals:         0       2       0       0       0       0       0       0
  8303 ;;Total ram usage:        2 bytes
  8304 ;; Hardware stack levels used:    1
  8305 ;; Hardware stack levels required when called:    5
  8306 ;; This function calls:
  8307 ;;		Nothing
  8308 ;; This function is called by:
  8309 ;;		_ModbusMasterSetup
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           
  8314                           ;psect for function _ModbusMasterInit
  8315  0D20                     _ModbusMasterInit:	
  8316                           
  8317                           ;incstack = 0
  8318                           ; Regs used in _ModbusMasterInit: [wreg+status,2]
  8319                           ;ModbusMasterInit@slave stored from wreg
  8320  0D20  0020               	movlb	0	; select bank0
  8321  0D21  00D2               	movwf	ModbusMasterInit@slave
  8322                           
  8323                           ;ModbusMaster.c: 22: _preTransmission = 0;
  8324  0D22  01B2               	clrf	__preTransmission
  8325  0D23  01B3               	clrf	__preTransmission+1
  8326                           
  8327                           ;ModbusMaster.c: 23: _postTransmission = 0;
  8328  0D24  01B0               	clrf	__postTransmission
  8329  0D25  01B1               	clrf	__postTransmission+1
  8330                           
  8331                           ;ModbusMaster.c: 24: _u8MBSlave = slave;
  8332  0D26  0852               	movf	ModbusMasterInit@slave,w
  8333  0D27  00D1               	movwf	??_ModbusMasterInit
  8334  0D28  0851               	movf	??_ModbusMasterInit,w
  8335  0D29  00CA               	movwf	__u8MBSlave
  8336                           
  8337                           ;ModbusMaster.c: 25: _u8TransmitBufferIndex = 0;
  8338  0D2A  01C9               	clrf	__u8TransmitBufferIndex
  8339                           
  8340                           ;ModbusMaster.c: 26: u16TransmitBufferLength = 0;
  8341  0D2B  0022               	movlb	2	; select bank2
  8342  0D2C  01AC               	clrf	_u16TransmitBufferLength^(0+256)
  8343  0D2D  01AD               	clrf	(_u16TransmitBufferLength+1)^(0+256)
  8344  0D2E  0008               	return
  8345  0D2F                     __end_of_ModbusMasterInit:	
  8346                           
  8347                           	psect	text31
  8348  0CB9                     __ptext31:	
  8349 ;; *************** function _EUSART_Initialize *****************
  8350 ;; Defined at:
  8351 ;;		line 55 in file "mcc_generated_files/eusart.c"
  8352 ;; Parameters:    Size  Location     Type
  8353 ;;		None
  8354 ;; Auto vars:     Size  Location     Type
  8355 ;;		None
  8356 ;; Return value:  Size  Location     Type
  8357 ;;                  1    wreg      void 
  8358 ;; Registers used:
  8359 ;;		wreg
  8360 ;; Tracked objects:
  8361 ;;		On entry : 0/0
  8362 ;;		On exit  : 0/0
  8363 ;;		Unchanged: 0/0
  8364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8365 ;;      Params:         0       0       0       0       0       0       0       0
  8366 ;;      Locals:         0       0       0       0       0       0       0       0
  8367 ;;      Temps:          0       0       0       0       0       0       0       0
  8368 ;;      Totals:         0       0       0       0       0       0       0       0
  8369 ;;Total ram usage:        0 bytes
  8370 ;; Hardware stack levels used:    1
  8371 ;; Hardware stack levels required when called:    5
  8372 ;; This function calls:
  8373 ;;		Nothing
  8374 ;; This function is called by:
  8375 ;;		_SYSTEM_Initialize
  8376 ;;		_ModbusMasterSetup
  8377 ;; This function uses a non-reentrant model
  8378 ;;
  8379                           
  8380                           
  8381                           ;psect for function _EUSART_Initialize
  8382  0CB9                     _EUSART_Initialize:	
  8383                           
  8384                           ;eusart.c: 60: BAUD1CON = 0x18;
  8385                           
  8386                           ;incstack = 0
  8387                           ; Regs used in _EUSART_Initialize: [wreg]
  8388  0CB9  3018               	movlw	24
  8389  0CBA  0023               	movlb	3	; select bank3
  8390  0CBB  009F               	movwf	31	;volatile
  8391                           
  8392                           ;eusart.c: 63: RC1STA = 0x90;
  8393  0CBC  3090               	movlw	144
  8394  0CBD  009D               	movwf	29	;volatile
  8395                           
  8396                           ;eusart.c: 66: TX1STA = 0x24;
  8397  0CBE  3024               	movlw	36
  8398  0CBF  009E               	movwf	30	;volatile
  8399                           
  8400                           ;eusart.c: 69: SP1BRGL = 0x40;
  8401  0CC0  3040               	movlw	64
  8402  0CC1  009B               	movwf	27	;volatile
  8403                           
  8404                           ;eusart.c: 72: SP1BRGH = 0x03;
  8405  0CC2  3003               	movlw	3
  8406  0CC3  009C               	movwf	28	;volatile
  8407  0CC4  0008               	return
  8408  0CC5                     __end_of_EUSART_Initialize:	
  8409                           
  8410                           	psect	text32
  8411  07E2                     __ptext32:	
  8412 ;; *************** function _MB_UpdateEPCParameter *****************
  8413 ;; Defined at:
  8414 ;;		line 76 in file "ModbusManager.c"
  8415 ;; Parameters:    Size  Location     Type
  8416 ;;		None
  8417 ;; Auto vars:     Size  Location     Type
  8418 ;;  result          1   20[BANK0 ] unsigned char 
  8419 ;; Return value:  Size  Location     Type
  8420 ;;                  1    wreg      void 
  8421 ;; Registers used:
  8422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8423 ;; Tracked objects:
  8424 ;;		On entry : 0/0
  8425 ;;		On exit  : 0/0
  8426 ;;		Unchanged: 0/0
  8427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8428 ;;      Params:         0       0       0       0       0       0       0       0
  8429 ;;      Locals:         0       1       0       0       0       0       0       0
  8430 ;;      Temps:          0       1       0       0       0       0       0       0
  8431 ;;      Totals:         0       2       0       0       0       0       0       0
  8432 ;;Total ram usage:        2 bytes
  8433 ;; Hardware stack levels used:    1
  8434 ;; Hardware stack levels required when called:    8
  8435 ;; This function calls:
  8436 ;;		_getResponseBuffer
  8437 ;;		_readHoldingRegisters
  8438 ;; This function is called by:
  8439 ;;		_main
  8440 ;; This function uses a non-reentrant model
  8441 ;;
  8442                           
  8443                           
  8444                           ;psect for function _MB_UpdateEPCParameter
  8445  07E2                     _MB_UpdateEPCParameter:	
  8446                           
  8447                           ;ModbusManager.c: 78: unsigned char result;
  8448                           ;ModbusManager.c: 79: result = readHoldingRegisters(20015, 1);
  8449                           
  8450                           ;incstack = 0
  8451                           ; Regs used in _MB_UpdateEPCParameter: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8452  07E2  302F               	movlw	47
  8453  07E3  0020               	movlb	0	; select bank0
  8454  07E4  00E0               	movwf	readHoldingRegisters@u16ReadAddress
  8455  07E5  304E               	movlw	78
  8456  07E6  00E1               	movwf	readHoldingRegisters@u16ReadAddress+1
  8457  07E7  3001               	movlw	1
  8458  07E8  00E2               	movwf	readHoldingRegisters@u16ReadQty
  8459  07E9  3000               	movlw	0
  8460  07EA  00E3               	movwf	readHoldingRegisters@u16ReadQty+1
  8461  07EB  318C  24F7  3187   	fcall	_readHoldingRegisters
  8462  07EE  0020               	movlb	0	; select bank0
  8463  07EF  00E4               	movwf	??_MB_UpdateEPCParameter
  8464  07F0  0864               	movf	??_MB_UpdateEPCParameter,w
  8465  07F1  00E5               	movwf	MB_UpdateEPCParameter@result
  8466                           
  8467                           ;ModbusManager.c: 80: if (result == 0x00)
  8468  07F2  0865               	movf	MB_UpdateEPCParameter@result,w
  8469  07F3  1D03               	btfss	3,2
  8470  07F4  2FFD               	goto	l6203
  8471                           
  8472                           ;ModbusManager.c: 81: {
  8473                           ;ModbusManager.c: 83: MBreadSetNoOfPulse=(unsigned int)getResponseBuffer(0x00);
  8474  07F5  3000               	movlw	0
  8475  07F6  318E  2664         	fcall	_getResponseBuffer
  8476  07F8  0020               	movlb	0	; select bank0
  8477  07F9  0852               	movf	?_getResponseBuffer+1,w
  8478  07FA  00C5               	movwf	_MBreadSetNoOfPulse+1
  8479  07FB  0851               	movf	?_getResponseBuffer,w
  8480  07FC  00C4               	movwf	_MBreadSetNoOfPulse
  8481  07FD                     l6203:	
  8482                           
  8483                           ;ModbusManager.c: 85: }
  8484                           ;ModbusManager.c: 86: MBreadSetNoOfPulse=0;
  8485  07FD  01C4               	clrf	_MBreadSetNoOfPulse
  8486  07FE  01C5               	clrf	_MBreadSetNoOfPulse+1
  8487  07FF  0008               	return
  8488  0800                     __end_of_MB_UpdateEPCParameter:	
  8489                           
  8490                           	psect	text33
  8491  0CF7                     __ptext33:	
  8492 ;; *************** function _readHoldingRegisters *****************
  8493 ;; Defined at:
  8494 ;;		line 315 in file "ModbusMaster.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  u16ReadAddre    2   15[BANK0 ] unsigned int 
  8497 ;;  u16ReadQty      2   17[BANK0 ] unsigned int 
  8498 ;; Auto vars:     Size  Location     Type
  8499 ;;		None
  8500 ;; Return value:  Size  Location     Type
  8501 ;;                  1    wreg      unsigned char 
  8502 ;; Registers used:
  8503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8504 ;; Tracked objects:
  8505 ;;		On entry : 0/0
  8506 ;;		On exit  : 0/0
  8507 ;;		Unchanged: 0/0
  8508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8509 ;;      Params:         0       4       0       0       0       0       0       0
  8510 ;;      Locals:         0       0       0       0       0       0       0       0
  8511 ;;      Temps:          0       0       0       0       0       0       0       0
  8512 ;;      Totals:         0       4       0       0       0       0       0       0
  8513 ;;Total ram usage:        4 bytes
  8514 ;; Hardware stack levels used:    1
  8515 ;; Hardware stack levels required when called:    7
  8516 ;; This function calls:
  8517 ;;		_ModbusMasterTransaction
  8518 ;; This function is called by:
  8519 ;;		_MB_UpdateEPCParameter
  8520 ;; This function uses a non-reentrant model
  8521 ;;
  8522                           
  8523                           
  8524                           ;psect for function _readHoldingRegisters
  8525  0CF7                     _readHoldingRegisters:	
  8526                           
  8527                           ;ModbusMaster.c: 318: _u16ReadAddress = u16ReadAddress;
  8528                           
  8529                           ;incstack = 0
  8530                           ; Regs used in _readHoldingRegisters: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8531  0CF7  0020               	movlb	0	; select bank0
  8532  0CF8  0861               	movf	readHoldingRegisters@u16ReadAddress+1,w
  8533  0CF9  00B9               	movwf	__u16ReadAddress+1
  8534  0CFA  0860               	movf	readHoldingRegisters@u16ReadAddress,w
  8535  0CFB  00B8               	movwf	__u16ReadAddress
  8536                           
  8537                           ;ModbusMaster.c: 319: _u16ReadQty = u16ReadQty;
  8538  0CFC  0863               	movf	readHoldingRegisters@u16ReadQty+1,w
  8539  0CFD  00B7               	movwf	__u16ReadQty+1
  8540  0CFE  0862               	movf	readHoldingRegisters@u16ReadQty,w
  8541  0CFF  00B6               	movwf	__u16ReadQty
  8542                           
  8543                           ;ModbusMaster.c: 320: return ModbusMasterTransaction(0x03);
  8544  0D00  3003               	movlw	3
  8545  0D01  3180  209C         	fcall	_ModbusMasterTransaction
  8546  0D03  0008               	return
  8547  0D04                     __end_of_readHoldingRegisters:	
  8548                           
  8549                           	psect	text34
  8550  009C                     __ptext34:	
  8551 ;; *************** function _ModbusMasterTransaction *****************
  8552 ;; Defined at:
  8553 ;;		line 538 in file "ModbusMaster.c"
  8554 ;; Parameters:    Size  Location     Type
  8555 ;;  u8MBFunction    1    wreg     unsigned char 
  8556 ;; Auto vars:     Size  Location     Type
  8557 ;;  u8MBFunction    1   72[BANK1 ] unsigned char 
  8558 ;;  u8ModbusADU    64    0[BANK1 ] unsigned char [64]
  8559 ;;  u32StartTime    4   64[BANK1 ] unsigned long 
  8560 ;;  u16CRC          2   74[BANK1 ] unsigned int 
  8561 ;;  u8ModbusADUS    1   77[BANK1 ] unsigned char 
  8562 ;;  i               1   76[BANK1 ] unsigned char 
  8563 ;;  u8MBStatus      1   73[BANK1 ] unsigned char 
  8564 ;;  u8BytesLeft     1   71[BANK1 ] unsigned char 
  8565 ;;  u8Qty           1   70[BANK1 ] unsigned char 
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  1    wreg      unsigned char 
  8568 ;; Registers used:
  8569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8575 ;;      Params:         0       0       0       0       0       0       0       0
  8576 ;;      Locals:         0       0      78       0       0       0       0       0
  8577 ;;      Temps:          0       5       0       0       0       0       0       0
  8578 ;;      Totals:         0       5      78       0       0       0       0       0
  8579 ;;Total ram usage:       83 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; Hardware stack levels required when called:    6
  8582 ;; This function calls:
  8583 ;;		Absolute function
  8584 ;;		_EUSART_Read
  8585 ;;		_EUSART_Write
  8586 ;;		_crc16_update
  8587 ;;		_highByte
  8588 ;;		_lowByte
  8589 ;;		_millis
  8590 ;;		_millisReset
  8591 ;;		_postTransmission_App
  8592 ;;		_preTransmission_App
  8593 ;;		_word
  8594 ;; This function is called by:
  8595 ;;		_readHoldingRegisters
  8596 ;;		_readCoils
  8597 ;;		_readDiscreteInputs
  8598 ;;		_readInputRegisters
  8599 ;;		_writeSingleCoil
  8600 ;;		_writeSingleRegister
  8601 ;;		_writeMultipleCoils
  8602 ;;		_writeMultipleRegisters
  8603 ;;		_maskWriteRegister
  8604 ;;		_readWriteMultipleRegisters
  8605 ;; This function uses a non-reentrant model
  8606 ;;
  8607                           
  8608                           
  8609                           ;psect for function _ModbusMasterTransaction
  8610  009C                     _ModbusMasterTransaction:	
  8611                           
  8612                           ;incstack = 0
  8613                           ; Regs used in _ModbusMasterTransaction: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8614                           ;ModbusMasterTransaction@u8MBFunction stored from wreg
  8615  009C  0021               	movlb	1	; select bank1
  8616  009D  00E8               	movwf	ModbusMasterTransaction@u8MBFunction^(0+128)
  8617                           
  8618                           ;ModbusMaster.c: 541: unsigned char u8ModbusADU[64];
  8619                           ;ModbusMaster.c: 542: unsigned char u8ModbusADUSize = 0;
  8620  009E  01ED               	clrf	ModbusMasterTransaction@u8ModbusADUSize^(0+128)
  8621                           
  8622                           ;ModbusMaster.c: 543: unsigned char i, u8Qty;
  8623                           ;ModbusMaster.c: 544: unsigned int u16CRC;
  8624                           ;ModbusMaster.c: 545: unsigned long u32StartTime;
  8625                           ;ModbusMaster.c: 546: unsigned char u8BytesLeft = 8;
  8626  009F  3008               	movlw	8
  8627  00A0  0020               	movlb	0	; select bank0
  8628  00A1  00DB               	movwf	??_ModbusMasterTransaction
  8629  00A2  085B               	movf	??_ModbusMasterTransaction,w
  8630  00A3  0021               	movlb	1	; select bank1
  8631  00A4  00E7               	movwf	ModbusMasterTransaction@u8BytesLeft^(0+128)
  8632                           
  8633                           ;ModbusMaster.c: 547: unsigned char u8MBStatus = 0x00;
  8634  00A5  01E9               	clrf	ModbusMasterTransaction@u8MBStatus^(0+128)
  8635                           
  8636                           ;ModbusMaster.c: 550: u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;
  8637  00A6  0020               	movlb	0	; select bank0
  8638  00A7  084A               	movf	__u8MBSlave,w
  8639  00A8  00DB               	movwf	??_ModbusMasterTransaction
  8640  00A9  0021               	movlb	1	; select bank1
  8641  00AA  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  8642  00AB  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  8643  00AC  0086               	movwf	6
  8644  00AD  0187               	clrf	7
  8645  00AE  0020               	movlb	0	; select bank0
  8646  00AF  085B               	movf	??_ModbusMasterTransaction,w
  8647  00B0  0081               	movwf	1
  8648  00B1  3001               	movlw	1
  8649  00B2  00DB               	movwf	??_ModbusMasterTransaction
  8650  00B3  085B               	movf	??_ModbusMasterTransaction,w
  8651  00B4  0021               	movlb	1	; select bank1
  8652  00B5  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  8653                           
  8654                           ;ModbusMaster.c: 551: u8ModbusADU[u8ModbusADUSize++] = u8MBFunction;
  8655  00B6  0868               	movf	ModbusMasterTransaction@u8MBFunction^(0+128),w
  8656  00B7  0020               	movlb	0	; select bank0
  8657  00B8  00DB               	movwf	??_ModbusMasterTransaction
  8658  00B9  0021               	movlb	1	; select bank1
  8659  00BA  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  8660  00BB  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  8661  00BC  0086               	movwf	6
  8662  00BD  0187               	clrf	7
  8663  00BE  0020               	movlb	0	; select bank0
  8664  00BF  085B               	movf	??_ModbusMasterTransaction,w
  8665  00C0  0081               	movwf	1
  8666  00C1  3001               	movlw	1
  8667  00C2  00DB               	movwf	??_ModbusMasterTransaction
  8668  00C3  085B               	movf	??_ModbusMasterTransaction,w
  8669  00C4  0021               	movlb	1	; select bank1
  8670  00C5  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  8671                           
  8672                           ;ModbusMaster.c: 553: switch(u8MBFunction)
  8673  00C6  2924               	goto	l5859
  8674  00C7                     l5845:	
  8675                           ;ModbusMaster.c: 554: {
  8676                           ;ModbusMaster.c: 555: case 0x01:
  8677                           
  8678                           
  8679                           ;ModbusMaster.c: 556: case 0x02:
  8680                           ;ModbusMaster.c: 557: case 0x04:
  8681                           ;ModbusMaster.c: 558: case 0x03:
  8682                           ;ModbusMaster.c: 559: case 0x17:
  8683                           ;ModbusMaster.c: 560: u8ModbusADU[u8ModbusADUSize++] = highByte(_u16ReadAddress);
  8684  00C7  0020               	movlb	0	; select bank0
  8685  00C8  0839               	movf	__u16ReadAddress+1,w
  8686  00C9  00D2               	movwf	highByte@ww+1
  8687  00CA  0838               	movf	__u16ReadAddress,w
  8688  00CB  00D1               	movwf	highByte@ww
  8689  00CC  318B  23DC  3180   	fcall	_highByte
  8690  00CF  0020               	movlb	0	; select bank0
  8691  00D0  00DB               	movwf	??_ModbusMasterTransaction
  8692  00D1  0021               	movlb	1	; select bank1
  8693  00D2  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  8694  00D3  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  8695  00D4  0086               	movwf	6
  8696  00D5  0187               	clrf	7
  8697  00D6  0020               	movlb	0	; select bank0
  8698  00D7  085B               	movf	??_ModbusMasterTransaction,w
  8699  00D8  0081               	movwf	1
  8700  00D9  3001               	movlw	1
  8701  00DA  00DB               	movwf	??_ModbusMasterTransaction
  8702  00DB  085B               	movf	??_ModbusMasterTransaction,w
  8703  00DC  0021               	movlb	1	; select bank1
  8704  00DD  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  8705                           
  8706                           ;ModbusMaster.c: 561: u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadAddress);
  8707  00DE  0020               	movlb	0	; select bank0
  8708  00DF  0839               	movf	__u16ReadAddress+1,w
  8709  00E0  00D2               	movwf	lowByte@ww+1
  8710  00E1  0838               	movf	__u16ReadAddress,w
  8711  00E2  00D1               	movwf	lowByte@ww
  8712  00E3  318B  23DF  3180   	fcall	_lowByte
  8713  00E6  0020               	movlb	0	; select bank0
  8714  00E7  00DB               	movwf	??_ModbusMasterTransaction
  8715  00E8  0021               	movlb	1	; select bank1
  8716  00E9  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  8717  00EA  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  8718  00EB  0086               	movwf	6
  8719  00EC  0187               	clrf	7
  8720  00ED  0020               	movlb	0	; select bank0
  8721  00EE  085B               	movf	??_ModbusMasterTransaction,w
  8722  00EF  0081               	movwf	1
  8723  00F0  3001               	movlw	1
  8724  00F1  00DB               	movwf	??_ModbusMasterTransaction
  8725  00F2  085B               	movf	??_ModbusMasterTransaction,w
  8726  00F3  0021               	movlb	1	; select bank1
  8727  00F4  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  8728                           
  8729                           ;ModbusMaster.c: 562: u8ModbusADU[u8ModbusADUSize++] = highByte(_u16ReadQty);
  8730  00F5  0020               	movlb	0	; select bank0
  8731  00F6  0837               	movf	__u16ReadQty+1,w
  8732  00F7  00D2               	movwf	highByte@ww+1
  8733  00F8  0836               	movf	__u16ReadQty,w
  8734  00F9  00D1               	movwf	highByte@ww
  8735  00FA  318B  23DC  3180   	fcall	_highByte
  8736  00FD  0020               	movlb	0	; select bank0
  8737  00FE  00DB               	movwf	??_ModbusMasterTransaction
  8738  00FF  0021               	movlb	1	; select bank1
  8739  0100  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  8740  0101  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  8741  0102  0086               	movwf	6
  8742  0103  0187               	clrf	7
  8743  0104  0020               	movlb	0	; select bank0
  8744  0105  085B               	movf	??_ModbusMasterTransaction,w
  8745  0106  0081               	movwf	1
  8746  0107  3001               	movlw	1
  8747  0108  00DB               	movwf	??_ModbusMasterTransaction
  8748  0109  085B               	movf	??_ModbusMasterTransaction,w
  8749  010A  0021               	movlb	1	; select bank1
  8750  010B  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  8751                           
  8752                           ;ModbusMaster.c: 563: u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadQty);
  8753  010C  0020               	movlb	0	; select bank0
  8754  010D  0837               	movf	__u16ReadQty+1,w
  8755  010E  00D2               	movwf	lowByte@ww+1
  8756  010F  0836               	movf	__u16ReadQty,w
  8757  0110  00D1               	movwf	lowByte@ww
  8758  0111  318B  23DF  3180   	fcall	_lowByte
  8759  0114  0020               	movlb	0	; select bank0
  8760  0115  00DB               	movwf	??_ModbusMasterTransaction
  8761  0116  0021               	movlb	1	; select bank1
  8762  0117  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  8763  0118  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  8764  0119  0086               	movwf	6
  8765  011A  0187               	clrf	7
  8766  011B  0020               	movlb	0	; select bank0
  8767  011C  085B               	movf	??_ModbusMasterTransaction,w
  8768  011D  0081               	movwf	1
  8769  011E  3001               	movlw	1
  8770  011F  00DB               	movwf	??_ModbusMasterTransaction
  8771  0120  085B               	movf	??_ModbusMasterTransaction,w
  8772  0121  0021               	movlb	1	; select bank1
  8773  0122  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  8774                           
  8775                           ;ModbusMaster.c: 565: }
  8776                           
  8777                           ;ModbusMaster.c: 564: break;
  8778  0123  2965               	goto	l5869
  8779  0124                     l5859:	
  8780  0124  0868               	movf	ModbusMasterTransaction@u8MBFunction^(0+128),w
  8781                           
  8782                           ; Switch size 1, requested type "space"
  8783                           ; Number of cases is 5, Range of values is 1 to 23
  8784                           ; switch strategies available:
  8785                           ; Name         Instructions Cycles
  8786                           ; simple_byte           16     9 (average)
  8787                           ; direct_byte           55     9 (fixed)
  8788                           ; jumptable            263     9 (fixed)
  8789                           ;	Chosen strategy is simple_byte
  8790  0125  3A01               	xorlw	1	; case 1
  8791  0126  1903               	skipnz
  8792  0127  28C7               	goto	l5845
  8793  0128  3A03               	xorlw	3	; case 2
  8794  0129  1903               	skipnz
  8795  012A  28C7               	goto	l5845
  8796  012B  3A01               	xorlw	1	; case 3
  8797  012C  1903               	skipnz
  8798  012D  28C7               	goto	l5845
  8799  012E  3A07               	xorlw	7	; case 4
  8800  012F  1903               	skipnz
  8801  0130  28C7               	goto	l5845
  8802  0131  3A13               	xorlw	19	; case 23
  8803  0132  1903               	skipnz
  8804  0133  28C7               	goto	l5845
  8805  0134  2965               	goto	l5869
  8806                           
  8807                           ;ModbusMaster.c: 567: switch(u8MBFunction)
  8808  0135  2965               	goto	l5869
  8809  0136                     l5861:	
  8810                           ;ModbusMaster.c: 568: {
  8811                           ;ModbusMaster.c: 569: case 0x05:
  8812                           
  8813                           
  8814                           ;ModbusMaster.c: 570: case 0x16:
  8815                           ;ModbusMaster.c: 571: case 0x0F:
  8816                           ;ModbusMaster.c: 572: case 0x06:
  8817                           ;ModbusMaster.c: 573: case 0x10:
  8818                           ;ModbusMaster.c: 574: case 0x17:
  8819                           ;ModbusMaster.c: 575: u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteAddress);
  8820  0136  0020               	movlb	0	; select bank0
  8821  0137  0835               	movf	__u16WriteAddress+1,w
  8822  0138  00D2               	movwf	highByte@ww+1
  8823  0139  0834               	movf	__u16WriteAddress,w
  8824  013A  00D1               	movwf	highByte@ww
  8825  013B  318B  23DC  3180   	fcall	_highByte
  8826  013E  0020               	movlb	0	; select bank0
  8827  013F  00DB               	movwf	??_ModbusMasterTransaction
  8828  0140  0021               	movlb	1	; select bank1
  8829  0141  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  8830  0142  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  8831  0143  0086               	movwf	6
  8832  0144  0187               	clrf	7
  8833  0145  0020               	movlb	0	; select bank0
  8834  0146  085B               	movf	??_ModbusMasterTransaction,w
  8835  0147  0081               	movwf	1
  8836  0148  3001               	movlw	1
  8837  0149  00DB               	movwf	??_ModbusMasterTransaction
  8838  014A  085B               	movf	??_ModbusMasterTransaction,w
  8839  014B  0021               	movlb	1	; select bank1
  8840  014C  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  8841                           
  8842                           ;ModbusMaster.c: 576: u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteAddress);
  8843  014D  0020               	movlb	0	; select bank0
  8844  014E  0835               	movf	__u16WriteAddress+1,w
  8845  014F  00D2               	movwf	lowByte@ww+1
  8846  0150  0834               	movf	__u16WriteAddress,w
  8847  0151  00D1               	movwf	lowByte@ww
  8848  0152  318B  23DF  3180   	fcall	_lowByte
  8849  0155  0020               	movlb	0	; select bank0
  8850  0156  00DB               	movwf	??_ModbusMasterTransaction
  8851  0157  0021               	movlb	1	; select bank1
  8852  0158  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  8853  0159  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  8854  015A  0086               	movwf	6
  8855  015B  0187               	clrf	7
  8856  015C  0020               	movlb	0	; select bank0
  8857  015D  085B               	movf	??_ModbusMasterTransaction,w
  8858  015E  0081               	movwf	1
  8859  015F  3001               	movlw	1
  8860  0160  00DB               	movwf	??_ModbusMasterTransaction
  8861  0161  085B               	movf	??_ModbusMasterTransaction,w
  8862  0162  0021               	movlb	1	; select bank1
  8863  0163  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  8864                           
  8865                           ;ModbusMaster.c: 578: }
  8866                           
  8867                           ;ModbusMaster.c: 577: break;
  8868  0164  2BBA               	goto	l5951
  8869  0165                     l5869:	
  8870  0165  0868               	movf	ModbusMasterTransaction@u8MBFunction^(0+128),w
  8871                           
  8872                           ; Switch size 1, requested type "space"
  8873                           ; Number of cases is 6, Range of values is 5 to 23
  8874                           ; switch strategies available:
  8875                           ; Name         Instructions Cycles
  8876                           ; simple_byte           19    10 (average)
  8877                           ; direct_byte           47     9 (fixed)
  8878                           ; jumptable            263     9 (fixed)
  8879                           ;	Chosen strategy is simple_byte
  8880  0166  3A05               	xorlw	5	; case 5
  8881  0167  1903               	skipnz
  8882  0168  2936               	goto	l5861
  8883  0169  3A03               	xorlw	3	; case 6
  8884  016A  1903               	skipnz
  8885  016B  2936               	goto	l5861
  8886  016C  3A09               	xorlw	9	; case 15
  8887  016D  1903               	skipnz
  8888  016E  2936               	goto	l5861
  8889  016F  3A1F               	xorlw	31	; case 16
  8890  0170  1903               	skipnz
  8891  0171  2936               	goto	l5861
  8892  0172  3A06               	xorlw	6	; case 22
  8893  0173  1903               	skipnz
  8894  0174  2936               	goto	l5861
  8895  0175  3A01               	xorlw	1	; case 23
  8896  0176  1903               	skipnz
  8897  0177  2936               	goto	l5861
  8898  0178  2BBA               	goto	l5951
  8899                           
  8900                           ;ModbusMaster.c: 580: switch(u8MBFunction)
  8901  0179  2BBA               	goto	l5951
  8902  017A                     l5871:	
  8903                           ;ModbusMaster.c: 581: {
  8904                           ;ModbusMaster.c: 582: case 0x05:
  8905                           
  8906                           
  8907                           ;ModbusMaster.c: 583: u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteQty);
  8908  017A  086F               	movf	(__u16WriteQty+1)^(0+128),w
  8909  017B  0020               	movlb	0	; select bank0
  8910  017C  00D2               	movwf	highByte@ww+1
  8911  017D  0021               	movlb	1	; select bank1
  8912  017E  086E               	movf	__u16WriteQty^(0+128),w
  8913  017F  0020               	movlb	0	; select bank0
  8914  0180  00D1               	movwf	highByte@ww
  8915  0181  318B  23DC  3180   	fcall	_highByte
  8916  0184  0020               	movlb	0	; select bank0
  8917  0185  00DB               	movwf	??_ModbusMasterTransaction
  8918  0186  0021               	movlb	1	; select bank1
  8919  0187  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  8920  0188  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  8921  0189  0086               	movwf	6
  8922  018A  0187               	clrf	7
  8923  018B  0020               	movlb	0	; select bank0
  8924  018C  085B               	movf	??_ModbusMasterTransaction,w
  8925  018D  0081               	movwf	1
  8926  018E  3001               	movlw	1
  8927  018F  00DB               	movwf	??_ModbusMasterTransaction
  8928  0190  085B               	movf	??_ModbusMasterTransaction,w
  8929  0191  0021               	movlb	1	; select bank1
  8930  0192  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  8931                           
  8932                           ;ModbusMaster.c: 584: u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty);
  8933  0193  086F               	movf	(__u16WriteQty+1)^(0+128),w
  8934  0194  0020               	movlb	0	; select bank0
  8935  0195  00D2               	movwf	lowByte@ww+1
  8936  0196  0021               	movlb	1	; select bank1
  8937  0197  086E               	movf	__u16WriteQty^(0+128),w
  8938  0198  0020               	movlb	0	; select bank0
  8939  0199  00D1               	movwf	lowByte@ww
  8940  019A  2BA7               	goto	L8
  8941  019B                     l5877:	
  8942                           ;ModbusMaster.c: 587: case 0x06:
  8943                           
  8944                           ;ModbusMaster.c: 585: break;
  8945                           
  8946                           
  8947                           ;ModbusMaster.c: 588: u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[0]);
  8948  019B  3070               	movlw	112
  8949  019C  0086               	movwf	6
  8950  019D  3021               	movlw	33
  8951  019E  0087               	movwf	7
  8952  019F  3F40               	moviw [0]fsr1
  8953  01A0  0020               	movlb	0	; select bank0
  8954  01A1  00D1               	movwf	highByte@ww
  8955  01A2  3F41               	moviw [1]fsr1
  8956  01A3  00D2               	movwf	highByte@ww+1
  8957  01A4  318B  23DC  3180   	fcall	_highByte
  8958  01A7  0020               	movlb	0	; select bank0
  8959  01A8  00DB               	movwf	??_ModbusMasterTransaction
  8960  01A9  0021               	movlb	1	; select bank1
  8961  01AA  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  8962  01AB  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  8963  01AC  0086               	movwf	6
  8964  01AD  0187               	clrf	7
  8965  01AE  0020               	movlb	0	; select bank0
  8966  01AF  085B               	movf	??_ModbusMasterTransaction,w
  8967  01B0  0081               	movwf	1
  8968  01B1  3001               	movlw	1
  8969  01B2  00DB               	movwf	??_ModbusMasterTransaction
  8970  01B3  085B               	movf	??_ModbusMasterTransaction,w
  8971  01B4  0021               	movlb	1	; select bank1
  8972  01B5  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  8973                           
  8974                           ;ModbusMaster.c: 589: u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[0]);
  8975  01B6  3070               	movlw	112
  8976  01B7  0086               	movwf	6
  8977  01B8  3021               	movlw	33
  8978  01B9  0087               	movwf	7
  8979  01BA  3F40               	moviw [0]fsr1
  8980  01BB  0020               	movlb	0	; select bank0
  8981  01BC  00D1               	movwf	lowByte@ww
  8982  01BD  3F41               	moviw [1]fsr1
  8983  01BE  2BA6               	goto	L11
  8984  01BF                     l5883:	
  8985                           ;ModbusMaster.c: 592: case 0x0F:
  8986                           
  8987                           ;ModbusMaster.c: 590: break;
  8988                           
  8989                           
  8990                           ;ModbusMaster.c: 593: u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteQty);
  8991  01BF  086F               	movf	(__u16WriteQty+1)^(0+128),w
  8992  01C0  0020               	movlb	0	; select bank0
  8993  01C1  00D2               	movwf	highByte@ww+1
  8994  01C2  0021               	movlb	1	; select bank1
  8995  01C3  086E               	movf	__u16WriteQty^(0+128),w
  8996  01C4  0020               	movlb	0	; select bank0
  8997  01C5  00D1               	movwf	highByte@ww
  8998  01C6  318B  23DC  3180   	fcall	_highByte
  8999  01C9  0020               	movlb	0	; select bank0
  9000  01CA  00DB               	movwf	??_ModbusMasterTransaction
  9001  01CB  0021               	movlb	1	; select bank1
  9002  01CC  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9003  01CD  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9004  01CE  0086               	movwf	6
  9005  01CF  0187               	clrf	7
  9006  01D0  0020               	movlb	0	; select bank0
  9007  01D1  085B               	movf	??_ModbusMasterTransaction,w
  9008  01D2  0081               	movwf	1
  9009  01D3  3001               	movlw	1
  9010  01D4  00DB               	movwf	??_ModbusMasterTransaction
  9011  01D5  085B               	movf	??_ModbusMasterTransaction,w
  9012  01D6  0021               	movlb	1	; select bank1
  9013  01D7  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9014                           
  9015                           ;ModbusMaster.c: 594: u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty);
  9016  01D8  086F               	movf	(__u16WriteQty+1)^(0+128),w
  9017  01D9  0020               	movlb	0	; select bank0
  9018  01DA  00D2               	movwf	lowByte@ww+1
  9019  01DB  0021               	movlb	1	; select bank1
  9020  01DC  086E               	movf	__u16WriteQty^(0+128),w
  9021  01DD  0020               	movlb	0	; select bank0
  9022  01DE  00D1               	movwf	lowByte@ww
  9023  01DF  318B  23DF  3180   	fcall	_lowByte
  9024  01E2  0020               	movlb	0	; select bank0
  9025  01E3  00DB               	movwf	??_ModbusMasterTransaction
  9026  01E4  0021               	movlb	1	; select bank1
  9027  01E5  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9028  01E6  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9029  01E7  0086               	movwf	6
  9030  01E8  0187               	clrf	7
  9031  01E9  0020               	movlb	0	; select bank0
  9032  01EA  085B               	movf	??_ModbusMasterTransaction,w
  9033  01EB  0081               	movwf	1
  9034  01EC  3001               	movlw	1
  9035  01ED  00DB               	movwf	??_ModbusMasterTransaction
  9036  01EE  085B               	movf	??_ModbusMasterTransaction,w
  9037  01EF  0021               	movlb	1	; select bank1
  9038  01F0  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9039                           
  9040                           ;ModbusMaster.c: 595: u8Qty = (_u16WriteQty % 8) ? ((_u16WriteQty >> 3) + 1) : (_u16Writ
      +                          eQty >> 3);
  9041  01F1  3007               	movlw	7
  9042  01F2  056E               	andwf	__u16WriteQty^(0+128),w
  9043  01F3  0020               	movlb	0	; select bank0
  9044  01F4  00DB               	movwf	??_ModbusMasterTransaction
  9045  01F5  3000               	movlw	0
  9046  01F6  0021               	movlb	1	; select bank1
  9047  01F7  056F               	andwf	(__u16WriteQty+1)^(0+128),w
  9048  01F8  0020               	movlb	0	; select bank0
  9049  01F9  00DC               	movwf	??_ModbusMasterTransaction+1
  9050  01FA  085B               	movf	??_ModbusMasterTransaction,w
  9051  01FB  045C               	iorwf	??_ModbusMasterTransaction+1,w
  9052  01FC  1D03               	btfss	3,2
  9053  01FD  2A12               	goto	l5891
  9054  01FE  0021               	movlb	1	; select bank1
  9055  01FF  086F               	movf	(__u16WriteQty+1)^(0+128),w
  9056  0200  0020               	movlb	0	; select bank0
  9057  0201  00DC               	movwf	??_ModbusMasterTransaction+1
  9058  0202  0021               	movlb	1	; select bank1
  9059  0203  086E               	movf	__u16WriteQty^(0+128),w
  9060  0204  0020               	movlb	0	; select bank0
  9061  0205  00DB               	movwf	??_ModbusMasterTransaction
  9062  0206  36DC               	lsrf	??_ModbusMasterTransaction+1,f
  9063  0207  0CDB               	rrf	??_ModbusMasterTransaction,f
  9064  0208  36DC               	lsrf	??_ModbusMasterTransaction+1,f
  9065  0209  0CDB               	rrf	??_ModbusMasterTransaction,f
  9066  020A  36DC               	lsrf	??_ModbusMasterTransaction+1,f
  9067  020B  0CDB               	rrf	??_ModbusMasterTransaction,f
  9068  020C  085B               	movf	??_ModbusMasterTransaction,w
  9069  020D  0021               	movlb	1	; select bank1
  9070  020E  00E4               	movwf	_ModbusMasterTransaction$1564^(0+128)
  9071  020F  0020               	movlb	0	; select bank0
  9072  0210  085C               	movf	??_ModbusMasterTransaction+1,w
  9073  0211  2A27               	goto	L2
  9074  0212                     l5891:	
  9075  0212  0021               	movlb	1	; select bank1
  9076  0213  086F               	movf	(__u16WriteQty+1)^(0+128),w
  9077  0214  0020               	movlb	0	; select bank0
  9078  0215  00DC               	movwf	??_ModbusMasterTransaction+1
  9079  0216  0021               	movlb	1	; select bank1
  9080  0217  086E               	movf	__u16WriteQty^(0+128),w
  9081  0218  0020               	movlb	0	; select bank0
  9082  0219  00DB               	movwf	??_ModbusMasterTransaction
  9083  021A  36DC               	lsrf	??_ModbusMasterTransaction+1,f
  9084  021B  0CDB               	rrf	??_ModbusMasterTransaction,f
  9085  021C  36DC               	lsrf	??_ModbusMasterTransaction+1,f
  9086  021D  0CDB               	rrf	??_ModbusMasterTransaction,f
  9087  021E  36DC               	lsrf	??_ModbusMasterTransaction+1,f
  9088  021F  0CDB               	rrf	??_ModbusMasterTransaction,f
  9089  0220  085B               	movf	??_ModbusMasterTransaction,w
  9090  0221  3E01               	addlw	1
  9091  0222  0021               	movlb	1	; select bank1
  9092  0223  00E4               	movwf	_ModbusMasterTransaction$1564^(0+128)
  9093  0224  3000               	movlw	0
  9094  0225  0020               	movlb	0	; select bank0
  9095  0226  3D5C               	addwfc	??_ModbusMasterTransaction+1,w
  9096  0227                     L2:	
  9097  0227  0021               	movlb	1	; select bank1
  9098  0228  00E5               	movwf	(_ModbusMasterTransaction$1564+1)^(0+128)
  9099  0229  0864               	movf	_ModbusMasterTransaction$1564^(0+128),w
  9100  022A  0020               	movlb	0	; select bank0
  9101  022B  00DB               	movwf	??_ModbusMasterTransaction
  9102  022C  085B               	movf	??_ModbusMasterTransaction,w
  9103  022D  0021               	movlb	1	; select bank1
  9104  022E  00E6               	movwf	ModbusMasterTransaction@u8Qty^(0+128)
  9105                           
  9106                           ;ModbusMaster.c: 596: u8ModbusADU[u8ModbusADUSize++] = u8Qty;
  9107  022F  0866               	movf	ModbusMasterTransaction@u8Qty^(0+128),w
  9108  0230  0020               	movlb	0	; select bank0
  9109  0231  00DB               	movwf	??_ModbusMasterTransaction
  9110  0232  0021               	movlb	1	; select bank1
  9111  0233  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9112  0234  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9113  0235  0086               	movwf	6
  9114  0236  0187               	clrf	7
  9115  0237  0020               	movlb	0	; select bank0
  9116  0238  085B               	movf	??_ModbusMasterTransaction,w
  9117  0239  0081               	movwf	1
  9118  023A  3001               	movlw	1
  9119  023B  00DB               	movwf	??_ModbusMasterTransaction
  9120  023C  085B               	movf	??_ModbusMasterTransaction,w
  9121  023D  0021               	movlb	1	; select bank1
  9122  023E  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9123                           
  9124                           ;ModbusMaster.c: 597: for (i = 0; i < u8Qty; i++)
  9125  023F  01EC               	clrf	ModbusMasterTransaction@i^(0+128)
  9126  0240  2A87               	goto	l5915
  9127  0241                     l5901:	
  9128                           ;ModbusMaster.c: 600: {
  9129                           ;ModbusMaster.c: 601: case 0:
  9130                           
  9131                           ;ModbusMaster.c: 598: {
  9132                           ;ModbusMaster.c: 599: switch(i % 2)
  9133                           
  9134                           
  9135                           ;ModbusMaster.c: 602: u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[i >> 1
      +                          ]);
  9136  0241  0021               	movlb	1	; select bank1
  9137  0242  366C               	lsrf	ModbusMasterTransaction@i^(0+128),w
  9138  0243  0020               	movlb	0	; select bank0
  9139  0244  00DB               	movwf	??_ModbusMasterTransaction
  9140  0245  01DC               	clrf	??_ModbusMasterTransaction+1
  9141  0246  35DB               	lslf	??_ModbusMasterTransaction,f
  9142  0247  0DDC               	rlf	??_ModbusMasterTransaction+1,f
  9143  0248  3070               	movlw	112
  9144  0249  00DD               	movwf	??_ModbusMasterTransaction+2
  9145  024A  3021               	movlw	33
  9146  024B  00DE               	movwf	??_ModbusMasterTransaction+3
  9147  024C  085B               	movf	??_ModbusMasterTransaction,w
  9148  024D  075D               	addwf	??_ModbusMasterTransaction+2,w
  9149  024E  0086               	movwf	6
  9150  024F  085C               	movf	??_ModbusMasterTransaction+1,w
  9151  0250  3D5E               	addwfc	??_ModbusMasterTransaction+3,w
  9152  0251  0087               	movwf	7
  9153  0252  3F40               	moviw [0]fsr1
  9154  0253  00D1               	movwf	lowByte@ww
  9155  0254  3F41               	moviw [1]fsr1
  9156  0255  00D2               	movwf	lowByte@ww+1
  9157  0256  318B  23DF  3180   	fcall	_lowByte
  9158  0259  2A72               	goto	L9
  9159  025A                     l5905:	
  9160                           ;ModbusMaster.c: 605: case 1:
  9161                           
  9162                           ;ModbusMaster.c: 603: break;
  9163                           
  9164                           
  9165                           ;ModbusMaster.c: 606: u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[i >> 
      +                          1]);
  9166  025A  0021               	movlb	1	; select bank1
  9167  025B  366C               	lsrf	ModbusMasterTransaction@i^(0+128),w
  9168  025C  0020               	movlb	0	; select bank0
  9169  025D  00DB               	movwf	??_ModbusMasterTransaction
  9170  025E  01DC               	clrf	??_ModbusMasterTransaction+1
  9171  025F  35DB               	lslf	??_ModbusMasterTransaction,f
  9172  0260  0DDC               	rlf	??_ModbusMasterTransaction+1,f
  9173  0261  3070               	movlw	112
  9174  0262  00DD               	movwf	??_ModbusMasterTransaction+2
  9175  0263  3021               	movlw	33
  9176  0264  00DE               	movwf	??_ModbusMasterTransaction+3
  9177  0265  085B               	movf	??_ModbusMasterTransaction,w
  9178  0266  075D               	addwf	??_ModbusMasterTransaction+2,w
  9179  0267  0086               	movwf	6
  9180  0268  085C               	movf	??_ModbusMasterTransaction+1,w
  9181  0269  3D5E               	addwfc	??_ModbusMasterTransaction+3,w
  9182  026A  0087               	movwf	7
  9183  026B  3F40               	moviw [0]fsr1
  9184  026C  00D1               	movwf	highByte@ww
  9185  026D  3F41               	moviw [1]fsr1
  9186  026E  00D2               	movwf	highByte@ww+1
  9187  026F  318B  23DC  3180   	fcall	_highByte
  9188  0272                     L9:	
  9189  0272  0020               	movlb	0	; select bank0
  9190  0273  00DF               	movwf	??_ModbusMasterTransaction+4
  9191  0274  0021               	movlb	1	; select bank1
  9192  0275  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9193  0276  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9194  0277  0086               	movwf	6
  9195  0278  0187               	clrf	7
  9196  0279  0020               	movlb	0	; select bank0
  9197  027A  085F               	movf	??_ModbusMasterTransaction+4,w
  9198  027B  0081               	movwf	1
  9199  027C  3001               	movlw	1
  9200  027D  00DB               	movwf	??_ModbusMasterTransaction
  9201  027E  085B               	movf	??_ModbusMasterTransaction,w
  9202  027F  0021               	movlb	1	; select bank1
  9203  0280  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9204  0281                     l5913:	
  9205                           ;ModbusMaster.c: 608: }
  9206                           
  9207                           ;ModbusMaster.c: 607: break;
  9208                           
  9209  0281  3001               	movlw	1
  9210  0282  0020               	movlb	0	; select bank0
  9211  0283  00DB               	movwf	??_ModbusMasterTransaction
  9212  0284  085B               	movf	??_ModbusMasterTransaction,w
  9213  0285  0021               	movlb	1	; select bank1
  9214  0286  07EC               	addwf	ModbusMasterTransaction@i^(0+128),f
  9215  0287                     l5915:	
  9216  0287  0866               	movf	ModbusMasterTransaction@u8Qty^(0+128),w
  9217  0288  026C               	subwf	ModbusMasterTransaction@i^(0+128),w
  9218  0289  1803               	btfsc	3,0
  9219  028A  2BCE               	goto	l5953
  9220  028B  086C               	movf	ModbusMasterTransaction@i^(0+128),w
  9221  028C  3901               	andlw	1
  9222  028D  0020               	movlb	0	; select bank0
  9223  028E  00DB               	movwf	??_ModbusMasterTransaction
  9224  028F  01DC               	clrf	??_ModbusMasterTransaction+1
  9225                           
  9226                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9227                           ; Switch size 1, requested type "space"
  9228                           ; Number of cases is 1, Range of values is 0 to 0
  9229                           ; switch strategies available:
  9230                           ; Name         Instructions Cycles
  9231                           ; simple_byte            4     3 (average)
  9232                           ; direct_byte            8     6 (fixed)
  9233                           ; jumptable            260     6 (fixed)
  9234                           ;	Chosen strategy is simple_byte
  9235  0290  085C               	movf	??_ModbusMasterTransaction+1,w
  9236  0291  3A00               	xorlw	0	; case 0
  9237  0292  1903               	skipnz
  9238  0293  2A95               	goto	l6357
  9239  0294  2A81               	goto	l5913
  9240  0295                     l6357:	
  9241                           
  9242                           ; Switch size 1, requested type "space"
  9243                           ; Number of cases is 2, Range of values is 0 to 1
  9244                           ; switch strategies available:
  9245                           ; Name         Instructions Cycles
  9246                           ; simple_byte            7     4 (average)
  9247                           ; direct_byte           10     6 (fixed)
  9248                           ; jumptable            260     6 (fixed)
  9249                           ;	Chosen strategy is simple_byte
  9250  0295  085B               	movf	??_ModbusMasterTransaction,w
  9251  0296  3A00               	xorlw	0	; case 0
  9252  0297  1903               	skipnz
  9253  0298  2A41               	goto	l5901
  9254  0299  3A01               	xorlw	1	; case 1
  9255  029A  1903               	skipnz
  9256  029B  2A5A               	goto	l5905
  9257  029C  2A81               	goto	l5913
  9258  029D  2A81               	goto	l5913
  9259  029E                     l5917:	
  9260                           ;ModbusMaster.c: 612: case 0x10:
  9261                           
  9262                           ;ModbusMaster.c: 609: }
  9263                           ;ModbusMaster.c: 610: break;
  9264                           
  9265                           
  9266                           ;ModbusMaster.c: 613: case 0x17:
  9267                           ;ModbusMaster.c: 614: u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteQty);
  9268  029E  086F               	movf	(__u16WriteQty+1)^(0+128),w
  9269  029F  0020               	movlb	0	; select bank0
  9270  02A0  00D2               	movwf	highByte@ww+1
  9271  02A1  0021               	movlb	1	; select bank1
  9272  02A2  086E               	movf	__u16WriteQty^(0+128),w
  9273  02A3  0020               	movlb	0	; select bank0
  9274  02A4  00D1               	movwf	highByte@ww
  9275  02A5  318B  23DC  3180   	fcall	_highByte
  9276  02A8  0020               	movlb	0	; select bank0
  9277  02A9  00DB               	movwf	??_ModbusMasterTransaction
  9278  02AA  0021               	movlb	1	; select bank1
  9279  02AB  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9280  02AC  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9281  02AD  0086               	movwf	6
  9282  02AE  0187               	clrf	7
  9283  02AF  0020               	movlb	0	; select bank0
  9284  02B0  085B               	movf	??_ModbusMasterTransaction,w
  9285  02B1  0081               	movwf	1
  9286  02B2  3001               	movlw	1
  9287  02B3  00DB               	movwf	??_ModbusMasterTransaction
  9288  02B4  085B               	movf	??_ModbusMasterTransaction,w
  9289  02B5  0021               	movlb	1	; select bank1
  9290  02B6  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9291                           
  9292                           ;ModbusMaster.c: 615: u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty);
  9293  02B7  086F               	movf	(__u16WriteQty+1)^(0+128),w
  9294  02B8  0020               	movlb	0	; select bank0
  9295  02B9  00D2               	movwf	lowByte@ww+1
  9296  02BA  0021               	movlb	1	; select bank1
  9297  02BB  086E               	movf	__u16WriteQty^(0+128),w
  9298  02BC  0020               	movlb	0	; select bank0
  9299  02BD  00D1               	movwf	lowByte@ww
  9300  02BE  318B  23DF  3180   	fcall	_lowByte
  9301  02C1  0020               	movlb	0	; select bank0
  9302  02C2  00DB               	movwf	??_ModbusMasterTransaction
  9303  02C3  0021               	movlb	1	; select bank1
  9304  02C4  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9305  02C5  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9306  02C6  0086               	movwf	6
  9307  02C7  0187               	clrf	7
  9308  02C8  0020               	movlb	0	; select bank0
  9309  02C9  085B               	movf	??_ModbusMasterTransaction,w
  9310  02CA  0081               	movwf	1
  9311  02CB  3001               	movlw	1
  9312  02CC  00DB               	movwf	??_ModbusMasterTransaction
  9313  02CD  085B               	movf	??_ModbusMasterTransaction,w
  9314  02CE  0021               	movlb	1	; select bank1
  9315  02CF  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9316                           
  9317                           ;ModbusMaster.c: 616: u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty << 1);
  9318  02D0  356E               	lslf	__u16WriteQty^(0+128),w
  9319  02D1  0020               	movlb	0	; select bank0
  9320  02D2  00D1               	movwf	lowByte@ww
  9321  02D3  0021               	movlb	1	; select bank1
  9322  02D4  0D6F               	rlf	(__u16WriteQty+1)^(0+128),w
  9323  02D5  0020               	movlb	0	; select bank0
  9324  02D6  00D2               	movwf	lowByte@ww+1
  9325  02D7  318B  23DF  3180   	fcall	_lowByte
  9326  02DA  0020               	movlb	0	; select bank0
  9327  02DB  00DB               	movwf	??_ModbusMasterTransaction
  9328  02DC  0021               	movlb	1	; select bank1
  9329  02DD  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9330  02DE  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9331  02DF  0086               	movwf	6
  9332  02E0  0187               	clrf	7
  9333  02E1  0020               	movlb	0	; select bank0
  9334  02E2  085B               	movf	??_ModbusMasterTransaction,w
  9335  02E3  0081               	movwf	1
  9336  02E4  3001               	movlw	1
  9337  02E5  00DB               	movwf	??_ModbusMasterTransaction
  9338  02E6  085B               	movf	??_ModbusMasterTransaction,w
  9339  02E7  0021               	movlb	1	; select bank1
  9340  02E8  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9341                           
  9342                           ;ModbusMaster.c: 618: for (i = 0; i < lowByte(_u16WriteQty); i++)
  9343  02E9  01EC               	clrf	ModbusMasterTransaction@i^(0+128)
  9344  02EA                     l5935:	
  9345  02EA  086F               	movf	(__u16WriteQty+1)^(0+128),w
  9346  02EB  0020               	movlb	0	; select bank0
  9347  02EC  00D2               	movwf	lowByte@ww+1
  9348  02ED  0021               	movlb	1	; select bank1
  9349  02EE  086E               	movf	__u16WriteQty^(0+128),w
  9350  02EF  0020               	movlb	0	; select bank0
  9351  02F0  00D1               	movwf	lowByte@ww
  9352  02F1  318B  23DF  3180   	fcall	_lowByte
  9353  02F4  0021               	movlb	1	; select bank1
  9354  02F5  026C               	subwf	ModbusMasterTransaction@i^(0+128),w
  9355  02F6  1803               	btfsc	3,0
  9356  02F7  2BCE               	goto	l5953
  9357                           
  9358                           ;ModbusMaster.c: 619: {
  9359                           ;ModbusMaster.c: 620: u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[i]);
  9360  02F8  086C               	movf	ModbusMasterTransaction@i^(0+128),w
  9361  02F9  0020               	movlb	0	; select bank0
  9362  02FA  00DB               	movwf	??_ModbusMasterTransaction
  9363  02FB  01DC               	clrf	??_ModbusMasterTransaction+1
  9364  02FC  35DB               	lslf	??_ModbusMasterTransaction,f
  9365  02FD  0DDC               	rlf	??_ModbusMasterTransaction+1,f
  9366  02FE  3070               	movlw	112
  9367  02FF  00DD               	movwf	??_ModbusMasterTransaction+2
  9368  0300  3021               	movlw	33
  9369  0301  00DE               	movwf	??_ModbusMasterTransaction+3
  9370  0302  085B               	movf	??_ModbusMasterTransaction,w
  9371  0303  075D               	addwf	??_ModbusMasterTransaction+2,w
  9372  0304  0086               	movwf	6
  9373  0305  085C               	movf	??_ModbusMasterTransaction+1,w
  9374  0306  3D5E               	addwfc	??_ModbusMasterTransaction+3,w
  9375  0307  0087               	movwf	7
  9376  0308  3F40               	moviw [0]fsr1
  9377  0309  00D1               	movwf	highByte@ww
  9378  030A  3F41               	moviw [1]fsr1
  9379  030B  00D2               	movwf	highByte@ww+1
  9380  030C  318B  23DC  3180   	fcall	_highByte
  9381  030F  0020               	movlb	0	; select bank0
  9382  0310  00DF               	movwf	??_ModbusMasterTransaction+4
  9383  0311  0021               	movlb	1	; select bank1
  9384  0312  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9385  0313  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9386  0314  0086               	movwf	6
  9387  0315  0187               	clrf	7
  9388  0316  0020               	movlb	0	; select bank0
  9389  0317  085F               	movf	??_ModbusMasterTransaction+4,w
  9390  0318  0081               	movwf	1
  9391  0319  3001               	movlw	1
  9392  031A  00DB               	movwf	??_ModbusMasterTransaction
  9393  031B  085B               	movf	??_ModbusMasterTransaction,w
  9394  031C  0021               	movlb	1	; select bank1
  9395  031D  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9396                           
  9397                           ;ModbusMaster.c: 621: u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[i]);
  9398  031E  086C               	movf	ModbusMasterTransaction@i^(0+128),w
  9399  031F  0020               	movlb	0	; select bank0
  9400  0320  00DB               	movwf	??_ModbusMasterTransaction
  9401  0321  01DC               	clrf	??_ModbusMasterTransaction+1
  9402  0322  35DB               	lslf	??_ModbusMasterTransaction,f
  9403  0323  0DDC               	rlf	??_ModbusMasterTransaction+1,f
  9404  0324  3070               	movlw	112
  9405  0325  00DD               	movwf	??_ModbusMasterTransaction+2
  9406  0326  3021               	movlw	33
  9407  0327  00DE               	movwf	??_ModbusMasterTransaction+3
  9408  0328  085B               	movf	??_ModbusMasterTransaction,w
  9409  0329  075D               	addwf	??_ModbusMasterTransaction+2,w
  9410  032A  0086               	movwf	6
  9411  032B  085C               	movf	??_ModbusMasterTransaction+1,w
  9412  032C  3D5E               	addwfc	??_ModbusMasterTransaction+3,w
  9413  032D  0087               	movwf	7
  9414  032E  3F40               	moviw [0]fsr1
  9415  032F  00D1               	movwf	lowByte@ww
  9416  0330  3F41               	moviw [1]fsr1
  9417  0331  00D2               	movwf	lowByte@ww+1
  9418  0332  318B  23DF  3180   	fcall	_lowByte
  9419  0335  0020               	movlb	0	; select bank0
  9420  0336  00DF               	movwf	??_ModbusMasterTransaction+4
  9421  0337  0021               	movlb	1	; select bank1
  9422  0338  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9423  0339  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9424  033A  0086               	movwf	6
  9425  033B  0187               	clrf	7
  9426  033C  0020               	movlb	0	; select bank0
  9427  033D  085F               	movf	??_ModbusMasterTransaction+4,w
  9428  033E  0081               	movwf	1
  9429  033F  3001               	movlw	1
  9430  0340  00DB               	movwf	??_ModbusMasterTransaction
  9431  0341  085B               	movf	??_ModbusMasterTransaction,w
  9432  0342  0021               	movlb	1	; select bank1
  9433  0343  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9434  0344  3001               	movlw	1
  9435  0345  0020               	movlb	0	; select bank0
  9436  0346  00DB               	movwf	??_ModbusMasterTransaction
  9437  0347  085B               	movf	??_ModbusMasterTransaction,w
  9438  0348  0021               	movlb	1	; select bank1
  9439  0349  07EC               	addwf	ModbusMasterTransaction@i^(0+128),f
  9440  034A  2AEA               	goto	l5935
  9441  034B                     l5937:	
  9442                           ;ModbusMaster.c: 625: case 0x16:
  9443                           
  9444                           ;ModbusMaster.c: 622: }
  9445                           ;ModbusMaster.c: 623: break;
  9446                           
  9447                           
  9448                           ;ModbusMaster.c: 626: u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[0]);
  9449  034B  3070               	movlw	112
  9450  034C  0086               	movwf	6
  9451  034D  3021               	movlw	33
  9452  034E  0087               	movwf	7
  9453  034F  3F40               	moviw [0]fsr1
  9454  0350  0020               	movlb	0	; select bank0
  9455  0351  00D1               	movwf	highByte@ww
  9456  0352  3F41               	moviw [1]fsr1
  9457  0353  00D2               	movwf	highByte@ww+1
  9458  0354  318B  23DC  3180   	fcall	_highByte
  9459  0357  0020               	movlb	0	; select bank0
  9460  0358  00DB               	movwf	??_ModbusMasterTransaction
  9461  0359  0021               	movlb	1	; select bank1
  9462  035A  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9463  035B  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9464  035C  0086               	movwf	6
  9465  035D  0187               	clrf	7
  9466  035E  0020               	movlb	0	; select bank0
  9467  035F  085B               	movf	??_ModbusMasterTransaction,w
  9468  0360  0081               	movwf	1
  9469  0361  3001               	movlw	1
  9470  0362  00DB               	movwf	??_ModbusMasterTransaction
  9471  0363  085B               	movf	??_ModbusMasterTransaction,w
  9472  0364  0021               	movlb	1	; select bank1
  9473  0365  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9474                           
  9475                           ;ModbusMaster.c: 627: u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[0]);
  9476  0366  3070               	movlw	112
  9477  0367  0086               	movwf	6
  9478  0368  3021               	movlw	33
  9479  0369  0087               	movwf	7
  9480  036A  3F40               	moviw [0]fsr1
  9481  036B  0020               	movlb	0	; select bank0
  9482  036C  00D1               	movwf	lowByte@ww
  9483  036D  3F41               	moviw [1]fsr1
  9484  036E  00D2               	movwf	lowByte@ww+1
  9485  036F  318B  23DF  3180   	fcall	_lowByte
  9486  0372  0020               	movlb	0	; select bank0
  9487  0373  00DB               	movwf	??_ModbusMasterTransaction
  9488  0374  0021               	movlb	1	; select bank1
  9489  0375  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9490  0376  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9491  0377  0086               	movwf	6
  9492  0378  0187               	clrf	7
  9493  0379  0020               	movlb	0	; select bank0
  9494  037A  085B               	movf	??_ModbusMasterTransaction,w
  9495  037B  0081               	movwf	1
  9496  037C  3001               	movlw	1
  9497  037D  00DB               	movwf	??_ModbusMasterTransaction
  9498  037E  085B               	movf	??_ModbusMasterTransaction,w
  9499  037F  0021               	movlb	1	; select bank1
  9500  0380  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9501                           
  9502                           ;ModbusMaster.c: 628: u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[1]);
  9503  0381  3070               	movlw	112
  9504  0382  0086               	movwf	6
  9505  0383  3021               	movlw	33
  9506  0384  0087               	movwf	7
  9507  0385  3142               	addfsr 1,2
  9508  0386  3F40               	moviw [0]fsr1
  9509  0387  0020               	movlb	0	; select bank0
  9510  0388  00D1               	movwf	highByte@ww
  9511  0389  3F41               	moviw [1]fsr1
  9512  038A  00D2               	movwf	highByte@ww+1
  9513  038B  318B  23DC  3180   	fcall	_highByte
  9514  038E  0020               	movlb	0	; select bank0
  9515  038F  00DB               	movwf	??_ModbusMasterTransaction
  9516  0390  0021               	movlb	1	; select bank1
  9517  0391  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9518  0392  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9519  0393  0086               	movwf	6
  9520  0394  0187               	clrf	7
  9521  0395  0020               	movlb	0	; select bank0
  9522  0396  085B               	movf	??_ModbusMasterTransaction,w
  9523  0397  0081               	movwf	1
  9524  0398  3001               	movlw	1
  9525  0399  00DB               	movwf	??_ModbusMasterTransaction
  9526  039A  085B               	movf	??_ModbusMasterTransaction,w
  9527  039B  0021               	movlb	1	; select bank1
  9528  039C  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9529                           
  9530                           ;ModbusMaster.c: 629: u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[1]);
  9531  039D  3070               	movlw	112
  9532  039E  0086               	movwf	6
  9533  039F  3021               	movlw	33
  9534  03A0  0087               	movwf	7
  9535  03A1  3142               	addfsr 1,2
  9536  03A2  3F40               	moviw [0]fsr1
  9537  03A3  0020               	movlb	0	; select bank0
  9538  03A4  00D1               	movwf	lowByte@ww
  9539  03A5  3F41               	moviw [1]fsr1
  9540  03A6                     L11:	
  9541  03A6  00D2               	movwf	lowByte@ww+1
  9542  03A7                     L8:	
  9543  03A7  318B  23DF  3180   	fcall	_lowByte
  9544  03AA  0020               	movlb	0	; select bank0
  9545  03AB  00DB               	movwf	??_ModbusMasterTransaction
  9546  03AC  0021               	movlb	1	; select bank1
  9547  03AD  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9548  03AE  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9549  03AF  0086               	movwf	6
  9550  03B0  0187               	clrf	7
  9551  03B1  0020               	movlb	0	; select bank0
  9552  03B2  085B               	movf	??_ModbusMasterTransaction,w
  9553  03B3  0081               	movwf	1
  9554  03B4  3001               	movlw	1
  9555  03B5  00DB               	movwf	??_ModbusMasterTransaction
  9556  03B6  085B               	movf	??_ModbusMasterTransaction,w
  9557  03B7  0021               	movlb	1	; select bank1
  9558  03B8  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9559                           
  9560                           ;ModbusMaster.c: 631: }
  9561                           
  9562                           ;ModbusMaster.c: 630: break;
  9563  03B9  2BCE               	goto	l5953
  9564  03BA                     l5951:	
  9565  03BA  0868               	movf	ModbusMasterTransaction@u8MBFunction^(0+128),w
  9566                           
  9567                           ; Switch size 1, requested type "space"
  9568                           ; Number of cases is 6, Range of values is 5 to 23
  9569                           ; switch strategies available:
  9570                           ; Name         Instructions Cycles
  9571                           ; simple_byte           19    10 (average)
  9572                           ; direct_byte           47     9 (fixed)
  9573                           ; jumptable            263     9 (fixed)
  9574                           ;	Chosen strategy is simple_byte
  9575  03BB  3A05               	xorlw	5	; case 5
  9576  03BC  1903               	skipnz
  9577  03BD  297A               	goto	l5871
  9578  03BE  3A03               	xorlw	3	; case 6
  9579  03BF  1903               	skipnz
  9580  03C0  299B               	goto	l5877
  9581  03C1  3A09               	xorlw	9	; case 15
  9582  03C2  1903               	skipnz
  9583  03C3  29BF               	goto	l5883
  9584  03C4  3A1F               	xorlw	31	; case 16
  9585  03C5  1903               	skipnz
  9586  03C6  2A9E               	goto	l5917
  9587  03C7  3A06               	xorlw	6	; case 22
  9588  03C8  1903               	skipnz
  9589  03C9  2B4B               	goto	l5937
  9590  03CA  3A01               	xorlw	1	; case 23
  9591  03CB  1903               	skipnz
  9592  03CC  2A9E               	goto	l5917
  9593  03CD  2BCE               	goto	l5953
  9594  03CE                     l5953:	
  9595                           
  9596                           ;ModbusMaster.c: 643: u8ModbusADUSize=0;
  9597  03CE  01ED               	clrf	ModbusMasterTransaction@u8ModbusADUSize^(0+128)
  9598                           
  9599                           ;ModbusMaster.c: 644: u8ModbusADU[u8ModbusADUSize++]=0x05;
  9600  03CF  3005               	movlw	5
  9601  03D0  0020               	movlb	0	; select bank0
  9602  03D1  00DB               	movwf	??_ModbusMasterTransaction
  9603  03D2  0021               	movlb	1	; select bank1
  9604  03D3  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9605  03D4  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9606  03D5  0086               	movwf	6
  9607  03D6  0187               	clrf	7
  9608  03D7  0020               	movlb	0	; select bank0
  9609  03D8  085B               	movf	??_ModbusMasterTransaction,w
  9610  03D9  0081               	movwf	1
  9611  03DA  3001               	movlw	1
  9612  03DB  00DB               	movwf	??_ModbusMasterTransaction
  9613  03DC  085B               	movf	??_ModbusMasterTransaction,w
  9614  03DD  0021               	movlb	1	; select bank1
  9615  03DE  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9616                           
  9617                           ;ModbusMaster.c: 645: u8ModbusADU[u8ModbusADUSize++]=0x08;
  9618  03DF  3008               	movlw	8
  9619  03E0  0020               	movlb	0	; select bank0
  9620  03E1  00DB               	movwf	??_ModbusMasterTransaction
  9621  03E2  0021               	movlb	1	; select bank1
  9622  03E3  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9623  03E4  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9624  03E5  0086               	movwf	6
  9625  03E6  0187               	clrf	7
  9626  03E7  0020               	movlb	0	; select bank0
  9627  03E8  085B               	movf	??_ModbusMasterTransaction,w
  9628  03E9  0081               	movwf	1
  9629  03EA  3001               	movlw	1
  9630  03EB  00DB               	movwf	??_ModbusMasterTransaction
  9631  03EC  085B               	movf	??_ModbusMasterTransaction,w
  9632  03ED  0021               	movlb	1	; select bank1
  9633  03EE  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9634                           
  9635                           ;ModbusMaster.c: 646: u8ModbusADU[u8ModbusADUSize++]=0x00;
  9636  03EF  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9637  03F0  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9638  03F1  0086               	movwf	6
  9639  03F2  0187               	clrf	7
  9640  03F3  0181               	clrf	1
  9641  03F4  3001               	movlw	1
  9642  03F5  0020               	movlb	0	; select bank0
  9643  03F6  00DB               	movwf	??_ModbusMasterTransaction
  9644  03F7  085B               	movf	??_ModbusMasterTransaction,w
  9645  03F8  0021               	movlb	1	; select bank1
  9646  03F9  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9647                           
  9648                           ;ModbusMaster.c: 647: u8ModbusADU[u8ModbusADUSize++]=0x00;
  9649  03FA  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9650  03FB  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9651  03FC  0086               	movwf	6
  9652  03FD  0187               	clrf	7
  9653  03FE  0181               	clrf	1
  9654  03FF  3001               	movlw	1
  9655  0400  0020               	movlb	0	; select bank0
  9656  0401  00DB               	movwf	??_ModbusMasterTransaction
  9657  0402  085B               	movf	??_ModbusMasterTransaction,w
  9658  0403  0021               	movlb	1	; select bank1
  9659  0404  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9660                           
  9661                           ;ModbusMaster.c: 648: u8ModbusADU[u8ModbusADUSize++]=0xA5;
  9662  0405  30A5               	movlw	165
  9663  0406  0020               	movlb	0	; select bank0
  9664  0407  00DB               	movwf	??_ModbusMasterTransaction
  9665  0408  0021               	movlb	1	; select bank1
  9666  0409  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9667  040A  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9668  040B  0086               	movwf	6
  9669  040C  0187               	clrf	7
  9670  040D  0020               	movlb	0	; select bank0
  9671  040E  085B               	movf	??_ModbusMasterTransaction,w
  9672  040F  0081               	movwf	1
  9673  0410  3001               	movlw	1
  9674  0411  00DB               	movwf	??_ModbusMasterTransaction
  9675  0412  085B               	movf	??_ModbusMasterTransaction,w
  9676  0413  0021               	movlb	1	; select bank1
  9677  0414  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9678                           
  9679                           ;ModbusMaster.c: 649: u8ModbusADU[u8ModbusADUSize++]=0x37;
  9680  0415  3037               	movlw	55
  9681  0416  0020               	movlb	0	; select bank0
  9682  0417  00DB               	movwf	??_ModbusMasterTransaction
  9683  0418  0021               	movlb	1	; select bank1
  9684  0419  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9685  041A  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9686  041B  0086               	movwf	6
  9687  041C  0187               	clrf	7
  9688  041D  0020               	movlb	0	; select bank0
  9689  041E  085B               	movf	??_ModbusMasterTransaction,w
  9690  041F  0081               	movwf	1
  9691  0420  3001               	movlw	1
  9692  0421  00DB               	movwf	??_ModbusMasterTransaction
  9693  0422  085B               	movf	??_ModbusMasterTransaction,w
  9694  0423  0021               	movlb	1	; select bank1
  9695  0424  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9696                           
  9697                           ;ModbusMaster.c: 652: u16CRC = 0xFFFF;
  9698  0425  30FF               	movlw	255
  9699  0426  00EA               	movwf	ModbusMasterTransaction@u16CRC^(0+128)
  9700  0427  30FF               	movlw	255
  9701  0428  00EB               	movwf	(ModbusMasterTransaction@u16CRC^(0+128)+1)
  9702                           
  9703                           ;ModbusMaster.c: 653: for (i = 0; i < u8ModbusADUSize; i++)
  9704  0429  01EC               	clrf	ModbusMasterTransaction@i^(0+128)
  9705  042A                     l5987:	
  9706  042A  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9707  042B  026C               	subwf	ModbusMasterTransaction@i^(0+128),w
  9708  042C  1803               	btfsc	3,0
  9709  042D  2C51               	goto	l5989
  9710                           
  9711                           ;ModbusMaster.c: 654: {
  9712                           ;ModbusMaster.c: 655: u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
  9713  042E  086B               	movf	(ModbusMasterTransaction@u16CRC+1)^(0+128),w
  9714  042F  0020               	movlb	0	; select bank0
  9715  0430  00D2               	movwf	crc16_update@crc+1
  9716  0431  0021               	movlb	1	; select bank1
  9717  0432  086A               	movf	ModbusMasterTransaction@u16CRC^(0+128),w
  9718  0433  0020               	movlb	0	; select bank0
  9719  0434  00D1               	movwf	crc16_update@crc
  9720  0435  0021               	movlb	1	; select bank1
  9721  0436  086C               	movf	ModbusMasterTransaction@i^(0+128),w
  9722  0437  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9723  0438  0086               	movwf	6
  9724  0439  0187               	clrf	7
  9725  043A  0801               	movf	1,w
  9726  043B  0020               	movlb	0	; select bank0
  9727  043C  00DB               	movwf	??_ModbusMasterTransaction
  9728  043D  085B               	movf	??_ModbusMasterTransaction,w
  9729  043E  00D3               	movwf	crc16_update@a
  9730  043F  318F  2718  3180   	fcall	_crc16_update
  9731  0442  0020               	movlb	0	; select bank0
  9732  0443  0852               	movf	?_crc16_update+1,w
  9733  0444  0021               	movlb	1	; select bank1
  9734  0445  00EB               	movwf	(ModbusMasterTransaction@u16CRC+1)^(0+128)
  9735  0446  0020               	movlb	0	; select bank0
  9736  0447  0851               	movf	?_crc16_update,w
  9737  0448  0021               	movlb	1	; select bank1
  9738  0449  00EA               	movwf	ModbusMasterTransaction@u16CRC^(0+128)
  9739  044A  3001               	movlw	1
  9740  044B  0020               	movlb	0	; select bank0
  9741  044C  00DB               	movwf	??_ModbusMasterTransaction
  9742  044D  085B               	movf	??_ModbusMasterTransaction,w
  9743  044E  0021               	movlb	1	; select bank1
  9744  044F  07EC               	addwf	ModbusMasterTransaction@i^(0+128),f
  9745  0450  2C2A               	goto	l5987
  9746  0451                     l5989:	
  9747                           
  9748                           ;ModbusMaster.c: 656: }
  9749                           ;ModbusMaster.c: 657: u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
  9750  0451  086B               	movf	(ModbusMasterTransaction@u16CRC+1)^(0+128),w
  9751  0452  0020               	movlb	0	; select bank0
  9752  0453  00D2               	movwf	lowByte@ww+1
  9753  0454  0021               	movlb	1	; select bank1
  9754  0455  086A               	movf	ModbusMasterTransaction@u16CRC^(0+128),w
  9755  0456  0020               	movlb	0	; select bank0
  9756  0457  00D1               	movwf	lowByte@ww
  9757  0458  318B  23DF  3180   	fcall	_lowByte
  9758  045B  0020               	movlb	0	; select bank0
  9759  045C  00DB               	movwf	??_ModbusMasterTransaction
  9760  045D  0021               	movlb	1	; select bank1
  9761  045E  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9762  045F  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9763  0460  0086               	movwf	6
  9764  0461  0187               	clrf	7
  9765  0462  0020               	movlb	0	; select bank0
  9766  0463  085B               	movf	??_ModbusMasterTransaction,w
  9767  0464  0081               	movwf	1
  9768  0465  3001               	movlw	1
  9769  0466  00DB               	movwf	??_ModbusMasterTransaction
  9770  0467  085B               	movf	??_ModbusMasterTransaction,w
  9771  0468  0021               	movlb	1	; select bank1
  9772  0469  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9773                           
  9774                           ;ModbusMaster.c: 658: u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
  9775  046A  086B               	movf	(ModbusMasterTransaction@u16CRC+1)^(0+128),w
  9776  046B  0020               	movlb	0	; select bank0
  9777  046C  00D2               	movwf	highByte@ww+1
  9778  046D  0021               	movlb	1	; select bank1
  9779  046E  086A               	movf	ModbusMasterTransaction@u16CRC^(0+128),w
  9780  046F  0020               	movlb	0	; select bank0
  9781  0470  00D1               	movwf	highByte@ww
  9782  0471  318B  23DC  3180   	fcall	_highByte
  9783  0474  0020               	movlb	0	; select bank0
  9784  0475  00DB               	movwf	??_ModbusMasterTransaction
  9785  0476  0021               	movlb	1	; select bank1
  9786  0477  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9787  0478  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9788  0479  0086               	movwf	6
  9789  047A  0187               	clrf	7
  9790  047B  0020               	movlb	0	; select bank0
  9791  047C  085B               	movf	??_ModbusMasterTransaction,w
  9792  047D  0081               	movwf	1
  9793  047E  3001               	movlw	1
  9794  047F  00DB               	movwf	??_ModbusMasterTransaction
  9795  0480  085B               	movf	??_ModbusMasterTransaction,w
  9796  0481  0021               	movlb	1	; select bank1
  9797  0482  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9798                           
  9799                           ;ModbusMaster.c: 659: u8ModbusADU[u8ModbusADUSize] = 0;
  9800  0483  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9801  0484  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9802  0485  0086               	movwf	6
  9803  0486  0187               	clrf	7
  9804  0487  0181               	clrf	1
  9805                           
  9806                           ;ModbusMaster.c: 663: if(PIR1bits.RCIF){PIR1bits.RCIF=0;}
  9807  0488  0020               	movlb	0	; select bank0
  9808  0489  1A91               	btfsc	17,5	;volatile
  9809  048A  1291               	bcf	17,5	;volatile
  9810                           
  9811                           ;ModbusMaster.c: 666: if (_preTransmission)
  9812  048B  0832               	movf	__preTransmission,w
  9813  048C  0433               	iorwf	__preTransmission+1,w
  9814  048D  1903               	btfsc	3,2
  9815  048E  2C94               	goto	l6005
  9816                           
  9817                           ;ModbusMaster.c: 667: {
  9818                           ;ModbusMaster.c: 668: _preTransmission();
  9819  048F  0833               	movf	__preTransmission+1,w
  9820  0490  008A               	movwf	10
  9821  0491  0832               	movf	__preTransmission,w
  9822  0492  000A               	callw
  9823  0493  3180               	pagesel	$
  9824  0494                     l6005:	
  9825                           
  9826                           ;ModbusMaster.c: 669: }
  9827                           ;ModbusMaster.c: 670: for (i = 0; i < u8ModbusADUSize; i++)
  9828  0494  0021               	movlb	1	; select bank1
  9829  0495  01EC               	clrf	ModbusMasterTransaction@i^(0+128)
  9830  0496                     l6013:	
  9831  0496  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9832  0497  026C               	subwf	ModbusMasterTransaction@i^(0+128),w
  9833  0498  1803               	btfsc	3,0
  9834  0499  2CAF               	goto	l6015
  9835                           
  9836                           ;ModbusMaster.c: 671: {
  9837                           ;ModbusMaster.c: 672: EUSART_Write(u8ModbusADU[i]);
  9838  049A  086C               	movf	ModbusMasterTransaction@i^(0+128),w
  9839  049B  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9840  049C  0086               	movwf	6
  9841  049D  0187               	clrf	7
  9842  049E  0801               	movf	1,w
  9843  049F  318C  2423  3180   	fcall	_EUSART_Write
  9844                           
  9845                           ;ModbusMaster.c: 673: u8ModbusADU[i]=0;
  9846  04A2  0021               	movlb	1	; select bank1
  9847  04A3  086C               	movf	ModbusMasterTransaction@i^(0+128),w
  9848  04A4  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9849  04A5  0086               	movwf	6
  9850  04A6  0187               	clrf	7
  9851  04A7  0181               	clrf	1
  9852  04A8  3001               	movlw	1
  9853  04A9  0020               	movlb	0	; select bank0
  9854  04AA  00DB               	movwf	??_ModbusMasterTransaction
  9855  04AB  085B               	movf	??_ModbusMasterTransaction,w
  9856  04AC  0021               	movlb	1	; select bank1
  9857  04AD  07EC               	addwf	ModbusMasterTransaction@i^(0+128),f
  9858  04AE  2C96               	goto	l6013
  9859  04AF                     l6015:	
  9860                           
  9861                           ;ModbusMaster.c: 675: }
  9862                           ;ModbusMaster.c: 677: u8ModbusADUSize = 0;
  9863  04AF  01ED               	clrf	ModbusMasterTransaction@u8ModbusADUSize^(0+128)
  9864  04B0                     l977:	
  9865                           ;ModbusMaster.c: 680: {
  9866                           
  9867                           ;ModbusMaster.c: 679: while(0 == PIR1bits.TXIF)
  9868                           
  9869  04B0  0020               	movlb	0	; select bank0
  9870  04B1  1E11               	btfss	17,4	;volatile
  9871  04B2  2CB0               	goto	l977
  9872                           
  9873                           ;ModbusMaster.c: 681: }
  9874                           ;ModbusMaster.c: 683: if (_postTransmission)
  9875  04B3  0830               	movf	__postTransmission,w
  9876  04B4  0431               	iorwf	__postTransmission+1,w
  9877  04B5  1903               	btfsc	3,2
  9878  04B6  2CBC               	goto	l980
  9879                           
  9880                           ;ModbusMaster.c: 684: {
  9881                           ;ModbusMaster.c: 685: _postTransmission();
  9882  04B7  0831               	movf	__postTransmission+1,w
  9883  04B8  008A               	movwf	10
  9884  04B9  0830               	movf	__postTransmission,w
  9885  04BA  000A               	callw
  9886  04BB  3180               	pagesel	$
  9887  04BC                     l980:	
  9888                           
  9889                           ;ModbusMaster.c: 686: }
  9890                           ;ModbusMaster.c: 689: millisReset();
  9891  04BC  318C  2498  3180   	fcall	_millisReset
  9892                           
  9893                           ;ModbusMaster.c: 691: u32StartTime = millis();
  9894  04BF  318C  248E  3180   	fcall	_millis
  9895  04C2  0020               	movlb	0	; select bank0
  9896  04C3  0854               	movf	?_millis+3,w
  9897  04C4  0021               	movlb	1	; select bank1
  9898  04C5  00E3               	movwf	(ModbusMasterTransaction@u32StartTime+3)^(0+128)
  9899  04C6  0020               	movlb	0	; select bank0
  9900  04C7  0853               	movf	?_millis+2,w
  9901  04C8  0021               	movlb	1	; select bank1
  9902  04C9  00E2               	movwf	(ModbusMasterTransaction@u32StartTime+2)^(0+128)
  9903  04CA  0020               	movlb	0	; select bank0
  9904  04CB  0852               	movf	?_millis+1,w
  9905  04CC  0021               	movlb	1	; select bank1
  9906  04CD  00E1               	movwf	(ModbusMasterTransaction@u32StartTime+1)^(0+128)
  9907  04CE  0020               	movlb	0	; select bank0
  9908  04CF  0851               	movf	?_millis,w
  9909  04D0  0021               	movlb	1	; select bank1
  9910  04D1  00E0               	movwf	ModbusMasterTransaction@u32StartTime^(0+128)
  9911                           
  9912                           ;ModbusMaster.c: 692: while (u8BytesLeft && !u8MBStatus)
  9913  04D2  2D6E               	goto	l6057
  9914  04D3                     l6023:	
  9915                           
  9916                           ;ModbusMaster.c: 693: {
  9917                           ;ModbusMaster.c: 700: u8ModbusADU[u8ModbusADUSize++] = EUSART_Read();
  9918  04D3  318C  2484  3180   	fcall	_EUSART_Read
  9919  04D6  0020               	movlb	0	; select bank0
  9920  04D7  00DB               	movwf	??_ModbusMasterTransaction
  9921  04D8  0021               	movlb	1	; select bank1
  9922  04D9  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9923  04DA  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
  9924  04DB  0086               	movwf	6
  9925  04DC  0187               	clrf	7
  9926  04DD  0020               	movlb	0	; select bank0
  9927  04DE  085B               	movf	??_ModbusMasterTransaction,w
  9928  04DF  0081               	movwf	1
  9929  04E0  3001               	movlw	1
  9930  04E1  00DB               	movwf	??_ModbusMasterTransaction
  9931  04E2  085B               	movf	??_ModbusMasterTransaction,w
  9932  04E3  0021               	movlb	1	; select bank1
  9933  04E4  07ED               	addwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),f
  9934                           
  9935                           ;ModbusMaster.c: 701: u8BytesLeft--;
  9936  04E5  3001               	movlw	1
  9937  04E6  02E7               	subwf	ModbusMasterTransaction@u8BytesLeft^(0+128),f
  9938                           
  9939                           ;ModbusMaster.c: 721: if (u8ModbusADUSize == 2)
  9940  04E7  3002               	movlw	2
  9941  04E8  066D               	xorwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
  9942  04E9  1D03               	btfss	3,2
  9943  04EA  2D3B               	goto	l6053
  9944                           
  9945                           ;ModbusMaster.c: 722: {
  9946                           ;ModbusMaster.c: 724: if (u8ModbusADU[0] != _u8MBSlave)
  9947  04EB  0820               	movf	ModbusMasterTransaction@u8ModbusADU^(0+128),w
  9948  04EC  0020               	movlb	0	; select bank0
  9949  04ED  064A               	xorwf	__u8MBSlave,w
  9950  04EE  1903               	skipnz
  9951  04EF  2CF2               	goto	l6035
  9952                           
  9953                           ;ModbusMaster.c: 725: {
  9954                           ;ModbusMaster.c: 726: u8MBStatus = 0xE0;
  9955  04F0  30E0               	movlw	224
  9956  04F1  2D0A               	goto	L4
  9957  04F2                     l6035:	
  9958                           ;ModbusMaster.c: 727: break;
  9959                           
  9960                           
  9961                           ;ModbusMaster.c: 728: }
  9962                           ;ModbusMaster.c: 731: if ((u8ModbusADU[1] & 0x7F) != u8MBFunction)
  9963  04F2  307F               	movlw	127
  9964  04F3  0021               	movlb	1	; select bank1
  9965  04F4  0521               	andwf	(ModbusMasterTransaction@u8ModbusADU^(0+128)+1),w
  9966  04F5  0020               	movlb	0	; select bank0
  9967  04F6  00DB               	movwf	??_ModbusMasterTransaction
  9968  04F7  085B               	movf	??_ModbusMasterTransaction,w
  9969  04F8  0021               	movlb	1	; select bank1
  9970  04F9  0668               	xorwf	ModbusMasterTransaction@u8MBFunction^(0+128),w
  9971  04FA  1903               	skipnz
  9972  04FB  2CFE               	goto	l6039
  9973                           
  9974                           ;ModbusMaster.c: 732: {
  9975                           ;ModbusMaster.c: 733: u8MBStatus = 0xE1;
  9976  04FC  30E1               	movlw	225
  9977  04FD  2D09               	goto	L10
  9978  04FE                     l6039:	
  9979                           ;ModbusMaster.c: 734: break;
  9980                           
  9981                           
  9982                           ;ModbusMaster.c: 735: }
  9983                           ;ModbusMaster.c: 738: if ((((u8ModbusADU[1]) >> (7)) & 0x01))
  9984  04FE  0821               	movf	(ModbusMasterTransaction@u8ModbusADU^(0+128)+1),w
  9985  04FF  0020               	movlb	0	; select bank0
  9986  0500  00DB               	movwf	??_ModbusMasterTransaction
  9987  0501  3007               	movlw	7
  9988  0502                     u4525:	
  9989  0502  36DB               	lsrf	??_ModbusMasterTransaction,f
  9990  0503  0B89               	decfsz	9,f
  9991  0504  2D02               	goto	u4525
  9992  0505  1C5B               	btfss	??_ModbusMasterTransaction,0
  9993  0506  2D1A               	goto	l6051
  9994                           
  9995                           ;ModbusMaster.c: 739: {
  9996                           ;ModbusMaster.c: 740: u8MBStatus = u8ModbusADU[2];
  9997  0507  0021               	movlb	1	; select bank1
  9998  0508  0822               	movf	(ModbusMasterTransaction@u8ModbusADU^(0+128)+2),w
  9999  0509                     L10:	
 10000  0509  0020               	movlb	0	; select bank0
 10001  050A                     L4:	
 10002  050A  00DB               	movwf	??_ModbusMasterTransaction
 10003  050B  085B               	movf	??_ModbusMasterTransaction,w
 10004  050C  0021               	movlb	1	; select bank1
 10005  050D  00E9               	movwf	ModbusMasterTransaction@u8MBStatus^(0+128)
 10006                           
 10007                           ;ModbusMaster.c: 741: break;
 10008  050E  2D75               	goto	l6061
 10009  050F                     l6043:	
 10010                           ;ModbusMaster.c: 746: {
 10011                           ;ModbusMaster.c: 747: case 0x01:
 10012                           
 10013                           ;ModbusMaster.c: 742: }
 10014                           ;ModbusMaster.c: 745: switch(u8ModbusADU[1])
 10015                           
 10016                           
 10017                           ;ModbusMaster.c: 748: case 0x02:
 10018                           ;ModbusMaster.c: 749: case 0x04:
 10019                           ;ModbusMaster.c: 750: case 0x03:
 10020                           ;ModbusMaster.c: 751: case 0x17:
 10021                           ;ModbusMaster.c: 752: u8BytesLeft = u8ModbusADU[2];
 10022  050F  0822               	movf	(ModbusMasterTransaction@u8ModbusADU^(0+128)+2),w
 10023  0510  2D14               	goto	L6
 10024  0511                     l6045:	
 10025                           ;ModbusMaster.c: 755: case 0x05:
 10026                           
 10027                           ;ModbusMaster.c: 753: break;
 10028                           
 10029                           
 10030                           ;ModbusMaster.c: 756: case 0x0F:
 10031                           ;ModbusMaster.c: 757: case 0x06:
 10032                           ;ModbusMaster.c: 758: case 0x10:
 10033                           ;ModbusMaster.c: 759: u8BytesLeft = 3;
 10034  0511  3003               	movlw	3
 10035  0512  2D14               	goto	L6
 10036  0513                     l6047:	
 10037                           ;ModbusMaster.c: 762: case 0x16:
 10038                           
 10039                           ;ModbusMaster.c: 760: break;
 10040                           
 10041                           
 10042                           ;ModbusMaster.c: 763: u8BytesLeft = 5;
 10043  0513  3005               	movlw	5
 10044  0514                     L6:	
 10045  0514  0020               	movlb	0	; select bank0
 10046  0515  00DB               	movwf	??_ModbusMasterTransaction
 10047  0516  085B               	movf	??_ModbusMasterTransaction,w
 10048  0517  0021               	movlb	1	; select bank1
 10049  0518  00E7               	movwf	ModbusMasterTransaction@u8BytesLeft^(0+128)
 10050                           
 10051                           ;ModbusMaster.c: 765: }
 10052                           
 10053                           ;ModbusMaster.c: 764: break;
 10054  0519  2D3B               	goto	l6053
 10055  051A                     l6051:	
 10056  051A  0021               	movlb	1	; select bank1
 10057  051B  0821               	movf	(ModbusMasterTransaction@u8ModbusADU^(0+128)+1),w
 10058                           
 10059                           ; Switch size 1, requested type "space"
 10060                           ; Number of cases is 10, Range of values is 1 to 23
 10061                           ; switch strategies available:
 10062                           ; Name         Instructions Cycles
 10063                           ; simple_byte           31    16 (average)
 10064                           ; direct_byte           55     9 (fixed)
 10065                           ; jumptable            263     9 (fixed)
 10066                           ;	Chosen strategy is simple_byte
 10067  051C  3A01               	xorlw	1	; case 1
 10068  051D  1903               	skipnz
 10069  051E  2D0F               	goto	l6043
 10070  051F  3A03               	xorlw	3	; case 2
 10071  0520  1903               	skipnz
 10072  0521  2D0F               	goto	l6043
 10073  0522  3A01               	xorlw	1	; case 3
 10074  0523  1903               	skipnz
 10075  0524  2D0F               	goto	l6043
 10076  0525  3A07               	xorlw	7	; case 4
 10077  0526  1903               	skipnz
 10078  0527  2D0F               	goto	l6043
 10079  0528  3A01               	xorlw	1	; case 5
 10080  0529  1903               	skipnz
 10081  052A  2D11               	goto	l6045
 10082  052B  3A03               	xorlw	3	; case 6
 10083  052C  1903               	skipnz
 10084  052D  2D11               	goto	l6045
 10085  052E  3A09               	xorlw	9	; case 15
 10086  052F  1903               	skipnz
 10087  0530  2D11               	goto	l6045
 10088  0531  3A1F               	xorlw	31	; case 16
 10089  0532  1903               	skipnz
 10090  0533  2D11               	goto	l6045
 10091  0534  3A06               	xorlw	6	; case 22
 10092  0535  1903               	skipnz
 10093  0536  2D13               	goto	l6047
 10094  0537  3A01               	xorlw	1	; case 23
 10095  0538  1903               	skipnz
 10096  0539  2D0F               	goto	l6043
 10097  053A  2D3B               	goto	l6053
 10098  053B                     l6053:	
 10099                           
 10100                           ;ModbusMaster.c: 766: }
 10101                           ;ModbusMaster.c: 767: if ((millis() - u32StartTime) > 2000)
 10102  053B  0960               	comf	ModbusMasterTransaction@u32StartTime^(0+128),w
 10103  053C  0020               	movlb	0	; select bank0
 10104  053D  00DB               	movwf	??_ModbusMasterTransaction
 10105  053E  0021               	movlb	1	; select bank1
 10106  053F  0961               	comf	(ModbusMasterTransaction@u32StartTime+1)^(0+128),w
 10107  0540  0020               	movlb	0	; select bank0
 10108  0541  00DC               	movwf	??_ModbusMasterTransaction+1
 10109  0542  0021               	movlb	1	; select bank1
 10110  0543  0962               	comf	(ModbusMasterTransaction@u32StartTime+2)^(0+128),w
 10111  0544  0020               	movlb	0	; select bank0
 10112  0545  00DD               	movwf	??_ModbusMasterTransaction+2
 10113  0546  0021               	movlb	1	; select bank1
 10114  0547  0963               	comf	(ModbusMasterTransaction@u32StartTime+3)^(0+128),w
 10115  0548  0020               	movlb	0	; select bank0
 10116  0549  00DE               	movwf	??_ModbusMasterTransaction+3
 10117  054A  0ADB               	incf	??_ModbusMasterTransaction,f
 10118  054B  1903               	skipnz
 10119  054C  0ADC               	incf	??_ModbusMasterTransaction+1,f
 10120  054D  1903               	skipnz
 10121  054E  0ADD               	incf	??_ModbusMasterTransaction+2,f
 10122  054F  1903               	skipnz
 10123  0550  0ADE               	incf	??_ModbusMasterTransaction+3,f
 10124  0551  318C  248E  3180   	fcall	_millis
 10125  0554  0020               	movlb	0	; select bank0
 10126  0555  0851               	movf	?_millis,w
 10127  0556  07DB               	addwf	??_ModbusMasterTransaction,f
 10128  0557  0852               	movf	?_millis+1,w
 10129  0558  3DDC               	addwfc	??_ModbusMasterTransaction+1,f
 10130  0559  0853               	movf	?_millis+2,w
 10131  055A  3DDD               	addwfc	??_ModbusMasterTransaction+2,f
 10132  055B  0854               	movf	?_millis+3,w
 10133  055C  3DDE               	addwfc	??_ModbusMasterTransaction+3,f
 10134  055D  085E               	movf	??_ModbusMasterTransaction+3,w
 10135  055E  1D03               	btfss	3,2
 10136  055F  2D69               	goto	l6055
 10137  0560  085D               	movf	??_ModbusMasterTransaction+2,w
 10138  0561  1D03               	btfss	3,2
 10139  0562  2D69               	goto	l6055
 10140  0563  30D1               	movlw	209
 10141  0564  025B               	subwf	??_ModbusMasterTransaction,w
 10142  0565  3007               	movlw	7
 10143  0566  3B5C               	subwfb	??_ModbusMasterTransaction+1,w
 10144  0567  1C03               	btfss	3,0
 10145  0568  2D6E               	goto	l6057
 10146  0569                     l6055:	
 10147                           
 10148                           ;ModbusMaster.c: 768: {
 10149                           ;ModbusMaster.c: 769: u8MBStatus = 0xE2;
 10150  0569  30E2               	movlw	226
 10151  056A  00DB               	movwf	??_ModbusMasterTransaction
 10152  056B  085B               	movf	??_ModbusMasterTransaction,w
 10153  056C  0021               	movlb	1	; select bank1
 10154  056D  00E9               	movwf	ModbusMasterTransaction@u8MBStatus^(0+128)
 10155  056E                     l6057:	
 10156  056E  0021               	movlb	1	; select bank1
 10157  056F  0867               	movf	ModbusMasterTransaction@u8BytesLeft^(0+128),w
 10158  0570  1903               	btfsc	3,2
 10159  0571  2D75               	goto	l6061
 10160  0572  0869               	movf	ModbusMasterTransaction@u8MBStatus^(0+128),w
 10161  0573  1903               	btfsc	3,2
 10162  0574  2CD3               	goto	l6023
 10163  0575                     l6061:	
 10164                           
 10165                           ;ModbusMaster.c: 770: }
 10166                           ;ModbusMaster.c: 771: }
 10167                           ;ModbusMaster.c: 774: if (!u8MBStatus && u8ModbusADUSize >= 5)
 10168  0575  0869               	movf	ModbusMasterTransaction@u8MBStatus^(0+128),w
 10169  0576  1D03               	btfss	3,2
 10170  0577  2DE6               	goto	l6083
 10171  0578  3005               	movlw	5
 10172  0579  026D               	subwf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
 10173  057A  1C03               	skipc
 10174  057B  2DE6               	goto	l6083
 10175                           
 10176                           ;ModbusMaster.c: 775: {
 10177                           ;ModbusMaster.c: 777: u16CRC = 0xFFFF;
 10178  057C  30FF               	movlw	255
 10179  057D  00EA               	movwf	ModbusMasterTransaction@u16CRC^(0+128)
 10180  057E  30FF               	movlw	255
 10181  057F  00EB               	movwf	(ModbusMasterTransaction@u16CRC^(0+128)+1)
 10182                           
 10183                           ;ModbusMaster.c: 778: for (i = 0; i < (u8ModbusADUSize - 2); i++)
 10184  0580  01EC               	clrf	ModbusMasterTransaction@i^(0+128)
 10185  0581                     l6073:	
 10186  0581  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
 10187  0582  3EFE               	addlw	254
 10188  0583  0020               	movlb	0	; select bank0
 10189  0584  00DB               	movwf	??_ModbusMasterTransaction
 10190  0585  30FF               	movlw	255
 10191  0586  1803               	skipnc
 10192  0587  3000               	movlw	0
 10193  0588  00DC               	movwf	??_ModbusMasterTransaction+1
 10194  0589  085C               	movf	??_ModbusMasterTransaction+1,w
 10195  058A  3A80               	xorlw	128
 10196  058B  3C80               	sublw	128
 10197  058C  1D03               	skipz
 10198  058D  2D91               	goto	u4595
 10199  058E  085B               	movf	??_ModbusMasterTransaction,w
 10200  058F  0021               	movlb	1	; select bank1
 10201  0590  026C               	subwf	ModbusMasterTransaction@i^(0+128),w
 10202  0591                     u4595:	
 10203  0591  1803               	btfsc	3,0
 10204  0592  2DB7               	goto	l6075
 10205                           
 10206                           ;ModbusMaster.c: 779: {
 10207                           ;ModbusMaster.c: 780: u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 10208  0593  0021               	movlb	1	; select bank1
 10209  0594  086B               	movf	(ModbusMasterTransaction@u16CRC+1)^(0+128),w
 10210  0595  0020               	movlb	0	; select bank0
 10211  0596  00D2               	movwf	crc16_update@crc+1
 10212  0597  0021               	movlb	1	; select bank1
 10213  0598  086A               	movf	ModbusMasterTransaction@u16CRC^(0+128),w
 10214  0599  0020               	movlb	0	; select bank0
 10215  059A  00D1               	movwf	crc16_update@crc
 10216  059B  0021               	movlb	1	; select bank1
 10217  059C  086C               	movf	ModbusMasterTransaction@i^(0+128),w
 10218  059D  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
 10219  059E  0086               	movwf	6
 10220  059F  0187               	clrf	7
 10221  05A0  0801               	movf	1,w
 10222  05A1  0020               	movlb	0	; select bank0
 10223  05A2  00DB               	movwf	??_ModbusMasterTransaction
 10224  05A3  085B               	movf	??_ModbusMasterTransaction,w
 10225  05A4  00D3               	movwf	crc16_update@a
 10226  05A5  318F  2718  3180   	fcall	_crc16_update
 10227  05A8  0020               	movlb	0	; select bank0
 10228  05A9  0852               	movf	?_crc16_update+1,w
 10229  05AA  0021               	movlb	1	; select bank1
 10230  05AB  00EB               	movwf	(ModbusMasterTransaction@u16CRC+1)^(0+128)
 10231  05AC  0020               	movlb	0	; select bank0
 10232  05AD  0851               	movf	?_crc16_update,w
 10233  05AE  0021               	movlb	1	; select bank1
 10234  05AF  00EA               	movwf	ModbusMasterTransaction@u16CRC^(0+128)
 10235  05B0  3001               	movlw	1
 10236  05B1  0020               	movlb	0	; select bank0
 10237  05B2  00DB               	movwf	??_ModbusMasterTransaction
 10238  05B3  085B               	movf	??_ModbusMasterTransaction,w
 10239  05B4  0021               	movlb	1	; select bank1
 10240  05B5  07EC               	addwf	ModbusMasterTransaction@i^(0+128),f
 10241  05B6  2D81               	goto	l6073
 10242  05B7                     l6075:	
 10243                           
 10244                           ;ModbusMaster.c: 781: }
 10245                           ;ModbusMaster.c: 784: if (!u8MBStatus && (lowByte(u16CRC) != u8ModbusADU[u8ModbusADUSize
      +                           - 2] ||
 10246                           ;ModbusMaster.c: 785: highByte(u16CRC) != u8ModbusADU[u8ModbusADUSize - 1]))
 10247  05B7  0021               	movlb	1	; select bank1
 10248  05B8  0869               	movf	ModbusMasterTransaction@u8MBStatus^(0+128),w
 10249  05B9  1D03               	btfss	3,2
 10250  05BA  2DE6               	goto	l6083
 10251  05BB  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
 10252  05BC  3EFE               	addlw	254
 10253  05BD  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
 10254  05BE  0086               	movwf	6
 10255  05BF  0187               	clrf	7
 10256  05C0  086B               	movf	(ModbusMasterTransaction@u16CRC+1)^(0+128),w
 10257  05C1  0020               	movlb	0	; select bank0
 10258  05C2  00D2               	movwf	lowByte@ww+1
 10259  05C3  0021               	movlb	1	; select bank1
 10260  05C4  086A               	movf	ModbusMasterTransaction@u16CRC^(0+128),w
 10261  05C5  0020               	movlb	0	; select bank0
 10262  05C6  00D1               	movwf	lowByte@ww
 10263  05C7  318B  23DF  3180   	fcall	_lowByte
 10264  05CA  0601               	xorwf	1,w
 10265  05CB  1D03               	skipz
 10266  05CC  2DE0               	goto	l6081
 10267  05CD  0021               	movlb	1	; select bank1
 10268  05CE  086D               	movf	ModbusMasterTransaction@u8ModbusADUSize^(0+128),w
 10269  05CF  3EFF               	addlw	255
 10270  05D0  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
 10271  05D1  0086               	movwf	6
 10272  05D2  0187               	clrf	7
 10273  05D3  086B               	movf	(ModbusMasterTransaction@u16CRC+1)^(0+128),w
 10274  05D4  0020               	movlb	0	; select bank0
 10275  05D5  00D2               	movwf	highByte@ww+1
 10276  05D6  0021               	movlb	1	; select bank1
 10277  05D7  086A               	movf	ModbusMasterTransaction@u16CRC^(0+128),w
 10278  05D8  0020               	movlb	0	; select bank0
 10279  05D9  00D1               	movwf	highByte@ww
 10280  05DA  318B  23DC  3180   	fcall	_highByte
 10281  05DD  0601               	xorwf	1,w
 10282  05DE  1903               	skipnz
 10283  05DF  2DE6               	goto	l6083
 10284  05E0                     l6081:	
 10285                           
 10286                           ;ModbusMaster.c: 786: {
 10287                           ;ModbusMaster.c: 787: u8MBStatus = 0xE3;
 10288  05E0  30E3               	movlw	227
 10289  05E1  0020               	movlb	0	; select bank0
 10290  05E2  00DB               	movwf	??_ModbusMasterTransaction
 10291  05E3  085B               	movf	??_ModbusMasterTransaction,w
 10292  05E4  0021               	movlb	1	; select bank1
 10293  05E5  00E9               	movwf	ModbusMasterTransaction@u8MBStatus^(0+128)
 10294  05E6                     l6083:	
 10295                           
 10296                           ;ModbusMaster.c: 788: }
 10297                           ;ModbusMaster.c: 789: }
 10298                           ;ModbusMaster.c: 792: if (!u8MBStatus)
 10299  05E6  0021               	movlb	1	; select bank1
 10300  05E7  0869               	movf	ModbusMasterTransaction@u8MBStatus^(0+128),w
 10301  05E8  1903               	btfsc	3,2
 10302  05E9  2E99               	goto	l6119
 10303  05EA  2EAA               	goto	l6121
 10304  05EB                     l6087:	
 10305                           ;ModbusMaster.c: 796: {
 10306                           ;ModbusMaster.c: 797: case 0x01:
 10307                           
 10308                           ;ModbusMaster.c: 793: {
 10309                           ;ModbusMaster.c: 795: switch(u8ModbusADU[1])
 10310                           
 10311                           
 10312                           ;ModbusMaster.c: 798: case 0x02:
 10313                           ;ModbusMaster.c: 800: for (i = 0; i < (u8ModbusADU[2] >> 1); i++)
 10314  05EB  01EC               	clrf	ModbusMasterTransaction@i^(0+128)
 10315  05EC                     l6097:	
 10316  05EC  3622               	lsrf	(ModbusMasterTransaction@u8ModbusADU^(0+128)+2),w
 10317  05ED  026C               	subwf	ModbusMasterTransaction@i^(0+128),w
 10318  05EE  1803               	btfsc	3,0
 10319  05EF  2E29               	goto	l1017
 10320                           
 10321                           ;ModbusMaster.c: 801: {
 10322                           ;ModbusMaster.c: 802: if (i < 64)
 10323  05F0  3040               	movlw	64
 10324  05F1  026C               	subwf	ModbusMasterTransaction@i^(0+128),w
 10325  05F2  1803               	skipnc
 10326  05F3  2E1D               	goto	l6093
 10327                           
 10328                           ;ModbusMaster.c: 803: {
 10329                           ;ModbusMaster.c: 804: _u16ResponseBuffer[i] = word(u8ModbusADU[2 * i + 4], u8ModbusADU[2
      +                           * i + 3]);
 10330  05F4  356C               	lslf	ModbusMasterTransaction@i^(0+128),w
 10331  05F5  3E03               	addlw	3
 10332  05F6  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
 10333  05F7  0086               	movwf	6
 10334  05F8  0187               	clrf	7
 10335  05F9  0801               	movf	1,w
 10336  05FA  0020               	movlb	0	; select bank0
 10337  05FB  00DB               	movwf	??_ModbusMasterTransaction
 10338  05FC  085B               	movf	??_ModbusMasterTransaction,w
 10339  05FD  00D1               	movwf	word@lowByte
 10340  05FE  0021               	movlb	1	; select bank1
 10341  05FF  356C               	lslf	ModbusMasterTransaction@i^(0+128),w
 10342  0600  3E04               	addlw	4
 10343  0601  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
 10344  0602  0086               	movwf	6
 10345  0603  0187               	clrf	7
 10346  0604  0801               	movf	1,w
 10347  0605  318D  25E1  3180   	fcall	_word
 10348  0608  0021               	movlb	1	; select bank1
 10349  0609  086C               	movf	ModbusMasterTransaction@i^(0+128),w
 10350  060A  0020               	movlb	0	; select bank0
 10351  060B  00DC               	movwf	??_ModbusMasterTransaction+1
 10352  060C  01DD               	clrf	??_ModbusMasterTransaction+2
 10353  060D  35DC               	lslf	??_ModbusMasterTransaction+1,f
 10354  060E  0DDD               	rlf	??_ModbusMasterTransaction+2,f
 10355  060F  30F0               	movlw	240
 10356  0610  00DE               	movwf	??_ModbusMasterTransaction+3
 10357  0611  3020               	movlw	32
 10358  0612  00DF               	movwf	??_ModbusMasterTransaction+4
 10359  0613  085C               	movf	??_ModbusMasterTransaction+1,w
 10360  0614  075E               	addwf	??_ModbusMasterTransaction+3,w
 10361  0615  0086               	movwf	6
 10362  0616  085D               	movf	??_ModbusMasterTransaction+2,w
 10363  0617  3D5F               	addwfc	??_ModbusMasterTransaction+4,w
 10364  0618  0087               	movwf	7
 10365  0619  0851               	movf	?_word,w
 10366  061A  3FC0               	movwi [0]fsr1
 10367  061B  0852               	movf	?_word+1,w
 10368  061C  3FC1               	movwi [1]fsr1
 10369  061D                     l6093:	
 10370                           
 10371                           ;ModbusMaster.c: 805: }
 10372                           ;ModbusMaster.c: 807: _u8ResponseBufferLength = i;
 10373  061D  0021               	movlb	1	; select bank1
 10374  061E  086C               	movf	ModbusMasterTransaction@i^(0+128),w
 10375  061F  0020               	movlb	0	; select bank0
 10376  0620  00DB               	movwf	??_ModbusMasterTransaction
 10377  0621  085B               	movf	??_ModbusMasterTransaction,w
 10378  0622  00C7               	movwf	__u8ResponseBufferLength
 10379  0623  3001               	movlw	1
 10380  0624  00DB               	movwf	??_ModbusMasterTransaction
 10381  0625  085B               	movf	??_ModbusMasterTransaction,w
 10382  0626  0021               	movlb	1	; select bank1
 10383  0627  07EC               	addwf	ModbusMasterTransaction@i^(0+128),f
 10384  0628  2DEC               	goto	l6097
 10385  0629                     l1017:	
 10386                           
 10387                           ;ModbusMaster.c: 808: }
 10388                           ;ModbusMaster.c: 811: if (u8ModbusADU[2] % 2)
 10389  0629  1C22               	btfss	(ModbusMasterTransaction@u8ModbusADU^(0+128)+2),0
 10390  062A  2EAA               	goto	l6121
 10391                           
 10392                           ;ModbusMaster.c: 812: {
 10393                           ;ModbusMaster.c: 813: if (i < 64)
 10394  062B  3040               	movlw	64
 10395  062C  026C               	subwf	ModbusMasterTransaction@i^(0+128),w
 10396  062D  1803               	skipnc
 10397  062E  2E52               	goto	l6103
 10398                           
 10399                           ;ModbusMaster.c: 814: {
 10400                           ;ModbusMaster.c: 815: _u16ResponseBuffer[i] = word(0, u8ModbusADU[2 * i + 3]);
 10401  062F  356C               	lslf	ModbusMasterTransaction@i^(0+128),w
 10402  0630  3E03               	addlw	3
 10403  0631  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
 10404  0632  0086               	movwf	6
 10405  0633  0187               	clrf	7
 10406  0634  0801               	movf	1,w
 10407  0635  0020               	movlb	0	; select bank0
 10408  0636  00DB               	movwf	??_ModbusMasterTransaction
 10409  0637  085B               	movf	??_ModbusMasterTransaction,w
 10410  0638  00D1               	movwf	word@lowByte
 10411  0639  3000               	movlw	0
 10412  063A  318D  25E1  3180   	fcall	_word
 10413  063D  0021               	movlb	1	; select bank1
 10414  063E  086C               	movf	ModbusMasterTransaction@i^(0+128),w
 10415  063F  0020               	movlb	0	; select bank0
 10416  0640  00DC               	movwf	??_ModbusMasterTransaction+1
 10417  0641  01DD               	clrf	??_ModbusMasterTransaction+2
 10418  0642  35DC               	lslf	??_ModbusMasterTransaction+1,f
 10419  0643  0DDD               	rlf	??_ModbusMasterTransaction+2,f
 10420  0644  30F0               	movlw	240
 10421  0645  00DE               	movwf	??_ModbusMasterTransaction+3
 10422  0646  3020               	movlw	32
 10423  0647  00DF               	movwf	??_ModbusMasterTransaction+4
 10424  0648  085C               	movf	??_ModbusMasterTransaction+1,w
 10425  0649  075E               	addwf	??_ModbusMasterTransaction+3,w
 10426  064A  0086               	movwf	6
 10427  064B  085D               	movf	??_ModbusMasterTransaction+2,w
 10428  064C  3D5F               	addwfc	??_ModbusMasterTransaction+4,w
 10429  064D  0087               	movwf	7
 10430  064E  0851               	movf	?_word,w
 10431  064F  3FC0               	movwi [0]fsr1
 10432  0650  0852               	movf	?_word+1,w
 10433  0651  3FC1               	movwi [1]fsr1
 10434  0652                     l6103:	
 10435                           
 10436                           ;ModbusMaster.c: 816: }
 10437                           ;ModbusMaster.c: 818: _u8ResponseBufferLength = i + 1;
 10438  0652  0021               	movlb	1	; select bank1
 10439  0653  086C               	movf	ModbusMasterTransaction@i^(0+128),w
 10440  0654  3E01               	addlw	1
 10441  0655  0020               	movlb	0	; select bank0
 10442  0656  00DB               	movwf	??_ModbusMasterTransaction
 10443  0657  085B               	movf	??_ModbusMasterTransaction,w
 10444  0658  00C7               	movwf	__u8ResponseBufferLength
 10445                           
 10446                           ;ModbusMaster.c: 819: }
 10447                           ;ModbusMaster.c: 820: break;
 10448  0659  2EAA               	goto	l6121
 10449  065A                     l6105:	
 10450                           ;ModbusMaster.c: 822: case 0x04:
 10451                           
 10452                           
 10453                           ;ModbusMaster.c: 823: case 0x03:
 10454                           ;ModbusMaster.c: 824: case 0x17:
 10455                           ;ModbusMaster.c: 826: for (i = 0; i < (u8ModbusADU[2] >> 1); i++)
 10456  065A  0021               	movlb	1	; select bank1
 10457  065B  01EC               	clrf	ModbusMasterTransaction@i^(0+128)
 10458  065C                     l6115:	
 10459  065C  3622               	lsrf	(ModbusMasterTransaction@u8ModbusADU^(0+128)+2),w
 10460  065D  026C               	subwf	ModbusMasterTransaction@i^(0+128),w
 10461  065E  1803               	btfsc	3,0
 10462  065F  2EAA               	goto	l6121
 10463                           
 10464                           ;ModbusMaster.c: 827: {
 10465                           ;ModbusMaster.c: 828: if (i < 64)
 10466  0660  3040               	movlw	64
 10467  0661  026C               	subwf	ModbusMasterTransaction@i^(0+128),w
 10468  0662  1803               	skipnc
 10469  0663  2E8D               	goto	l6111
 10470                           
 10471                           ;ModbusMaster.c: 829: {
 10472                           ;ModbusMaster.c: 830: _u16ResponseBuffer[i] = word(u8ModbusADU[2 * i + 3], u8ModbusADU[2
      +                           * i + 4]);
 10473  0664  356C               	lslf	ModbusMasterTransaction@i^(0+128),w
 10474  0665  3E04               	addlw	4
 10475  0666  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
 10476  0667  0086               	movwf	6
 10477  0668  0187               	clrf	7
 10478  0669  0801               	movf	1,w
 10479  066A  0020               	movlb	0	; select bank0
 10480  066B  00DB               	movwf	??_ModbusMasterTransaction
 10481  066C  085B               	movf	??_ModbusMasterTransaction,w
 10482  066D  00D1               	movwf	word@lowByte
 10483  066E  0021               	movlb	1	; select bank1
 10484  066F  356C               	lslf	ModbusMasterTransaction@i^(0+128),w
 10485  0670  3E03               	addlw	3
 10486  0671  3EA0               	addlw	(low (ModbusMasterTransaction@u8ModbusADU| 0))& (0+255)
 10487  0672  0086               	movwf	6
 10488  0673  0187               	clrf	7
 10489  0674  0801               	movf	1,w
 10490  0675  318D  25E1  3180   	fcall	_word
 10491  0678  0021               	movlb	1	; select bank1
 10492  0679  086C               	movf	ModbusMasterTransaction@i^(0+128),w
 10493  067A  0020               	movlb	0	; select bank0
 10494  067B  00DC               	movwf	??_ModbusMasterTransaction+1
 10495  067C  01DD               	clrf	??_ModbusMasterTransaction+2
 10496  067D  35DC               	lslf	??_ModbusMasterTransaction+1,f
 10497  067E  0DDD               	rlf	??_ModbusMasterTransaction+2,f
 10498  067F  30F0               	movlw	240
 10499  0680  00DE               	movwf	??_ModbusMasterTransaction+3
 10500  0681  3020               	movlw	32
 10501  0682  00DF               	movwf	??_ModbusMasterTransaction+4
 10502  0683  085C               	movf	??_ModbusMasterTransaction+1,w
 10503  0684  075E               	addwf	??_ModbusMasterTransaction+3,w
 10504  0685  0086               	movwf	6
 10505  0686  085D               	movf	??_ModbusMasterTransaction+2,w
 10506  0687  3D5F               	addwfc	??_ModbusMasterTransaction+4,w
 10507  0688  0087               	movwf	7
 10508  0689  0851               	movf	?_word,w
 10509  068A  3FC0               	movwi [0]fsr1
 10510  068B  0852               	movf	?_word+1,w
 10511  068C  3FC1               	movwi [1]fsr1
 10512  068D                     l6111:	
 10513                           
 10514                           ;ModbusMaster.c: 831: }
 10515                           ;ModbusMaster.c: 833: _u8ResponseBufferLength = i;
 10516  068D  0021               	movlb	1	; select bank1
 10517  068E  086C               	movf	ModbusMasterTransaction@i^(0+128),w
 10518  068F  0020               	movlb	0	; select bank0
 10519  0690  00DB               	movwf	??_ModbusMasterTransaction
 10520  0691  085B               	movf	??_ModbusMasterTransaction,w
 10521  0692  00C7               	movwf	__u8ResponseBufferLength
 10522  0693  3001               	movlw	1
 10523  0694  00DB               	movwf	??_ModbusMasterTransaction
 10524  0695  085B               	movf	??_ModbusMasterTransaction,w
 10525  0696  0021               	movlb	1	; select bank1
 10526  0697  07EC               	addwf	ModbusMasterTransaction@i^(0+128),f
 10527  0698  2E5C               	goto	l6115
 10528  0699                     l6119:	
 10529                           ;ModbusMaster.c: 836: }
 10530                           
 10531                           ;ModbusMaster.c: 834: }
 10532                           ;ModbusMaster.c: 835: break;
 10533                           
 10534  0699  0821               	movf	(ModbusMasterTransaction@u8ModbusADU^(0+128)+1),w
 10535                           
 10536                           ; Switch size 1, requested type "space"
 10537                           ; Number of cases is 5, Range of values is 1 to 23
 10538                           ; switch strategies available:
 10539                           ; Name         Instructions Cycles
 10540                           ; simple_byte           16     9 (average)
 10541                           ; direct_byte           55     9 (fixed)
 10542                           ; jumptable            263     9 (fixed)
 10543                           ;	Chosen strategy is simple_byte
 10544  069A  3A01               	xorlw	1	; case 1
 10545  069B  1903               	skipnz
 10546  069C  2DEB               	goto	l6087
 10547  069D  3A03               	xorlw	3	; case 2
 10548  069E  1903               	skipnz
 10549  069F  2DEB               	goto	l6087
 10550  06A0  3A01               	xorlw	1	; case 3
 10551  06A1  1903               	skipnz
 10552  06A2  2E5A               	goto	l6105
 10553  06A3  3A07               	xorlw	7	; case 4
 10554  06A4  1903               	skipnz
 10555  06A5  2E5A               	goto	l6105
 10556  06A6  3A13               	xorlw	19	; case 23
 10557  06A7  1903               	skipnz
 10558  06A8  2E5A               	goto	l6105
 10559  06A9  2EAA               	goto	l6121
 10560  06AA                     l6121:	
 10561                           
 10562                           ;ModbusMaster.c: 837: }
 10563                           ;ModbusMaster.c: 839: _u8TransmitBufferIndex = 0;
 10564  06AA  0020               	movlb	0	; select bank0
 10565  06AB  01C9               	clrf	__u8TransmitBufferIndex
 10566                           
 10567                           ;ModbusMaster.c: 840: u16TransmitBufferLength = 0;
 10568  06AC  0022               	movlb	2	; select bank2
 10569  06AD  01AC               	clrf	_u16TransmitBufferLength^(0+256)
 10570  06AE  01AD               	clrf	(_u16TransmitBufferLength+1)^(0+256)
 10571                           
 10572                           ;ModbusMaster.c: 841: _u8ResponseBufferIndex = 0;
 10573  06AF  0020               	movlb	0	; select bank0
 10574  06B0  01C8               	clrf	__u8ResponseBufferIndex
 10575                           
 10576                           ;ModbusMaster.c: 842: return u8MBStatus;
 10577  06B1  0021               	movlb	1	; select bank1
 10578  06B2  0869               	movf	ModbusMasterTransaction@u8MBStatus^(0+128),w
 10579  06B3  0008               	return
 10580  06B4                     __end_of_ModbusMasterTransaction:	
 10581                           
 10582                           	psect	text35
 10583  0DE1                     __ptext35:	
 10584 ;; *************** function _word *****************
 10585 ;; Defined at:
 10586 ;;		line 54 in file "word.h"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;  highByte        1    wreg     unsigned char 
 10589 ;;  lowByte         1    0[BANK0 ] unsigned char 
 10590 ;; Auto vars:     Size  Location     Type
 10591 ;;  highByte        1    9[BANK0 ] unsigned char 
 10592 ;; Return value:  Size  Location     Type
 10593 ;;                  2    0[BANK0 ] unsigned int 
 10594 ;; Registers used:
 10595 ;;		wreg
 10596 ;; Tracked objects:
 10597 ;;		On entry : 0/0
 10598 ;;		On exit  : 0/0
 10599 ;;		Unchanged: 0/0
 10600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10601 ;;      Params:         0       2       0       0       0       0       0       0
 10602 ;;      Locals:         0       1       0       0       0       0       0       0
 10603 ;;      Temps:          0       7       0       0       0       0       0       0
 10604 ;;      Totals:         0      10       0       0       0       0       0       0
 10605 ;;Total ram usage:       10 bytes
 10606 ;; Hardware stack levels used:    1
 10607 ;; Hardware stack levels required when called:    5
 10608 ;; This function calls:
 10609 ;;		Nothing
 10610 ;; This function is called by:
 10611 ;;		_ModbusMasterTransaction
 10612 ;; This function uses a non-reentrant model
 10613 ;;
 10614                           
 10615                           
 10616                           ;psect for function _word
 10617  0DE1                     _word:	
 10618                           
 10619                           ;incstack = 0
 10620                           ; Regs used in _word: [wreg]
 10621                           ;word@highByte stored from wreg
 10622  0DE1  0020               	movlb	0	; select bank0
 10623  0DE2  00DA               	movwf	word@highByte
 10624                           
 10625                           ;word.h: 56: return (unsigned int) ((((unsigned int) highByte)<<8) & 0xFF00) | (((unsign
      +                          ed int) lowByte)&0x00FF);
 10626  0DE3  0851               	movf	word@lowByte,w
 10627  0DE4  00D3               	movwf	??_word
 10628  0DE5  01D4               	clrf	??_word+1
 10629  0DE6  085A               	movf	word@highByte,w
 10630  0DE7  00D5               	movwf	??_word+2
 10631  0DE8  01D6               	clrf	??_word+3
 10632  0DE9  0855               	movf	??_word+2,w
 10633  0DEA  00D6               	movwf	??_word+3
 10634  0DEB  01D5               	clrf	??_word+2
 10635  0DEC  3000               	movlw	0
 10636  0DED  0555               	andwf	??_word+2,w
 10637  0DEE  00D8               	movwf	??_word+5
 10638  0DEF  30FF               	movlw	255
 10639  0DF0  0556               	andwf	??_word+3,w
 10640  0DF1  00D9               	movwf	??_word+6
 10641  0DF2  0853               	movf	??_word,w
 10642  0DF3  0458               	iorwf	??_word+5,w
 10643  0DF4  00D1               	movwf	?_word
 10644  0DF5  0854               	movf	??_word+1,w
 10645  0DF6  0459               	iorwf	??_word+6,w
 10646  0DF7  00D2               	movwf	?_word+1
 10647  0DF8  0008               	return
 10648  0DF9                     __end_of_word:	
 10649                           
 10650                           	psect	text36
 10651  0BE2                     __ptext36:	
 10652 ;; *************** function _preTransmission_App *****************
 10653 ;; Defined at:
 10654 ;;		line 54 in file "ModbusManager.c"
 10655 ;; Parameters:    Size  Location     Type
 10656 ;;		None
 10657 ;; Auto vars:     Size  Location     Type
 10658 ;;		None
 10659 ;; Return value:  Size  Location     Type
 10660 ;;                  1    wreg      void 
 10661 ;; Registers used:
 10662 ;;		None
 10663 ;; Tracked objects:
 10664 ;;		On entry : 0/0
 10665 ;;		On exit  : 0/0
 10666 ;;		Unchanged: 0/0
 10667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10668 ;;      Params:         0       0       0       0       0       0       0       0
 10669 ;;      Locals:         0       0       0       0       0       0       0       0
 10670 ;;      Temps:          0       0       0       0       0       0       0       0
 10671 ;;      Totals:         0       0       0       0       0       0       0       0
 10672 ;;Total ram usage:        0 bytes
 10673 ;; Hardware stack levels used:    1
 10674 ;; Hardware stack levels required when called:    5
 10675 ;; This function calls:
 10676 ;;		Nothing
 10677 ;; This function is called by:
 10678 ;;		_ModbusMasterSetup
 10679 ;;		_ModbusMasterTransaction
 10680 ;; This function uses a non-reentrant model
 10681 ;;
 10682                           
 10683                           
 10684                           ;psect for function _preTransmission_App
 10685  0BE2                     _preTransmission_App:	
 10686                           
 10687                           ;incstack = 0
 10688                           ; Regs used in _preTransmission_App: []
 10689                           ;ModbusManager.c: 56: do { LATBbits.LATB6 = 1; } while(0);
 10690  0BE2  0022               	movlb	2	; select bank2
 10691  0BE3  170D               	bsf	13,6	;volatile
 10692  0BE4  0008               	return
 10693  0BE5                     __end_of_preTransmission_App:	
 10694                           
 10695                           	psect	text37
 10696  0C06                     __ptext37:	
 10697 ;; *************** function _postTransmission_App *****************
 10698 ;; Defined at:
 10699 ;;		line 59 in file "ModbusManager.c"
 10700 ;; Parameters:    Size  Location     Type
 10701 ;;		None
 10702 ;; Auto vars:     Size  Location     Type
 10703 ;;		None
 10704 ;; Return value:  Size  Location     Type
 10705 ;;                  1    wreg      void 
 10706 ;; Registers used:
 10707 ;;		None
 10708 ;; Tracked objects:
 10709 ;;		On entry : 0/0
 10710 ;;		On exit  : 0/0
 10711 ;;		Unchanged: 0/0
 10712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10713 ;;      Params:         0       0       0       0       0       0       0       0
 10714 ;;      Locals:         0       0       0       0       0       0       0       0
 10715 ;;      Temps:          0       0       0       0       0       0       0       0
 10716 ;;      Totals:         0       0       0       0       0       0       0       0
 10717 ;;Total ram usage:        0 bytes
 10718 ;; Hardware stack levels used:    1
 10719 ;; Hardware stack levels required when called:    5
 10720 ;; This function calls:
 10721 ;;		Nothing
 10722 ;; This function is called by:
 10723 ;;		_ModbusMasterSetup
 10724 ;;		_ModbusMasterTransaction
 10725 ;; This function uses a non-reentrant model
 10726 ;;
 10727                           
 10728                           
 10729                           ;psect for function _postTransmission_App
 10730  0C06                     _postTransmission_App:	
 10731                           
 10732                           ;incstack = 0
 10733                           ; Regs used in _postTransmission_App: []
 10734                           ;ModbusManager.c: 61: do { LATBbits.LATB6 = 0; } while(0);
 10735  0C06  0022               	movlb	2	; select bank2
 10736  0C07  130D               	bcf	13,6	;volatile
 10737                           
 10738                           ;ModbusManager.c: 62: PIR1bits.RCIF=0;
 10739  0C08  0020               	movlb	0	; select bank0
 10740  0C09  1291               	bcf	17,5	;volatile
 10741  0C0A  0008               	return
 10742  0C0B                     __end_of_postTransmission_App:	
 10743                           
 10744                           	psect	text38
 10745  0C98                     __ptext38:	
 10746 ;; *************** function _millisReset *****************
 10747 ;; Defined at:
 10748 ;;		line 666 in file "main.c"
 10749 ;; Parameters:    Size  Location     Type
 10750 ;;		None
 10751 ;; Auto vars:     Size  Location     Type
 10752 ;;		None
 10753 ;; Return value:  Size  Location     Type
 10754 ;;                  1    wreg      void 
 10755 ;; Registers used:
 10756 ;;		wreg
 10757 ;; Tracked objects:
 10758 ;;		On entry : 0/0
 10759 ;;		On exit  : 0/0
 10760 ;;		Unchanged: 0/0
 10761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10762 ;;      Params:         0       0       0       0       0       0       0       0
 10763 ;;      Locals:         0       0       0       0       0       0       0       0
 10764 ;;      Temps:          0       0       0       0       0       0       0       0
 10765 ;;      Totals:         0       0       0       0       0       0       0       0
 10766 ;;Total ram usage:        0 bytes
 10767 ;; Hardware stack levels used:    1
 10768 ;; Hardware stack levels required when called:    5
 10769 ;; This function calls:
 10770 ;;		Nothing
 10771 ;; This function is called by:
 10772 ;;		_ModbusMasterTransaction
 10773 ;; This function uses a non-reentrant model
 10774 ;;
 10775                           
 10776                           
 10777                           ;psect for function _millisReset
 10778  0C98                     _millisReset:	
 10779                           
 10780                           ;main.c: 668: TimertickMsec=0;
 10781                           
 10782                           ;incstack = 0
 10783                           ; Regs used in _millisReset: [wreg]
 10784  0C98  3000               	movlw	0
 10785  0C99  0020               	movlb	0	; select bank0
 10786  0C9A  00A3               	movwf	_TimertickMsec+3
 10787  0C9B  3000               	movlw	0
 10788  0C9C  00A2               	movwf	_TimertickMsec+2
 10789  0C9D  3000               	movlw	0
 10790  0C9E  00A1               	movwf	_TimertickMsec+1
 10791  0C9F  3000               	movlw	0
 10792  0CA0  00A0               	movwf	_TimertickMsec
 10793  0CA1  0008               	return
 10794  0CA2                     __end_of_millisReset:	
 10795                           
 10796                           	psect	text39
 10797  0C8E                     __ptext39:	
 10798 ;; *************** function _millis *****************
 10799 ;; Defined at:
 10800 ;;		line 661 in file "main.c"
 10801 ;; Parameters:    Size  Location     Type
 10802 ;;		None
 10803 ;; Auto vars:     Size  Location     Type
 10804 ;;		None
 10805 ;; Return value:  Size  Location     Type
 10806 ;;                  4    0[BANK0 ] unsigned long 
 10807 ;; Registers used:
 10808 ;;		wreg
 10809 ;; Tracked objects:
 10810 ;;		On entry : 0/0
 10811 ;;		On exit  : 0/0
 10812 ;;		Unchanged: 0/0
 10813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10814 ;;      Params:         0       4       0       0       0       0       0       0
 10815 ;;      Locals:         0       0       0       0       0       0       0       0
 10816 ;;      Temps:          0       0       0       0       0       0       0       0
 10817 ;;      Totals:         0       4       0       0       0       0       0       0
 10818 ;;Total ram usage:        4 bytes
 10819 ;; Hardware stack levels used:    1
 10820 ;; Hardware stack levels required when called:    5
 10821 ;; This function calls:
 10822 ;;		Nothing
 10823 ;; This function is called by:
 10824 ;;		_ModbusMasterTransaction
 10825 ;;		_OnEncPulseEdgeEvent
 10826 ;; This function uses a non-reentrant model
 10827 ;;
 10828                           
 10829                           
 10830                           ;psect for function _millis
 10831  0C8E                     _millis:	
 10832                           
 10833                           ;main.c: 663: return TimertickMsec;
 10834                           
 10835                           ;incstack = 0
 10836                           ; Regs used in _millis: [wreg]
 10837  0C8E  0020               	movlb	0	; select bank0
 10838  0C8F  0823               	movf	_TimertickMsec+3,w
 10839  0C90  00D4               	movwf	?_millis+3
 10840  0C91  0822               	movf	_TimertickMsec+2,w
 10841  0C92  00D3               	movwf	?_millis+2
 10842  0C93  0821               	movf	_TimertickMsec+1,w
 10843  0C94  00D2               	movwf	?_millis+1
 10844  0C95  0820               	movf	_TimertickMsec,w
 10845  0C96  00D1               	movwf	?_millis
 10846  0C97  0008               	return
 10847  0C98                     __end_of_millis:	
 10848                           
 10849                           	psect	text40
 10850  0BDF                     __ptext40:	
 10851 ;; *************** function _lowByte *****************
 10852 ;; Defined at:
 10853 ;;		line 43 in file "word.h"
 10854 ;; Parameters:    Size  Location     Type
 10855 ;;  ww              2    0[BANK0 ] unsigned int 
 10856 ;; Auto vars:     Size  Location     Type
 10857 ;;		None
 10858 ;; Return value:  Size  Location     Type
 10859 ;;                  1    wreg      unsigned char 
 10860 ;; Registers used:
 10861 ;;		wreg
 10862 ;; Tracked objects:
 10863 ;;		On entry : 0/0
 10864 ;;		On exit  : 0/0
 10865 ;;		Unchanged: 0/0
 10866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10867 ;;      Params:         0       2       0       0       0       0       0       0
 10868 ;;      Locals:         0       0       0       0       0       0       0       0
 10869 ;;      Temps:          0       0       0       0       0       0       0       0
 10870 ;;      Totals:         0       2       0       0       0       0       0       0
 10871 ;;Total ram usage:        2 bytes
 10872 ;; Hardware stack levels used:    1
 10873 ;; Hardware stack levels required when called:    5
 10874 ;; This function calls:
 10875 ;;		Nothing
 10876 ;; This function is called by:
 10877 ;;		_ModbusMasterTransaction
 10878 ;; This function uses a non-reentrant model
 10879 ;;
 10880                           
 10881                           
 10882                           ;psect for function _lowByte
 10883  0BDF                     _lowByte:	
 10884                           
 10885                           ;word.h: 45: return (unsigned char) ((ww) & 0xFF);
 10886                           
 10887                           ;incstack = 0
 10888                           ; Regs used in _lowByte: [wreg]
 10889  0BDF  0020               	movlb	0	; select bank0
 10890  0BE0  0851               	movf	lowByte@ww,w
 10891  0BE1  0008               	return
 10892  0BE2                     __end_of_lowByte:	
 10893                           
 10894                           	psect	text41
 10895  0BDC                     __ptext41:	
 10896 ;; *************** function _highByte *****************
 10897 ;; Defined at:
 10898 ;;		line 38 in file "word.h"
 10899 ;; Parameters:    Size  Location     Type
 10900 ;;  ww              2    0[BANK0 ] unsigned int 
 10901 ;; Auto vars:     Size  Location     Type
 10902 ;;		None
 10903 ;; Return value:  Size  Location     Type
 10904 ;;                  1    wreg      unsigned char 
 10905 ;; Registers used:
 10906 ;;		wreg, status,2
 10907 ;; Tracked objects:
 10908 ;;		On entry : 0/0
 10909 ;;		On exit  : 0/0
 10910 ;;		Unchanged: 0/0
 10911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10912 ;;      Params:         0       2       0       0       0       0       0       0
 10913 ;;      Locals:         0       0       0       0       0       0       0       0
 10914 ;;      Temps:          0       0       0       0       0       0       0       0
 10915 ;;      Totals:         0       2       0       0       0       0       0       0
 10916 ;;Total ram usage:        2 bytes
 10917 ;; Hardware stack levels used:    1
 10918 ;; Hardware stack levels required when called:    5
 10919 ;; This function calls:
 10920 ;;		Nothing
 10921 ;; This function is called by:
 10922 ;;		_ModbusMasterTransaction
 10923 ;; This function uses a non-reentrant model
 10924 ;;
 10925                           
 10926                           
 10927                           ;psect for function _highByte
 10928  0BDC                     _highByte:	
 10929                           
 10930                           ;word.h: 40: return (unsigned char) ((ww) >> 8);
 10931                           
 10932                           ;incstack = 0
 10933                           ; Regs used in _highByte: [wreg+status,2]
 10934  0BDC  0020               	movlb	0	; select bank0
 10935  0BDD  0852               	movf	highByte@ww+1,w
 10936  0BDE  0008               	return
 10937  0BDF                     __end_of_highByte:	
 10938                           
 10939                           	psect	text42
 10940  0F18                     __ptext42:	
 10941 ;; *************** function _crc16_update *****************
 10942 ;; Defined at:
 10943 ;;		line 27 in file "crc16.h"
 10944 ;; Parameters:    Size  Location     Type
 10945 ;;  crc             2    0[BANK0 ] unsigned int 
 10946 ;;  a               1    2[BANK0 ] unsigned char 
 10947 ;; Auto vars:     Size  Location     Type
 10948 ;;  i               2    5[BANK0 ] int 
 10949 ;; Return value:  Size  Location     Type
 10950 ;;                  2    0[BANK0 ] unsigned int 
 10951 ;; Registers used:
 10952 ;;		wreg, status,2, status,0
 10953 ;; Tracked objects:
 10954 ;;		On entry : 0/0
 10955 ;;		On exit  : 0/0
 10956 ;;		Unchanged: 0/0
 10957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10958 ;;      Params:         0       3       0       0       0       0       0       0
 10959 ;;      Locals:         0       2       0       0       0       0       0       0
 10960 ;;      Temps:          0       2       0       0       0       0       0       0
 10961 ;;      Totals:         0       7       0       0       0       0       0       0
 10962 ;;Total ram usage:        7 bytes
 10963 ;; Hardware stack levels used:    1
 10964 ;; Hardware stack levels required when called:    5
 10965 ;; This function calls:
 10966 ;;		Nothing
 10967 ;; This function is called by:
 10968 ;;		_ModbusMasterTransaction
 10969 ;; This function uses a non-reentrant model
 10970 ;;
 10971                           
 10972                           
 10973                           ;psect for function _crc16_update
 10974  0F18                     _crc16_update:	
 10975                           
 10976                           ;crc16.h: 29: int i;
 10977                           ;crc16.h: 31: crc ^= (unsigned int)a;
 10978                           
 10979                           ;incstack = 0
 10980                           ; Regs used in _crc16_update: [wreg+status,2+status,0]
 10981  0F18  0020               	movlb	0	; select bank0
 10982  0F19  0853               	movf	crc16_update@a,w
 10983  0F1A  00D4               	movwf	??_crc16_update
 10984  0F1B  01D5               	clrf	??_crc16_update+1
 10985  0F1C  0854               	movf	??_crc16_update,w
 10986  0F1D  06D1               	xorwf	crc16_update@crc,f
 10987  0F1E  0855               	movf	??_crc16_update+1,w
 10988  0F1F  06D2               	xorwf	crc16_update@crc+1,f
 10989                           
 10990                           ;crc16.h: 32: for (i = 0; i < 8; ++i)
 10991  0F20  01D6               	clrf	crc16_update@i
 10992  0F21  01D7               	clrf	crc16_update@i+1
 10993  0F22                     L13:	
 10994  0F22  0857               	movf	crc16_update@i+1,w
 10995  0F23  3A80               	xorlw	128
 10996  0F24  00D4               	movwf	??_crc16_update
 10997  0F25  3080               	movlw	128
 10998  0F26  0254               	subwf	??_crc16_update,w
 10999  0F27  3008               	movlw	8
 11000  0F28  1903               	btfsc	3,2
 11001  0F29  0256               	subwf	crc16_update@i,w
 11002  0F2A  1803               	btfsc	3,0
 11003  0F2B  0008               	return
 11004                           
 11005                           ;crc16.h: 33: {
 11006                           ;crc16.h: 34: if (crc & 1)
 11007  0F2C  0020               	movlb	0	; select bank0
 11008  0F2D  1C51               	btfss	crc16_update@crc,0
 11009  0F2E  2F3B               	goto	l3085
 11010                           
 11011                           ;crc16.h: 35: crc = (crc >> 1) ^ 0xA001;
 11012  0F2F  0852               	movf	crc16_update@crc+1,w
 11013  0F30  00D5               	movwf	??_crc16_update+1
 11014  0F31  0851               	movf	crc16_update@crc,w
 11015  0F32  00D4               	movwf	??_crc16_update
 11016  0F33  36D5               	lsrf	??_crc16_update+1,f
 11017  0F34  0CD4               	rrf	??_crc16_update,f
 11018  0F35  3001               	movlw	1
 11019  0F36  0654               	xorwf	??_crc16_update,w
 11020  0F37  00D1               	movwf	crc16_update@crc
 11021  0F38  30A0               	movlw	160
 11022  0F39  0655               	xorwf	??_crc16_update+1,w
 11023  0F3A  2F44               	goto	L12
 11024  0F3B                     l3085:	
 11025                           
 11026                           ;crc16.h: 36: else
 11027                           ;crc16.h: 37: crc = (crc >> 1);
 11028  0F3B  0852               	movf	crc16_update@crc+1,w
 11029  0F3C  00D5               	movwf	??_crc16_update+1
 11030  0F3D  0851               	movf	crc16_update@crc,w
 11031  0F3E  00D4               	movwf	??_crc16_update
 11032  0F3F  36D5               	lsrf	??_crc16_update+1,f
 11033  0F40  0CD4               	rrf	??_crc16_update,f
 11034  0F41  0854               	movf	??_crc16_update,w
 11035  0F42  00D1               	movwf	crc16_update@crc
 11036  0F43  0855               	movf	??_crc16_update+1,w
 11037  0F44                     L12:	
 11038  0F44  00D2               	movwf	crc16_update@crc+1
 11039  0F45  3001               	movlw	1
 11040  0F46  07D6               	addwf	crc16_update@i,f
 11041  0F47  3000               	movlw	0
 11042  0F48  3DD7               	addwfc	crc16_update@i+1,f
 11043  0F49  2F22               	goto	L13
 11044  0F4A                     __end_of_crc16_update:	
 11045                           ;crc16.h: 38: }
 11046                           ;crc16.h: 40: return crc;
 11047                           
 11048                           
 11049                           	psect	text43
 11050  0C84                     __ptext43:	
 11051 ;; *************** function _EUSART_Read *****************
 11052 ;; Defined at:
 11053 ;;		line 77 in file "mcc_generated_files/eusart.c"
 11054 ;; Parameters:    Size  Location     Type
 11055 ;;		None
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;		None
 11058 ;; Return value:  Size  Location     Type
 11059 ;;                  1    wreg      unsigned char 
 11060 ;; Registers used:
 11061 ;;		wreg
 11062 ;; Tracked objects:
 11063 ;;		On entry : 0/0
 11064 ;;		On exit  : 0/0
 11065 ;;		Unchanged: 0/0
 11066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11067 ;;      Params:         0       0       0       0       0       0       0       0
 11068 ;;      Locals:         0       0       0       0       0       0       0       0
 11069 ;;      Temps:          0       0       0       0       0       0       0       0
 11070 ;;      Totals:         0       0       0       0       0       0       0       0
 11071 ;;Total ram usage:        0 bytes
 11072 ;; Hardware stack levels used:    1
 11073 ;; Hardware stack levels required when called:    5
 11074 ;; This function calls:
 11075 ;;		Nothing
 11076 ;; This function is called by:
 11077 ;;		_ModbusMasterTransaction
 11078 ;; This function uses a non-reentrant model
 11079 ;;
 11080                           
 11081                           
 11082                           ;psect for function _EUSART_Read
 11083  0C84                     _EUSART_Read:	
 11084  0C84                     l152:	
 11085                           ;eusart.c: 81: {
 11086                           
 11087                           ;eusart.c: 80: while(!PIR1bits.RCIF)
 11088                           
 11089                           ;incstack = 0
 11090                           ; Regs used in _EUSART_Read: [wreg]
 11091                           
 11092  0C84  0020               	movlb	0	; select bank0
 11093  0C85  1E91               	btfss	17,5	;volatile
 11094  0C86  2C84               	goto	l152
 11095                           
 11096                           ;eusart.c: 82: }
 11097                           ;eusart.c: 85: if(1 == RC1STAbits.OERR)
 11098  0C87  0023               	movlb	3	; select bank3
 11099  0C88  1C9D               	btfss	29,1	;volatile
 11100  0C89  2C8C               	goto	l3031
 11101                           
 11102                           ;eusart.c: 86: {
 11103                           ;eusart.c: 89: RC1STAbits.CREN = 0;
 11104  0C8A  121D               	bcf	29,4	;volatile
 11105                           
 11106                           ;eusart.c: 90: RC1STAbits.CREN = 1;
 11107  0C8B  161D               	bsf	29,4	;volatile
 11108  0C8C                     l3031:	
 11109                           
 11110                           ;eusart.c: 91: }
 11111                           ;eusart.c: 93: return RC1REG;
 11112  0C8C  0819               	movf	25,w	;volatile
 11113  0C8D  0008               	return
 11114  0C8E                     __end_of_EUSART_Read:	
 11115                           
 11116                           	psect	text44
 11117  0E64                     __ptext44:	
 11118 ;; *************** function _getResponseBuffer *****************
 11119 ;; Defined at:
 11120 ;;		line 166 in file "ModbusMaster.c"
 11121 ;; Parameters:    Size  Location     Type
 11122 ;;  u8Index         1    wreg     unsigned char 
 11123 ;; Auto vars:     Size  Location     Type
 11124 ;;  u8Index         1    6[BANK0 ] unsigned char 
 11125 ;; Return value:  Size  Location     Type
 11126 ;;                  2    0[BANK0 ] unsigned int 
 11127 ;; Registers used:
 11128 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11129 ;; Tracked objects:
 11130 ;;		On entry : 0/0
 11131 ;;		On exit  : 0/0
 11132 ;;		Unchanged: 0/0
 11133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11134 ;;      Params:         0       2       0       0       0       0       0       0
 11135 ;;      Locals:         0       1       0       0       0       0       0       0
 11136 ;;      Temps:          0       4       0       0       0       0       0       0
 11137 ;;      Totals:         0       7       0       0       0       0       0       0
 11138 ;;Total ram usage:        7 bytes
 11139 ;; Hardware stack levels used:    1
 11140 ;; Hardware stack levels required when called:    5
 11141 ;; This function calls:
 11142 ;;		Nothing
 11143 ;; This function is called by:
 11144 ;;		_MB_UpdateEPCParameter
 11145 ;; This function uses a non-reentrant model
 11146 ;;
 11147                           
 11148                           
 11149                           ;psect for function _getResponseBuffer
 11150  0E64                     _getResponseBuffer:	
 11151                           
 11152                           ;incstack = 0
 11153                           ; Regs used in _getResponseBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 11154                           ;getResponseBuffer@u8Index stored from wreg
 11155  0E64  0020               	movlb	0	; select bank0
 11156  0E65  00D7               	movwf	getResponseBuffer@u8Index
 11157                           
 11158                           ;ModbusMaster.c: 168: if (u8Index < 64)
 11159  0E66  3040               	movlw	64
 11160  0E67  0257               	subwf	getResponseBuffer@u8Index,w
 11161  0E68  1803               	skipnc
 11162  0E69  2E7E               	goto	l3749
 11163                           
 11164                           ;ModbusMaster.c: 169: {
 11165                           ;ModbusMaster.c: 170: return _u16ResponseBuffer[u8Index];
 11166  0E6A  0857               	movf	getResponseBuffer@u8Index,w
 11167  0E6B  00D3               	movwf	??_getResponseBuffer
 11168  0E6C  01D4               	clrf	??_getResponseBuffer+1
 11169  0E6D  35D3               	lslf	??_getResponseBuffer,f
 11170  0E6E  0DD4               	rlf	??_getResponseBuffer+1,f
 11171  0E6F  30F0               	movlw	240
 11172  0E70  00D5               	movwf	??_getResponseBuffer+2
 11173  0E71  3020               	movlw	32
 11174  0E72  00D6               	movwf	??_getResponseBuffer+3
 11175  0E73  0853               	movf	??_getResponseBuffer,w
 11176  0E74  0755               	addwf	??_getResponseBuffer+2,w
 11177  0E75  0086               	movwf	6
 11178  0E76  0854               	movf	??_getResponseBuffer+1,w
 11179  0E77  3D56               	addwfc	??_getResponseBuffer+3,w
 11180  0E78  0087               	movwf	7
 11181  0E79  3F40               	moviw [0]fsr1
 11182  0E7A  00D1               	movwf	?_getResponseBuffer
 11183  0E7B  3F41               	moviw [1]fsr1
 11184  0E7C  00D2               	movwf	?_getResponseBuffer+1
 11185                           
 11186                           ;ModbusMaster.c: 171: }
 11187  0E7D  0008               	return
 11188  0E7E                     l3749:	
 11189                           
 11190                           ;ModbusMaster.c: 172: else
 11191                           ;ModbusMaster.c: 173: {
 11192                           ;ModbusMaster.c: 174: return 0xFFFF;
 11193  0E7E  30FF               	movlw	255
 11194  0E7F  00D1               	movwf	?_getResponseBuffer
 11195  0E80  30FF               	movlw	255
 11196  0E81  00D2               	movwf	?_getResponseBuffer+1
 11197  0E82  0008               	return
 11198  0E83                     __end_of_getResponseBuffer:	
 11199                           
 11200                           	psect	text45
 11201  0BD9                     __ptext45:	
 11202 ;; *************** function _LedONStatusBusy *****************
 11203 ;; Defined at:
 11204 ;;		line 12 in file "LED_Ctrl.c"
 11205 ;; Parameters:    Size  Location     Type
 11206 ;;		None
 11207 ;; Auto vars:     Size  Location     Type
 11208 ;;		None
 11209 ;; Return value:  Size  Location     Type
 11210 ;;                  1    wreg      unsigned char 
 11211 ;; Registers used:
 11212 ;;		wreg
 11213 ;; Tracked objects:
 11214 ;;		On entry : 0/0
 11215 ;;		On exit  : 0/0
 11216 ;;		Unchanged: 0/0
 11217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11218 ;;      Params:         0       0       0       0       0       0       0       0
 11219 ;;      Locals:         0       0       0       0       0       0       0       0
 11220 ;;      Temps:          0       0       0       0       0       0       0       0
 11221 ;;      Totals:         0       0       0       0       0       0       0       0
 11222 ;;Total ram usage:        0 bytes
 11223 ;; Hardware stack levels used:    1
 11224 ;; Hardware stack levels required when called:    5
 11225 ;; This function calls:
 11226 ;;		Nothing
 11227 ;; This function is called by:
 11228 ;;		_main
 11229 ;; This function uses a non-reentrant model
 11230 ;;
 11231                           
 11232                           
 11233                           ;psect for function _LedONStatusBusy
 11234  0BD9                     _LedONStatusBusy:	
 11235                           
 11236                           ;LED_Ctrl.c: 14: return Led_ON;
 11237                           
 11238                           ;incstack = 0
 11239                           ; Regs used in _LedONStatusBusy: [wreg]
 11240  0BD9  0020               	movlb	0	; select bank0
 11241  0BDA  0846               	movf	_Led_ON,w
 11242  0BDB  0008               	return
 11243  0BDC                     __end_of_LedONStatusBusy:	
 11244                           
 11245                           	psect	text46
 11246  0F7F                     __ptext46:	
 11247 ;; *************** function _EPC_StateMachineControlLoop *****************
 11248 ;; Defined at:
 11249 ;;		line 178 in file "main.c"
 11250 ;; Parameters:    Size  Location     Type
 11251 ;;		None
 11252 ;; Auto vars:     Size  Location     Type
 11253 ;;		None
 11254 ;; Return value:  Size  Location     Type
 11255 ;;                  1    wreg      void 
 11256 ;; Registers used:
 11257 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11258 ;; Tracked objects:
 11259 ;;		On entry : 0/0
 11260 ;;		On exit  : 0/0
 11261 ;;		Unchanged: 0/0
 11262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11263 ;;      Params:         0       0       0       0       0       0       0       0
 11264 ;;      Locals:         0       0       0       0       0       0       0       0
 11265 ;;      Temps:          0       2       0       0       0       0       0       0
 11266 ;;      Totals:         0       2       0       0       0       0       0       0
 11267 ;;Total ram usage:        2 bytes
 11268 ;; Hardware stack levels used:    1
 11269 ;; Hardware stack levels required when called:    7
 11270 ;; This function calls:
 11271 ;;		_EUSART_Write
 11272 ;;		_LedONStartConfig
 11273 ;;		_NutRunCycleReset
 11274 ;; This function is called by:
 11275 ;;		_main
 11276 ;; This function uses a non-reentrant model
 11277 ;;
 11278                           
 11279                           
 11280                           ;psect for function _EPC_StateMachineControlLoop
 11281  0F7F                     _EPC_StateMachineControlLoop:	
 11282                           
 11283                           ;main.c: 181: if((NutRunstate == 1) || (NutRunstate == 2))
 11284                           
 11285                           ;incstack = 0
 11286                           ; Regs used in _EPC_StateMachineControlLoop: [wreg-fsr0h+status,2+status,0+pclath+cstack
      +                          ]
 11287  0F7F  0020               	movlb	0	; select bank0
 11288  0F80  034B               	decf	_NutRunstate,w
 11289  0F81  1903               	btfsc	3,2
 11290  0F82  2F87               	goto	l3851
 11291  0F83  3002               	movlw	2
 11292  0F84  064B               	xorwf	_NutRunstate,w
 11293  0F85  1D03               	btfss	3,2
 11294  0F86  2F9F               	goto	l3863
 11295  0F87                     l3851:	
 11296                           
 11297                           ;main.c: 182: {
 11298                           ;main.c: 184: if((EncEdgeGotFlag == 0) && (EncEdgeTimeInterval > 2000000))
 11299  0F87  084D               	movf	_EncEdgeGotFlag,w
 11300  0F88  1D03               	btfss	3,2
 11301  0F89  2F9F               	goto	l3863
 11302  0F8A  0827               	movf	_EncEdgeTimeInterval+3,w
 11303  0F8B  1D03               	btfss	3,2
 11304  0F8C  2F95               	goto	l3855
 11305  0F8D  3081               	movlw	129
 11306  0F8E  0224               	subwf	_EncEdgeTimeInterval,w
 11307  0F8F  3084               	movlw	132
 11308  0F90  3B25               	subwfb	_EncEdgeTimeInterval+1,w
 11309  0F91  301E               	movlw	30
 11310  0F92  3B26               	subwfb	_EncEdgeTimeInterval+2,w
 11311  0F93  1C03               	btfss	3,0
 11312  0F94  2F9F               	goto	l3863
 11313  0F95                     l3855:	
 11314                           
 11315                           ;main.c: 185: {
 11316                           ;main.c: 186: NutRunstate= 0;
 11317  0F95  01CB               	clrf	_NutRunstate
 11318                           
 11319                           ;main.c: 187: NutRunCycleReset();
 11320  0F96  318D  259C  318F   	fcall	_NutRunCycleReset
 11321                           
 11322                           ;main.c: 188: EUSART_Write('1');
 11323  0F99  3031               	movlw	49
 11324  0F9A  318C  2423  318F   	fcall	_EUSART_Write
 11325                           
 11326                           ;main.c: 189: do { LATCbits.LATC1 = 0; } while(0);
 11327  0F9D  0022               	movlb	2	; select bank2
 11328  0F9E  108E               	bcf	14,1	;volatile
 11329  0F9F                     l3863:	
 11330                           
 11331                           ;main.c: 191: }
 11332                           ;main.c: 192: }
 11333                           ;main.c: 194: if(ShutdownDetected == 1)
 11334  0F9F  0020               	movlb	0	; select bank0
 11335  0FA0  034C               	decf	_ShutdownDetected,w
 11336  0FA1  1D03               	btfss	3,2
 11337  0FA2  2FB3               	goto	l3871
 11338                           
 11339                           ;main.c: 195: {
 11340                           ;main.c: 197: ShutdownDetected=0;
 11341  0FA3  01CC               	clrf	_ShutdownDetected
 11342                           
 11343                           ;main.c: 198: do { LATCbits.LATC1 = 0; } while(0);
 11344  0FA4  0022               	movlb	2	; select bank2
 11345  0FA5  108E               	bcf	14,1	;volatile
 11346                           
 11347                           ;main.c: 199: LedONStartConfig(0, 2, 15);
 11348  0FA6  3002               	movlw	2
 11349  0FA7  0020               	movlb	0	; select bank0
 11350  0FA8  00DE               	movwf	??_EPC_StateMachineControlLoop
 11351  0FA9  085E               	movf	??_EPC_StateMachineControlLoop,w
 11352  0FAA  00D9               	movwf	LedONStartConfig@LedONDurationSec
 11353  0FAB  300F               	movlw	15
 11354  0FAC  00DF               	movwf	??_EPC_StateMachineControlLoop+1
 11355  0FAD  085F               	movf	??_EPC_StateMachineControlLoop+1,w
 11356  0FAE  00DA               	movwf	LedONStartConfig@LedONNumBlink
 11357  0FAF  3000               	movlw	0
 11358  0FB0  3187  271F  318F   	fcall	_LedONStartConfig
 11359  0FB3                     l3871:	
 11360                           
 11361                           ;main.c: 230: }
 11362                           ;main.c: 232: if(EncEdgeGotFlag==1)
 11363  0FB3  0020               	movlb	0	; select bank0
 11364  0FB4  034D               	decf	_EncEdgeGotFlag,w
 11365  0FB5  1D03               	btfss	3,2
 11366  0FB6  0008               	return
 11367                           
 11368                           ;main.c: 233: {
 11369                           ;main.c: 234: EncEdgeGotFlag=0;
 11370  0FB7  01CD               	clrf	_EncEdgeGotFlag
 11371  0FB8  0008               	return
 11372  0FB9                     __end_of_EPC_StateMachineControlLoop:	
 11373                           
 11374                           	psect	text47
 11375  0D9C                     __ptext47:	
 11376 ;; *************** function _NutRunCycleReset *****************
 11377 ;; Defined at:
 11378 ;;		line 511 in file "main.c"
 11379 ;; Parameters:    Size  Location     Type
 11380 ;;		None
 11381 ;; Auto vars:     Size  Location     Type
 11382 ;;		None
 11383 ;; Return value:  Size  Location     Type
 11384 ;;                  1    wreg      void 
 11385 ;; Registers used:
 11386 ;;		wreg, status,2
 11387 ;; Tracked objects:
 11388 ;;		On entry : 0/0
 11389 ;;		On exit  : 0/0
 11390 ;;		Unchanged: 0/0
 11391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11392 ;;      Params:         0       0       0       0       0       0       0       0
 11393 ;;      Locals:         0       0       0       0       0       0       0       0
 11394 ;;      Temps:          0       0       0       0       0       0       0       0
 11395 ;;      Totals:         0       0       0       0       0       0       0       0
 11396 ;;Total ram usage:        0 bytes
 11397 ;; Hardware stack levels used:    1
 11398 ;; Hardware stack levels required when called:    5
 11399 ;; This function calls:
 11400 ;;		Nothing
 11401 ;; This function is called by:
 11402 ;;		_EPC_StateMachineControlLoop
 11403 ;;		_NutRunCycleStart
 11404 ;; This function uses a non-reentrant model
 11405 ;;
 11406                           
 11407                           
 11408                           ;psect for function _NutRunCycleReset
 11409  0D9C                     _NutRunCycleReset:	
 11410                           
 11411                           ;main.c: 513: EncEdgeMinTimeInterval= 0xEFFFFFFF;
 11412                           
 11413                           ;incstack = 0
 11414                           ; Regs used in _NutRunCycleReset: [wreg+status,2]
 11415  0D9C  30EF               	movlw	239
 11416  0D9D  0020               	movlb	0	; select bank0
 11417  0D9E  00E9               	movwf	_EncEdgeMinTimeInterval+3
 11418  0D9F  30FF               	movlw	255
 11419  0DA0  00E8               	movwf	_EncEdgeMinTimeInterval+2
 11420  0DA1  30FF               	movlw	255
 11421  0DA2  00E7               	movwf	_EncEdgeMinTimeInterval+1
 11422  0DA3  30FF               	movlw	255
 11423  0DA4  00E6               	movwf	_EncEdgeMinTimeInterval
 11424                           
 11425                           ;main.c: 514: EncEdgeTimeInterval= 0x00000000;
 11426  0DA5  3000               	movlw	0
 11427  0DA6  00A7               	movwf	_EncEdgeTimeInterval+3
 11428  0DA7  3000               	movlw	0
 11429  0DA8  00A6               	movwf	_EncEdgeTimeInterval+2
 11430  0DA9  3000               	movlw	0
 11431  0DAA  00A5               	movwf	_EncEdgeTimeInterval+1
 11432  0DAB  3000               	movlw	0
 11433  0DAC  00A4               	movwf	_EncEdgeTimeInterval
 11434                           
 11435                           ;main.c: 516: EncoderPosition= 0;
 11436  0DAD  01BE               	clrf	_EncoderPosition
 11437  0DAE  01BF               	clrf	_EncoderPosition+1
 11438                           
 11439                           ;main.c: 519: NutRunLength = 0;
 11440  0DAF  0022               	movlb	2	; select bank2
 11441  0DB0  01B0               	clrf	_NutRunLength^(0+256)
 11442  0DB1  01B1               	clrf	(_NutRunLength+1)^(0+256)
 11443  0DB2  0008               	return
 11444  0DB3                     __end_of_NutRunCycleReset:	
 11445                           
 11446                           	psect	text48
 11447  071F                     __ptext48:	
 11448 ;; *************** function _LedONStartConfig *****************
 11449 ;; Defined at:
 11450 ;;		line 18 in file "LED_Ctrl.c"
 11451 ;; Parameters:    Size  Location     Type
 11452 ;;  LEDcolor        1    wreg     unsigned char 
 11453 ;;  LedONDuratio    1    8[BANK0 ] unsigned char 
 11454 ;;  LedONNumBlin    1    9[BANK0 ] unsigned char 
 11455 ;; Auto vars:     Size  Location     Type
 11456 ;;  LEDcolor        1   12[BANK0 ] unsigned char 
 11457 ;; Return value:  Size  Location     Type
 11458 ;;                  1    wreg      unsigned char 
 11459 ;; Registers used:
 11460 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11461 ;; Tracked objects:
 11462 ;;		On entry : 0/0
 11463 ;;		On exit  : 0/0
 11464 ;;		Unchanged: 0/0
 11465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11466 ;;      Params:         0       2       0       0       0       0       0       0
 11467 ;;      Locals:         0       1       0       0       0       0       0       0
 11468 ;;      Temps:          0       2       0       0       0       0       0       0
 11469 ;;      Totals:         0       5       0       0       0       0       0       0
 11470 ;;Total ram usage:        5 bytes
 11471 ;; Hardware stack levels used:    1
 11472 ;; Hardware stack levels required when called:    6
 11473 ;; This function calls:
 11474 ;;		___lwdiv
 11475 ;;		___wmul
 11476 ;; This function is called by:
 11477 ;;		_main
 11478 ;;		_EPC_StateMachineControlLoop
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           
 11483                           ;psect for function _LedONStartConfig
 11484  071F                     _LedONStartConfig:	
 11485                           
 11486                           ;incstack = 0
 11487                           ; Regs used in _LedONStartConfig: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11488                           ;LedONStartConfig@LEDcolor stored from wreg
 11489  071F  0020               	movlb	0	; select bank0
 11490  0720  00DD               	movwf	LedONStartConfig@LEDcolor
 11491                           
 11492                           ;LED_Ctrl.c: 20: if(Led_ON!=1 && (LedONDurationSec!=0)&& (LedONDurationSec <= 60))
 11493  0721  0346               	decf	_Led_ON,w
 11494  0722  1903               	btfsc	3,2
 11495  0723  0008               	return
 11496  0724  0859               	movf	LedONStartConfig@LedONDurationSec,w
 11497  0725  1903               	btfsc	3,2
 11498  0726  0008               	return
 11499  0727  303D               	movlw	61
 11500  0728  0259               	subwf	LedONStartConfig@LedONDurationSec,w
 11501  0729  1803               	skipnc
 11502  072A  0008               	return
 11503                           
 11504                           ;LED_Ctrl.c: 21: {
 11505                           ;LED_Ctrl.c: 22: Led_ON=1;
 11506  072B  01C6               	clrf	_Led_ON
 11507  072C  0AC6               	incf	_Led_ON,f
 11508                           
 11509                           ;LED_Ctrl.c: 23: LED_Color=LEDcolor;
 11510  072D  085D               	movf	LedONStartConfig@LEDcolor,w
 11511  072E  00DB               	movwf	??_LedONStartConfig
 11512  072F  085B               	movf	??_LedONStartConfig,w
 11513  0730  00EA               	movwf	_LED_Color
 11514                           
 11515                           ;LED_Ctrl.c: 25: switch(LED_Color)
 11516  0731  2F3B               	goto	l3707
 11517  0732                     l1144:	
 11518                           ;LED_Ctrl.c: 26: {
 11519                           ;LED_Ctrl.c: 27: case 0 : do { LATCbits.LATC0 = 1; } while(0);
 11520                           
 11521  0732  0022               	movlb	2	; select bank2
 11522  0733  140E               	bsf	14,0	;volatile
 11523                           
 11524                           ;LED_Ctrl.c: 28: break;
 11525  0734  2F47               	goto	l3709
 11526  0735                     l1148:	
 11527                           ;LED_Ctrl.c: 29: case 1 : do { LATCbits.LATC1 = 1; } while(0);
 11528                           
 11529  0735  0022               	movlb	2	; select bank2
 11530  0736  148E               	bsf	14,1	;volatile
 11531                           
 11532                           ;LED_Ctrl.c: 30: break;
 11533  0737  2F47               	goto	l3709
 11534  0738                     l1151:	
 11535                           ;LED_Ctrl.c: 31: case 2 : do { LATCbits.LATC2 = 1; } while(0);
 11536                           
 11537  0738  0022               	movlb	2	; select bank2
 11538  0739  150E               	bsf	14,2	;volatile
 11539                           
 11540                           ;LED_Ctrl.c: 34: }
 11541                           
 11542                           ;LED_Ctrl.c: 33: default : break;
 11543                           
 11544                           ;LED_Ctrl.c: 32: break;
 11545  073A  2F47               	goto	l3709
 11546  073B                     l3707:	
 11547  073B  0020               	movlb	0	; select bank0
 11548  073C  086A               	movf	_LED_Color,w
 11549                           
 11550                           ; Switch size 1, requested type "space"
 11551                           ; Number of cases is 3, Range of values is 0 to 2
 11552                           ; switch strategies available:
 11553                           ; Name         Instructions Cycles
 11554                           ; simple_byte           10     6 (average)
 11555                           ; direct_byte           12     6 (fixed)
 11556                           ; jumptable            260     6 (fixed)
 11557                           ;	Chosen strategy is simple_byte
 11558  073D  3A00               	xorlw	0	; case 0
 11559  073E  1903               	skipnz
 11560  073F  2F32               	goto	l1144
 11561  0740  3A01               	xorlw	1	; case 1
 11562  0741  1903               	skipnz
 11563  0742  2F35               	goto	l1148
 11564  0743  3A03               	xorlw	3	; case 2
 11565  0744  1903               	skipnz
 11566  0745  2F38               	goto	l1151
 11567  0746  2F47               	goto	l3709
 11568  0747                     l3709:	
 11569                           
 11570                           ;LED_Ctrl.c: 36: LED_msec_Cnt=0;
 11571  0747  0020               	movlb	0	; select bank0
 11572  0748  01AE               	clrf	_LED_msec_Cnt
 11573  0749  01AF               	clrf	_LED_msec_Cnt+1
 11574                           
 11575                           ;LED_Ctrl.c: 37: LedON_Duration_msec=((unsigned int)LedONDurationSec)*1000;
 11576  074A  0859               	movf	LedONStartConfig@LedONDurationSec,w
 11577  074B  00DB               	movwf	??_LedONStartConfig
 11578  074C  01DC               	clrf	??_LedONStartConfig+1
 11579  074D  085B               	movf	??_LedONStartConfig,w
 11580  074E  00D1               	movwf	___wmul@multiplier
 11581  074F  085C               	movf	??_LedONStartConfig+1,w
 11582  0750  00D2               	movwf	___wmul@multiplier+1
 11583  0751  30E8               	movlw	232
 11584  0752  00D3               	movwf	___wmul@multiplicand
 11585  0753  3003               	movlw	3
 11586  0754  00D4               	movwf	___wmul@multiplicand+1
 11587  0755  318E  2648  3187   	fcall	___wmul
 11588  0758  0020               	movlb	0	; select bank0
 11589  0759  0852               	movf	?___wmul+1,w
 11590  075A  00A9               	movwf	_LedON_Duration_msec+1
 11591  075B  0851               	movf	?___wmul,w
 11592  075C  00A8               	movwf	_LedON_Duration_msec
 11593                           
 11594                           ;LED_Ctrl.c: 38: if(LedONNumBlink > 1)
 11595  075D  3002               	movlw	2
 11596  075E  025A               	subwf	LedONStartConfig@LedONNumBlink,w
 11597  075F  1C03               	skipc
 11598  0760  2F78               	goto	l3717
 11599                           
 11600                           ;LED_Ctrl.c: 39: Blick_tickPointMsec=(LedON_Duration_msec/(((LedONNumBlink-1)*2)+1));
 11601  0761  085A               	movf	LedONStartConfig@LedONNumBlink,w
 11602  0762  00DB               	movwf	??_LedONStartConfig
 11603  0763  01DC               	clrf	??_LedONStartConfig+1
 11604  0764  35DB               	lslf	??_LedONStartConfig,f
 11605  0765  0DDC               	rlf	??_LedONStartConfig+1,f
 11606  0766  085B               	movf	??_LedONStartConfig,w
 11607  0767  3EFF               	addlw	255
 11608  0768  00D1               	movwf	___lwdiv@divisor
 11609  0769  30FF               	movlw	255
 11610  076A  3D5C               	addwfc	??_LedONStartConfig+1,w
 11611  076B  00D2               	movwf	___lwdiv@divisor+1
 11612  076C  0829               	movf	_LedON_Duration_msec+1,w
 11613  076D  00D4               	movwf	___lwdiv@dividend+1
 11614  076E  0828               	movf	_LedON_Duration_msec,w
 11615  076F  00D3               	movwf	___lwdiv@dividend
 11616  0770  318F  274A  3187   	fcall	___lwdiv
 11617  0773  0020               	movlb	0	; select bank0
 11618  0774  0852               	movf	?___lwdiv+1,w
 11619  0775  00AD               	movwf	_Blick_tickPointMsec+1
 11620  0776  0851               	movf	?___lwdiv,w
 11621  0777  2F7B               	goto	L14
 11622  0778                     l3717:	
 11623                           
 11624                           ;LED_Ctrl.c: 40: else
 11625                           ;LED_Ctrl.c: 41: Blick_tickPointMsec=LedON_Duration_msec;
 11626  0778  0829               	movf	_LedON_Duration_msec+1,w
 11627  0779  00AD               	movwf	_Blick_tickPointMsec+1
 11628  077A  0828               	movf	_LedON_Duration_msec,w
 11629  077B                     L14:	
 11630  077B  00AC               	movwf	_Blick_tickPointMsec
 11631                           
 11632                           ;LED_Ctrl.c: 43: Blick_tickPoint=Blick_tickPointMsec;
 11633  077C  082D               	movf	_Blick_tickPointMsec+1,w
 11634  077D  00AB               	movwf	_Blick_tickPoint+1
 11635  077E  082C               	movf	_Blick_tickPointMsec,w
 11636  077F  00AA               	movwf	_Blick_tickPoint
 11637                           
 11638                           ;LED_Ctrl.c: 46: else
 11639                           ;LED_Ctrl.c: 47: {
 11640                           ;LED_Ctrl.c: 48: return 0;
 11641                           ;	Return value of _LedONStartConfig is never used
 11642                           
 11643                           ;LED_Ctrl.c: 45: }
 11644                           
 11645                           ;LED_Ctrl.c: 44: return 1;
 11646                           ;	Return value of _LedONStartConfig is never used
 11647  0780  0008               	return
 11648  0781                     __end_of_LedONStartConfig:	
 11649                           
 11650                           	psect	text49
 11651  0E48                     __ptext49:	
 11652 ;; *************** function ___wmul *****************
 11653 ;; Defined at:
 11654 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 11655 ;; Parameters:    Size  Location     Type
 11656 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11657 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11658 ;; Auto vars:     Size  Location     Type
 11659 ;;  product         2    4[BANK0 ] unsigned int 
 11660 ;; Return value:  Size  Location     Type
 11661 ;;                  2    0[BANK0 ] unsigned int 
 11662 ;; Registers used:
 11663 ;;		wreg, status,2, status,0
 11664 ;; Tracked objects:
 11665 ;;		On entry : 0/0
 11666 ;;		On exit  : 0/0
 11667 ;;		Unchanged: 0/0
 11668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11669 ;;      Params:         0       4       0       0       0       0       0       0
 11670 ;;      Locals:         0       2       0       0       0       0       0       0
 11671 ;;      Temps:          0       0       0       0       0       0       0       0
 11672 ;;      Totals:         0       6       0       0       0       0       0       0
 11673 ;;Total ram usage:        6 bytes
 11674 ;; Hardware stack levels used:    1
 11675 ;; Hardware stack levels required when called:    5
 11676 ;; This function calls:
 11677 ;;		Nothing
 11678 ;; This function is called by:
 11679 ;;		_LedONStartConfig
 11680 ;; This function uses a non-reentrant model
 11681 ;;
 11682                           
 11683                           
 11684                           ;psect for function ___wmul
 11685  0E48                     ___wmul:	
 11686                           
 11687                           ;incstack = 0
 11688                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11689  0E48  0020               	movlb	0	; select bank0
 11690  0E49  01D5               	clrf	___wmul@product
 11691  0E4A  01D6               	clrf	___wmul@product+1
 11692  0E4B                     l3459:	
 11693  0E4B  1C51               	btfss	___wmul@multiplier,0
 11694  0E4C  2E51               	goto	l1269
 11695  0E4D  0853               	movf	___wmul@multiplicand,w
 11696  0E4E  07D5               	addwf	___wmul@product,f
 11697  0E4F  0854               	movf	___wmul@multiplicand+1,w
 11698  0E50  3DD6               	addwfc	___wmul@product+1,f
 11699  0E51                     l1269:	
 11700  0E51  3001               	movlw	1
 11701  0E52                     u1905:	
 11702  0E52  35D3               	lslf	___wmul@multiplicand,f
 11703  0E53  0DD4               	rlf	___wmul@multiplicand+1,f
 11704  0E54  0B89               	decfsz	9,f
 11705  0E55  2E52               	goto	u1905
 11706  0E56  3001               	movlw	1
 11707  0E57                     u1915:	
 11708  0E57  36D2               	lsrf	___wmul@multiplier+1,f
 11709  0E58  0CD1               	rrf	___wmul@multiplier,f
 11710  0E59  0B89               	decfsz	9,f
 11711  0E5A  2E57               	goto	u1915
 11712  0E5B  0851               	movf	___wmul@multiplier,w
 11713  0E5C  0452               	iorwf	___wmul@multiplier+1,w
 11714  0E5D  1D03               	btfss	3,2
 11715  0E5E  2E4B               	goto	l3459
 11716  0E5F  0856               	movf	___wmul@product+1,w
 11717  0E60  00D2               	movwf	?___wmul+1
 11718  0E61  0855               	movf	___wmul@product,w
 11719  0E62  00D1               	movwf	?___wmul
 11720  0E63  0008               	return
 11721  0E64                     __end_of___wmul:	
 11722                           
 11723                           	psect	text50
 11724  0F4A                     __ptext50:	
 11725 ;; *************** function ___lwdiv *****************
 11726 ;; Defined at:
 11727 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 11728 ;; Parameters:    Size  Location     Type
 11729 ;;  divisor         2    0[BANK0 ] unsigned int 
 11730 ;;  dividend        2    2[BANK0 ] unsigned int 
 11731 ;; Auto vars:     Size  Location     Type
 11732 ;;  quotient        2    5[BANK0 ] unsigned int 
 11733 ;;  counter         1    7[BANK0 ] unsigned char 
 11734 ;; Return value:  Size  Location     Type
 11735 ;;                  2    0[BANK0 ] unsigned int 
 11736 ;; Registers used:
 11737 ;;		wreg, status,2, status,0
 11738 ;; Tracked objects:
 11739 ;;		On entry : 0/0
 11740 ;;		On exit  : 0/0
 11741 ;;		Unchanged: 0/0
 11742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11743 ;;      Params:         0       4       0       0       0       0       0       0
 11744 ;;      Locals:         0       3       0       0       0       0       0       0
 11745 ;;      Temps:          0       1       0       0       0       0       0       0
 11746 ;;      Totals:         0       8       0       0       0       0       0       0
 11747 ;;Total ram usage:        8 bytes
 11748 ;; Hardware stack levels used:    1
 11749 ;; Hardware stack levels required when called:    5
 11750 ;; This function calls:
 11751 ;;		Nothing
 11752 ;; This function is called by:
 11753 ;;		_LedONStartConfig
 11754 ;; This function uses a non-reentrant model
 11755 ;;
 11756                           
 11757                           
 11758                           ;psect for function ___lwdiv
 11759  0F4A                     ___lwdiv:	
 11760                           
 11761                           ;incstack = 0
 11762                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11763  0F4A  0020               	movlb	0	; select bank0
 11764  0F4B  01D6               	clrf	___lwdiv@quotient
 11765  0F4C  01D7               	clrf	___lwdiv@quotient+1
 11766  0F4D  0851               	movf	___lwdiv@divisor,w
 11767  0F4E  0452               	iorwf	___lwdiv@divisor+1,w
 11768  0F4F  1903               	btfsc	3,2
 11769  0F50  2F7A               	goto	l3493
 11770  0F51  01D8               	clrf	___lwdiv@counter
 11771  0F52  0AD8               	incf	___lwdiv@counter,f
 11772  0F53                     l3481:	
 11773  0F53  1BD2               	btfsc	___lwdiv@divisor+1,7
 11774  0F54  2F5F               	goto	l3483
 11775  0F55  3001               	movlw	1
 11776  0F56                     u1945:	
 11777  0F56  35D1               	lslf	___lwdiv@divisor,f
 11778  0F57  0DD2               	rlf	___lwdiv@divisor+1,f
 11779  0F58  0B89               	decfsz	9,f
 11780  0F59  2F56               	goto	u1945
 11781  0F5A  3001               	movlw	1
 11782  0F5B  00D5               	movwf	??___lwdiv
 11783  0F5C  0855               	movf	??___lwdiv,w
 11784  0F5D  07D8               	addwf	___lwdiv@counter,f
 11785  0F5E  2F53               	goto	l3481
 11786  0F5F                     l3483:	
 11787  0F5F  3001               	movlw	1
 11788  0F60                     u1965:	
 11789  0F60  35D6               	lslf	___lwdiv@quotient,f
 11790  0F61  0DD7               	rlf	___lwdiv@quotient+1,f
 11791  0F62  0B89               	decfsz	9,f
 11792  0F63  2F60               	goto	u1965
 11793  0F64  0852               	movf	___lwdiv@divisor+1,w
 11794  0F65  0254               	subwf	___lwdiv@dividend+1,w
 11795  0F66  1D03               	skipz
 11796  0F67  2F6A               	goto	u1975
 11797  0F68  0851               	movf	___lwdiv@divisor,w
 11798  0F69  0253               	subwf	___lwdiv@dividend,w
 11799  0F6A                     u1975:	
 11800  0F6A  1C03               	skipc
 11801  0F6B  2F71               	goto	l3489
 11802  0F6C  0851               	movf	___lwdiv@divisor,w
 11803  0F6D  02D3               	subwf	___lwdiv@dividend,f
 11804  0F6E  0852               	movf	___lwdiv@divisor+1,w
 11805  0F6F  3BD4               	subwfb	___lwdiv@dividend+1,f
 11806  0F70  1456               	bsf	___lwdiv@quotient,0
 11807  0F71                     l3489:	
 11808  0F71  3001               	movlw	1
 11809  0F72                     u1985:	
 11810  0F72  36D2               	lsrf	___lwdiv@divisor+1,f
 11811  0F73  0CD1               	rrf	___lwdiv@divisor,f
 11812  0F74  0B89               	decfsz	9,f
 11813  0F75  2F72               	goto	u1985
 11814  0F76  3001               	movlw	1
 11815  0F77  02D8               	subwf	___lwdiv@counter,f
 11816  0F78  1D03               	btfss	3,2
 11817  0F79  2F5F               	goto	l3483
 11818  0F7A                     l3493:	
 11819  0F7A  0857               	movf	___lwdiv@quotient+1,w
 11820  0F7B  00D2               	movwf	?___lwdiv+1
 11821  0F7C  0856               	movf	___lwdiv@quotient,w
 11822  0F7D  00D1               	movwf	?___lwdiv
 11823  0F7E  0008               	return
 11824  0F7F                     __end_of___lwdiv:	
 11825                           
 11826                           	psect	text51
 11827  0C23                     __ptext51:	
 11828 ;; *************** function _EUSART_Write *****************
 11829 ;; Defined at:
 11830 ;;		line 96 in file "mcc_generated_files/eusart.c"
 11831 ;; Parameters:    Size  Location     Type
 11832 ;;  txData          1    wreg     unsigned char 
 11833 ;; Auto vars:     Size  Location     Type
 11834 ;;  txData          1    0[BANK0 ] unsigned char 
 11835 ;; Return value:  Size  Location     Type
 11836 ;;                  1    wreg      void 
 11837 ;; Registers used:
 11838 ;;		wreg
 11839 ;; Tracked objects:
 11840 ;;		On entry : 0/0
 11841 ;;		On exit  : 0/0
 11842 ;;		Unchanged: 0/0
 11843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11844 ;;      Params:         0       0       0       0       0       0       0       0
 11845 ;;      Locals:         0       1       0       0       0       0       0       0
 11846 ;;      Temps:          0       0       0       0       0       0       0       0
 11847 ;;      Totals:         0       1       0       0       0       0       0       0
 11848 ;;Total ram usage:        1 bytes
 11849 ;; Hardware stack levels used:    1
 11850 ;; Hardware stack levels required when called:    5
 11851 ;; This function calls:
 11852 ;;		Nothing
 11853 ;; This function is called by:
 11854 ;;		_EPC_StateMachineControlLoop
 11855 ;;		_ModbusMasterTransaction
 11856 ;;		_OnEncPulseEdgeEvent
 11857 ;; This function uses a non-reentrant model
 11858 ;;
 11859                           
 11860                           
 11861                           ;psect for function _EUSART_Write
 11862  0C23                     _EUSART_Write:	
 11863                           
 11864                           ;incstack = 0
 11865                           ; Regs used in _EUSART_Write: [wreg]
 11866                           ;EUSART_Write@txData stored from wreg
 11867  0C23  0020               	movlb	0	; select bank0
 11868  0C24  00D1               	movwf	EUSART_Write@txData
 11869  0C25                     l159:	
 11870                           ;eusart.c: 99: {
 11871                           
 11872                           ;eusart.c: 98: while(0 == PIR1bits.TXIF)
 11873                           
 11874  0C25  1E11               	btfss	17,4	;volatile
 11875  0C26  2C25               	goto	l159
 11876                           
 11877                           ;eusart.c: 100: }
 11878                           ;eusart.c: 102: TX1REG = txData;
 11879  0C27  0851               	movf	EUSART_Write@txData,w
 11880  0C28  0023               	movlb	3	; select bank3
 11881  0C29  009A               	movwf	26	;volatile
 11882  0C2A  0008               	return
 11883  0C2B                     __end_of_EUSART_Write:	
 11884                           
 11885                           	psect	intentry
 11886  0004                     __pintentry:	
 11887 ;; *************** function _INTERRUPT_InterruptManager *****************
 11888 ;; Defined at:
 11889 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 11890 ;; Parameters:    Size  Location     Type
 11891 ;;		None
 11892 ;; Auto vars:     Size  Location     Type
 11893 ;;		None
 11894 ;; Return value:  Size  Location     Type
 11895 ;;                  1    wreg      void 
 11896 ;; Registers used:
 11897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11898 ;; Tracked objects:
 11899 ;;		On entry : 0/0
 11900 ;;		On exit  : 0/0
 11901 ;;		Unchanged: 0/0
 11902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11903 ;;      Params:         0       0       0       0       0       0       0       0
 11904 ;;      Locals:         0       0       0       0       0       0       0       0
 11905 ;;      Temps:          1       0       0       0       0       0       0       0
 11906 ;;      Totals:         1       0       0       0       0       0       0       0
 11907 ;;Total ram usage:        1 bytes
 11908 ;; Hardware stack levels used:    1
 11909 ;; Hardware stack levels required when called:    4
 11910 ;; This function calls:
 11911 ;;		_CCP1_CaptureISR
 11912 ;;		_INT_ISR
 11913 ;;		_PIN_MANAGER_IOC
 11914 ;;		_TMR0_ISR
 11915 ;;		_TMR3_ISR
 11916 ;;		_TMR5_ISR
 11917 ;; This function is called by:
 11918 ;;		Interrupt level 1
 11919 ;; This function uses a non-reentrant model
 11920 ;;
 11921                           
 11922  0004                     _INTERRUPT_InterruptManager:	
 11923                           
 11924                           ;incstack = 0
 11925  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11926                           
 11927                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11928  0005  3180               	pagesel	$
 11929  0006  0020               	movlb	0	; select bank0
 11930  0007  087F               	movf	127,w
 11931  0008  00F7               	movwf	??_INTERRUPT_InterruptManager
 11932                           
 11933                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 11934  0009  0021               	movlb	1	; select bank1
 11935  000A  1E90               	btfss	16,5	;volatile
 11936  000B  2813               	goto	i1l430
 11937  000C  0020               	movlb	0	; select bank0
 11938  000D  1E90               	btfss	16,5	;volatile
 11939  000E  2813               	goto	i1l430
 11940                           
 11941                           ;interrupt_manager.c: 55: {
 11942                           ;interrupt_manager.c: 56: TMR0_ISR();
 11943  000F  318C  2401  3180   	fcall	_TMR0_ISR
 11944                           
 11945                           ;interrupt_manager.c: 57: }
 11946  0012  2849               	goto	i1l442
 11947  0013                     i1l430:	
 11948                           
 11949                           ;interrupt_manager.c: 58: else if(PIE0bits.INTE == 1 && PIR0bits.INTF == 1)
 11950  0013  0021               	movlb	1	; select bank1
 11951  0014  1C10               	btfss	16,0	;volatile
 11952  0015  281D               	goto	i1l432
 11953  0016  0020               	movlb	0	; select bank0
 11954  0017  1C10               	btfss	16,0	;volatile
 11955  0018  281D               	goto	i1l432
 11956                           
 11957                           ;interrupt_manager.c: 59: {
 11958                           ;interrupt_manager.c: 60: INT_ISR();
 11959  0019  318B  23FC  3180   	fcall	_INT_ISR
 11960                           
 11961                           ;interrupt_manager.c: 61: }
 11962  001C  2849               	goto	i1l442
 11963  001D                     i1l432:	
 11964                           
 11965                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE4bits.TMR5IE == 1 && PIR4bi
      +                          ts.TMR5IF == 1)
 11966  001D  1F0B               	btfss	11,6	;volatile
 11967  001E  2829               	goto	i1l434
 11968  001F  0021               	movlb	1	; select bank1
 11969  0020  1E14               	btfss	20,4	;volatile
 11970  0021  2829               	goto	i1l434
 11971  0022  0020               	movlb	0	; select bank0
 11972  0023  1E14               	btfss	20,4	;volatile
 11973  0024  2829               	goto	i1l434
 11974                           
 11975                           ;interrupt_manager.c: 63: {
 11976                           ;interrupt_manager.c: 64: TMR5_ISR();
 11977  0025  318D  2573  3180   	fcall	_TMR5_ISR
 11978                           
 11979                           ;interrupt_manager.c: 65: }
 11980  0028  2849               	goto	i1l442
 11981  0029                     i1l434:	
 11982                           
 11983                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE3bits.TMR3IE == 1 && PIR3bi
      +                          ts.TMR3IF == 1)
 11984  0029  1F0B               	btfss	11,6	;volatile
 11985  002A  2835               	goto	i1l436
 11986  002B  0021               	movlb	1	; select bank1
 11987  002C  1E13               	btfss	19,4	;volatile
 11988  002D  2835               	goto	i1l436
 11989  002E  0020               	movlb	0	; select bank0
 11990  002F  1E13               	btfss	19,4	;volatile
 11991  0030  2835               	goto	i1l436
 11992                           
 11993                           ;interrupt_manager.c: 67: {
 11994                           ;interrupt_manager.c: 68: TMR3_ISR();
 11995  0031  318D  255F  3180   	fcall	_TMR3_ISR
 11996                           
 11997                           ;interrupt_manager.c: 69: }
 11998  0034  2849               	goto	i1l442
 11999  0035                     i1l436:	
 12000                           
 12001                           ;interrupt_manager.c: 70: else if(INTCONbits.PEIE == 1 && PIE4bits.CCP1IE == 1 && PIR4bi
      +                          ts.CCP1IF == 1)
 12002  0035  1F0B               	btfss	11,6	;volatile
 12003  0036  2841               	goto	i1l438
 12004  0037  0021               	movlb	1	; select bank1
 12005  0038  1C14               	btfss	20,0	;volatile
 12006  0039  2841               	goto	i1l438
 12007  003A  0020               	movlb	0	; select bank0
 12008  003B  1C14               	btfss	20,0	;volatile
 12009  003C  2841               	goto	i1l438
 12010                           
 12011                           ;interrupt_manager.c: 71: {
 12012                           ;interrupt_manager.c: 72: CCP1_CaptureISR();
 12013  003D  318D  254D  3180   	fcall	_CCP1_CaptureISR
 12014                           
 12015                           ;interrupt_manager.c: 73: }
 12016  0040  2849               	goto	i1l442
 12017  0041                     i1l438:	
 12018                           
 12019                           ;interrupt_manager.c: 74: else if(PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1)
 12020  0041  0021               	movlb	1	; select bank1
 12021  0042  1E10               	btfss	16,4	;volatile
 12022  0043  2849               	goto	i1l442
 12023  0044  0020               	movlb	0	; select bank0
 12024  0045  1E10               	btfss	16,4	;volatile
 12025  0046  2849               	goto	i1l442
 12026                           
 12027                           ;interrupt_manager.c: 75: {
 12028                           ;interrupt_manager.c: 76: PIN_MANAGER_IOC();
 12029  0047  318C  24AD         	fcall	_PIN_MANAGER_IOC
 12030  0049                     i1l442:	
 12031                           ;interrupt_manager.c: 78: else
 12032                           ;interrupt_manager.c: 79: {
 12033                           
 12034                           ;interrupt_manager.c: 77: }
 12035                           
 12036  0049  0877               	movf	??_INTERRUPT_InterruptManager,w
 12037  004A  0020               	movlb	0	; select bank0
 12038  004B  00FF               	movwf	127
 12039  004C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12040  004D  0009               	retfie
 12041  004E                     __end_of_INTERRUPT_InterruptManager:	
 12042                           
 12043                           	psect	text53
 12044  0D73                     __ptext53:	
 12045 ;; *************** function _TMR5_ISR *****************
 12046 ;; Defined at:
 12047 ;;		line 156 in file "mcc_generated_files/tmr5.c"
 12048 ;; Parameters:    Size  Location     Type
 12049 ;;		None
 12050 ;; Auto vars:     Size  Location     Type
 12051 ;;		None
 12052 ;; Return value:  Size  Location     Type
 12053 ;;                  1    wreg      void 
 12054 ;; Registers used:
 12055 ;;		wreg, status,2, status,0, pclath, cstack
 12056 ;; Tracked objects:
 12057 ;;		On entry : 0/0
 12058 ;;		On exit  : 0/0
 12059 ;;		Unchanged: 0/0
 12060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12061 ;;      Params:         0       0       0       0       0       0       0       0
 12062 ;;      Locals:         0       0       0       0       0       0       0       0
 12063 ;;      Temps:          0       0       0       0       0       0       0       0
 12064 ;;      Totals:         0       0       0       0       0       0       0       0
 12065 ;;Total ram usage:        0 bytes
 12066 ;; Hardware stack levels used:    1
 12067 ;; Hardware stack levels required when called:    2
 12068 ;; This function calls:
 12069 ;;		Absolute function
 12070 ;;		_TMR5_DefaultInterruptHandler
 12071 ;; This function is called by:
 12072 ;;		_INTERRUPT_InterruptManager
 12073 ;; This function uses a non-reentrant model
 12074 ;;
 12075                           
 12076                           
 12077                           ;psect for function _TMR5_ISR
 12078  0D73                     _TMR5_ISR:	
 12079                           
 12080                           ;tmr5.c: 160: PIR4bits.TMR5IF = 0;
 12081                           
 12082                           ;incstack = 0
 12083                           ; Regs used in _TMR5_ISR: [wreg+status,2+status,0+pclath+cstack]
 12084  0D73  0020               	movlb	0	; select bank0
 12085  0D74  1214               	bcf	20,4	;volatile
 12086                           
 12087                           ;tmr5.c: 162: TMR5H = (timer5ReloadVal >> 8);
 12088  0D75  086E               	movf	_timer5ReloadVal+1,w	;volatile
 12089  0D76  0028               	movlb	8	; select bank8
 12090  0D77  0099               	movwf	25	;volatile
 12091                           
 12092                           ;tmr5.c: 163: TMR5L = timer5ReloadVal;
 12093  0D78  0020               	movlb	0	; select bank0
 12094  0D79  086D               	movf	_timer5ReloadVal,w	;volatile
 12095  0D7A  0028               	movlb	8	; select bank8
 12096  0D7B  0098               	movwf	24	;volatile
 12097                           
 12098                           ;tmr5.c: 165: if(TMR5_InterruptHandler)
 12099  0D7C  0022               	movlb	2	; select bank2
 12100  0D7D  083E               	movf	_TMR5_InterruptHandler^(0+256),w
 12101  0D7E  043F               	iorwf	(_TMR5_InterruptHandler+1)^(0+256),w
 12102  0D7F  1903               	btfsc	3,2
 12103  0D80  0008               	return
 12104                           
 12105                           ;tmr5.c: 166: {
 12106                           ;tmr5.c: 167: TMR5_InterruptHandler();
 12107  0D81  083F               	movf	(_TMR5_InterruptHandler+1)^(0+256),w
 12108  0D82  008A               	movwf	10
 12109  0D83  083E               	movf	_TMR5_InterruptHandler^(0+256),w
 12110  0D84  000A               	callw
 12111  0D85  318D               	pagesel	$
 12112  0D86  0008               	return
 12113  0D87                     __end_of_TMR5_ISR:	
 12114                           
 12115                           	psect	text54
 12116  0BD6                     __ptext54:	
 12117 ;; *************** function _TMR5_DefaultInterruptHandler *****************
 12118 ;; Defined at:
 12119 ;;		line 176 in file "mcc_generated_files/tmr5.c"
 12120 ;; Parameters:    Size  Location     Type
 12121 ;;		None
 12122 ;; Auto vars:     Size  Location     Type
 12123 ;;		None
 12124 ;; Return value:  Size  Location     Type
 12125 ;;                  1    wreg      void 
 12126 ;; Registers used:
 12127 ;;		status,2, status,0, pclath, cstack
 12128 ;; Tracked objects:
 12129 ;;		On entry : 0/0
 12130 ;;		On exit  : 0/0
 12131 ;;		Unchanged: 0/0
 12132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12133 ;;      Params:         0       0       0       0       0       0       0       0
 12134 ;;      Locals:         0       0       0       0       0       0       0       0
 12135 ;;      Temps:          0       0       0       0       0       0       0       0
 12136 ;;      Totals:         0       0       0       0       0       0       0       0
 12137 ;;Total ram usage:        0 bytes
 12138 ;; Hardware stack levels used:    1
 12139 ;; Hardware stack levels required when called:    1
 12140 ;; This function calls:
 12141 ;;		_Timer5_Overflow
 12142 ;; This function is called by:
 12143 ;;		_TMR5_Initialize
 12144 ;;		_TMR5_ISR
 12145 ;; This function uses a non-reentrant model
 12146 ;;
 12147                           
 12148                           
 12149                           ;psect for function _TMR5_DefaultInterruptHandler
 12150  0BD6                     _TMR5_DefaultInterruptHandler:	
 12151                           
 12152                           ;tmr5.c: 178: Timer5_Overflow();
 12153                           
 12154                           ;incstack = 0
 12155                           ; Regs used in _TMR5_DefaultInterruptHandler: [status,2+status,0+pclath+cstack]
 12156  0BD6  3180  2003         	fcall	_Timer5_Overflow
 12157  0BD8  0008               	return
 12158  0BD9                     __end_of_TMR5_DefaultInterruptHandler:	
 12159                           
 12160                           	psect	text55
 12161  0003                     __ptext55:	
 12162 ;; *************** function _Timer5_Overflow *****************
 12163 ;; Defined at:
 12164 ;;		line 646 in file "main.c"
 12165 ;; Parameters:    Size  Location     Type
 12166 ;;		None
 12167 ;; Auto vars:     Size  Location     Type
 12168 ;;		None
 12169 ;; Return value:  Size  Location     Type
 12170 ;;                  1    wreg      void 
 12171 ;; Registers used:
 12172 ;;		None
 12173 ;; Tracked objects:
 12174 ;;		On entry : 0/0
 12175 ;;		On exit  : 0/0
 12176 ;;		Unchanged: 0/0
 12177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12178 ;;      Params:         0       0       0       0       0       0       0       0
 12179 ;;      Locals:         0       0       0       0       0       0       0       0
 12180 ;;      Temps:          0       0       0       0       0       0       0       0
 12181 ;;      Totals:         0       0       0       0       0       0       0       0
 12182 ;;Total ram usage:        0 bytes
 12183 ;; Hardware stack levels used:    1
 12184 ;; This function calls:
 12185 ;;		Nothing
 12186 ;; This function is called by:
 12187 ;;		_TMR5_DefaultInterruptHandler
 12188 ;; This function uses a non-reentrant model
 12189 ;;
 12190                           
 12191                           
 12192                           ;psect for function _Timer5_Overflow
 12193  0003                     _Timer5_Overflow:	
 12194                           
 12195                           ;incstack = 0
 12196                           ; Regs used in _Timer5_Overflow: []
 12197  0003  0008               	return
 12198  0004                     __end_of_Timer5_Overflow:	
 12199                           
 12200                           	psect	text56
 12201  0D5F                     __ptext56:	
 12202 ;; *************** function _TMR3_ISR *****************
 12203 ;; Defined at:
 12204 ;;		line 156 in file "mcc_generated_files/tmr3.c"
 12205 ;; Parameters:    Size  Location     Type
 12206 ;;		None
 12207 ;; Auto vars:     Size  Location     Type
 12208 ;;		None
 12209 ;; Return value:  Size  Location     Type
 12210 ;;                  1    wreg      void 
 12211 ;; Registers used:
 12212 ;;		wreg, status,2, status,0, pclath, cstack
 12213 ;; Tracked objects:
 12214 ;;		On entry : 0/0
 12215 ;;		On exit  : 0/0
 12216 ;;		Unchanged: 0/0
 12217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12218 ;;      Params:         0       0       0       0       0       0       0       0
 12219 ;;      Locals:         0       0       0       0       0       0       0       0
 12220 ;;      Temps:          0       0       0       0       0       0       0       0
 12221 ;;      Totals:         0       0       0       0       0       0       0       0
 12222 ;;Total ram usage:        0 bytes
 12223 ;; Hardware stack levels used:    1
 12224 ;; Hardware stack levels required when called:    2
 12225 ;; This function calls:
 12226 ;;		Absolute function
 12227 ;;		_TMR3_DefaultInterruptHandler
 12228 ;; This function is called by:
 12229 ;;		_INTERRUPT_InterruptManager
 12230 ;; This function uses a non-reentrant model
 12231 ;;
 12232                           
 12233                           
 12234                           ;psect for function _TMR3_ISR
 12235  0D5F                     _TMR3_ISR:	
 12236                           
 12237                           ;tmr3.c: 160: PIR3bits.TMR3IF = 0;
 12238                           
 12239                           ;incstack = 0
 12240                           ; Regs used in _TMR3_ISR: [wreg+status,2+status,0+pclath+cstack]
 12241  0D5F  0020               	movlb	0	; select bank0
 12242  0D60  1213               	bcf	19,4	;volatile
 12243                           
 12244                           ;tmr3.c: 162: TMR3H = (timer3ReloadVal >> 8);
 12245  0D61  086C               	movf	_timer3ReloadVal+1,w	;volatile
 12246  0D62  0028               	movlb	8	; select bank8
 12247  0D63  0092               	movwf	18	;volatile
 12248                           
 12249                           ;tmr3.c: 163: TMR3L = timer3ReloadVal;
 12250  0D64  0020               	movlb	0	; select bank0
 12251  0D65  086B               	movf	_timer3ReloadVal,w	;volatile
 12252  0D66  0028               	movlb	8	; select bank8
 12253  0D67  0091               	movwf	17	;volatile
 12254                           
 12255                           ;tmr3.c: 165: if(TMR3_InterruptHandler)
 12256  0D68  0022               	movlb	2	; select bank2
 12257  0D69  083C               	movf	_TMR3_InterruptHandler^(0+256),w
 12258  0D6A  043D               	iorwf	(_TMR3_InterruptHandler+1)^(0+256),w
 12259  0D6B  1903               	btfsc	3,2
 12260  0D6C  0008               	return
 12261                           
 12262                           ;tmr3.c: 166: {
 12263                           ;tmr3.c: 167: TMR3_InterruptHandler();
 12264  0D6D  083D               	movf	(_TMR3_InterruptHandler+1)^(0+256),w
 12265  0D6E  008A               	movwf	10
 12266  0D6F  083C               	movf	_TMR3_InterruptHandler^(0+256),w
 12267  0D70  000A               	callw
 12268  0D71  318D               	pagesel	$
 12269  0D72  0008               	return
 12270  0D73                     __end_of_TMR3_ISR:	
 12271                           
 12272                           	psect	text57
 12273  0BD3                     __ptext57:	
 12274 ;; *************** function _TMR3_DefaultInterruptHandler *****************
 12275 ;; Defined at:
 12276 ;;		line 176 in file "mcc_generated_files/tmr3.c"
 12277 ;; Parameters:    Size  Location     Type
 12278 ;;		None
 12279 ;; Auto vars:     Size  Location     Type
 12280 ;;		None
 12281 ;; Return value:  Size  Location     Type
 12282 ;;                  1    wreg      void 
 12283 ;; Registers used:
 12284 ;;		wreg, status,2, status,0, pclath, cstack
 12285 ;; Tracked objects:
 12286 ;;		On entry : 0/0
 12287 ;;		On exit  : 0/0
 12288 ;;		Unchanged: 0/0
 12289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12290 ;;      Params:         0       0       0       0       0       0       0       0
 12291 ;;      Locals:         0       0       0       0       0       0       0       0
 12292 ;;      Temps:          0       0       0       0       0       0       0       0
 12293 ;;      Totals:         0       0       0       0       0       0       0       0
 12294 ;;Total ram usage:        0 bytes
 12295 ;; Hardware stack levels used:    1
 12296 ;; Hardware stack levels required when called:    1
 12297 ;; This function calls:
 12298 ;;		_Timer3_Overflow
 12299 ;; This function is called by:
 12300 ;;		_TMR3_Initialize
 12301 ;;		_TMR3_ISR
 12302 ;; This function uses a non-reentrant model
 12303 ;;
 12304                           
 12305                           
 12306                           ;psect for function _TMR3_DefaultInterruptHandler
 12307  0BD3                     _TMR3_DefaultInterruptHandler:	
 12308                           
 12309                           ;tmr3.c: 178: Timer3_Overflow();
 12310                           
 12311                           ;incstack = 0
 12312                           ; Regs used in _TMR3_DefaultInterruptHandler: [wreg+status,2+status,0+pclath+cstack]
 12313  0BD3  318E  26C8         	fcall	_Timer3_Overflow
 12314  0BD5  0008               	return
 12315  0BD6                     __end_of_TMR3_DefaultInterruptHandler:	
 12316                           
 12317                           	psect	text58
 12318  0EC8                     __ptext58:	
 12319 ;; *************** function _Timer3_Overflow *****************
 12320 ;; Defined at:
 12321 ;;		line 639 in file "main.c"
 12322 ;; Parameters:    Size  Location     Type
 12323 ;;		None
 12324 ;; Auto vars:     Size  Location     Type
 12325 ;;		None
 12326 ;; Return value:  Size  Location     Type
 12327 ;;                  1    wreg      void 
 12328 ;; Registers used:
 12329 ;;		wreg, status,2, status,0
 12330 ;; Tracked objects:
 12331 ;;		On entry : 0/0
 12332 ;;		On exit  : 0/0
 12333 ;;		Unchanged: 0/0
 12334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12335 ;;      Params:         0       0       0       0       0       0       0       0
 12336 ;;      Locals:         0       0       0       0       0       0       0       0
 12337 ;;      Temps:          4       0       0       0       0       0       0       0
 12338 ;;      Totals:         4       0       0       0       0       0       0       0
 12339 ;;Total ram usage:        4 bytes
 12340 ;; Hardware stack levels used:    1
 12341 ;; This function calls:
 12342 ;;		Nothing
 12343 ;; This function is called by:
 12344 ;;		_TMR3_DefaultInterruptHandler
 12345 ;; This function uses a non-reentrant model
 12346 ;;
 12347                           
 12348                           
 12349                           ;psect for function _Timer3_Overflow
 12350  0EC8                     _Timer3_Overflow:	
 12351                           
 12352                           ;main.c: 641: EncEdgeTimeInterval= EncEdgeTimeInterval + 0x0000FFFF;
 12353                           
 12354                           ;incstack = 0
 12355                           ; Regs used in _Timer3_Overflow: [wreg+status,2+status,0]
 12356  0EC8  30FF               	movlw	255
 12357  0EC9  00F0               	movwf	??_Timer3_Overflow
 12358  0ECA  30FF               	movlw	255
 12359  0ECB  00F1               	movwf	??_Timer3_Overflow+1
 12360  0ECC  3000               	movlw	0
 12361  0ECD  00F2               	movwf	??_Timer3_Overflow+2
 12362  0ECE  3000               	movlw	0
 12363  0ECF  00F3               	movwf	??_Timer3_Overflow+3
 12364  0ED0  0020               	movlb	0	; select bank0
 12365  0ED1  0824               	movf	_EncEdgeTimeInterval,w
 12366  0ED2  07F0               	addwf	??_Timer3_Overflow,f
 12367  0ED3  0825               	movf	_EncEdgeTimeInterval+1,w
 12368  0ED4  3DF1               	addwfc	??_Timer3_Overflow+1,f
 12369  0ED5  0826               	movf	_EncEdgeTimeInterval+2,w
 12370  0ED6  3DF2               	addwfc	??_Timer3_Overflow+2,f
 12371  0ED7  0827               	movf	_EncEdgeTimeInterval+3,w
 12372  0ED8  3DF3               	addwfc	??_Timer3_Overflow+3,f
 12373  0ED9  0873               	movf	??_Timer3_Overflow+3,w
 12374  0EDA  00A7               	movwf	_EncEdgeTimeInterval+3
 12375  0EDB  0872               	movf	??_Timer3_Overflow+2,w
 12376  0EDC  00A6               	movwf	_EncEdgeTimeInterval+2
 12377  0EDD  0871               	movf	??_Timer3_Overflow+1,w
 12378  0EDE  00A5               	movwf	_EncEdgeTimeInterval+1
 12379  0EDF  0870               	movf	??_Timer3_Overflow,w
 12380  0EE0  00A4               	movwf	_EncEdgeTimeInterval
 12381                           
 12382                           ;main.c: 642: if(EncEdgeTimeInterval >0xEFFFFFFF)
 12383  0EE1  30F0               	movlw	240
 12384  0EE2  0227               	subwf	_EncEdgeTimeInterval+3,w
 12385  0EE3  1C03               	btfss	3,0
 12386  0EE4  0008               	return
 12387                           
 12388                           ;main.c: 643: EncEdgeTimeInterval=0xEFFFFFFF;
 12389  0EE5  30EF               	movlw	239
 12390  0EE6  00A7               	movwf	_EncEdgeTimeInterval+3
 12391  0EE7  30FF               	movlw	255
 12392  0EE8  00A6               	movwf	_EncEdgeTimeInterval+2
 12393  0EE9  30FF               	movlw	255
 12394  0EEA  00A5               	movwf	_EncEdgeTimeInterval+1
 12395  0EEB  30FF               	movlw	255
 12396  0EEC  00A4               	movwf	_EncEdgeTimeInterval
 12397  0EED  0008               	return
 12398  0EEE                     __end_of_Timer3_Overflow:	
 12399                           
 12400                           	psect	text59
 12401  0C01                     __ptext59:	
 12402 ;; *************** function _TMR0_ISR *****************
 12403 ;; Defined at:
 12404 ;;		line 123 in file "mcc_generated_files/tmr0.c"
 12405 ;; Parameters:    Size  Location     Type
 12406 ;;		None
 12407 ;; Auto vars:     Size  Location     Type
 12408 ;;		None
 12409 ;; Return value:  Size  Location     Type
 12410 ;;                  1    wreg      void 
 12411 ;; Registers used:
 12412 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12413 ;; Tracked objects:
 12414 ;;		On entry : 0/0
 12415 ;;		On exit  : 0/0
 12416 ;;		Unchanged: 0/0
 12417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12418 ;;      Params:         0       0       0       0       0       0       0       0
 12419 ;;      Locals:         0       0       0       0       0       0       0       0
 12420 ;;      Temps:          0       0       0       0       0       0       0       0
 12421 ;;      Totals:         0       0       0       0       0       0       0       0
 12422 ;;Total ram usage:        0 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:    3
 12425 ;; This function calls:
 12426 ;;		_TMR0_CallBack
 12427 ;; This function is called by:
 12428 ;;		_INTERRUPT_InterruptManager
 12429 ;; This function uses a non-reentrant model
 12430 ;;
 12431                           
 12432                           
 12433                           ;psect for function _TMR0_ISR
 12434  0C01                     _TMR0_ISR:	
 12435                           
 12436                           ;tmr0.c: 126: PIR0bits.TMR0IF = 0;
 12437                           
 12438                           ;incstack = 0
 12439                           ; Regs used in _TMR0_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12440  0C01  0020               	movlb	0	; select bank0
 12441  0C02  1290               	bcf	16,5	;volatile
 12442                           
 12443                           ;tmr0.c: 129: TMR0_CallBack();
 12444  0C03  318D  2512         	fcall	_TMR0_CallBack
 12445  0C05  0008               	return
 12446  0C06                     __end_of_TMR0_ISR:	
 12447                           
 12448                           	psect	text60
 12449  0D12                     __ptext60:	
 12450 ;; *************** function _TMR0_CallBack *****************
 12451 ;; Defined at:
 12452 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 12453 ;; Parameters:    Size  Location     Type
 12454 ;;		None
 12455 ;; Auto vars:     Size  Location     Type
 12456 ;;		None
 12457 ;; Return value:  Size  Location     Type
 12458 ;;                  1    wreg      void 
 12459 ;; Registers used:
 12460 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12461 ;; Tracked objects:
 12462 ;;		On entry : 0/0
 12463 ;;		On exit  : 0/0
 12464 ;;		Unchanged: 0/0
 12465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12466 ;;      Params:         0       0       0       0       0       0       0       0
 12467 ;;      Locals:         0       0       0       0       0       0       0       0
 12468 ;;      Temps:          0       0       0       0       0       0       0       0
 12469 ;;      Totals:         0       0       0       0       0       0       0       0
 12470 ;;Total ram usage:        0 bytes
 12471 ;; Hardware stack levels used:    1
 12472 ;; Hardware stack levels required when called:    2
 12473 ;; This function calls:
 12474 ;;		Absolute function
 12475 ;;		_TMR0_DefaultInterruptHandler
 12476 ;;		_Timer0_tick10msecFunc
 12477 ;; This function is called by:
 12478 ;;		_TMR0_ISR
 12479 ;; This function uses a non-reentrant model
 12480 ;;
 12481                           
 12482                           
 12483                           ;psect for function _TMR0_CallBack
 12484  0D12                     _TMR0_CallBack:	
 12485                           
 12486                           ;tmr0.c: 137: Timer0_tick10msecFunc();
 12487                           
 12488                           ;incstack = 0
 12489                           ; Regs used in _TMR0_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12490  0D12  318E  26A4  318D   	fcall	_Timer0_tick10msecFunc
 12491                           
 12492                           ;tmr0.c: 139: if(TMR0_InterruptHandler)
 12493  0D15  0022               	movlb	2	; select bank2
 12494  0D16  083A               	movf	_TMR0_InterruptHandler^(0+256),w
 12495  0D17  043B               	iorwf	(_TMR0_InterruptHandler+1)^(0+256),w
 12496  0D18  1903               	btfsc	3,2
 12497  0D19  0008               	return
 12498                           
 12499                           ;tmr0.c: 140: {
 12500                           ;tmr0.c: 141: TMR0_InterruptHandler();
 12501  0D1A  083B               	movf	(_TMR0_InterruptHandler+1)^(0+256),w
 12502  0D1B  008A               	movwf	10
 12503  0D1C  083A               	movf	_TMR0_InterruptHandler^(0+256),w
 12504  0D1D  000A               	callw
 12505  0D1E  318D               	pagesel	$
 12506  0D1F  0008               	return
 12507  0D20                     __end_of_TMR0_CallBack:	
 12508                           
 12509                           	psect	text61
 12510  0EA4                     __ptext61:	
 12511 ;; *************** function _Timer0_tick10msecFunc *****************
 12512 ;; Defined at:
 12513 ;;		line 651 in file "main.c"
 12514 ;; Parameters:    Size  Location     Type
 12515 ;;		None
 12516 ;; Auto vars:     Size  Location     Type
 12517 ;;		None
 12518 ;; Return value:  Size  Location     Type
 12519 ;;                  1    wreg      void 
 12520 ;; Registers used:
 12521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12522 ;; Tracked objects:
 12523 ;;		On entry : 0/0
 12524 ;;		On exit  : 0/0
 12525 ;;		Unchanged: 0/0
 12526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12527 ;;      Params:         0       0       0       0       0       0       0       0
 12528 ;;      Locals:         0       0       0       0       0       0       0       0
 12529 ;;      Temps:          4       0       0       0       0       0       0       0
 12530 ;;      Totals:         4       0       0       0       0       0       0       0
 12531 ;;Total ram usage:        4 bytes
 12532 ;; Hardware stack levels used:    1
 12533 ;; Hardware stack levels required when called:    1
 12534 ;; This function calls:
 12535 ;;		_LedON_Control_10msec
 12536 ;; This function is called by:
 12537 ;;		_TMR0_CallBack
 12538 ;; This function uses a non-reentrant model
 12539 ;;
 12540                           
 12541                           
 12542                           ;psect for function _Timer0_tick10msecFunc
 12543  0EA4                     _Timer0_tick10msecFunc:	
 12544                           
 12545                           ;main.c: 653: LedON_Control_10msec();
 12546                           
 12547                           ;incstack = 0
 12548                           ; Regs used in _Timer0_tick10msecFunc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12549  0EA4  3186  26B4  318E   	fcall	_LedON_Control_10msec
 12550                           
 12551                           ;main.c: 655: TimertickMsec= TimertickMsec+5;
 12552  0EA7  3005               	movlw	5
 12553  0EA8  00F0               	movwf	??_Timer0_tick10msecFunc
 12554  0EA9  3000               	movlw	0
 12555  0EAA  00F1               	movwf	??_Timer0_tick10msecFunc+1
 12556  0EAB  3000               	movlw	0
 12557  0EAC  00F2               	movwf	??_Timer0_tick10msecFunc+2
 12558  0EAD  3000               	movlw	0
 12559  0EAE  00F3               	movwf	??_Timer0_tick10msecFunc+3
 12560  0EAF  0020               	movlb	0	; select bank0
 12561  0EB0  0820               	movf	_TimertickMsec,w
 12562  0EB1  07F0               	addwf	??_Timer0_tick10msecFunc,f
 12563  0EB2  0821               	movf	_TimertickMsec+1,w
 12564  0EB3  3DF1               	addwfc	??_Timer0_tick10msecFunc+1,f
 12565  0EB4  0822               	movf	_TimertickMsec+2,w
 12566  0EB5  3DF2               	addwfc	??_Timer0_tick10msecFunc+2,f
 12567  0EB6  0823               	movf	_TimertickMsec+3,w
 12568  0EB7  3DF3               	addwfc	??_Timer0_tick10msecFunc+3,f
 12569  0EB8  0873               	movf	??_Timer0_tick10msecFunc+3,w
 12570  0EB9  00A3               	movwf	_TimertickMsec+3
 12571  0EBA  0872               	movf	??_Timer0_tick10msecFunc+2,w
 12572  0EBB  00A2               	movwf	_TimertickMsec+2
 12573  0EBC  0871               	movf	??_Timer0_tick10msecFunc+1,w
 12574  0EBD  00A1               	movwf	_TimertickMsec+1
 12575  0EBE  0870               	movf	??_Timer0_tick10msecFunc,w
 12576  0EBF  00A0               	movwf	_TimertickMsec
 12577                           
 12578                           ;main.c: 657: if(delayFlag==1)
 12579  0EC0  037A               	decf	_delayFlag,w
 12580  0EC1  1D03               	btfss	3,2
 12581  0EC2  0008               	return
 12582                           
 12583                           ;main.c: 658: delayCount+=5;
 12584  0EC3  3005               	movlw	5
 12585  0EC4  07BA               	addwf	_delayCount,f
 12586  0EC5  3000               	movlw	0
 12587  0EC6  3DBB               	addwfc	_delayCount+1,f
 12588  0EC7  0008               	return
 12589  0EC8                     __end_of_Timer0_tick10msecFunc:	
 12590                           
 12591                           	psect	text62
 12592  06B4                     __ptext62:	
 12593 ;; *************** function _LedON_Control_10msec *****************
 12594 ;; Defined at:
 12595 ;;		line 54 in file "LED_Ctrl.c"
 12596 ;; Parameters:    Size  Location     Type
 12597 ;;		None
 12598 ;; Auto vars:     Size  Location     Type
 12599 ;;		None
 12600 ;; Return value:  Size  Location     Type
 12601 ;;                  1    wreg      void 
 12602 ;; Registers used:
 12603 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12604 ;; Tracked objects:
 12605 ;;		On entry : 0/0
 12606 ;;		On exit  : 0/0
 12607 ;;		Unchanged: 0/0
 12608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12609 ;;      Params:         0       0       0       0       0       0       0       0
 12610 ;;      Locals:         0       0       0       0       0       0       0       0
 12611 ;;      Temps:          0       0       0       0       0       0       0       0
 12612 ;;      Totals:         0       0       0       0       0       0       0       0
 12613 ;;Total ram usage:        0 bytes
 12614 ;; Hardware stack levels used:    1
 12615 ;; This function calls:
 12616 ;;		Nothing
 12617 ;; This function is called by:
 12618 ;;		_Timer0_tick10msecFunc
 12619 ;; This function uses a non-reentrant model
 12620 ;;
 12621                           
 12622                           
 12623                           ;psect for function _LedON_Control_10msec
 12624  06B4                     _LedON_Control_10msec:	
 12625                           
 12626                           ;LED_Ctrl.c: 56: if(1==Led_ON)
 12627                           
 12628                           ;incstack = 0
 12629                           ; Regs used in _LedON_Control_10msec: [wreg-fsr0h+status,2+status,0]
 12630  06B4  0020               	movlb	0	; select bank0
 12631  06B5  0346               	decf	_Led_ON,w
 12632  06B6  1D03               	btfss	3,2
 12633  06B7  0008               	return
 12634                           
 12635                           ;LED_Ctrl.c: 57: {
 12636                           ;LED_Ctrl.c: 59: if(LED_msec_Cnt >= Blick_tickPoint)
 12637  06B8  082B               	movf	_Blick_tickPoint+1,w
 12638  06B9  022F               	subwf	_LED_msec_Cnt+1,w
 12639  06BA  1D03               	skipz
 12640  06BB  2EBE               	goto	u141_25
 12641  06BC  082A               	movf	_Blick_tickPoint,w
 12642  06BD  022E               	subwf	_LED_msec_Cnt,w
 12643  06BE                     u141_25:	
 12644  06BE  1803               	btfsc	3,0
 12645  06BF  2EE5               	goto	i1l3057
 12646  06C0  2EF8               	goto	i1l3061
 12647  06C1                     i1l3049:	
 12648                           ;LED_Ctrl.c: 62: {
 12649                           ;LED_Ctrl.c: 63: case 0 : do { LATCbits.LATC0 = ~LATCbits.LATC0; } while(0);
 12650                           
 12651                           ;LED_Ctrl.c: 60: {
 12652                           ;LED_Ctrl.c: 61: switch(LED_Color)
 12653                           
 12654  06C1  1003               	clrc
 12655  06C2  0022               	movlb	2	; select bank2
 12656  06C3  1C0E               	btfss	14,0	;volatile
 12657  06C4  1403               	setc
 12658  06C5  1C03               	btfss	3,0
 12659  06C6  2ECA               	goto	u142_20
 12660  06C7  0022               	movlb	2	; select bank2
 12661  06C8  140E               	bsf	14,0	;volatile
 12662  06C9  2EF1               	goto	i1l3059
 12663  06CA                     u142_20:	
 12664  06CA  0022               	movlb	2	; select bank2
 12665  06CB  100E               	bcf	14,0	;volatile
 12666                           
 12667                           ;LED_Ctrl.c: 64: break;
 12668  06CC  2EF1               	goto	i1l3059
 12669  06CD                     i1l3051:	
 12670                           ;LED_Ctrl.c: 65: case 1 : do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
 12671                           
 12672  06CD  1003               	clrc
 12673  06CE  0022               	movlb	2	; select bank2
 12674  06CF  1C8E               	btfss	14,1	;volatile
 12675  06D0  1403               	setc
 12676  06D1  1C03               	btfss	3,0
 12677  06D2  2ED6               	goto	u144_20
 12678  06D3  0022               	movlb	2	; select bank2
 12679  06D4  148E               	bsf	14,1	;volatile
 12680  06D5  2EF1               	goto	i1l3059
 12681  06D6                     u144_20:	
 12682  06D6  0022               	movlb	2	; select bank2
 12683  06D7  108E               	bcf	14,1	;volatile
 12684                           
 12685                           ;LED_Ctrl.c: 66: break;
 12686  06D8  2EF1               	goto	i1l3059
 12687  06D9                     i1l3053:	
 12688                           ;LED_Ctrl.c: 67: case 2 : do { LATCbits.LATC2 = ~LATCbits.LATC2; } while(0);
 12689                           
 12690  06D9  1003               	clrc
 12691  06DA  0022               	movlb	2	; select bank2
 12692  06DB  1D0E               	btfss	14,2	;volatile
 12693  06DC  1403               	setc
 12694  06DD  1C03               	btfss	3,0
 12695  06DE  2EE2               	goto	u146_20
 12696  06DF  0022               	movlb	2	; select bank2
 12697  06E0  150E               	bsf	14,2	;volatile
 12698  06E1  2EF1               	goto	i1l3059
 12699  06E2                     u146_20:	
 12700  06E2  0022               	movlb	2	; select bank2
 12701  06E3  110E               	bcf	14,2	;volatile
 12702                           
 12703                           ;LED_Ctrl.c: 70: }
 12704                           
 12705                           ;LED_Ctrl.c: 69: default : break;
 12706                           
 12707                           ;LED_Ctrl.c: 68: break;
 12708  06E4  2EF1               	goto	i1l3059
 12709  06E5                     i1l3057:	
 12710  06E5  0020               	movlb	0	; select bank0
 12711  06E6  086A               	movf	_LED_Color,w
 12712                           
 12713                           ; Switch size 1, requested type "space"
 12714                           ; Number of cases is 3, Range of values is 0 to 2
 12715                           ; switch strategies available:
 12716                           ; Name         Instructions Cycles
 12717                           ; simple_byte           10     6 (average)
 12718                           ; direct_byte           12     6 (fixed)
 12719                           ; jumptable            260     6 (fixed)
 12720                           ;	Chosen strategy is simple_byte
 12721  06E7  3A00               	xorlw	0	; case 0
 12722  06E8  1903               	skipnz
 12723  06E9  2EC1               	goto	i1l3049
 12724  06EA  3A01               	xorlw	1	; case 1
 12725  06EB  1903               	skipnz
 12726  06EC  2ECD               	goto	i1l3051
 12727  06ED  3A03               	xorlw	3	; case 2
 12728  06EE  1903               	skipnz
 12729  06EF  2ED9               	goto	i1l3053
 12730  06F0  2EF1               	goto	i1l3059
 12731  06F1                     i1l3059:	
 12732                           
 12733                           ;LED_Ctrl.c: 73: Blick_tickPoint=Blick_tickPoint+Blick_tickPointMsec;
 12734  06F1  0020               	movlb	0	; select bank0
 12735  06F2  082C               	movf	_Blick_tickPointMsec,w
 12736  06F3  072A               	addwf	_Blick_tickPoint,w
 12737  06F4  00AA               	movwf	_Blick_tickPoint
 12738  06F5  082D               	movf	_Blick_tickPointMsec+1,w
 12739  06F6  3D2B               	addwfc	_Blick_tickPoint+1,w
 12740  06F7  00AB               	movwf	_Blick_tickPoint+1
 12741  06F8                     i1l3061:	
 12742                           
 12743                           ;LED_Ctrl.c: 75: }
 12744                           ;LED_Ctrl.c: 77: if(LED_msec_Cnt > LedON_Duration_msec)
 12745  06F8  082F               	movf	_LED_msec_Cnt+1,w
 12746  06F9  0229               	subwf	_LedON_Duration_msec+1,w
 12747  06FA  1D03               	skipz
 12748  06FB  2EFE               	goto	u148_25
 12749  06FC  082E               	movf	_LED_msec_Cnt,w
 12750  06FD  0228               	subwf	_LedON_Duration_msec,w
 12751  06FE                     u148_25:	
 12752  06FE  1C03               	btfss	3,0
 12753  06FF  2F0A               	goto	i1l3067
 12754  0700  2F1A               	goto	i1l3071
 12755  0701                     i1l1177:	
 12756                           ;LED_Ctrl.c: 80: {
 12757                           ;LED_Ctrl.c: 81: case 0 : do { LATCbits.LATC0 = 0; } while(0);
 12758                           
 12759                           ;LED_Ctrl.c: 78: {
 12760                           ;LED_Ctrl.c: 79: switch(LED_Color)
 12761                           
 12762  0701  0022               	movlb	2	; select bank2
 12763  0702  100E               	bcf	14,0	;volatile
 12764                           
 12765                           ;LED_Ctrl.c: 82: break;
 12766  0703  2F16               	goto	i1l3069
 12767  0704                     i1l1181:	
 12768                           ;LED_Ctrl.c: 83: case 1 : do { LATCbits.LATC1 = 0; } while(0);
 12769                           
 12770  0704  0022               	movlb	2	; select bank2
 12771  0705  108E               	bcf	14,1	;volatile
 12772                           
 12773                           ;LED_Ctrl.c: 84: break;
 12774  0706  2F16               	goto	i1l3069
 12775  0707                     i1l1184:	
 12776                           ;LED_Ctrl.c: 85: case 2 : do { LATCbits.LATC2 = 0; } while(0);
 12777                           
 12778  0707  0022               	movlb	2	; select bank2
 12779  0708  110E               	bcf	14,2	;volatile
 12780                           
 12781                           ;LED_Ctrl.c: 88: }
 12782                           
 12783                           ;LED_Ctrl.c: 87: default : break;
 12784                           
 12785                           ;LED_Ctrl.c: 86: break;
 12786  0709  2F16               	goto	i1l3069
 12787  070A                     i1l3067:	
 12788  070A  0020               	movlb	0	; select bank0
 12789  070B  086A               	movf	_LED_Color,w
 12790                           
 12791                           ; Switch size 1, requested type "space"
 12792                           ; Number of cases is 3, Range of values is 0 to 2
 12793                           ; switch strategies available:
 12794                           ; Name         Instructions Cycles
 12795                           ; simple_byte           10     6 (average)
 12796                           ; direct_byte           12     6 (fixed)
 12797                           ; jumptable            260     6 (fixed)
 12798                           ;	Chosen strategy is simple_byte
 12799  070C  3A00               	xorlw	0	; case 0
 12800  070D  1903               	skipnz
 12801  070E  2F01               	goto	i1l1177
 12802  070F  3A01               	xorlw	1	; case 1
 12803  0710  1903               	skipnz
 12804  0711  2F04               	goto	i1l1181
 12805  0712  3A03               	xorlw	3	; case 2
 12806  0713  1903               	skipnz
 12807  0714  2F07               	goto	i1l1184
 12808  0715  2F16               	goto	i1l3069
 12809  0716                     i1l3069:	
 12810                           
 12811                           ;LED_Ctrl.c: 90: Led_ON=0;
 12812  0716  0020               	movlb	0	; select bank0
 12813  0717  01C6               	clrf	_Led_ON
 12814                           
 12815                           ;LED_Ctrl.c: 91: LED_msec_Cnt=0;
 12816  0718  01AE               	clrf	_LED_msec_Cnt
 12817  0719  01AF               	clrf	_LED_msec_Cnt+1
 12818  071A                     i1l3071:	
 12819                           
 12820                           ;LED_Ctrl.c: 92: }
 12821                           ;LED_Ctrl.c: 94: LED_msec_Cnt+=5;
 12822  071A  3005               	movlw	5
 12823  071B  07AE               	addwf	_LED_msec_Cnt,f
 12824  071C  3000               	movlw	0
 12825  071D  3DAF               	addwfc	_LED_msec_Cnt+1,f
 12826  071E  0008               	return
 12827  071F                     __end_of_LedON_Control_10msec:	
 12828                           
 12829                           	psect	text63
 12830  0BD2                     __ptext63:	
 12831 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 12832 ;; Defined at:
 12833 ;;		line 149 in file "mcc_generated_files/tmr0.c"
 12834 ;; Parameters:    Size  Location     Type
 12835 ;;		None
 12836 ;; Auto vars:     Size  Location     Type
 12837 ;;		None
 12838 ;; Return value:  Size  Location     Type
 12839 ;;                  1    wreg      void 
 12840 ;; Registers used:
 12841 ;;		None
 12842 ;; Tracked objects:
 12843 ;;		On entry : 0/0
 12844 ;;		On exit  : 0/0
 12845 ;;		Unchanged: 0/0
 12846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12847 ;;      Params:         0       0       0       0       0       0       0       0
 12848 ;;      Locals:         0       0       0       0       0       0       0       0
 12849 ;;      Temps:          0       0       0       0       0       0       0       0
 12850 ;;      Totals:         0       0       0       0       0       0       0       0
 12851 ;;Total ram usage:        0 bytes
 12852 ;; Hardware stack levels used:    1
 12853 ;; This function calls:
 12854 ;;		Nothing
 12855 ;; This function is called by:
 12856 ;;		_TMR0_Initialize
 12857 ;;		_TMR0_CallBack
 12858 ;; This function uses a non-reentrant model
 12859 ;;
 12860                           
 12861                           
 12862                           ;psect for function _TMR0_DefaultInterruptHandler
 12863  0BD2                     _TMR0_DefaultInterruptHandler:	
 12864                           
 12865                           ;incstack = 0
 12866                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 12867  0BD2  0008               	return
 12868  0BD3                     __end_of_TMR0_DefaultInterruptHandler:	
 12869                           
 12870                           	psect	text64
 12871  0CAD                     __ptext64:	
 12872 ;; *************** function _PIN_MANAGER_IOC *****************
 12873 ;; Defined at:
 12874 ;;		line 132 in file "mcc_generated_files/pin_manager.c"
 12875 ;; Parameters:    Size  Location     Type
 12876 ;;		None
 12877 ;; Auto vars:     Size  Location     Type
 12878 ;;		None
 12879 ;; Return value:  Size  Location     Type
 12880 ;;                  1    wreg      void 
 12881 ;; Registers used:
 12882 ;;		wreg, status,2, status,0, pclath, cstack
 12883 ;; Tracked objects:
 12884 ;;		On entry : 0/0
 12885 ;;		On exit  : 0/0
 12886 ;;		Unchanged: 0/0
 12887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12888 ;;      Params:         0       0       0       0       0       0       0       0
 12889 ;;      Locals:         0       0       0       0       0       0       0       0
 12890 ;;      Temps:          0       0       0       0       0       0       0       0
 12891 ;;      Totals:         0       0       0       0       0       0       0       0
 12892 ;;Total ram usage:        0 bytes
 12893 ;; Hardware stack levels used:    1
 12894 ;; Hardware stack levels required when called:    2
 12895 ;; This function calls:
 12896 ;;		_IOCCF4_ISR
 12897 ;;		_IOCCF5_ISR
 12898 ;; This function is called by:
 12899 ;;		_INTERRUPT_InterruptManager
 12900 ;; This function uses a non-reentrant model
 12901 ;;
 12902                           
 12903                           
 12904                           ;psect for function _PIN_MANAGER_IOC
 12905  0CAD                     _PIN_MANAGER_IOC:	
 12906                           
 12907                           ;pin_manager.c: 135: if(IOCCFbits.IOCCF4 == 1)
 12908                           
 12909                           ;incstack = 0
 12910                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 12911  0CAD  0027               	movlb	7	; select bank7
 12912  0CAE  1E19               	btfss	25,4	;volatile
 12913  0CAF  2CB3               	goto	i1l6189
 12914                           
 12915                           ;pin_manager.c: 136: {
 12916                           ;pin_manager.c: 137: IOCCF4_ISR();
 12917  0CB0  318C  24DD  318C   	fcall	_IOCCF4_ISR
 12918  0CB3                     i1l6189:	
 12919                           
 12920                           ;pin_manager.c: 138: }
 12921                           ;pin_manager.c: 141: if(IOCCFbits.IOCCF5 == 1)
 12922  0CB3  0027               	movlb	7	; select bank7
 12923  0CB4  1E99               	btfss	25,5	;volatile
 12924  0CB5  0008               	return
 12925                           
 12926                           ;pin_manager.c: 142: {
 12927                           ;pin_manager.c: 143: IOCCF5_ISR();
 12928  0CB6  318C  24EA         	fcall	_IOCCF5_ISR
 12929  0CB8  0008               	return
 12930  0CB9                     __end_of_PIN_MANAGER_IOC:	
 12931                           
 12932                           	psect	text65
 12933  0CEA                     __ptext65:	
 12934 ;; *************** function _IOCCF5_ISR *****************
 12935 ;; Defined at:
 12936 ;;		line 182 in file "mcc_generated_files/pin_manager.c"
 12937 ;; Parameters:    Size  Location     Type
 12938 ;;		None
 12939 ;; Auto vars:     Size  Location     Type
 12940 ;;		None
 12941 ;; Return value:  Size  Location     Type
 12942 ;;                  1    wreg      void 
 12943 ;; Registers used:
 12944 ;;		wreg, status,2, status,0, pclath, cstack
 12945 ;; Tracked objects:
 12946 ;;		On entry : 0/0
 12947 ;;		On exit  : 0/0
 12948 ;;		Unchanged: 0/0
 12949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12950 ;;      Params:         0       0       0       0       0       0       0       0
 12951 ;;      Locals:         0       0       0       0       0       0       0       0
 12952 ;;      Temps:          0       0       0       0       0       0       0       0
 12953 ;;      Totals:         0       0       0       0       0       0       0       0
 12954 ;;Total ram usage:        0 bytes
 12955 ;; Hardware stack levels used:    1
 12956 ;; Hardware stack levels required when called:    1
 12957 ;; This function calls:
 12958 ;;		Absolute function
 12959 ;;		_IOCCF5_DefaultInterruptHandler
 12960 ;; This function is called by:
 12961 ;;		_PIN_MANAGER_IOC
 12962 ;; This function uses a non-reentrant model
 12963 ;;
 12964                           
 12965                           
 12966                           ;psect for function _IOCCF5_ISR
 12967  0CEA                     _IOCCF5_ISR:	
 12968                           
 12969                           ;pin_manager.c: 187: if(IOCCF5_InterruptHandler)
 12970                           
 12971                           ;incstack = 0
 12972                           ; Regs used in _IOCCF5_ISR: [wreg+status,2+status,0+pclath+cstack]
 12973  0CEA  0022               	movlb	2	; select bank2
 12974  0CEB  0836               	movf	_IOCCF5_InterruptHandler^(0+256),w
 12975  0CEC  0437               	iorwf	(_IOCCF5_InterruptHandler+1)^(0+256),w
 12976  0CED  1903               	btfsc	3,2
 12977  0CEE  2CF4               	goto	i1l6147
 12978                           
 12979                           ;pin_manager.c: 188: {
 12980                           ;pin_manager.c: 189: IOCCF5_InterruptHandler();
 12981  0CEF  0837               	movf	(_IOCCF5_InterruptHandler+1)^(0+256),w
 12982  0CF0  008A               	movwf	10
 12983  0CF1  0836               	movf	_IOCCF5_InterruptHandler^(0+256),w
 12984  0CF2  000A               	callw
 12985  0CF3  318C               	pagesel	$
 12986  0CF4                     i1l6147:	
 12987                           
 12988                           ;pin_manager.c: 190: }
 12989                           ;pin_manager.c: 191: IOCCFbits.IOCCF5 = 0;
 12990  0CF4  0027               	movlb	7	; select bank7
 12991  0CF5  1299               	bcf	25,5	;volatile
 12992  0CF6  0008               	return
 12993  0CF7                     __end_of_IOCCF5_ISR:	
 12994                           
 12995                           	psect	text66
 12996  0BD1                     __ptext66:	
 12997 ;; *************** function _IOCCF5_DefaultInterruptHandler *****************
 12998 ;; Defined at:
 12999 ;;		line 204 in file "mcc_generated_files/pin_manager.c"
 13000 ;; Parameters:    Size  Location     Type
 13001 ;;		None
 13002 ;; Auto vars:     Size  Location     Type
 13003 ;;		None
 13004 ;; Return value:  Size  Location     Type
 13005 ;;                  1    wreg      void 
 13006 ;; Registers used:
 13007 ;;		None
 13008 ;; Tracked objects:
 13009 ;;		On entry : 0/0
 13010 ;;		On exit  : 0/0
 13011 ;;		Unchanged: 0/0
 13012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13013 ;;      Params:         0       0       0       0       0       0       0       0
 13014 ;;      Locals:         0       0       0       0       0       0       0       0
 13015 ;;      Temps:          0       0       0       0       0       0       0       0
 13016 ;;      Totals:         0       0       0       0       0       0       0       0
 13017 ;;Total ram usage:        0 bytes
 13018 ;; Hardware stack levels used:    1
 13019 ;; This function calls:
 13020 ;;		Nothing
 13021 ;; This function is called by:
 13022 ;;		_PIN_MANAGER_Initialize
 13023 ;;		_IOCCF5_ISR
 13024 ;; This function uses a non-reentrant model
 13025 ;;
 13026                           
 13027                           
 13028                           ;psect for function _IOCCF5_DefaultInterruptHandler
 13029  0BD1                     _IOCCF5_DefaultInterruptHandler:	
 13030                           
 13031                           ;incstack = 0
 13032                           ; Regs used in _IOCCF5_DefaultInterruptHandler: []
 13033  0BD1  0008               	return
 13034  0BD2                     __end_of_IOCCF5_DefaultInterruptHandler:	
 13035                           
 13036                           	psect	text67
 13037  0CDD                     __ptext67:	
 13038 ;; *************** function _IOCCF4_ISR *****************
 13039 ;; Defined at:
 13040 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
 13041 ;; Parameters:    Size  Location     Type
 13042 ;;		None
 13043 ;; Auto vars:     Size  Location     Type
 13044 ;;		None
 13045 ;; Return value:  Size  Location     Type
 13046 ;;                  1    wreg      void 
 13047 ;; Registers used:
 13048 ;;		wreg, status,2, status,0, pclath, cstack
 13049 ;; Tracked objects:
 13050 ;;		On entry : 0/0
 13051 ;;		On exit  : 0/0
 13052 ;;		Unchanged: 0/0
 13053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13054 ;;      Params:         0       0       0       0       0       0       0       0
 13055 ;;      Locals:         0       0       0       0       0       0       0       0
 13056 ;;      Temps:          0       0       0       0       0       0       0       0
 13057 ;;      Totals:         0       0       0       0       0       0       0       0
 13058 ;;Total ram usage:        0 bytes
 13059 ;; Hardware stack levels used:    1
 13060 ;; Hardware stack levels required when called:    1
 13061 ;; This function calls:
 13062 ;;		Absolute function
 13063 ;;		_IOCCF4_DefaultInterruptHandler
 13064 ;; This function is called by:
 13065 ;;		_PIN_MANAGER_IOC
 13066 ;; This function uses a non-reentrant model
 13067 ;;
 13068                           
 13069                           
 13070                           ;psect for function _IOCCF4_ISR
 13071  0CDD                     _IOCCF4_ISR:	
 13072                           
 13073                           ;pin_manager.c: 157: if(IOCCF4_InterruptHandler)
 13074                           
 13075                           ;incstack = 0
 13076                           ; Regs used in _IOCCF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 13077  0CDD  0022               	movlb	2	; select bank2
 13078  0CDE  0838               	movf	_IOCCF4_InterruptHandler^(0+256),w
 13079  0CDF  0439               	iorwf	(_IOCCF4_InterruptHandler+1)^(0+256),w
 13080  0CE0  1903               	btfsc	3,2
 13081  0CE1  2CE7               	goto	i1l6141
 13082                           
 13083                           ;pin_manager.c: 158: {
 13084                           ;pin_manager.c: 159: IOCCF4_InterruptHandler();
 13085  0CE2  0839               	movf	(_IOCCF4_InterruptHandler+1)^(0+256),w
 13086  0CE3  008A               	movwf	10
 13087  0CE4  0838               	movf	_IOCCF4_InterruptHandler^(0+256),w
 13088  0CE5  000A               	callw
 13089  0CE6  318C               	pagesel	$
 13090  0CE7                     i1l6141:	
 13091                           
 13092                           ;pin_manager.c: 160: }
 13093                           ;pin_manager.c: 161: IOCCFbits.IOCCF4 = 0;
 13094  0CE7  0027               	movlb	7	; select bank7
 13095  0CE8  1219               	bcf	25,4	;volatile
 13096  0CE9  0008               	return
 13097  0CEA                     __end_of_IOCCF4_ISR:	
 13098                           
 13099                           	psect	text68
 13100  0BD0                     __ptext68:	
 13101 ;; *************** function _IOCCF4_DefaultInterruptHandler *****************
 13102 ;; Defined at:
 13103 ;;		line 174 in file "mcc_generated_files/pin_manager.c"
 13104 ;; Parameters:    Size  Location     Type
 13105 ;;		None
 13106 ;; Auto vars:     Size  Location     Type
 13107 ;;		None
 13108 ;; Return value:  Size  Location     Type
 13109 ;;                  1    wreg      void 
 13110 ;; Registers used:
 13111 ;;		None
 13112 ;; Tracked objects:
 13113 ;;		On entry : 0/0
 13114 ;;		On exit  : 0/0
 13115 ;;		Unchanged: 0/0
 13116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13117 ;;      Params:         0       0       0       0       0       0       0       0
 13118 ;;      Locals:         0       0       0       0       0       0       0       0
 13119 ;;      Temps:          0       0       0       0       0       0       0       0
 13120 ;;      Totals:         0       0       0       0       0       0       0       0
 13121 ;;Total ram usage:        0 bytes
 13122 ;; Hardware stack levels used:    1
 13123 ;; This function calls:
 13124 ;;		Nothing
 13125 ;; This function is called by:
 13126 ;;		_PIN_MANAGER_Initialize
 13127 ;;		_IOCCF4_ISR
 13128 ;; This function uses a non-reentrant model
 13129 ;;
 13130                           
 13131                           
 13132                           ;psect for function _IOCCF4_DefaultInterruptHandler
 13133  0BD0                     _IOCCF4_DefaultInterruptHandler:	
 13134                           
 13135                           ;incstack = 0
 13136                           ; Regs used in _IOCCF4_DefaultInterruptHandler: []
 13137  0BD0  0008               	return
 13138  0BD1                     __end_of_IOCCF4_DefaultInterruptHandler:	
 13139                           
 13140                           	psect	text69
 13141  0BFC                     __ptext69:	
 13142 ;; *************** function _INT_ISR *****************
 13143 ;; Defined at:
 13144 ;;		line 44 in file "mcc_generated_files/ext_int.c"
 13145 ;; Parameters:    Size  Location     Type
 13146 ;;		None
 13147 ;; Auto vars:     Size  Location     Type
 13148 ;;		None
 13149 ;; Return value:  Size  Location     Type
 13150 ;;                  1    wreg      void 
 13151 ;; Registers used:
 13152 ;;		wreg, status,2, status,0, pclath, cstack
 13153 ;; Tracked objects:
 13154 ;;		On entry : 0/0
 13155 ;;		On exit  : 0/0
 13156 ;;		Unchanged: 0/0
 13157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13158 ;;      Params:         0       0       0       0       0       0       0       0
 13159 ;;      Locals:         0       0       0       0       0       0       0       0
 13160 ;;      Temps:          0       0       0       0       0       0       0       0
 13161 ;;      Totals:         0       0       0       0       0       0       0       0
 13162 ;;Total ram usage:        0 bytes
 13163 ;; Hardware stack levels used:    1
 13164 ;; Hardware stack levels required when called:    2
 13165 ;; This function calls:
 13166 ;;		_INT_CallBack
 13167 ;; This function is called by:
 13168 ;;		_INTERRUPT_InterruptManager
 13169 ;; This function uses a non-reentrant model
 13170 ;;
 13171                           
 13172                           
 13173                           ;psect for function _INT_ISR
 13174  0BFC                     _INT_ISR:	
 13175                           
 13176                           ;ext_int.c: 50: (PIR0bits.INTF = 0);
 13177                           
 13178                           ;incstack = 0
 13179                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 13180  0BFC  0020               	movlb	0	; select bank0
 13181  0BFD  1010               	bcf	16,0	;volatile
 13182                           
 13183                           ;ext_int.c: 53: INT_CallBack();
 13184  0BFE  318D  2504         	fcall	_INT_CallBack
 13185  0C00  0008               	return
 13186  0C01                     __end_of_INT_ISR:	
 13187                           
 13188                           	psect	text70
 13189  0D04                     __ptext70:	
 13190 ;; *************** function _INT_CallBack *****************
 13191 ;; Defined at:
 13192 ;;		line 59 in file "mcc_generated_files/ext_int.c"
 13193 ;; Parameters:    Size  Location     Type
 13194 ;;		None
 13195 ;; Auto vars:     Size  Location     Type
 13196 ;;		None
 13197 ;; Return value:  Size  Location     Type
 13198 ;;                  1    wreg      void 
 13199 ;; Registers used:
 13200 ;;		wreg, status,2, status,0, pclath, cstack
 13201 ;; Tracked objects:
 13202 ;;		On entry : 0/0
 13203 ;;		On exit  : 0/0
 13204 ;;		Unchanged: 0/0
 13205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13206 ;;      Params:         0       0       0       0       0       0       0       0
 13207 ;;      Locals:         0       0       0       0       0       0       0       0
 13208 ;;      Temps:          0       0       0       0       0       0       0       0
 13209 ;;      Totals:         0       0       0       0       0       0       0       0
 13210 ;;Total ram usage:        0 bytes
 13211 ;; Hardware stack levels used:    1
 13212 ;; Hardware stack levels required when called:    1
 13213 ;; This function calls:
 13214 ;;		Absolute function
 13215 ;;		_EncINX_PulseRisingEvent
 13216 ;;		_INT_DefaultInterruptHandler
 13217 ;; This function is called by:
 13218 ;;		_INT_ISR
 13219 ;; This function uses a non-reentrant model
 13220 ;;
 13221                           
 13222                           
 13223                           ;psect for function _INT_CallBack
 13224  0D04                     _INT_CallBack:	
 13225                           
 13226                           ;ext_int.c: 62: EncINX_PulseRisingEvent();
 13227                           
 13228                           ;incstack = 0
 13229                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 13230  0D04  318E  26EE  318D   	fcall	_EncINX_PulseRisingEvent
 13231                           
 13232                           ;ext_int.c: 64: if(INT_InterruptHandler)
 13233  0D07  0022               	movlb	2	; select bank2
 13234  0D08  0834               	movf	_INT_InterruptHandler^(0+256),w
 13235  0D09  0435               	iorwf	(_INT_InterruptHandler+1)^(0+256),w
 13236  0D0A  1903               	btfsc	3,2
 13237  0D0B  0008               	return
 13238                           
 13239                           ;ext_int.c: 65: {
 13240                           ;ext_int.c: 66: INT_InterruptHandler();
 13241  0D0C  0835               	movf	(_INT_InterruptHandler+1)^(0+256),w
 13242  0D0D  008A               	movwf	10
 13243  0D0E  0834               	movf	_INT_InterruptHandler^(0+256),w
 13244  0D0F  000A               	callw
 13245  0D10  318D               	pagesel	$
 13246  0D11  0008               	return
 13247  0D12                     __end_of_INT_CallBack:	
 13248                           
 13249                           	psect	text71
 13250  0BCF                     __ptext71:	
 13251 ;; *************** function _INT_DefaultInterruptHandler *****************
 13252 ;; Defined at:
 13253 ;;		line 80 in file "mcc_generated_files/ext_int.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;		None
 13256 ;; Auto vars:     Size  Location     Type
 13257 ;;		None
 13258 ;; Return value:  Size  Location     Type
 13259 ;;                  1    wreg      void 
 13260 ;; Registers used:
 13261 ;;		None
 13262 ;; Tracked objects:
 13263 ;;		On entry : 0/0
 13264 ;;		On exit  : 0/0
 13265 ;;		Unchanged: 0/0
 13266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13267 ;;      Params:         0       0       0       0       0       0       0       0
 13268 ;;      Locals:         0       0       0       0       0       0       0       0
 13269 ;;      Temps:          0       0       0       0       0       0       0       0
 13270 ;;      Totals:         0       0       0       0       0       0       0       0
 13271 ;;Total ram usage:        0 bytes
 13272 ;; Hardware stack levels used:    1
 13273 ;; This function calls:
 13274 ;;		Nothing
 13275 ;; This function is called by:
 13276 ;;		_EXT_INT_Initialize
 13277 ;;		_INT_CallBack
 13278 ;; This function uses a non-reentrant model
 13279 ;;
 13280                           
 13281                           
 13282                           ;psect for function _INT_DefaultInterruptHandler
 13283  0BCF                     _INT_DefaultInterruptHandler:	
 13284                           
 13285                           ;incstack = 0
 13286                           ; Regs used in _INT_DefaultInterruptHandler: []
 13287  0BCF  0008               	return
 13288  0BD0                     __end_of_INT_DefaultInterruptHandler:	
 13289                           
 13290                           	psect	text72
 13291  0EEE                     __ptext72:	
 13292 ;; *************** function _EncINX_PulseRisingEvent *****************
 13293 ;; Defined at:
 13294 ;;		line 592 in file "main.c"
 13295 ;; Parameters:    Size  Location     Type
 13296 ;;		None
 13297 ;; Auto vars:     Size  Location     Type
 13298 ;;		None
 13299 ;; Return value:  Size  Location     Type
 13300 ;;                  1    wreg      void 
 13301 ;; Registers used:
 13302 ;;		wreg, status,2, status,0
 13303 ;; Tracked objects:
 13304 ;;		On entry : 0/0
 13305 ;;		On exit  : 0/0
 13306 ;;		Unchanged: 0/0
 13307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13308 ;;      Params:         0       0       0       0       0       0       0       0
 13309 ;;      Locals:         0       0       0       0       0       0       0       0
 13310 ;;      Temps:          1       0       0       0       0       0       0       0
 13311 ;;      Totals:         1       0       0       0       0       0       0       0
 13312 ;;Total ram usage:        1 bytes
 13313 ;; Hardware stack levels used:    1
 13314 ;; This function calls:
 13315 ;;		Nothing
 13316 ;; This function is called by:
 13317 ;;		_INT_CallBack
 13318 ;; This function uses a non-reentrant model
 13319 ;;
 13320                           
 13321                           
 13322                           ;psect for function _EncINX_PulseRisingEvent
 13323  0EEE                     _EncINX_PulseRisingEvent:	
 13324                           
 13325                           ;main.c: 594: EncoderPositionAtIndex = EncoderPosition;
 13326                           
 13327                           ;incstack = 0
 13328                           ; Regs used in _EncINX_PulseRisingEvent: [wreg+status,2+status,0]
 13329  0EEE  0020               	movlb	0	; select bank0
 13330  0EEF  083F               	movf	_EncoderPosition+1,w
 13331  0EF0  0022               	movlb	2	; select bank2
 13332  0EF1  00AF               	movwf	(_EncoderPositionAtIndex+1)^(0+256)
 13333  0EF2  0020               	movlb	0	; select bank0
 13334  0EF3  083E               	movf	_EncoderPosition,w
 13335  0EF4  0022               	movlb	2	; select bank2
 13336  0EF5  00AE               	movwf	_EncoderPositionAtIndex^(0+256)
 13337                           
 13338                           ;main.c: 596: if(EncoderPositionOneCycle < 0)
 13339  0EF6  0020               	movlb	0	; select bank0
 13340  0EF7  1FCE               	btfss	_EncoderPositionOneCycle,7
 13341  0EF8  2EFB               	goto	i1l3139
 13342                           
 13343                           ;main.c: 597: EncoderPositionOneCycle=-EncoderPositionOneCycle;
 13344  0EF9  09CE               	comf	_EncoderPositionOneCycle,f
 13345  0EFA  0ACE               	incf	_EncoderPositionOneCycle,f
 13346  0EFB                     i1l3139:	
 13347                           
 13348                           ;main.c: 599: if(flagForFirstRevolution == 1 && EncoderPositionOneCycle > 5)
 13349  0EFB  037B               	decf	_flagForFirstRevolution,w
 13350  0EFC  1D03               	btfss	3,2
 13351  0EFD  2F14               	goto	i1l3151
 13352  0EFE  084E               	movf	_EncoderPositionOneCycle,w
 13353  0EFF  3A80               	xorlw	128
 13354  0F00  3E7A               	addlw	-134
 13355  0F01  1C03               	skipc
 13356  0F02  2F14               	goto	i1l3151
 13357                           
 13358                           ;main.c: 601: {
 13359                           ;main.c: 602: if(EncoderPositionOneCycle < 32)
 13360  0F03  084E               	movf	_EncoderPositionOneCycle,w
 13361  0F04  3A80               	xorlw	128
 13362  0F05  3E60               	addlw	-160
 13363  0F06  1803               	skipnc
 13364  0F07  2F0B               	goto	i1l3147
 13365                           
 13366                           ;main.c: 603: {
 13367                           ;main.c: 604: EncPulseError=1;
 13368  0F08  01FC               	clrf	_EncPulseError
 13369  0F09  0AFC               	incf	_EncPulseError,f
 13370                           
 13371                           ;main.c: 608: }
 13372  0F0A  2F14               	goto	i1l3151
 13373  0F0B                     i1l3147:	
 13374                           
 13375                           ;main.c: 609: else if(EncoderPositionOneCycle > 32)
 13376  0F0B  084E               	movf	_EncoderPositionOneCycle,w
 13377  0F0C  3A80               	xorlw	128
 13378  0F0D  3E5F               	addlw	-161
 13379  0F0E  1C03               	skipc
 13380  0F0F  2F14               	goto	i1l3151
 13381                           
 13382                           ;main.c: 610: {
 13383                           ;main.c: 611: EncPulseError=2;
 13384  0F10  3002               	movlw	2
 13385  0F11  00F0               	movwf	??_EncINX_PulseRisingEvent
 13386  0F12  0870               	movf	??_EncINX_PulseRisingEvent,w
 13387  0F13  00FC               	movwf	_EncPulseError
 13388  0F14                     i1l3151:	
 13389                           
 13390                           ;main.c: 615: }
 13391                           ;main.c: 630: }
 13392                           ;main.c: 632: flagForFirstRevolution=1;
 13393  0F14  01FB               	clrf	_flagForFirstRevolution
 13394  0F15  0AFB               	incf	_flagForFirstRevolution,f
 13395                           
 13396                           ;main.c: 635: EncoderPositionOneCycle=0;
 13397  0F16  01CE               	clrf	_EncoderPositionOneCycle
 13398  0F17  0008               	return
 13399  0F18                     __end_of_EncINX_PulseRisingEvent:	
 13400                           
 13401                           	psect	text73
 13402  0D4D                     __ptext73:	
 13403 ;; *************** function _CCP1_CaptureISR *****************
 13404 ;; Defined at:
 13405 ;;		line 84 in file "mcc_generated_files/ccp1.c"
 13406 ;; Parameters:    Size  Location     Type
 13407 ;;		None
 13408 ;; Auto vars:     Size  Location     Type
 13409 ;;  module          2    5[COMMON] struct CCPR1Reg_tag
 13410 ;; Return value:  Size  Location     Type
 13411 ;;                  1    wreg      void 
 13412 ;; Registers used:
 13413 ;;		wreg, status,2, status,0, pclath, cstack
 13414 ;; Tracked objects:
 13415 ;;		On entry : 0/0
 13416 ;;		On exit  : 0/0
 13417 ;;		Unchanged: 0/0
 13418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13419 ;;      Params:         0       0       0       0       0       0       0       0
 13420 ;;      Locals:         2       0       0       0       0       0       0       0
 13421 ;;      Temps:          1       0       0       0       0       0       0       0
 13422 ;;      Totals:         3       0       0       0       0       0       0       0
 13423 ;;Total ram usage:        3 bytes
 13424 ;; Hardware stack levels used:    1
 13425 ;; Hardware stack levels required when called:    2
 13426 ;; This function calls:
 13427 ;;		_CCP1_CallBack
 13428 ;; This function is called by:
 13429 ;;		_INTERRUPT_InterruptManager
 13430 ;; This function uses a non-reentrant model
 13431 ;;
 13432                           
 13433                           
 13434                           ;psect for function _CCP1_CaptureISR
 13435  0D4D                     _CCP1_CaptureISR:	
 13436                           
 13437                           ;ccp1.c: 86: CCP_PERIOD_REG_T module;
 13438                           ;ccp1.c: 89: PIR4bits.CCP1IF = 0;
 13439                           
 13440                           ;incstack = 0
 13441                           ; Regs used in _CCP1_CaptureISR: [wreg+status,2+status,0+pclath+cstack]
 13442  0D4D  0020               	movlb	0	; select bank0
 13443  0D4E  1014               	bcf	20,0	;volatile
 13444                           
 13445                           ;ccp1.c: 92: module.ccpr1l = CCPR1L;
 13446  0D4F  0025               	movlb	5	; select bank5
 13447  0D50  0811               	movf	17,w	;volatile
 13448  0D51  00F4               	movwf	??_CCP1_CaptureISR
 13449  0D52  0874               	movf	??_CCP1_CaptureISR,w
 13450  0D53  00F5               	movwf	CCP1_CaptureISR@module
 13451                           
 13452                           ;ccp1.c: 93: module.ccpr1h = CCPR1H;
 13453  0D54  0812               	movf	18,w	;volatile
 13454  0D55  00F4               	movwf	??_CCP1_CaptureISR
 13455  0D56  0874               	movf	??_CCP1_CaptureISR,w
 13456  0D57  00F6               	movwf	CCP1_CaptureISR@module+1
 13457                           
 13458                           ;ccp1.c: 96: CCP1_CallBack(module.ccpr1_16Bit);
 13459  0D58  0876               	movf	CCP1_CaptureISR@module+1,w
 13460  0D59  00F3               	movwf	CCP1_CallBack@capturedValue+1
 13461  0D5A  0875               	movf	CCP1_CaptureISR@module,w
 13462  0D5B  00F2               	movwf	CCP1_CallBack@capturedValue
 13463  0D5C  318C  241C         	fcall	_CCP1_CallBack
 13464  0D5E  0008               	return
 13465  0D5F                     __end_of_CCP1_CaptureISR:	
 13466                           
 13467                           	psect	text74
 13468  0C1C                     __ptext74:	
 13469 ;; *************** function _CCP1_CallBack *****************
 13470 ;; Defined at:
 13471 ;;		line 99 in file "mcc_generated_files/ccp1.c"
 13472 ;; Parameters:    Size  Location     Type
 13473 ;;  capturedValu    2    2[COMMON] unsigned int 
 13474 ;; Auto vars:     Size  Location     Type
 13475 ;;		None
 13476 ;; Return value:  Size  Location     Type
 13477 ;;                  1    wreg      void 
 13478 ;; Registers used:
 13479 ;;		wreg, status,2, status,0, pclath, cstack
 13480 ;; Tracked objects:
 13481 ;;		On entry : 0/0
 13482 ;;		On exit  : 0/0
 13483 ;;		Unchanged: 0/0
 13484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13485 ;;      Params:         2       0       0       0       0       0       0       0
 13486 ;;      Locals:         0       0       0       0       0       0       0       0
 13487 ;;      Temps:          0       0       0       0       0       0       0       0
 13488 ;;      Totals:         2       0       0       0       0       0       0       0
 13489 ;;Total ram usage:        2 bytes
 13490 ;; Hardware stack levels used:    1
 13491 ;; Hardware stack levels required when called:    1
 13492 ;; This function calls:
 13493 ;;		_EncA_PulseEdgeEvent
 13494 ;; This function is called by:
 13495 ;;		_CCP1_CaptureISR
 13496 ;; This function uses a non-reentrant model
 13497 ;;
 13498                           
 13499                           
 13500                           ;psect for function _CCP1_CallBack
 13501  0C1C                     _CCP1_CallBack:	
 13502                           
 13503                           ;ccp1.c: 102: EncA_PulseEdgeEvent(capturedValue);
 13504                           
 13505                           ;incstack = 0
 13506                           ; Regs used in _CCP1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 13507  0C1C  0873               	movf	CCP1_CallBack@capturedValue+1,w
 13508  0C1D  00F1               	movwf	EncA_PulseEdgeEvent@capturedValue+1
 13509  0C1E  0872               	movf	CCP1_CallBack@capturedValue,w
 13510  0C1F  00F0               	movwf	EncA_PulseEdgeEvent@capturedValue
 13511  0C20  318C  2433         	fcall	_EncA_PulseEdgeEvent
 13512  0C22  0008               	return
 13513  0C23                     __end_of_CCP1_CallBack:	
 13514                           
 13515                           	psect	text75
 13516  0C33                     __ptext75:	
 13517 ;; *************** function _EncA_PulseEdgeEvent *****************
 13518 ;; Defined at:
 13519 ;;		line 267 in file "main.c"
 13520 ;; Parameters:    Size  Location     Type
 13521 ;;  capturedValu    2    0[COMMON] unsigned int 
 13522 ;; Auto vars:     Size  Location     Type
 13523 ;;		None
 13524 ;; Return value:  Size  Location     Type
 13525 ;;                  1    wreg      void 
 13526 ;; Registers used:
 13527 ;;		None
 13528 ;; Tracked objects:
 13529 ;;		On entry : 0/0
 13530 ;;		On exit  : 0/0
 13531 ;;		Unchanged: 0/0
 13532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13533 ;;      Params:         2       0       0       0       0       0       0       0
 13534 ;;      Locals:         0       0       0       0       0       0       0       0
 13535 ;;      Temps:          0       0       0       0       0       0       0       0
 13536 ;;      Totals:         2       0       0       0       0       0       0       0
 13537 ;;Total ram usage:        2 bytes
 13538 ;; Hardware stack levels used:    1
 13539 ;; This function calls:
 13540 ;;		Nothing
 13541 ;; This function is called by:
 13542 ;;		_CCP1_CallBack
 13543 ;; This function uses a non-reentrant model
 13544 ;;
 13545                           
 13546                           
 13547                           ;psect for function _EncA_PulseEdgeEvent
 13548  0C33                     _EncA_PulseEdgeEvent:	
 13549                           
 13550                           ;incstack = 0
 13551                           ; Regs used in _EncA_PulseEdgeEvent: []
 13552                           ;main.c: 269: do { LATCbits.LATC3 = 1; } while(0);
 13553  0C33  0022               	movlb	2	; select bank2
 13554  0C34  158E               	bsf	14,3	;volatile
 13555                           
 13556                           ;main.c: 271: PIE4bits.CCP1IE = 0;
 13557  0C35  0021               	movlb	1	; select bank1
 13558  0C36  1014               	bcf	20,0	;volatile
 13559                           
 13560                           ;main.c: 273: PIE4bits.CCP2IE = 0;
 13561  0C37  1094               	bcf	20,1	;volatile
 13562                           
 13563                           ;main.c: 276: PIE4bits.CCP1IE = 1;
 13564  0C38  1414               	bsf	20,0	;volatile
 13565                           
 13566                           ;main.c: 279: do { LATCbits.LATC3 = 0; } while(0);
 13567  0C39  0022               	movlb	2	; select bank2
 13568  0C3A  118E               	bcf	14,3	;volatile
 13569  0C3B  0008               	return
 13570  0C3C                     __end_of_EncA_PulseEdgeEvent:	
 13571  007E                     btemp	set	126	;btemp
 13572  007E                     int$flags	set	126
 13573  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        9
    BSS         77
    Persistent  16
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     21      79
    BANK1            80     78      80
    BANK2            80      0      36
    BANK3             0      0       0
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    rxBuffer	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    txBuffer	PTR unsigned int  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    postTransmission@postTransmission	PTR FTN()void  size(2) Largest target is 1
		 -> postTransmission_App(), 

    preTransmission@preTransmission	PTR FTN()void  size(2) Largest target is 1
		 -> preTransmission_App(), 

    _postTransmission	PTR FTN()void  size(2) Largest target is 1
		 -> postTransmission_App(), Absolute function(), 

    _preTransmission	PTR FTN()void  size(2) Largest target is 1
		 -> preTransmission_App(), Absolute function(), 

    INT_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    IOCCF5_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> IOCCF5_DefaultInterruptHandler(), 

    IOCCF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF5_DefaultInterruptHandler(), Absolute function(), 

    IOCCF4_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> IOCCF4_DefaultInterruptHandler(), 

    IOCCF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF4_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR3_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), 

    TMR3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), Absolute function(), 

    TMR5_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR5_DefaultInterruptHandler(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR5_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_CCP1_CaptureISR
    _TMR3_DefaultInterruptHandler->_Timer3_Overflow
    _TMR0_CallBack->_Timer0_tick10msecFunc
    _INT_CallBack->_EncINX_PulseRisingEvent
    _CCP1_CaptureISR->_CCP1_CallBack
    _CCP1_CallBack->_EncA_PulseEdgeEvent

Critical Paths under _main in BANK0

    _main->_MB_UpdateEPCParameter
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _TMR5_Initialize->_TMR5_SetInterruptHandler
    _TMR3_Initialize->_TMR3_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF5_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _NutRunCycleStart->_TMR3_WriteTimer
    _ModbusMasterSetup->_ModbusMasterInit
    _ModbusMasterSetup->_postTransmission
    _ModbusMasterSetup->_preTransmission
    _MB_UpdateEPCParameter->_readHoldingRegisters
    _readHoldingRegisters->_ModbusMasterTransaction
    _ModbusMasterTransaction->_word
    _EPC_StateMachineControlLoop->_LedONStartConfig
    _LedONStartConfig->___lwdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _readHoldingRegisters->_ModbusMasterTransaction

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   19549
        _EPC_StateMachineControlLoop
                   _LedONStartConfig
                    _LedONStatusBusy
              _MB_UpdateEPCParameter
                  _ModbusMasterSetup
                   _NutRunCycleStart
                  _SYSTEM_Initialize
                     _TMR3_StopTimer
                    _TMR3_WriteTimer
                     _TMR5_StopTimer
                    _TMR5_WriteTimer
                    _getEncoderState
 ---------------------------------------------------------------------------------
 (1) _getEncoderState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR5_WriteTimer                                      2     0      2     216
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _TMR5_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR3_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     539
                     _ADC_Initialize
                    _CCP1_Initialize
                    _CCP2_Initialize
                  _EUSART_Initialize
                 _EXT_INT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR3_Initialize
                    _TMR5_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0      86
           _TMR5_SetInterruptHandler
                    _TMR5_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR5_SetInterruptHandler                             2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0      86
           _TMR3_SetInterruptHandler
                    _TMR3_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR3_SetInterruptHandler                             2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      86
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0     195
                                              2 BANK0      1     1      0
         _IOCCF4_SetInterruptHandler
         _IOCCF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF5_SetInterruptHandler                           2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCCF4_SetInterruptHandler                           2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0      86
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CCP2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NutRunCycleStart                                     0     0      0     344
                   _NutRunCycleReset
                    _TMR3_StartTimer
                    _TMR3_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR3_WriteTimer                                      2     0      2     344
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR3_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ModbusMasterSetup                                    0     0      0     194
                  _EUSART_Initialize
                   _ModbusMasterInit
                   _postTransmission
                    _preTransmission
 ---------------------------------------------------------------------------------
 (2) _preTransmission                                      2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _postTransmission                                     2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ModbusMasterInit                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MB_UpdateEPCParameter                                2     2      0   16094
                                             19 BANK0      2     2      0
                  _getResponseBuffer
               _readHoldingRegisters
 ---------------------------------------------------------------------------------
 (2) _readHoldingRegisters                                 4     0      4   15965
                                             15 BANK0      4     0      4
            _ModbusMasterTransaction
 ---------------------------------------------------------------------------------
 (3) _ModbusMasterTransaction                             83    83      0   15569
                                             10 BANK0      5     5      0
                                              0 BANK1     78    78      0
                   Absolute function *
                        _EUSART_Read
                       _EUSART_Write
                       _crc16_update
                           _highByte
                            _lowByte
                             _millis
                        _millisReset
               _postTransmission_App *
                _preTransmission_App *
                               _word
 ---------------------------------------------------------------------------------
 (4) _word                                                10     8      2     236
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) _preTransmission_App                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _postTransmission_App                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _millisReset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _millis                                               4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _lowByte                                              2     0      2     982
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _highByte                                             2     0      2     854
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _crc16_update                                         7     4      3     415
                                              0 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (4) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getResponseBuffer                                    7     5      2      44
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (1) _LedONStatusBusy                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EPC_StateMachineControlLoop                          2     2      0     920
                                             13 BANK0      2     2      0
                       _EUSART_Write
                   _LedONStartConfig
                   _NutRunCycleReset
 ---------------------------------------------------------------------------------
 (2) _NutRunCycleReset                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LedONStartConfig                                     5     3      2     898
                                              8 BANK0      5     3      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     197
                                              7 COMMON     1     1      0
                    _CCP1_CaptureISR
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR3_ISR
                           _TMR5_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR5_ISR                                             0     0      0       0
                   Absolute function *
       _TMR5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR5_DefaultInterruptHandler                         0     0      0       0
                    _Timer5_Overflow
 ---------------------------------------------------------------------------------
 (8) _Timer5_Overflow                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR3_ISR                                             0     0      0       0
                   Absolute function *
       _TMR3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR3_DefaultInterruptHandler                         0     0      0       0
                    _Timer3_Overflow
 ---------------------------------------------------------------------------------
 (8) _Timer3_Overflow                                      4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
              _Timer0_tick10msecFunc
 ---------------------------------------------------------------------------------
 (8) _Timer0_tick10msecFunc                                4     4      0       0
                                              0 COMMON     4     4      0
               _LedON_Control_10msec
 ---------------------------------------------------------------------------------
 (9) _LedON_Control_10msec                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCCF4_ISR
                         _IOCCF5_ISR
 ---------------------------------------------------------------------------------
 (7) _IOCCF5_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _IOCCF5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _IOCCF4_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _IOCCF4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _INT_ISR                                              0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (7) _INT_CallBack                                         0     0      0       0
                   Absolute function *
            _EncINX_PulseRisingEvent
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _INT_DefaultInterruptHandler                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EncINX_PulseRisingEvent                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _CCP1_CaptureISR                                      3     3      0     197
                                              4 COMMON     3     3      0
                      _CCP1_CallBack
 ---------------------------------------------------------------------------------
 (7) _CCP1_CallBack                                        2     0      2     150
                                              2 COMMON     2     0      2
                _EncA_PulseEdgeEvent
 ---------------------------------------------------------------------------------
 (8) _EncA_PulseEdgeEvent                                  2     0      2      64
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EPC_StateMachineControlLoop
     _EUSART_Write
     _LedONStartConfig
       ___lwdiv
       ___wmul
     _NutRunCycleReset
   _LedONStartConfig
     ___lwdiv
     ___wmul
   _LedONStatusBusy
   _MB_UpdateEPCParameter
     _getResponseBuffer
     _readHoldingRegisters
       _ModbusMasterTransaction
         Absolute function(Fake) *
         _EUSART_Read *
         _EUSART_Write *
         _crc16_update *
         _highByte *
         _lowByte *
         _millis *
         _millisReset *
         _postTransmission_App *
         _preTransmission_App *
         _word *
   _ModbusMasterSetup
     _EUSART_Initialize
     _ModbusMasterInit
     _postTransmission
     _preTransmission
   _NutRunCycleStart
     _NutRunCycleReset
     _TMR3_StartTimer
     _TMR3_WriteTimer
   _SYSTEM_Initialize
     _ADC_Initialize
     _CCP1_Initialize
     _CCP2_Initialize
     _EUSART_Initialize
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCCF4_SetInterruptHandler
       _IOCCF5_SetInterruptHandler
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR3_Initialize
       _TMR3_SetInterruptHandler
       _TMR3_StartTimer
     _TMR5_Initialize
       _TMR5_SetInterruptHandler
       _TMR5_StartTimer
     _WDT_Initialize
   _TMR3_StopTimer
   _TMR3_WriteTimer
   _TMR5_StopTimer
   _TMR5_WriteTimer
   _getEncoderState

 _INTERRUPT_InterruptManager (ROOT)
   _CCP1_CaptureISR
     _CCP1_CallBack
       _EncA_PulseEdgeEvent
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _EncINX_PulseRisingEvent *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
     _IOCCF4_ISR
       Absolute function(Fake) *
       _IOCCF4_DefaultInterruptHandler *
     _IOCCF5_ISR
       Absolute function(Fake) *
       _IOCCF5_DefaultInterruptHandler *
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _Timer0_tick10msecFunc *
         _LedON_Control_10msec
   _TMR3_ISR
     Absolute function(Fake) *
     _TMR3_DefaultInterruptHandler *
       _Timer3_Overflow
   _TMR5_ISR
     Absolute function(Fake) *
     _TMR5_DefaultInterruptHandler *
       _Timer5_Overflow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      D1       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     15      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4E      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      24      10       45.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK3                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      D1      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Apr 22 19:50:13 2017

                          __u16WriteAddress 0034            __end_of_TMR5_SetInterruptHandler 0C84  
    __end_of_IOCCF4_DefaultInterruptHandler 0BD1     __size_of_IOCCF4_DefaultInterruptHandler 0001  
            _IOCCF4_DefaultInterruptHandler 0BD0                                 __CFG_CP$OFF 0000  
            __size_of_MB_UpdateEPCParameter 001E                         ___wmul@multiplicand 0053  
             __end_of_MB_UpdateEPCParameter 0800                 MB_UpdateEPCParameter@result 0065  
                         ??_TMR5_WriteTimer 0053                     __end_of_CCP1_Initialize 0D4D  
                  __size_of_Timer5_Overflow 0001                                 __CFG_LVP$ON 0000  
                        __u16ResponseBuffer 20F0                                         l152 0C84  
                                       l159 0C25                                         l980 04BC  
                                       l977 04B0                                         _GIE 005F  
                              __CFG_CPD$OFF 0000               LedONStartConfig@LedONNumBlink 005A  
                 __size_of_LedONStartConfig 0062                                         wreg 0009  
                              ?_EUSART_Read 0070              preTransmission@preTransmission 0051  
                                      l1017 0629                                        l1151 0738  
                                      l1144 0732                                        l1148 0735  
                                      l3031 0C8C                             _timer3ReloadVal 006B  
                                      l1269 0E51                                        l3085 0F3B  
                     __size_of_crc16_update 0032                                        l6013 0496  
                                      l6005 0494                                        l6111 068D  
                                      l6103 0652                                        l6023 04D3  
                                      l6015 04AF                                        l3481 0F53  
                                      l6105 065A                                        l6121 06AA  
                                      l3545 0DC1                                        l3483 0F5F  
                                      l3459 0E4B                                        l3707 073B  
                                      l6115 065C                                        l6043 050F  
                                      l6051 051A                                        l6035 04F2  
                                      l6203 07FD                                        l3493 0F7A  
                                      l3717 0778                                        l3709 0747  
                                      l6045 0511                                        l6061 0575  
                                      l6053 053B                                        l6119 0699  
                                      l6055 0569                                        l6047 0513  
                                      l6039 04FE                                        l3489 0F71  
                                      l6081 05E0                                        l6073 0581  
                                      l6057 056E                                        l3851 0F87  
                                      l6075 05B7                                        l6083 05E6  
                                      l3771 0DD8                                        l3827 0CAA  
                                      l3749 0E7E                                        l6093 061D  
                                      l3871 0FB3                                        l3855 0F95  
                                      l3863 0F9F                                        l6087 05EB  
                                      l6263 0FF1                                        l6097 05EC  
                                      l6267 0FFC                                        l6357 0295  
                                      l5901 0241                                        l5905 025A  
                                      l5913 0281                                        l5915 0287  
                                      l5917 029E                                        l5861 0136  
                                      l5845 00C7                                        l5935 02EA  
                                      l5871 017A                                        l5951 03BA  
                                      l5937 034B                                        l5953 03CE  
                                      l5891 0212                                        l5883 01BF  
                                      l5859 0124                                        l5877 019B  
                                      l5869 0165         ModbusMasterTransaction@u32StartTime 00E0  
                                      l5987 042A                                        l5989 0451  
                                      u2020 07E0                                        _LATA 010C  
                                      _LATB 010D                             __end_of_INT_ISR 0C01  
                                      _LATC 010E                                        u1905 0E52  
                                      u1915 0E57                                        u1945 0F56  
                                      u1965 0F60                                        u4525 0502  
                                      u1975 0F6A                                        u1985 0F72  
                                      u4595 0591                                        _WPUA 020C  
                                      _WPUB 020D                                        _WPUC 020E  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                   __end_of_CCP2_Initialize 0C4E                                        _main 0FB9  
                           _TMR0_StartTimer 0BE8                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                                      _word 0DE1            ??_IOCCF5_DefaultInterruptHandler 0070  
           ?_IOCCF5_DefaultInterruptHandler 0070                               __CFG_BOREN$ON 0000  
       __end_of_INT_DefaultInterruptHandler 0BD0                 _INT_DefaultInterruptHandler 0BCF  
             ??_EPC_StateMachineControlLoop 005E                               __CFG_BORV$LOW 0000  
                                      start 004E                             _timer5ReloadVal 006D  
                   _EncEdgeMinTimeIntSumAvg 0124                             _TMR3_Initialize 0E12  
           __end_of_INT_SetInterruptHandler 0C57                               __CFG_CSWEN$ON 0000  
                             __CFG_MCLRE$ON 0000                            ?_CCP1_CaptureISR 0070  
                          ?_getEncoderState 0070                     __end_of_TMR0_Initialize 0D9C  
            ??_TMR0_DefaultInterruptHandler 0070                               ?_EUSART_Write 0070  
            __size_of_OSCILLATOR_Initialize 0008               __end_of_OSCILLATOR_Initialize 0C33  
                       __size_of_IOCCF4_ISR 000D                         __size_of_IOCCF5_ISR 000D  
                                     _ADACT 009F                                       ?_main 0070  
                             __CFG_WDTE$OFF 0000                 __end_of_preTransmission_App 0BE5  
                                     ?_word 0051                                       _T3CON 0413  
                                     _T5CON 041A                              __CFG_DEBUG$OFF 0000  
                           __end_of___lwdiv 0F7F                                       i1l430 0013  
                                     i1l432 001D                                       i1l434 0029  
                                     i1l442 0049                                       i1l436 0035  
                                     i1l438 0041                      _flagForFirstRevolution 007B  
                                     _OSCEN 091D                                _crc16_update 0F18  
                                     _TMR0H 0016                                       _TMR0L 0015  
                                     _TMR3H 0412                                       _TMR5H 0419  
                                     _TMR3L 0411                                       _TMR5L 0418  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E                      __size_of_CCP1_CallBack 0007  
         __size_of_TMR0_SetInterruptHandler 0009              readHoldingRegisters@u16ReadQty 0062  
         __size_of_TMR3_SetInterruptHandler 0009                   ?_TMR0_SetInterruptHandler 0051  
                 ?_TMR3_SetInterruptHandler 0051                            __end_of_TMR0_ISR 0C06  
                          __end_of_TMR3_ISR 0D73                            __end_of_TMR5_ISR 0D87  
                    ?_Timer0_tick10msecFunc 0070              ??_TMR3_DefaultInterruptHandler 0074  
                   __end_of_PIN_MANAGER_IOC 0CB9                              _WDT_Initialize 0BF4  
                           __end_of_lowByte 0BE2                                       pclath 000A  
                 __size_of_ModbusMasterInit 000F           ModbusMasterTransaction@u8MBStatus 00E9  
                         ?_postTransmission 0051                                       status 0003  
                                     wtemp0 007E                                ?_millisReset 0070  
                           _LedONStatusBusy 0BD9                          ??_postTransmission 0053  
                           _TMR5_Initialize 0E2D                             __initialization 0050  
                         _getResponseBuffer 0E64                                __end_of_main 1000  
                              __end_of_word 0DF9                          ?_getResponseBuffer 0051  
                            ??_EUSART_Write 0051                 ?_INTERRUPT_InterruptManager 0070  
      __size_of_EPC_StateMachineControlLoop 003A                           ??_Timer3_Overflow 0070  
                                    ??_main 0066                            ?_CCP1_Initialize 0070  
                  _TMR5_SetInterruptHandler 0C7B                                      ??_word 0053  
                           _TMR3_StartTimer 0BE5                       _TMR3_InterruptHandler 013C  
                       ??_getResponseBuffer 0053                      __end_of_WDT_Initialize 0BF8  
                                 ??_INT_ISR 0071            __size_of_ModbusMasterTransaction 0618  
                         ??_Timer5_Overflow 0070                     __end_of_TMR0_StartTimer 0BEB  
                                    _ADCON0 009D                                      _ADCON1 009E  
                                    _ADRESH 009C                                      _ADRESL 009B  
                                    _CCPR1H 0292                                      _CCPR2H 0296  
                                    _CCPR1L 0291                                      _CCPR2L 0295  
              ??_IOCCF4_SetInterruptHandler 0053                                      _ANSELA 018C  
                                    _ANSELB 018D                                      _ANSELC 018E  
                        __CFG_RSTOSC$HFINT1 0000                                      _T0CON0 0017  
                                    _T0CON1 0018                                      _T3GCON 0414  
                                    _T5GCON 041B                                      _RC1REG 0199  
                                    _RC1STA 019D                                      i1l1181 0704  
                                    i1l1184 0707                                      i1l1177 0701  
                                    _ODCONA 028C                                      _ODCONB 028D  
                                    i1l3051 06CD                                      _ODCONC 028E  
                                    i1l3053 06D9                                      i1l3061 06F8  
                                    i1l3151 0F14                                      i1l3071 071A  
                                    i1l3049 06C1                                      i1l3057 06E5  
                                    i1l3147 0F0B                                      i1l3139 0EFB  
                                    i1l3067 070A                                      i1l3059 06F1  
                                    i1l3069 0716                     __end_of_TMR3_Initialize 0E2D  
                                    i1l6141 0CE7                                      i1l6147 0CF4  
                                    i1l6189 0CB3                                      u141_25 06BE  
                                    u142_20 06CA                                      u144_20 06D6  
                                    _INLVLA 038C                                      _INLVLC 038E  
                                    u146_20 06E2                                      u148_25 06FE  
                                    _OSCFRQ 091F                                      _TX1REG 019A  
                                    _WDTCON 0097                                      _TX1STA 019E  
                          ?_CCP2_Initialize 0070                                  __u8MBSlave 004A  
                           _TMR3_WriteTimer 0DB3                                      _Led_ON 0046  
                 __end_of_getResponseBuffer 0E83                               _CCP1_CallBack 0C1C  
                            __CFG_PWRTE$OFF 0000                            __end_of_highByte 0BDF  
                                    ___wmul 0E48         ModbusMasterTransaction@u8MBFunction 00E8  
                            __CFG_STVREN$ON 0000                                   ??___lwdiv 0055  
                  __size_of_preTransmission 0006                    ?_EncINX_PulseRisingEvent 0070  
                     ModbusMasterInit@slave 0052                            ?_TMR0_Initialize 0070  
                                    _millis 0C8E                               ?_INT_CallBack 0070  
       __size_of_IOCCF4_SetInterruptHandler 0009                             __u16ReadAddress 0038  
                           _TMR5_StartTimer 0BEB                            _LedONStartConfig 071F  
                                 ??_lowByte 0053                             ?_WDT_Initialize 0070  
                     __end_of_TMR0_CallBack 0D20            __size_of_INT_SetInterruptHandler 0009  
   INT_SetInterruptHandler@InterruptHandler 0051  IOCCF5_SetInterruptHandler@InterruptHandler 0051  
IOCCF4_SetInterruptHandler@InterruptHandler 0051    TMR0_SetInterruptHandler@InterruptHandler 0051  
  TMR3_SetInterruptHandler@InterruptHandler 0051    TMR5_SetInterruptHandler@InterruptHandler 0051  
                          ?_PIN_MANAGER_IOC 0070                 __end_of_EncA_PulseEdgeEvent 0C3C  
                   __end_of_LedONStatusBusy 0BDC                             _EncPulseOpState 0040  
                              ??_IOCCF4_ISR 0070                                ??_IOCCF5_ISR 0070  
                   __end_of_TMR5_Initialize 0E48                        __size_of_EUSART_Read 000A  
                         _SYSTEM_Initialize 0E83                   __size_of_NutRunCycleReset 0017  
                   __end_of__initialization 0098                   __size_of_NutRunCycleStart 000F  
                            ?_CCP1_CallBack 0072                          ?_SYSTEM_Initialize 0070  
              __end_of_LedON_Control_10msec 071F                             _TMR5_WriteTimer 0DCA  
                            __pcstackCOMMON 0070                      __u8ResponseBufferIndex 0048  
                              __pidataBANK0 0C0B                                __pidataBANK2 0BF8  
                       ??_SYSTEM_Initialize 0054                     __end_of_TMR3_StartTimer 0BE8  
                                 ?_TMR0_ISR 0070                                   ?_TMR3_ISR 0070  
                                 ?_TMR5_ISR 0070                              ??_INT_CallBack 0071  
                        _MBreadSetNoOfPulse 0044                          __end_of_IOCCF4_ISR 0CEA  
                        __end_of_IOCCF5_ISR 0CF7                 __size_of_EXT_INT_Initialize 000C  
                        _multipleTimecheck0 0050                          _multipleTimecheck1 004F  
                   _MBwriteCurrentNoOfPulse 0132                __end_of_readHoldingRegisters 0D04  
                    __u8TransmitBufferIndex 0049                                word@highByte 005A  
                          ?_TMR0_StartTimer 0070                   __end_of_SYSTEM_Initialize 0EA4  
                    _EncoderPositionAtIndex 012E                     __end_of_TMR3_WriteTimer 0DCA  
                                __pbssBANK0 0020                                  __pbssBANK1 00EE  
                                __pbssBANK2 0120                            _ModbusMasterInit 0D20  
                      __end_of_EUSART_Write 0C2B                            ?_TMR3_Initialize 0070  
                                _delayCount 003A                  __size_of_getResponseBuffer 001F  
                               __u16ReadQty 0036             __end_of_EncINX_PulseRisingEvent 0F18  
                      __size_of_millisReset 000A                                  __pmaintext 0FB9  
          __end_of_TMR0_SetInterruptHandler 0C72            __end_of_TMR3_SetInterruptHandler 0C7B  
                                   ?___wmul 0051                                  ??_TMR0_ISR 0074  
                   __end_of_TMR5_StartTimer 0BEE                             __CFG_PPS1WAY$ON 0000  
                                ??_TMR3_ISR 0074                                  ??_TMR5_ISR 0070  
                                __pintentry 0004               __size_of_postTransmission_App 0005  
                                   _CCP1CAP 0294                                     _CCP2CAP 0298  
                                   _CCP1CON 0293                                     _CCP2CON 0297  
                                   ?_millis 0051      __end_of_IOCCF5_DefaultInterruptHandler 0BD2  
   __size_of_IOCCF5_DefaultInterruptHandler 0001              _IOCCF5_DefaultInterruptHandler 0BD1  
                   __size_of_ADC_Initialize 0009                       _MB_UpdateEPCParameter 07E2  
                   ??_Timer0_tick10msecFunc 0070                     _ModbusMasterTransaction 009C  
                         ??_preTransmission 0053                                     _SP1BRGH 019C  
                                   _SP1BRGL 019B                    getResponseBuffer@u8Index 0057  
                                   _INT_ISR 0BFC                                     _OSCCON1 0919  
                                   _OSCCON3 091B                                     _OSCTUNE 091E  
        __end_of_IOCCF4_SetInterruptHandler 0C60                  _IOCCF4_SetInterruptHandler 0C57  
                                   _PPSLOCK 0E0F                                   ?_highByte 0051  
                          ?_LedONStatusBusy 0070                     __end_of_TMR5_WriteTimer 0DE1  
                           ??_CCP1_CallBack 0074                            ?_TMR5_Initialize 0070  
                       _Blick_tickPointMsec 002C                     __size_of_TMR3_StopTimer 0003  
                           _Timer3_Overflow 0EC8                  ??_TMR5_SetInterruptHandler 0053  
                          ?_TMR3_StartTimer 0070                             __size_of___wmul 001C  
                                   ___lwdiv 0F4A                             _Timer5_Overflow 0003  
                 __size_of_postTransmission 0006                             __size_of_millis 000A  
                                   __ptext1 0CA2                                     __ptext2 0DCA  
                                   __ptext3 0BF1                                     __ptext4 0BEE  
                                   __ptext5 0E83                                     __ptext6 0BF4  
                                   __ptext7 0E2D                                     __ptext8 0BEB  
                                   __ptext9 0C7B                    __size_of_CCP1_CaptureISR 0012  
                   __size_of_TMR5_StopTimer 0003                        _MBwriteToolOperating 007D  
                     _OSCILLATOR_Initialize 0C2B                        _LedON_Control_10msec 06B4  
                                 _T3CONbits 0413                    __size_of_getEncoderState 000B  
                                   _lowByte 0BDF                    ??_PIN_MANAGER_Initialize 0053  
                   _INT_SetInterruptHandler 0C4E                                   _T5CONbits 041A  
                                 _IOCCFbits 0399                                 _NutRunstate 004B  
                                 _IOCCNbits 0398                                   _IOCCPbits 0397  
                                ??_highByte 0053                __size_of_preTransmission_App 0003  
                __size_of_SYSTEM_Initialize 0021                                   _LED_Color 006A  
                                   clrloop0 0CD2                        end_of_initialization 0098  
                          ?_TMR3_WriteTimer 0051         __end_of_EPC_StateMachineControlLoop 0FB9  
               _EPC_StateMachineControlLoop 0F7F                            _NutRunCycleReset 0D9C  
                          _NutRunCycleStart 0D2F                           __postTransmission 0030  
                      __end_of_INT_CallBack 0D12                           _EUSART_Initialize 0CB9  
                  __end_of_LedONStartConfig 0781                          ?_EUSART_Initialize 0070  
                      _readHoldingRegisters 0CF7                            ?_TMR5_StartTimer 0070  
          LedONStartConfig@LedONDurationSec 0059                   ??_ModbusMasterTransaction 005B  
                       ??_EUSART_Initialize 0051                            ??_WDT_Initialize 0051  
                    ?_MB_UpdateEPCParameter 0070                    _TMR0_SetInterruptHandler 0C69  
                                 _PORTCbits 000E                    _TMR3_SetInterruptHandler 0C72  
                     _TMR5_InterruptHandler 013E                       ?_LedON_Control_10msec 0070  
                                highByte@ww 0051                     _IOCCF4_InterruptHandler 0138  
              ModbusMasterTransaction@u8Qty 00E6                       __size_of_EUSART_Write 0008  
          __size_of_EncINX_PulseRisingEvent 002A                    __size_of_CCP1_Initialize 000F  
                          __CFG_FEXTOSC$OFF 0000                ??_IOCCF5_SetInterruptHandler 0053  
                          ?_TMR5_WriteTimer 0051                     __end_of_Timer3_Overflow 0EEE  
                                 _RXPPSbits 0E24                     TMR5_WriteTimer@timerVal 0051  
                 __end_of_EUSART_Initialize 0CC5                            __preTransmission 0032  
                   __end_of_Timer5_Overflow 0004                       ?_readHoldingRegisters 0060  
                    _EncEdgeTimeIntervalOld 0128                                 _CCP1PPSbits 0E14  
                    _EncEdgeMinTimeInterval 0066                                 _CCP2PPSbits 0E15  
                  __size_of_CCP2_Initialize 0009                     __u8ResponseBufferLength 0047  
                            __end_of___wmul 0E64                               _EncSpdredFact 0140  
                  __end_of_ModbusMasterInit 0D2F                                _EUSART_Write 0C23  
                         __size_of_TMR0_ISR 0005                           __size_of_TMR3_ISR 0014  
                            _ADC_Initialize 0C3C                           __size_of_TMR5_ISR 0014  
                           crc16_update@crc 0051                          __u16TransmitBuffer 2170  
                    ?_OSCILLATOR_Initialize 0070                              __end_of_millis 0C98  
                 ??_INT_SetInterruptHandler 0053         __size_of_IOCCF5_SetInterruptHandler 0009  
                             _EncPulseError 007C                         start_initialization 0050  
                  ModbusMasterTransaction@i 00EC                                   _OldEncPos 003C  
      __end_of_TMR5_DefaultInterruptHandler 0BD9       __size_of_TMR5_DefaultInterruptHandler 0003  
              _TMR5_DefaultInterruptHandler 0BD6                         _EncEdgeTimeInterval 0024  
                  __size_of_TMR0_Initialize 0015             __size_of_PIN_MANAGER_Initialize 0061  
                             ??_EUSART_Read 0051                           ??_CCP1_CaptureISR 0074  
                         ??_getEncoderState 0051                              _TMR3_StopTimer 0BEE  
              __size_of_EncA_PulseEdgeEvent 0009                    __size_of_PIN_MANAGER_IOC 000C  
              ?_INT_DefaultInterruptHandler 0070                            __CFG_LPBOREN$OFF 0000  
                           _preTransmission 0C16                                    ??___wmul 0055  
                              _LED_msec_Cnt 002E                                 _CCPTMRSbits 029F  
                    __size_of_TMR0_CallBack 000E                      __end_of_ADC_Initialize 0C45  
                               __pdataBANK0 0066                                 __pdataBANK2 0140  
                          _postTransmission 0C10                                    ??_millis 0055  
                __end_of_EXT_INT_Initialize 0CD1                      ??_LedON_Control_10msec 0070  
                            _TMR5_StopTimer 0BF1                       CCP1_CaptureISR@module 0075  
                             ?_crc16_update 0051                                 __pbssBIGRAM 20F0  
                               __pbssCOMMON 0078                           _ModbusMasterSetup 0DF9  
                                 ___latbits 0001              __size_of_Timer0_tick10msecFunc 0024  
                                  ?_INT_ISR 0070                               __pcstackBANK0 0051  
                             __pcstackBANK1 00A0               __end_of_Timer0_tick10msecFunc 0EC8  
    ModbusMasterTransaction@u8ModbusADUSize 00ED                               crc16_update@a 0053  
                             crc16_update@i 0056                 ?_IOCCF4_SetInterruptHandler 0051  
                        ?_ModbusMasterSetup 0070                __end_of_postTransmission_App 0C0B  
                     __size_of_INT_CallBack 000E               ?_TMR5_DefaultInterruptHandler 0070  
                    __end_of_TMR3_StopTimer 0BF1                     _EncoderPositionOneCycle 004E  
                          ?_Timer3_Overflow 0070                           __size_of_highByte 0003  
                __size_of_EUSART_Initialize 000C                         ??_ModbusMasterSetup 0053  
                             ??_millisReset 0051                         __end_of_EUSART_Read 0C8E  
                     _TMR0_InterruptHandler 013A                           ??_CCP1_Initialize 0051  
                                 __pnvBANK0 006B                                   __pnvBANK2 0134  
                    ??_readHoldingRegisters 0064                    __size_of_TMR0_StartTimer 0003  
                               word@lowByte 0051                                   _delayFlag 007A  
                   _IOCCF5_InterruptHandler 0136                            ___lwdiv@dividend 0053  
                    _PIN_MANAGER_Initialize 0781                            ?_Timer5_Overflow 0070  
             ??_INT_DefaultInterruptHandler 0070                    __size_of_TMR3_Initialize 001B  
                       _preTransmission_App 0BE2                                    ?___lwdiv 0051  
                           ?_ADC_Initialize 0070                      __end_of_TMR5_StopTimer 0BF4  
                  __end_of_NutRunCycleReset 0DB3                ??_INTERRUPT_InterruptManager 0077  
                  __end_of_NutRunCycleStart 0D3E          readHoldingRegisters@u16ReadAddress 0060  
                            ??_crc16_update 0054                   __end_of_ModbusMasterSetup 0E12  
                              _INT_CallBack 0D04                                __u16WriteQty 00EE  
                                  _BAUD1CON 019F                           ??_CCP2_Initialize 0051  
                                  ?_lowByte 0051                     _EncINX_PulseRisingEvent 0EEE  
        __end_of_IOCCF5_SetInterruptHandler 0C69                  _IOCCF5_SetInterruptHandler 0C60  
                          ___lwdiv@quotient 0056                        ?_preTransmission_App 0070  
                             _TMR0_CallBack 0D12            postTransmission@postTransmission 0051  
                           ?_TMR3_StopTimer 0070            ??_IOCCF4_DefaultInterruptHandler 0070  
           ?_IOCCF4_DefaultInterruptHandler 0070                           ??_TMR0_Initialize 0053  
                            ___wmul@product 0055                                    _LATBbits 010D  
                                  _LATCbits 010E                     __end_of_preTransmission 0C1C  
                     __end_of_CCP1_CallBack 0C23                                   clear_ram0 0CD1  
                                  _PIE0bits 0090                              _EncEdgeGotFlag 004D  
                                  _PIE3bits 0093                                    _PIE4bits 0094  
                  __size_of_LedONStatusBusy 0003         __size_of_INTERRUPT_InterruptManager 004A  
                ??_TMR0_SetInterruptHandler 0053                                    _PIR0bits 0010  
                         _IdleTimeOnShutOff 0120                                    _PIR1bits 0011  
                         ?_LedONStartConfig 0059                                    _PIR3bits 0013  
                                  _PIR4bits 0014                  ??_TMR3_SetInterruptHandler 0053  
                  __size_of_TMR5_Initialize 001B                         __end_of_millisReset 0CA2  
                   ??_MB_UpdateEPCParameter 0064                                    _TMR0_ISR 0C01  
                        ??_LedONStartConfig 005B                                    _TMR3_ISR 0D5F  
                                  _TMR5_ISR 0D73                           ??_PIN_MANAGER_IOC 0070  
                           ?_TMR5_StopTimer 0070                               _TimertickMsec 0020  
                                _ADCON0bits 009D                           ___wmul@multiplier 0051  
                  __size_of_TMR3_StartTimer 0003        __size_of_INT_DefaultInterruptHandler 0001  
         __size_of_TMR5_SetInterruptHandler 0009                   ?_TMR5_SetInterruptHandler 0051  
                     ??_preTransmission_App 0051                            __size_of_INT_ISR 0005  
                            ?_TMR0_CallBack 0070                                 _EUSART_Read 0C84  
            ??_TMR5_DefaultInterruptHandler 0070                    __size_of_TMR3_WriteTimer 0017  
                        _OldEncPulseOpState 0042                     ??_OSCILLATOR_Initialize 0051  
                      _postTransmission_App 0C06                           ??_TMR0_StartTimer 0051  
                          __size_of___lwdiv 0035                  CCP1_CallBack@capturedValue 0072  
                           _CCP1_CaptureISR 0D4D                           ?_ModbusMasterInit 0070  
                         ??_TMR3_Initialize 0053                  __size_of_ModbusMasterSetup 0019  
                 ??_EncINX_PulseRisingEvent 0070                             _getEncoderState 0CA2  
                                 lowByte@ww 0051                          ??_ModbusMasterInit 0051  
                       _EncA_PulseEdgeEvent 0C33                    __size_of_TMR5_StartTimer 0003  
                                _T0CON0bits 0017                             ___lwdiv@divisor 0051  
                          __size_of_lowByte 0003                             ___lwdiv@counter 0058  
                                  __ptext10 0E12                                    __ptext11 0C72  
                                  __ptext20 0C4E                                    __ptext12 0D87  
                                  __ptext21 0C45                                    __ptext13 0BE8  
                                  __ptext30 0D20                                    __ptext22 0D3E  
                                  __ptext14 0C69                                    __ptext31 0CB9  
                                  __ptext23 0C3C                                    __ptext15 0781  
                                  __ptext40 0BDF                                    __ptext32 07E2  
                                  __ptext24 0D2F                                    __ptext16 0C60  
                                  __ptext41 0BDC                                    __ptext33 0CF7  
                                  __ptext25 0DB3                                    __ptext17 0C57  
                                  __ptext50 0F4A                                    __ptext42 0F18  
                                  __ptext34 009C                                    __ptext26 0BE5  
                                  __ptext18 0C2B                                    __ptext51 0C23  
                                  __ptext43 0C84                                    __ptext35 0DE1  
                                  __ptext27 0DF9                                    __ptext19 0CC5  
                                  __ptext60 0D12                                    __ptext44 0E64  
                                  __ptext36 0BE2                                    __ptext28 0C16  
                                  __ptext61 0EA4                                    __ptext53 0D73  
                                  __ptext45 0BD9                                    __ptext37 0C06  
                                  __ptext29 0C10                                    __ptext70 0D04  
                                  __ptext62 06B4                                    __ptext54 0BD6  
                                  __ptext46 0F7F                                    __ptext38 0C98  
                                  __ptext71 0BCF                                    __ptext63 0BD2  
                                  __ptext55 0003                                    __ptext47 0D9C  
                                  __ptext39 0C8E                                    __ptext72 0EEE  
                                  __ptext64 0CAD                                    __ptext56 0D5F  
                                  __ptext48 071F                                    __ptext73 0D4D  
                                  __ptext65 0CEA                                    __ptext57 0BD3  
                                  __ptext49 0E48                                    __ptext74 0C1C  
                                  __ptext66 0BD1                                    __ptext58 0EC8  
                                  __ptext75 0C33                                    __ptext67 0CDD  
                                  __ptext59 0C01                                    __ptext68 0BD0  
                                  __ptext69 0BFC                                    _highByte 0BDC  
                              _NutRunLength 0130                                  _T3GCONbits 0414  
                                _IOCCF4_ISR 0CDD                     TMR3_WriteTimer@timerVal 0051  
                                _IOCCF5_ISR 0CEA                    __end_of_postTransmission 0C16  
                          _ShutdownDetected 004C                               __size_of_main 0047  
                                _T5GCONbits 041B                               __size_of_word 0018  
                          ?_preTransmission 0051                        __end_of_crc16_update 0F4A  
                               _millisReset 0C98                        ?_EncA_PulseEdgeEvent 0070  
      __end_of_TMR0_DefaultInterruptHandler 0BD3       __size_of_TMR0_DefaultInterruptHandler 0001  
              _TMR0_DefaultInterruptHandler 0BD2                                    _rxBuffer 0078  
                  __size_of_TMR5_WriteTimer 0017                                  _RC1STAbits 019D  
                                  _txBuffer 0079                                  _RB5PPSbits 0E9D  
                  ?_ModbusMasterTransaction 0070                       ?_postTransmission_App 0070  
                                  int$flags 007E          __end_of_INTERRUPT_InterruptManager 004E  
                _INTERRUPT_InterruptManager 0004            EncA_PulseEdgeEvent@capturedValue 0070  
                         ??_LedONStatusBusy 0051        __end_of_TMR3_DefaultInterruptHandler 0BD6  
     __size_of_TMR3_DefaultInterruptHandler 0003                _TMR3_DefaultInterruptHandler 0BD3  
               PIN_MANAGER_Initialize@state 0053                           ??_TMR5_Initialize 0053  
                  LedONStartConfig@LEDcolor 005D                                  _INTCONbits 000B  
                           ??_TMR0_CallBack 0074                        _INT_InterruptHandler 0134  
                           _CCP1_Initialize 0D3E                     _u16TransmitBufferLength 012C  
                        _EXT_INT_Initialize 0CC5                     __size_of_WDT_Initialize 0004  
                                _INTPPSbits 0E10                           ??_TMR3_StartTimer 0051  
                                  intlevel1 0000          ModbusMasterTransaction@u8BytesLeft 00E7  
                       _LedON_Duration_msec 0028                     ?_PIN_MANAGER_Initialize 0070  
                     ??_EncA_PulseEdgeEvent 0072                           __CFG_CLKOUTEN$OFF 0000  
                       ?_EXT_INT_Initialize 0070          ModbusMasterTransaction@u8ModbusADU 00A0  
                               _PPSLOCKbits 0E0F                            ??_ADC_Initialize 0051  
             ?_TMR0_DefaultInterruptHandler 0070                     __end_of_CCP1_CaptureISR 0D5F  
                           _CCP2_Initialize 0C45                             _EncoderPosition 003E  
                   __end_of_getEncoderState 0CAD                    ?_INT_SetInterruptHandler 0051  
                         ??_TMR3_WriteTimer 0053                           ?_NutRunCycleReset 0070  
                         ?_NutRunCycleStart 0070                        ??_EXT_INT_Initialize 0053  
             ?_TMR3_DefaultInterruptHandler 0070               __size_of_LedON_Control_10msec 006B  
                        ??_NutRunCycleReset 0051                             _TMR0_Initialize 0D87  
                           _Blick_tickPoint 002A                          ??_NutRunCycleStart 0053  
                          ??_TMR3_StopTimer 0051                 ?_IOCCF5_SetInterruptHandler 0051  
              _ModbusMasterTransaction$1564 00E4                       _Timer0_tick10msecFunc 0EA4  
                        EUSART_Write@txData 0051                           ??_TMR5_StartTimer 0051  
                               ?_IOCCF4_ISR 0070                                 ?_IOCCF5_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 07E2                ?_EPC_StateMachineControlLoop 0070  
             ModbusMasterTransaction@u16CRC 00EA                             _PIN_MANAGER_IOC 0CAD  
           __end_of_ModbusMasterTransaction 06B4                            ??_TMR5_StopTimer 0051  
             __size_of_readHoldingRegisters 000D                      ??_postTransmission_App 0051  
                  __size_of_Timer3_Overflow 0026  
